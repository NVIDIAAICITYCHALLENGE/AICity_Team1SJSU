!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BattleRoyaleWithCheese	compare.c	/^void BattleRoyaleWithCheese(char *filename, char *weightfile)$/;"	f
DEBUG	demo.c	18;"	d	file:
DEBUG	parser.c	36;"	d	file:
DEMO	demo.c	12;"	d	file:
DISPLAY_RESULS	demo.c	16;"	d	file:
NUMCHARS	data.c	336;"	d	file:
STB_IMAGE_IMPLEMENTATION	image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	image.c	10;"	d	file:
SortMaster3000	compare.c	/^void SortMaster3000(char *filename, char *weightfile)$/;"	f
VERBOSE	demo.c	19;"	d	file:
activate	activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_array	activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
add_bias	convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	image.c	/^void add_pixel(image m, int x, int y, int c, float val)$/;"	f
alphanum_to_int	utils.c	/^int alphanum_to_int(char c)$/;"	f
avg	demo.c	/^static float *avg;$/;"	v	file:
axpy_cpu	blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
bProcessThisFrame	demo.c	/^static int bProcessThisFrame = 0;$/;"	v	file:
backward_activation_layer	activation_layer.c	/^void backward_activation_layer(layer l, network net)$/;"	f
backward_activation_layer_gpu	activation_layer.c	/^void backward_activation_layer_gpu(layer l, network net)$/;"	f
backward_avgpool_layer	avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
backward_batchnorm_layer	batchnorm_layer.c	/^void backward_batchnorm_layer(layer l, network net)$/;"	f
backward_batchnorm_layer_gpu	batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network net)$/;"	f
backward_bias	convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	connected_layer.c	/^void backward_connected_layer(layer l, network net)$/;"	f
backward_connected_layer_gpu	connected_layer.c	/^void backward_connected_layer_gpu(layer l, network net)$/;"	f
backward_convolutional_layer	convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network net)$/;"	f
backward_cost_layer	cost_layer.c	/^void backward_cost_layer(const cost_layer l, network net)$/;"	f
backward_cost_layer_gpu	cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network net)$/;"	f
backward_crnn_layer	crnn_layer.c	/^void backward_crnn_layer(layer l, network net)$/;"	f
backward_crnn_layer_gpu	crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network net)$/;"	f
backward_crop_layer	crop_layer.c	/^void backward_crop_layer(const crop_layer l, network net){}$/;"	f
backward_crop_layer_gpu	crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network net){}$/;"	f
backward_deconvolutional_layer	deconvolutional_layer.c	/^void backward_deconvolutional_layer(layer l, network net)$/;"	f
backward_detection_layer	detection_layer.c	/^void backward_detection_layer(const detection_layer l, network net)$/;"	f
backward_detection_layer_gpu	detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network net)$/;"	f
backward_dropout_layer	dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network net)$/;"	f
backward_gru_layer	gru_layer.c	/^void backward_gru_layer(layer l, network net)$/;"	f
backward_gru_layer_gpu	gru_layer.c	/^void backward_gru_layer_gpu(layer l, network net)$/;"	f
backward_local_layer	local_layer.c	/^void backward_local_layer(local_layer l, network net)$/;"	f
backward_local_layer_gpu	local_layer.c	/^void backward_local_layer_gpu(local_layer l, network net)$/;"	f
backward_lstm_layer	lstm_layer.c	/^void backward_lstm_layer(layer l, network state)$/;"	f
backward_lstm_layer_gpu	lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network state)$/;"	f
backward_maxpool_layer	maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
backward_network	network.c	/^void backward_network(network net)$/;"	f
backward_normalization_layer	normalization_layer.c	/^void backward_normalization_layer(const layer layer, network net)$/;"	f
backward_normalization_layer_gpu	normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network net)$/;"	f
backward_region_layer	region_layer.c	/^void backward_region_layer(const layer l, network net)$/;"	f
backward_region_layer_gpu	region_layer.c	/^void backward_region_layer_gpu(const layer l, network net)$/;"	f
backward_reorg_layer	reorg_layer.c	/^void backward_reorg_layer(const layer l, network net)$/;"	f
backward_reorg_layer_gpu	reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network net)$/;"	f
backward_rnn_layer	rnn_layer.c	/^void backward_rnn_layer(layer l, network net)$/;"	f
backward_rnn_layer_gpu	rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network net)$/;"	f
backward_route_layer	route_layer.c	/^void backward_route_layer(const route_layer l, network net)$/;"	f
backward_route_layer_gpu	route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network net)$/;"	f
backward_scale_cpu	batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network net)$/;"	f
backward_shortcut_layer_gpu	shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network net)$/;"	f
backward_softmax_layer	softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network net)$/;"	f
backward_softmax_layer_gpu	softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network net)$/;"	f
basecfg	utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	parser.c	/^    int batch;$/;"	m	struct:size_params	file:
bbox_comparator	compare.c	/^int bbox_comparator(const void *a, const void *b)$/;"	f
bbox_fight	compare.c	/^void bbox_fight(network net, sortable_bbox *a, sortable_bbox *b, int classes, int class)$/;"	f
bbox_update	compare.c	/^void bbox_update(sortable_bbox *a, sortable_bbox *b, int class, int result)$/;"	f
best_3d_shift	image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
bilinear_interpolate	image.c	/^float bilinear_interpolate(image im, float x, float y, int c)$/;"	f
binarize_cpu	convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_image	image.c	/^image binarize_image(image im)$/;"	f
binarize_input	convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
blas_handle	cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
border_image	image.c	/^image border_image(image a, int border)$/;"	f
box_intersection	box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	box.c	/^float box_iou(box a, box b)$/;"	f
box_rmse	box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	box.c	/^float box_union(box a, box b)$/;"	f
boxes	demo.c	/^static box *boxes;$/;"	v	file:
buff	demo.c	/^static image buff [3];$/;"	v	file:
buff_index	demo.c	/^static int buff_index = 0;$/;"	v	file:
buff_letter	demo.c	/^static image buff_letter[3];$/;"	v	file:
c	parser.c	/^    int c;$/;"	m	struct:size_params	file:
calc_network_cost	network.c	/^void calc_network_cost(network net)$/;"	f
cap	demo.c	/^static CvCapture * cap;$/;"	v	file:
center_crop_image	image.c	/^image center_crop_image(image im, int w, int h)$/;"	f
change_leaves	tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
check_error	cuda.c	/^void check_error(cudaError_t status)$/;"	f
class	box.c	/^    int class;$/;"	m	struct:__anon1	file:
class	compare.c	/^    int class;$/;"	m	struct:__anon2	file:
classes	compare.c	/^    int classes;$/;"	m	struct:__anon2	file:
col2im_add_pixel	col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
collapse_image_layers	image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
colors	image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
compare_networks	network.c	/^void compare_networks(network n1, network n2, data test)$/;"	f
composite_3d	image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
concat_data	data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_matrix	data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
const_cpu	blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	image.c	/^void constrain_image(image im)$/;"	f
constrain_int	utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
convolutional_out_height	convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
copy_cpu	blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_data	data.c	/^data copy_data(data d)$/;"	f
copy_image	image.c	/^image copy_image(image p)$/;"	f
copy_image_into	image.c	/^void copy_image_into(image src, image dest)$/;"	f
copy_matrix	matrix.c	/^matrix copy_matrix(matrix m)$/;"	f
copy_string	utils.c	/^char *copy_string(char *s)$/;"	f
correct_boxes	data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_region_boxes	region_layer.c	/^void correct_region_boxes(box *boxes, int n, int w, int h, int netw, int neth, int relative)$/;"	f
count_fields	utils.c	/^int count_fields(char *line)$/;"	f
crop_image	image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
csv_to_matrix	matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
cuda_compare	cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_mag_array	cuda.c	/^float cuda_mag_array(float *x_gpu, size_t n)$/;"	f
cuda_make_array	cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	cuda.c	/^int *cuda_make_int_array(int *x, size_t n)$/;"	f
cuda_pull_array	cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	cuda.c	/^void cuda_set_device(int n)$/;"	f
cudnn_convolutional_setup	convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l)$/;"	f
cudnn_handle	cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
current_class	compare.c	/^int current_class = 0;$/;"	v
decode_box	box.c	/^box decode_box(box b, box anchor)$/;"	f
deinter_cpu	blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delta_region_box	region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_region_class	region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, int stride, float *avg_cat)$/;"	f
demo	demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo	demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo_alphabet	demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_classes	demo.c	/^static int demo_classes;$/;"	v	file:
demo_delay	demo.c	/^static int demo_delay = 0;$/;"	v	file:
demo_detections	demo.c	/^static int demo_detections = 0;$/;"	v	file:
demo_done	demo.c	/^static int demo_done = 0;$/;"	v	file:
demo_frame	demo.c	/^static int demo_frame = 3;$/;"	v	file:
demo_hier	demo.c	/^static float demo_hier = .5;$/;"	v	file:
demo_index	demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_names	demo.c	/^static char **demo_names;$/;"	v	file:
demo_thresh	demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_time	demo.c	/^double demo_time;$/;"	v
denormalize_connected_layer	connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_deconvolutional_layer	deconvolutional_layer.c	/^void denormalize_deconvolutional_layer(layer l)$/;"	f
derivative	box.c	/^dbox derivative(box a, box b)$/;"	f
detect_in_thread	demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_loop	demo.c	/^void *detect_loop(void *ptr)$/;"	f
dintersect	box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	box.c	/^dbox diou(box a, box b)$/;"	f
display_in_thread	demo.c	/^void *display_in_thread(void *ptr)$/;"	f
display_loop	demo.c	/^void *display_loop(void *ptr)$/;"	f
dist_array	utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distort_image	image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
dn_callback	pythonc_iface.c	/^static PyObject *dn_callback = NULL;$/;"	v	file:
dn_set_callback	pythonc_iface.c	/^dn_set_callback(PyObject *PyFunc)$/;"	f
dn_test	pythonc_iface.c	/^void dn_test()$/;"	f
do_nms	box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	box.c	/^void do_nms_obj(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_sort	box.c	/^void do_nms_sort(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
dot_cpu	blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
draw_bbox	image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	image.c	/^void draw_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
draw_label	image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
dunion	box.c	/^dbox dunion(box a, box b)$/;"	f
elo	compare.c	/^    float elo;$/;"	m	struct:__anon2	file:
elo_comparator	compare.c	/^int elo_comparator(const void*a, const void *b)$/;"	f
elos	compare.c	/^    float *elos;$/;"	m	struct:__anon2	file:
embed_image	image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encode_box	box.c	/^box encode_box(box b, box anchor)$/;"	f
entry_index	region_layer.c	/^int entry_index(layer l, int batch, int location, int entry)$/;"	f
error	utils.c	/^void error(const char *s)$/;"	f
evaluate_detections	demo.c	/^void evaluate_detections(image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)$/;"	f
exclusive_image	data.c	/^void exclusive_image(image src)$/;"	f
exposure_image	image.c	/^void exposure_image(image im, float sat)$/;"	f
fCurrentFrameTimeStamp	demo.c	/^     double fCurrentFrameTimeStamp;$/;"	m	struct:__anon3	file:
fTargetFps	demo.c	/^    double fTargetFps; \/**< 1 fps *\/$/;"	m	struct:__anon4	file:
fThresh	demo.c	/^    double fThresh; \/**< .24 *\/$/;"	m	struct:__anon4	file:
fetch_in_thread	demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetl	utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	utils.c	/^void file_error(char *s)$/;"	f
filename	compare.c	/^    char *filename;$/;"	m	struct:__anon2	file:
fill_cpu	blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	image.c	/^void fill_image(image m, float s)$/;"	f
fill_image_from_stream	image.c	/^int fill_image_from_stream(CvCapture *cap, image im)$/;"	f
fill_truth	data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_region	data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
flatten	blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flip_image	image.c	/^void flip_image(image a)$/;"	f
float_abs_compare	cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_to_box	box.c	/^box float_to_box(float *f, int stride)$/;"	f
float_to_image	image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
flush_stream_buffer	image.c	/^void flush_stream_buffer(CvCapture *cap, int n)$/;"	f
forward_activation_layer	activation_layer.c	/^void forward_activation_layer(layer l, network net)$/;"	f
forward_activation_layer_gpu	activation_layer.c	/^void forward_activation_layer_gpu(layer l, network net)$/;"	f
forward_avgpool_layer	avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
forward_batchnorm_layer	batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network net)$/;"	f
forward_batchnorm_layer_gpu	batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network net)$/;"	f
forward_connected_layer	connected_layer.c	/^void forward_connected_layer(layer l, network net)$/;"	f
forward_connected_layer_gpu	connected_layer.c	/^void forward_connected_layer_gpu(layer l, network net)$/;"	f
forward_convolutional_layer	convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network net)$/;"	f
forward_cost_layer	cost_layer.c	/^void forward_cost_layer(cost_layer l, network net)$/;"	f
forward_cost_layer_gpu	cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network net)$/;"	f
forward_crnn_layer	crnn_layer.c	/^void forward_crnn_layer(layer l, network net)$/;"	f
forward_crnn_layer_gpu	crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network net)$/;"	f
forward_crop_layer	crop_layer.c	/^void forward_crop_layer(const crop_layer l, network net)$/;"	f
forward_deconvolutional_layer	deconvolutional_layer.c	/^void forward_deconvolutional_layer(const layer l, network net)$/;"	f
forward_detection_layer	detection_layer.c	/^void forward_detection_layer(const detection_layer l, network net)$/;"	f
forward_detection_layer_gpu	detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network net)$/;"	f
forward_dropout_layer	dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network net)$/;"	f
forward_gru_layer	gru_layer.c	/^void forward_gru_layer(layer l, network net)$/;"	f
forward_gru_layer_gpu	gru_layer.c	/^void forward_gru_layer_gpu(layer l, network net)$/;"	f
forward_local_layer	local_layer.c	/^void forward_local_layer(const local_layer l, network net)$/;"	f
forward_local_layer_gpu	local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network net)$/;"	f
forward_lstm_layer	lstm_layer.c	/^void forward_lstm_layer(layer l, network state)$/;"	f
forward_lstm_layer_gpu	lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network state)$/;"	f
forward_maxpool_layer	maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
forward_network	network.c	/^void forward_network(network net)$/;"	f
forward_normalization_layer	normalization_layer.c	/^void forward_normalization_layer(const layer layer, network net)$/;"	f
forward_normalization_layer_gpu	normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network net)$/;"	f
forward_region_layer	region_layer.c	/^void forward_region_layer(const layer l, network net)$/;"	f
forward_region_layer_gpu	region_layer.c	/^void forward_region_layer_gpu(const layer l, network net)$/;"	f
forward_reorg_layer	reorg_layer.c	/^void forward_reorg_layer(const layer l, network net)$/;"	f
forward_reorg_layer_gpu	reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network net)$/;"	f
forward_rnn_layer	rnn_layer.c	/^void forward_rnn_layer(layer l, network net)$/;"	f
forward_rnn_layer_gpu	rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network net)$/;"	f
forward_route_layer	route_layer.c	/^void forward_route_layer(const route_layer l, network net)$/;"	f
forward_route_layer_gpu	route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network net)$/;"	f
forward_shortcut_layer	shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network net)$/;"	f
forward_shortcut_layer_gpu	shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network net)$/;"	f
forward_softmax_layer	softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network net)$/;"	f
forward_softmax_layer_gpu	softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network net)$/;"	f
fps	demo.c	/^static float fps = 0;$/;"	v	file:
free_data	data.c	/^void free_data(data d)$/;"	f
free_image	image.c	/^void free_image(image m)$/;"	f
free_layer	layer.c	/^void free_layer(layer l)$/;"	f
free_list	list.c	/^void free_list(list *l)$/;"	f
free_list_contents	list.c	/^void free_list_contents(list *l)$/;"	f
free_matrix	matrix.c	/^void free_matrix(matrix m)$/;"	f
free_network	network.c	/^void free_network(network net)$/;"	f
free_node	list.c	/^void free_node(node *n)$/;"	f
free_ptrs	utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	parser.c	/^void free_section(section *s)$/;"	f
gemm	gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_bin	gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA, $/;"	f
gemm_cpu	gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_gpu	gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA, $/;"	f
gemm_nn	gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA, $/;"	f
gemm_nt	gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA, $/;"	f
gemm_tn	gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA, $/;"	f
gemm_tt	gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA, $/;"	f
get_activation	activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_string	activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_base_args	network.c	/^load_args get_base_args(network net)$/;"	f
get_color	image.c	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_crop_image	crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_current_batch	network.c	/^size_t get_current_batch(network net)$/;"	f
get_current_rate	network.c	/^float get_current_rate(network net)$/;"	f
get_data_part	data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_detection_boxes	detection_layer.c	/^void get_detection_boxes(layer l, int w, int h, float thresh, float **probs, box *boxes, int only_objectness)$/;"	f
get_hierarchy_probability	tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c, int stride)$/;"	f
get_image_from_stream	image.c	/^image get_image_from_stream(CvCapture *cap)$/;"	f
get_image_layer	image.c	/^image get_image_layer(image m, int l)$/;"	f
get_label	image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	data.c	/^char **get_labels(char *filename)$/;"	f
get_layer_string	network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_metadata	option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_network_detection_layer	network.c	/^detection_layer get_network_detection_layer(network net)$/;"	f
get_network_image	network.c	/^image get_network_image(network net)$/;"	f
get_network_image_layer	network.c	/^image get_network_image_layer(network net, int i)$/;"	f
get_network_output_layer	network.c	/^layer get_network_output_layer(network net)$/;"	f
get_next_batch	data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	image.c	/^float get_pixel(image m, int x, int y, int c)$/;"	f
get_pixel_extend	image.c	/^float get_pixel_extend(image m, int x, int y, int c)$/;"	f
get_policy	parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	network.c	/^int get_predicted_class_network(network net)$/;"	f
get_random_batch	data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h, int stride)$/;"	f
get_region_boxes	region_layer.c	/^void get_region_boxes(layer l, int w, int h, int netw, int neth, float thresh, float **probs, box *boxes, int only_objectness, int *map, float tree_thresh, int relative)$/;"	f
get_segmentation_image	data.c	/^image get_segmentation_image(char *path, int w, int h, int classes)$/;"	f
get_segmentation_image2	data.c	/^image get_segmentation_image2(char *path, int w, int h, int classes)$/;"	f
get_wall_time	demo.c	/^double get_wall_time()$/;"	f
get_weights	convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	convolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
get_workspace_size	deconvolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
ghost_image	image.c	/^void ghost_image(image source, image dest, int dx, int dy)$/;"	f
gpu_index	cuda.c	/^int gpu_index = 0;$/;"	v
gradient	activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_array	activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
grayscale_image	image.c	/^image grayscale_image(image im)$/;"	f
grayscale_image_3c	image.c	/^void grayscale_image_3c(image im)$/;"	f
h	demo.c	/^     int h;$/;"	m	struct:__anon3	file:
h	parser.c	/^    int h;$/;"	m	struct:size_params	file:
hierarchy_predictions	tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves, int stride)$/;"	f
hierarchy_top_prediction	tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
hold_out_matrix	matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hsv_to_rgb	image.c	/^void hsv_to_rgb(image im)$/;"	f
hue_image	image.c	/^void hue_image(image im, float hue)$/;"	f
im2col_cpu	im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_get_pixel	im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
image_distance	image.c	/^image image_distance(image a, image b)$/;"	f
increment_layer	crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	box.c	/^    int index;$/;"	m	struct:__anon1	file:
index	parser.c	/^    int index;$/;"	m	struct:size_params	file:
inputs	parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
int_to_alphanum	utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
ipl	demo.c	/^static IplImage  * ipl;$/;"	v	file:
ipl_into_image	image.c	/^void ipl_into_image(IplImage* src, image im)$/;"	f
ipl_to_image	image.c	/^image ipl_to_image(IplImage* src)$/;"	f
is_network	parser.c	/^int is_network(section *s)$/;"	f
l1_cpu	blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
last_avg	demo.c	/^static float *last_avg;$/;"	v	file:
last_avg2	demo.c	/^static float *last_avg2;$/;"	v	file:
letterbox_image	image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
list_insert	list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	list.c	/^void **list_to_array(list *l)$/;"	f
load_all_cifar10	data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	image.c	/^image **load_alphabet()$/;"	f
load_batchnorm_weights	parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_categorical_data_csv	data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_convolutional_weights	parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_data	data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_data_blocking	data.c	/^void load_data_blocking(load_args args)$/;"	f
load_data_captcha	data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_in_thread	data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_iseg	data.c	/^data load_data_iseg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f
load_data_old	data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_regression	data.c	/^data load_data_regression(char **paths, int n, int m, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_seg	data.c	/^data load_data_seg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f
load_data_super	data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	data.c	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	data.c	/^data load_go(char *filename)$/;"	f
load_image	image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	data.c	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_image_color	image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	image.c	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_labels_paths	data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_network	network.c	/^network load_network(char *cfg, char *weights, int clear)$/;"	f
load_network_p	network.c	/^network *load_network_p(char *cfg, char *weights, int clear)$/;"	f
load_regression_labels_paths	data.c	/^matrix load_regression_labels_paths(char **paths, int n)$/;"	f
load_rle	data.c	/^void load_rle(image im, int *rle, int n)$/;"	f
load_tags_paths	data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	parser.c	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f
local_out_height	local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	local_layer.c	/^int local_out_width(local_layer l)$/;"	f
logit	region_layer.c	/^float logit(float x)$/;"	f
mag_array	utils.c	/^float mag_array(float *a, int n)$/;"	f
make_activation_layer	activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	connected_layer.c	/^layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_convolutional_layer	convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_cost_layer	cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_crnn_layer	crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	deconvolutional_layer.c	/^layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_detection_layer	detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_empty_image	image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_gru_layer	gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_image	image.c	/^image make_image(int w, int h, int c)$/;"	f
make_list	list.c	/^list *make_list()$/;"	f
make_local_layer	local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_lstm_layer	lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_matrix	matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_network	network.c	/^network make_network(int n)$/;"	f
make_normalization_layer	normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	region_layer.c	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f
make_reorg_layer	reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse, int flatten, int extra)$/;"	f
make_rnn_layer	rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int outputs, int steps, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_route_layer	route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
malloc_error	utils.c	/^void malloc_error()$/;"	f
mask_to_rgb	image.c	/^image mask_to_rgb(image mask)$/;"	f
matrix_add_matrix	matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max_index	utils.c	/^int max_index(float *a, int n)$/;"	f
mean_array	utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta_cpu	batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mse_array	utils.c	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
mutex	data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
nCurFrameCount	demo.c	/^static int nCurFrameCount = 0;$/;"	v	file:
nFps	demo.c	/^static double nFps = 0;$/;"	v	file:
nSkipFramesCnt	demo.c	/^static int nSkipFramesCnt = 0;$/;"	v	file:
nTargetFps	demo.c	/^static double nTargetFps = 1;$/;"	v	file:
nVideoId	demo.c	/^     int nVideoId;$/;"	m	struct:__anon3	file:
nVideoId	demo.c	/^    int nVideoId;$/;"	m	struct:__anon4	file:
net	compare.c	/^    network net;$/;"	m	struct:__anon2	file:
net	demo.c	/^static network net;$/;"	v	file:
net	parser.c	/^    network net;$/;"	m	struct:size_params	file:
network_accuracies	network.c	/^float *network_accuracies(network net, data d, int n)$/;"	f
network_accuracy	network.c	/^float network_accuracy(network net, data d)$/;"	f
network_accuracy_multi	network.c	/^float network_accuracy_multi(network net, data d, int n)$/;"	f
network_height	network.c	/^int network_height(network *net){return net->h;}$/;"	f
network_inputs	network.c	/^int network_inputs(network net)$/;"	f
network_output	network.c	/^float *network_output(network net)$/;"	f
network_output_layer	network.c	/^layer network_output_layer(network net)$/;"	f
network_outputs	network.c	/^int network_outputs(network net)$/;"	f
network_predict	network.c	/^float *network_predict(network net, float *input)$/;"	f
network_predict_data	network.c	/^matrix network_predict_data(network net, data test)$/;"	f
network_predict_data_multi	network.c	/^matrix network_predict_data_multi(network net, data test, int n)$/;"	f
network_predict_image	network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_predict_p	network.c	/^float *network_predict_p(network *net, float *input)$/;"	f
network_width	network.c	/^int network_width(network *net){return net->w;}$/;"	f
nms_comparator	box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
normalize_array	utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	image.c	/^void normalize_image2(image p)$/;"	f
one_hot_encode	utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
option_find	option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	option_list.c	/^void option_unused(list *l)$/;"	f
options	parser.c	/^    list *options;$/;"	m	struct:__anon5	file:
or_image	data.c	/^void or_image(image src, image dest, int c)$/;"	f
overlap	box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
pDetectorModel	demo.c	/^static tDetectorModel* pDetectorModel;$/;"	v	file:
parse_activation	parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	parser.c	/^layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_deconvolutional	parser.c	/^layer parse_deconvolutional(list *options, size_params params)$/;"	f
parse_detection	parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	parser.c	/^dropout_layer parse_dropout(list *options, size_params params)$/;"	f
parse_fields	utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_local	parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_lstm	parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	parser.c	/^network parse_network_cfg(char *filename)$/;"	f
parse_normalization	parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	parser.c	/^route_layer parse_route(list *options, size_params params, network net)$/;"	f
parse_shortcut	parser.c	/^layer parse_shortcut(list *options, size_params params, network net)$/;"	f
parse_softmax	parser.c	/^softmax_layer parse_softmax(list *options, size_params params)$/;"	f
pcCfg	demo.c	/^    char* pcCfg; \/**< yolo.cfg *\/$/;"	m	struct:__anon4	file:
pcClassName	demo.c	/^     char* pcClassName;$/;"	m	struct:__anon3	file:
pcDataCfg	demo.c	/^    char* pcDataCfg; \/**< say, coco.data *\/$/;"	m	struct:__anon4	file:
pcFileName	demo.c	/^    char* pcFileName; \/**< .mp4 file *\/$/;"	m	struct:__anon4	file:
pcWeights	demo.c	/^    char* pcWeights; \/**< yolo.weights *\/$/;"	m	struct:__anon4	file:
pfnRaiseAnnCb	demo.c	/^    tfnRaiseAnnCb pfnRaiseAnnCb;$/;"	m	struct:__anon4	file:
place_image	image.c	/^void place_image(image im, int w, int h, int dx, int dy, image canvas)$/;"	f
pm	utils.c	/^void pm(int M, int N, float *A)$/;"	f
pop_column	matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
pow_cpu	blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
predictions	demo.c	/^static float **predictions;$/;"	v	file:
print_image	image.c	/^void print_image(image m)$/;"	f
print_letters	data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	network.c	/^void print_network(network net)$/;"	f
print_statistics	utils.c	/^void print_statistics(float *a, int n)$/;"	f
probs	box.c	/^    float **probs;$/;"	m	struct:__anon1	file:
probs	demo.c	/^static float **probs;$/;"	v	file:
pull_batchnorm_layer	batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	connected_layer.c	/^void pull_connected_layer(layer l)$/;"	f
pull_cost_layer	cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_rnn_layer	rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
push_batchnorm_layer	batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	connected_layer.c	/^void push_connected_layer(layer l)$/;"	f
push_cost_layer	cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
rand_int	utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	utils.c	/^float rand_normal()$/;"	f
rand_scale	utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	utils.c	/^float rand_uniform(float min, float max)$/;"	f
random_augment_args	image.c	/^augment_args random_augment_args(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_augment_image	image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_crop_image	image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_matrix	gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
randomize_boxes	data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	data.c	/^void randomize_data(data d)$/;"	f
read_all	utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_int	utils.c	/^int read_int(int fd)$/;"	f
read_intlist	utils.c	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f
read_map	utils.c	/^int *read_map(char *filename)$/;"	f
read_option	option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_tree	tree.c	/^tree *read_tree(char *filename)$/;"	f
reorg_cpu	blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
rescale_weights	convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
reset_momentum	network.c	/^void reset_momentum(network net)$/;"	f
resize_avgpool_layer	avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_deconvolutional_layer	deconvolutional_layer.c	/^void resize_deconvolutional_layer(layer *l, int h, int w)$/;"	f
resize_dropout_layer	dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_image	image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_min	image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
rgb_to_hsv	image.c	/^void rgb_to_hsv(image im)$/;"	f
rgb_to_yuv	image.c	/^void rgb_to_yuv(image im)$/;"	f
rgbgr_image	image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_weights	convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
rotate_crop_image	image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	image.c	/^void rotate_image_cw(image im, int times)$/;"	f
run_compare	compare.c	/^void run_compare(int argc, char **argv)$/;"	f
run_detector_model	demo.c	/^int run_detector_model(tDetectorModel* apDetectorModel)$/;"	f
running	demo.c	/^static int running = 0;$/;"	v	file:
sample_array	utils.c	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	image.c	/^void saturate_image(image im, float sat)$/;"	f
save_batchnorm_weights	parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_connected_weights	parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights	parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_image	image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_jpg	image.c	/^void save_image_jpg(image p, const char *name)$/;"	f
save_image_png	image.c	/^void save_image_png(image im, const char *name)$/;"	f
save_weights	parser.c	/^void save_weights(network net, char *filename)$/;"	f
save_weights_upto	parser.c	/^void save_weights_upto(network net, char *filename, int cutoff)$/;"	f
scal_cpu	blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scale_array	utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_matrix	matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
sec	utils.c	/^float sec(clock_t clocks)$/;"	f
section	parser.c	/^}section;$/;"	t	typeref:struct:__anon5	file:
set_batch_network	network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_pixel	image.c	/^void set_pixel(image m, int x, int y, int c, float val)$/;"	f
shortcut_cpu	blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float *out)$/;"	f
show_image	image.c	/^void show_image(image p, const char *name)$/;"	f
show_image_collapsed	image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	image.c	/^void show_image_cv(image p, const char *name, IplImage *disp)$/;"	f
show_image_layers	image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
shuffle	utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
size_params	parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
smooth_data	data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax	blas.c	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax_cpu	blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
sorta_shuffle	utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
sortable_bbox	box.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon1	file:
sortable_bbox	compare.c	/^} sortable_bbox;$/;"	t	typeref:struct:__anon2	file:
split_data	data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	utils.c	/^list *split_str(char *s, char delim)$/;"	f
statistics_connected_layer	connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
string_to_layer_type	parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	utils.c	/^void strip(char *s)$/;"	f
strip_char	utils.c	/^void strip_char(char *s, char bad)$/;"	f
sum_array	utils.c	/^float sum_array(float *a, int n)$/;"	f
swap_binary	convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
tAnnInfo	demo.c	/^}tAnnInfo;$/;"	t	typeref:struct:__anon3	file:
tDetectorModel	demo.c	/^}tDetectorModel;$/;"	t	typeref:struct:__anon4	file:
test_box	box.c	/^void test_box()$/;"	f
test_dintersect	box.c	/^void test_dintersect()$/;"	f
test_dunion	box.c	/^void test_dunion()$/;"	f
test_gpu_accuracy	gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	gemm.c	/^int test_gpu_blas()$/;"	f
test_resize	image.c	/^void test_resize(char *filename)$/;"	f
tfnRaiseAnnCb	demo.c	/^typedef int (*tfnRaiseAnnCb)(tAnnInfo apAnnInfo);$/;"	t	file:
three_way_max	image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	image.c	/^float three_way_min(float a, float b, float c)$/;"	f
threshold_image	image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_images	image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu	gemm.c	/^void time_gpu(int TA, int TB, int m, int k, int n)$/;"	f
time_gpu_random_matrix	gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
tisnan	region_layer.c	/^float tisnan(float x)$/;"	f
top_k	utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	network.c	/^void top_predictions(network net, int k, int *index)$/;"	f
total_compares	compare.c	/^int total_compares = 0;$/;"	v
train_compare	compare.c	/^void train_compare(char *cfgfile, char *weightfile)$/;"	f
train_network	network.c	/^float train_network(network net, data d)$/;"	f
train_network_datum	network.c	/^float train_network_datum(network net)$/;"	f
train_network_sgd	network.c	/^float train_network_sgd(network net, data d, int n)$/;"	f
translate_array	utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transpose_image	image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
type	parser.c	/^    char *type;$/;"	m	struct:__anon5	file:
update_connected_layer	connected_layer.c	/^void update_connected_layer(layer l, update_args a)$/;"	f
update_connected_layer_gpu	connected_layer.c	/^void update_connected_layer_gpu(layer l, update_args a)$/;"	f
update_convolutional_layer	convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, update_args a)$/;"	f
update_crnn_layer	crnn_layer.c	/^void update_crnn_layer(layer l, update_args a)$/;"	f
update_crnn_layer_gpu	crnn_layer.c	/^void update_crnn_layer_gpu(layer l, update_args a)$/;"	f
update_deconvolutional_layer	deconvolutional_layer.c	/^void update_deconvolutional_layer(layer l, update_args a)$/;"	f
update_gru_layer	gru_layer.c	/^void update_gru_layer(layer l, update_args a)$/;"	f
update_gru_layer_gpu	gru_layer.c	/^void update_gru_layer_gpu(layer l, update_args a)$/;"	f
update_local_layer	local_layer.c	/^void update_local_layer(local_layer l, update_args a)$/;"	f
update_local_layer_gpu	local_layer.c	/^void update_local_layer_gpu(local_layer l, update_args a)$/;"	f
update_lstm_layer	lstm_layer.c	/^void update_lstm_layer(layer l, update_args a)$/;"	f
update_lstm_layer_gpu	lstm_layer.c	/^void update_lstm_layer_gpu(layer l, update_args a)$/;"	f
update_network	network.c	/^void update_network(network net)$/;"	f
update_rnn_layer	rnn_layer.c	/^void update_rnn_layer(layer l, update_args a)$/;"	f
update_rnn_layer_gpu	rnn_layer.c	/^void update_rnn_layer_gpu(layer l, update_args a)$/;"	f
validate_compare	compare.c	/^void validate_compare(char *filename, char *weightfile)$/;"	f
variance_array	utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta_cpu	batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
visualize_convolutional_layer	convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	network.c	/^void visualize_network(network net)$/;"	f
w	demo.c	/^     int w;$/;"	m	struct:__anon3	file:
w	parser.c	/^    int w;$/;"	m	struct:size_params	file:
weighted_delta_cpu	blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
what_time_is_it_now	utils.c	/^double what_time_is_it_now()$/;"	f
windows	image.c	/^int windows = 0;$/;"	v
write_all	utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	utils.c	/^void write_int(int fd, int n)$/;"	f
x	demo.c	/^     int x;$/;"	m	struct:__anon3	file:
y	demo.c	/^     int y;$/;"	m	struct:__anon3	file:
yuv_to_rgb	image.c	/^void yuv_to_rgb(image im)$/;"	f
zero_objectness	region_layer.c	/^void zero_objectness(layer l)$/;"	f
