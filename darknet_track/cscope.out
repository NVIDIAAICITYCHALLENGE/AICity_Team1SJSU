cscope 15 $HOME/work/darknet               0000992958
	@examples/art.c

1 
	~"d¨k√t.h
"

3 
	~<sys/time.h
>

5 
	$demo_¨t
(*
cfgfûe
, *
weightfûe
, 
ˇm_ödex
)

7 #ifde‡
OPENCV


8 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

9 if(
weightfûe
){

10 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

12 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

14 
	`§™d
(2222222);

15 
CvC≠tuª
 * 
ˇp
;

17 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

19 *
wödow
 = "ArtJudgementBot9000!!!";

20 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

21 
	`cvNamedWödow
(
wödow
, 
CV_WINDOW_NORMAL
);

22 
	`cvResizeWödow
(
wödow
, 512, 512);

23 
i
;

24 
idx
[] = {37, 401, 434};

25 
n
 = (
idx
)/(idx[0]);

28 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

29 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
.
w
,Çë.
h
);

30 
	`show_image
(
ö
, 
wödow
);

32 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

34 
	`¥ötf
("\033[2J");

35 
	`¥ötf
("\033[1;1H");

37 
sc‹e
 = 0;

38 
i
 = 0; i < 
n
; ++i){

39 
s
 = 
p
[
idx
[
i
]];

40 i‡(
s
 > 
sc‹e
) score = s;

42 
sc‹e
 = score;

43 
	`¥ötf
("I APPRECIATE THIS ARTWORK: %10.7f%%\n", 
sc‹e
*100);

44 
	`¥ötf
("[");

45 
uµî
 = 30;

46 
i
 = 0; i < 
uµî
; ++i){

47 
	`¥ötf
("%c", ((
i
+.5Ë< 
sc‹e
*
uµî
) ? 219 : ' ');

49 
	`¥ötf
("]\n");

51 
	`‰ì_image
(
ö_s
);

52 
	`‰ì_image
(
ö
);

54 
	`cvWaôKey
(1);

57 
	}
}

60 
	$run_¨t
(
¨gc
, **
¨gv
)

62 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

63 *
cfg
 = 
¨gv
[2];

64 *
weights
 = 
¨gv
[3];

65 
	`demo_¨t
(
cfg
, 
weights
, 
ˇm_ödex
);

66 
	}
}

	@examples/captcha.c

1 
	~"d¨k√t.h
"

3 
	$fix_d©a_ˇ±cha
(
d©a
 
d
, 
mask
)

5 
m©rix
 
œbñs
 = 
d
.
y
;

6 
i
, 
j
;

7 
i
 = 0; i < 
d
.
y
.
rows
; ++i){

8 
j
 = 0; j < 
d
.
y
.
cﬁs
; j += 2){

9 i‡(
mask
){

10 if(!
œbñs
.
vÆs
[
i
][
j
]){

11 
œbñs
.
vÆs
[
i
][
j
] = 
SECRET_NUM
;

12 
œbñs
.
vÆs
[
i
][
j
+1] = 
SECRET_NUM
;

13 }if(
œbñs
.
vÆs
[
i
][
j
+1]){

14 
œbñs
.
vÆs
[
i
][
j
] = 0;

17 i‡(
œbñs
.
vÆs
[
i
][
j
]) {

18 
œbñs
.
vÆs
[
i
][
j
+1] = 0;

20 
œbñs
.
vÆs
[
i
][
j
+1] = 1;

25 
	}
}

27 
	$åaö_ˇ±cha
(*
cfgfûe
, *
weightfûe
)

29 
	`§™d
(
	`time
(0));

30 
avg_loss
 = -1;

31 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

32 
	`¥ötf
("%s\n", 
ba£
);

33 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

34 if(
weightfûe
){

35 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

37 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

38 
imgs
 = 1024;

39 
i
 = *
√t
.
£í
/
imgs
;

40 
sﬁved
 = 1;

41 
li°
 *
∂i°
;

42 **
œbñs
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

43 i‡(
sﬁved
){

44 
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.solved.list");

46 
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.raw.list");

48 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

49 
	`¥ötf
("%d\n", 
∂i°
->
size
);

50 
˛ock_t
 
time
;

51 
±hªad_t
 
lﬂd_thªad
;

52 
d©a
 
åaö
;

53 
d©a
 
buf„r
;

55 
lﬂd_¨gs
 
¨gs
 = {0};

56 
¨gs
.
w
 = 
√t
.w;

57 
¨gs
.
h
 = 
√t
.h;

58 
¨gs
.
∑ths
 =Öaths;

59 
¨gs
.
˛as£s
 = 26;

60 
¨gs
.
n
 = 
imgs
;

61 
¨gs
.
m
 = 
∂i°
->
size
;

62 
¨gs
.
œbñs
 =Üabels;

63 
¨gs
.
d
 = &
buf„r
;

64 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

66 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

68 ++
i
;

69 
time
=
	`˛ock
();

70 
	`±hªad_joö
(
lﬂd_thªad
, 0);

71 
åaö
 = 
buf„r
;

72 
	`fix_d©a_ˇ±cha
(
åaö
, 
sﬁved
);

80 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

81 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

82 
time
=
	`˛ock
();

83 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

84 if(
avg_loss
 =-1Ëavg_los†
loss
;

85 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

86 
	`¥ötf
("%d: %f, %‡avg, %l‡£c⁄ds, %ld images\n", 
i
, 
loss
, 
avg_loss
, 
	`£c
(
	`˛ock
()-
time
), *
√t
.
£í
);

87 
	`‰ì_d©a
(
åaö
);

88 if(
i
%100==0){

89 
buff
[256];

90 
	`•rötf
(
buff
, "/home/pjªddõ/imagíë_backup/%s_%d.weights",
ba£
, 
i
);

91 
	`ßve_weights
(
√t
, 
buff
);

94 
	}
}

96 
	$ã°_ˇ±cha
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

98 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

99 if(
weightfûe
){

100 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

102 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

103 
	`§™d
(2222222);

104 
i
 = 0;

105 **
«mes
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

106 
buff
[256];

107 *
öput
 = 
buff
;

108 
ödexes
[26];

110 if(
fûíame
){

111 
	`°∫˝y
(
öput
, 
fûíame
, 256);

115 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

116 if(!
öput
) ;

117 
	`°πok
(
öput
, "\n");

119 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 
√t
.
w
,Çë.
h
);

120 *
X
 = 
im
.
d©a
;

121 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

122 
	`t›_¥edi˘i⁄s
(
√t
, 26, 
ödexes
);

124 
i
 = 0; i < 26; ++i){

125 
ödex
 = 
ödexes
[
i
];

126 if(
i
 !0Ë
	`¥ötf
(", ");

127 
	`¥ötf
("%†%f", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

129 
	`¥ötf
("\n");

130 
	`fÊush
(
°dout
);

131 
	`‰ì_image
(
im
);

132 i‡(
fûíame
) ;

134 
	}
}

136 
	$vÆid_ˇ±cha
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

138 **
œbñs
 = 
	`gë_œbñs
("/data/captcha/reimgs.labels.list");

139 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

140 if(
weightfûe
){

141 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

143 
li°
 *
∂i°
 = 
	`gë_∑ths
("/data/captcha/reimgs.fg.list");

144 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

145 
N
 = 
∂i°
->
size
;

146 
ouçuts
 = 
√t
.outputs;

148 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

149 
	`§™d
(2222222);

150 
i
, 
j
;

151 
i
 = 0; i < 
N
; ++i){

152 i‡(
i
%100 =0Ë
	`Ârötf
(
°dîr
, "%d\n", i);

153 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 
√t
.
w
,Çë.
h
);

154 *
X
 = 
im
.
d©a
;

155 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

157 
åuth
 = -1;

158 
j
 = 0; j < 13; ++j){

159 i‡(
	`°r°r
(
∑ths
[
i
], 
œbñs
[
j
])Ë
åuth
 = j;

161 i‡(
åuth
 == -1){

162 
	`Ârötf
(
°dîr
, "bad: %s\n", 
∑ths
[
i
]);

165 
	`¥ötf
("%d, ", 
åuth
);

166 
j
 = 0; j < 
ouçuts
; ++j){

167 i‡(
j
 !0Ë
	`¥ötf
(", ");

168 
	`¥ötf
("%f", 
¥edi˘i⁄s
[
j
]);

170 
	`¥ötf
("\n");

171 
	`fÊush
(
°dout
);

172 
	`‰ì_image
(
im
);

173 i‡(
fûíame
) ;

175 
	}
}

344 
	$run_ˇ±cha
(
¨gc
, **
¨gv
)

346 if(
¨gc
 < 4){

347 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

351 *
cfg
 = 
¨gv
[3];

352 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

353 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

354 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ˇ±cha
(
cfg
, 
weights
);

355 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_ˇ±cha
(
cfg
, 
weights
, 
fûíame
);

356 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_ˇ±cha
(
cfg
, 
weights
, 
fûíame
);

361 
	}
}

	@examples/cifar.c

1 
	~"d¨k√t.h
"

3 
	$åaö_ciÁr
(*
cfgfûe
, *
weightfûe
)

5 
	`§™d
(
	`time
(0));

6 
avg_loss
 = -1;

7 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

8 
	`¥ötf
("%s\n", 
ba£
);

9 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

10 if(
weightfûe
){

11 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

13 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

15 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

16 
˛as£s
 = 10;

17 
N
 = 50000;

19 **
œbñs
 = 
	`gë_œbñs
("data/cifar/labels.txt");

20 
ïoch
 = (*
√t
.
£í
)/
N
;

21 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

22 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

23 
˛ock_t
 
time
=
	`˛ock
();

25 
loss
 = 
	`åaö_√tw‹k_sgd
(
√t
, 
åaö
, 1);

26 if(
avg_loss
 =-1Ëavg_los†
loss
;

27 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

28 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

29 if(*
√t
.
£í
/
N
 > 
ïoch
){

30 
ïoch
 = *
√t
.
£í
/
N
;

31 
buff
[256];

32 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

33 
	`ßve_weights
(
√t
, 
buff
);

35 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

36 
buff
[256];

37 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

38 
	`ßve_weights
(
√t
, 
buff
);

41 
buff
[256];

42 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

43 
	`ßve_weights
(
√t
, 
buff
);

45 
	`‰ì_√tw‹k
(
√t
);

46 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

47 
	`‰ì
(
ba£
);

48 
	`‰ì_d©a
(
åaö
);

49 
	}
}

51 
	$åaö_ciÁr_di°ûl
(*
cfgfûe
, *
weightfûe
)

53 
	`§™d
(
	`time
(0));

54 
avg_loss
 = -1;

55 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

56 
	`¥ötf
("%s\n", 
ba£
);

57 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

58 if(
weightfûe
){

59 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

61 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

63 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

64 
˛as£s
 = 10;

65 
N
 = 50000;

67 **
œbñs
 = 
	`gë_œbñs
("data/cifar/labels.txt");

68 
ïoch
 = (*
√t
.
£í
)/
N
;

70 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

71 
m©rix
 
so·
 = 
	`csv_to_m©rix
("results/ensemble.csv");

73 
weight
 = .9;

74 
	`sˇÀ_m©rix
(
so·
, 
weight
);

75 
	`sˇÀ_m©rix
(
åaö
.
y
, 1. - 
weight
);

76 
	`m©rix_add_m©rix
(
so·
, 
åaö
.
y
);

78 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

79 
˛ock_t
 
time
=
	`˛ock
();

81 
loss
 = 
	`åaö_√tw‹k_sgd
(
√t
, 
åaö
, 1);

82 if(
avg_loss
 =-1Ëavg_los†
loss
;

83 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

84 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

85 if(*
√t
.
£í
/
N
 > 
ïoch
){

86 
ïoch
 = *
√t
.
£í
/
N
;

87 
buff
[256];

88 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

89 
	`ßve_weights
(
√t
, 
buff
);

91 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

92 
buff
[256];

93 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

94 
	`ßve_weights
(
√t
, 
buff
);

97 
buff
[256];

98 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

99 
	`ßve_weights
(
√t
, 
buff
);

101 
	`‰ì_√tw‹k
(
√t
);

102 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

103 
	`‰ì
(
ba£
);

104 
	`‰ì_d©a
(
åaö
);

105 
	}
}

107 
	$ã°_ciÁr_mu…i
(*
fûíame
, *
weightfûe
)

109 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

110 if(
weightfûe
){

111 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

113 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

114 
	`§™d
(
	`time
(0));

116 
avg_acc
 = 0;

117 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

119 
i
;

120 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

121 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

123 
¥ed
[10] = {0};

125 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

126 
	`axpy_˝u
(10, 1, 
p
, 1, 
¥ed
, 1);

127 
	`Êù_image
(
im
);

128 
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

129 
	`axpy_˝u
(10, 1, 
p
, 1, 
¥ed
, 1);

131 
ödex
 = 
	`max_ödex
(
¥ed
, 10);

132 
˛ass
 = 
	`max_ödex
(
ã°
.
y
.
vÆs
[
i
], 10);

133 if(
ödex
 =
˛ass
Ë
avg_acc
 += 1;

134 
	`‰ì_image
(
im
);

135 
	`¥ötf
("%4d: %.2f%%\n", 
i
, 100.*
avg_acc
/(i+1));

137 
	}
}

139 
	$ã°_ciÁr
(*
fûíame
, *
weightfûe
)

141 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

142 if(
weightfûe
){

143 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

145 
	`§™d
(
	`time
(0));

147 
˛ock_t
 
time
;

148 
avg_acc
 = 0;

149 
avg_t›5
 = 0;

150 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

152 
time
=
	`˛ock
();

154 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
ã°
, 2);

155 
avg_acc
 +
acc
[0];

156 
avg_t›5
 +
acc
[1];

157 
	`¥ötf
("t›1: %f, %l‡£c⁄ds, %d images\n", 
avg_acc
, 
	`£c
(
	`˛ock
()-
time
), 
ã°
.
X
.
rows
);

158 
	`‰ì_d©a
(
ã°
);

159 
	}
}

161 
	$exåa˘_ciÁr
()

163 *
œbñs
[] = {"airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"};

164 
i
;

165 
d©a
 
åaö
 = 
	`lﬂd_Æl_ciÁr10
();

166 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

167 
i
 = 0; i < 
åaö
.
X
.
rows
; ++i){

168 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
åaö
.
X
.
vÆs
[
i
]);

169 
˛ass
 = 
	`max_ödex
(
åaö
.
y
.
vÆs
[
i
], 10);

170 
buff
[256];

171 
	`•rötf
(
buff
, "d©a/ciÁr/åaö/%d_%s",
i
,
œbñs
[
˛ass
]);

172 
	`ßve_image_≤g
(
im
, 
buff
);

174 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

175 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

176 
˛ass
 = 
	`max_ödex
(
ã°
.
y
.
vÆs
[
i
], 10);

177 
buff
[256];

178 
	`•rötf
(
buff
, "d©a/ciÁr/ã°/%d_%s",
i
,
œbñs
[
˛ass
]);

179 
	`ßve_image_≤g
(
im
, 
buff
);

181 
	}
}

183 
	$ã°_ciÁr_csv
(*
fûíame
, *
weightfûe
)

185 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

186 if(
weightfûe
){

187 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

189 
	`§™d
(
	`time
(0));

191 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

193 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

195 
i
;

196 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

197 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

198 
	`Êù_image
(
im
);

200 
m©rix
 
¥ed2
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

201 
	`sˇÀ_m©rix
(
¥ed
, .5);

202 
	`sˇÀ_m©rix
(
¥ed2
, .5);

203 
	`m©rix_add_m©rix
(
¥ed2
, 
¥ed
);

205 
	`m©rix_to_csv
(
¥ed
);

206 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

207 
	`‰ì_d©a
(
ã°
);

208 
	}
}

210 
	$ã°_ciÁr_csvåaö
(*
fûíame
, *
weightfûe
)

212 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

213 if(
weightfûe
){

214 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

216 
	`§™d
(
	`time
(0));

218 
d©a
 
ã°
 = 
	`lﬂd_Æl_ciÁr10
();

220 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

222 
i
;

223 
i
 = 0; i < 
ã°
.
X
.
rows
; ++i){

224 
image
 
im
 = 
	`Êﬂt_to_image
(32, 32, 3, 
ã°
.
X
.
vÆs
[
i
]);

225 
	`Êù_image
(
im
);

227 
m©rix
 
¥ed2
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
ã°
);

228 
	`sˇÀ_m©rix
(
¥ed
, .5);

229 
	`sˇÀ_m©rix
(
¥ed2
, .5);

230 
	`m©rix_add_m©rix
(
¥ed2
, 
¥ed
);

232 
	`m©rix_to_csv
(
¥ed
);

233 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

234 
	`‰ì_d©a
(
ã°
);

235 
	}
}

237 
	$evÆ_ciÁr_csv
()

239 
d©a
 
ã°
 = 
	`lﬂd_ciÁr10_d©a
("data/cifar/cifar-10-batches-bin/test_batch.bin");

241 
m©rix
 
¥ed
 = 
	`csv_to_m©rix
("results/combined.csv");

242 
	`Ârötf
(
°dîr
, "%d %d\n", 
¥ed
.
rows
,Öªd.
cﬁs
);

244 
	`Ârötf
(
°dîr
, "Accuøcy: %f\n", 
	`m©rix_t›k_accuøcy
(
ã°
.
y
, 
¥ed
, 1));

245 
	`‰ì_d©a
(
ã°
);

246 
	`‰ì_m©rix
(
¥ed
);

247 
	}
}

250 
	$run_ciÁr
(
¨gc
, **
¨gv
)

252 if(
¨gc
 < 4){

253 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

257 *
cfg
 = 
¨gv
[3];

258 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

259 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ciÁr
(
cfg
, 
weights
);

260 if(0==
	`°rcmp
(
¨gv
[2], "exåa˘")Ë
	`exåa˘_ciÁr
();

261 if(0==
	`°rcmp
(
¨gv
[2], "di°ûl")Ë
	`åaö_ciÁr_di°ûl
(
cfg
, 
weights
);

262 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_ciÁr
(
cfg
, 
weights
);

263 if(0==
	`°rcmp
(
¨gv
[2], "mu…i")Ë
	`ã°_ciÁr_mu…i
(
cfg
, 
weights
);

264 if(0==
	`°rcmp
(
¨gv
[2], "csv")Ë
	`ã°_ciÁr_csv
(
cfg
, 
weights
);

265 if(0==
	`°rcmp
(
¨gv
[2], "csvåaö")Ë
	`ã°_ciÁr_csvåaö
(
cfg
, 
weights
);

266 if(0==
	`°rcmp
(
¨gv
[2], "evÆ")Ë
	`evÆ_ciÁr_csv
();

267 
	}
}

	@examples/classifier.c

1 
	~"d¨k√t.h
"

3 
	~<sys/time.h
>

4 
	~<as£π.h
>

6 *
	$gë_ªgªssi⁄_vÆues
(**
œbñs
, 
n
)

8 *
v
 = 
	`ˇŒoc
(
n
, ());

9 
i
;

10 
i
 = 0; i < 
n
; ++i){

11 *
p
 = 
	`°rchr
(
œbñs
[
i
], ' ');

12 *
p
 = 0;

13 
v
[
i
] = 
	`©of
(
p
+1);

15  
v
;

16 
	}
}

18 
	$åaö_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

20 
i
;

22 
avg_loss
 = -1;

23 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

24 
	`¥ötf
("%s\n", 
ba£
);

25 
	`¥ötf
("%d\n", 
ngpus
);

26 
√tw‹k
 *
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

28 
	`§™d
(
	`time
(0));

29 
£ed
 = 
	`ønd
();

30 
i
 = 0; i < 
ngpus
; ++i){

31 
	`§™d
(
£ed
);

32 #ifde‡
GPU


33 
	`cuda_£t_devi˚
(
gpus
[
i
]);

35 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

36 
√ts
[
i
].
À¨nög_øã
 *
ngpus
;

38 
	`§™d
(
	`time
(0));

39 
√tw‹k
 
√t
 = 
√ts
[0];

41 
imgs
 = 
√t
.
b©ch
 *Çë.
subdivisi⁄s
 * 
ngpus
;

43 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

44 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

46 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

47 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

48 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

49 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

51 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

52 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

53 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

54 
	`¥ötf
("%d\n", 
∂i°
->
size
);

55 
N
 = 
∂i°
->
size
;

56 
˛ock_t
 
time
;

58 
lﬂd_¨gs
 
¨gs
 = {0};

59 
¨gs
.
w
 = 
√t
.w;

60 
¨gs
.
h
 = 
√t
.h;

61 
¨gs
.
thªads
 = 32;

62 
¨gs
.
hõørchy
 = 
√t
.hierarchy;

64 
¨gs
.
mö
 = 
√t
.
mö_¸›
;

65 
¨gs
.
max
 = 
√t
.
max_¸›
;

66 
¨gs
.
™gÀ
 = 
√t
.angle;

67 
¨gs
.
a•e˘
 = 
√t
.aspect;

68 
¨gs
.
exposuª
 = 
√t
.exposure;

69 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

70 
¨gs
.
hue
 = 
√t
.hue;

71 
¨gs
.
size
 = 
√t
.
w
;

73 
¨gs
.
∑ths
 =Öaths;

74 
¨gs
.
˛as£s
 = classes;

75 
¨gs
.
n
 = 
imgs
;

76 
¨gs
.
m
 = 
N
;

77 
¨gs
.
œbñs
 =Üabels;

78 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

80 
d©a
 
åaö
;

81 
d©a
 
buf„r
;

82 
±hªad_t
 
lﬂd_thªad
;

83 
¨gs
.
d
 = &
buf„r
;

84 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

86 
ïoch
 = (*
√t
.
£í
)/
N
;

87 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

88 
time
=
	`˛ock
();

90 
	`±hªad_joö
(
lﬂd_thªad
, 0);

91 
åaö
 = 
buf„r
;

92 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

94 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

95 
time
=
	`˛ock
();

97 
loss
 = 0;

98 #ifde‡
GPU


99 if(
ngpus
 == 1){

100 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

102 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

105 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

107 if(
avg_loss
 =-1Ëavg_los†
loss
;

108 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

109 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

110 
	`‰ì_d©a
(
åaö
);

111 if(*
√t
.
£í
/
N
 > 
ïoch
){

112 
ïoch
 = *
√t
.
£í
/
N
;

113 
buff
[256];

114 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

115 
	`ßve_weights
(
√t
, 
buff
);

117 if(
	`gë_cuºít_b©ch
(
√t
)%1000 == 0){

118 
buff
[256];

119 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

120 
	`ßve_weights
(
√t
, 
buff
);

123 
buff
[256];

124 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

125 
	`ßve_weights
(
√t
, 
buff
);

127 
	`‰ì_√tw‹k
(
√t
);

128 
	`‰ì_±rs
((**)
œbñs
, 
˛as£s
);

129 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

130 
	`‰ì_li°
(
∂i°
);

131 
	`‰ì
(
ba£
);

132 
	}
}

245 
	$vÆid©e_˛assifõr_¸›
(*
d©acfg
, *
fûíame
, *
weightfûe
)

247 
i
 = 0;

248 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

249 if(
weightfûe
){

250 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

252 
	`§™d
(
	`time
(0));

254 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

256 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

257 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

258 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

259 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

261 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

262 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

264 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

265 
m
 = 
∂i°
->
size
;

266 
	`‰ì_li°
(
∂i°
);

268 
˛ock_t
 
time
;

269 
avg_acc
 = 0;

270 
avg_t›k
 = 0;

271 
•lôs
 = 
m
/1000;

272 
num
 = (
i
+1)*
m
/
•lôs
 - i*m/splits;

274 
d©a
 
vÆ
, 
buf„r
;

276 
lﬂd_¨gs
 
¨gs
 = {0};

277 
¨gs
.
w
 = 
√t
.w;

278 
¨gs
.
h
 = 
√t
.h;

280 
¨gs
.
∑ths
 =Öaths;

281 
¨gs
.
˛as£s
 = classes;

282 
¨gs
.
n
 = 
num
;

283 
¨gs
.
m
 = 0;

284 
¨gs
.
œbñs
 =Üabels;

285 
¨gs
.
d
 = &
buf„r
;

286 
¨gs
.
ty≥
 = 
OLD_CLASSIFICATION_DATA
;

288 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

289 
i
 = 1; i <
•lôs
; ++i){

290 
time
=
	`˛ock
();

292 
	`±hªad_joö
(
lﬂd_thªad
, 0);

293 
vÆ
 = 
buf„r
;

295 
num
 = (
i
+1)*
m
/
•lôs
 - i*m/splits;

296 **
∑π
 = 
∑ths
+(
i
*
m
/
•lôs
);

297 if(
i
 !
•lôs
){

298 
¨gs
.
∑ths
 = 
∑π
;

299 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

301 
	`¥ötf
("Lﬂded: %d image†ö %l‡£c⁄ds\n", 
vÆ
.
X
.
rows
, 
	`£c
(
	`˛ock
()-
time
));

303 
time
=
	`˛ock
();

304 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
vÆ
, 
t›k
);

305 
avg_acc
 +
acc
[0];

306 
avg_t›k
 +
acc
[1];

307 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f, %l‡£c⁄ds, %d images\n", 
i
, 
avg_acc
/i, 
t›k
, 
avg_t›k
/i, 
	`£c
(
	`˛ock
()-
time
), 
vÆ
.
X
.
rows
);

308 
	`‰ì_d©a
(
vÆ
);

310 
	}
}

312 
	$vÆid©e_˛assifõr_10
(*
d©acfg
, *
fûíame
, *
weightfûe
)

314 
i
, 
j
;

315 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

316 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

317 if(
weightfûe
){

318 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

320 
	`§™d
(
	`time
(0));

322 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

324 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

325 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

326 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

327 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

329 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

330 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

332 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

333 
m
 = 
∂i°
->
size
;

334 
	`‰ì_li°
(
∂i°
);

336 
avg_acc
 = 0;

337 
avg_t›k
 = 0;

338 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

340 
i
 = 0; i < 
m
; ++i){

341 
˛ass
 = -1;

342 *
∑th
 = 
∑ths
[
i
];

343 
j
 = 0; j < 
˛as£s
; ++j){

344 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

345 
˛ass
 = 
j
;

349 
w
 = 
√t
.w;

350 
h
 = 
√t
.h;

351 
shi·
 = 32;

352 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 
w
+
shi·
, 
h
+shift);

353 
image
 
images
[10];

354 
images
[0] = 
	`¸›_image
(
im
, -
shi·
, -shi·, 
w
, 
h
);

355 
images
[1] = 
	`¸›_image
(
im
, 
shi·
, -shi·, 
w
, 
h
);

356 
images
[2] = 
	`¸›_image
(
im
, 0, 0, 
w
, 
h
);

357 
images
[3] = 
	`¸›_image
(
im
, -
shi·
, shi·, 
w
, 
h
);

358 
images
[4] = 
	`¸›_image
(
im
, 
shi·
, shi·, 
w
, 
h
);

359 
	`Êù_image
(
im
);

360 
images
[5] = 
	`¸›_image
(
im
, -
shi·
, -shi·, 
w
, 
h
);

361 
images
[6] = 
	`¸›_image
(
im
, 
shi·
, -shi·, 
w
, 
h
);

362 
images
[7] = 
	`¸›_image
(
im
, 0, 0, 
w
, 
h
);

363 
images
[8] = 
	`¸›_image
(
im
, -
shi·
, shi·, 
w
, 
h
);

364 
images
[9] = 
	`¸›_image
(
im
, 
shi·
, shi·, 
w
, 
h
);

365 *
¥ed
 = 
	`ˇŒoc
(
˛as£s
, ());

366 
j
 = 0; j < 10; ++j){

367 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
images
[
j
].
d©a
);

368 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
p
,Çë.
ouçuts
,Çet.hierarchy, 1, 1);

369 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

370 
	`‰ì_image
(
images
[
j
]);

372 
	`‰ì_image
(
im
);

373 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

374 
	`‰ì
(
¥ed
);

375 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

376 
j
 = 0; j < 
t›k
; ++j){

377 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

380 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

382 
	}
}

384 
	$vÆid©e_˛assifõr_fuŒ
(*
d©acfg
, *
fûíame
, *
weightfûe
)

386 
i
, 
j
;

387 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

388 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

389 if(
weightfûe
){

390 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

392 
	`§™d
(
	`time
(0));

394 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

396 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

397 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

398 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

399 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

401 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

402 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

404 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

405 
m
 = 
∂i°
->
size
;

406 
	`‰ì_li°
(
∂i°
);

408 
avg_acc
 = 0;

409 
avg_t›k
 = 0;

410 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

412 
size
 = 
√t
.
w
;

413 
i
 = 0; i < 
m
; ++i){

414 
˛ass
 = -1;

415 *
∑th
 = 
∑ths
[
i
];

416 
j
 = 0; j < 
˛as£s
; ++j){

417 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

418 
˛ass
 = 
j
;

422 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

423 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
size
);

424 
	`ªsize_√tw‹k
(&
√t
, 
ªsized
.
w
,Ñesized.
h
);

428 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ªsized
.
d©a
);

429 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë.
ouçuts
,Çet.hierarchy, 1, 1);

431 
	`‰ì_image
(
im
);

432 
	`‰ì_image
(
ªsized
);

433 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

435 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

436 
j
 = 0; j < 
t›k
; ++j){

437 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

440 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

442 
	}
}

445 
	$vÆid©e_˛assifõr_sögÀ
(*
d©acfg
, *
fûíame
, *
weightfûe
)

447 
i
, 
j
;

448 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

449 if(
weightfûe
){

450 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

452 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

453 
	`§™d
(
	`time
(0));

455 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

457 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

458 *
Àaf_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "leaves", 0);

459 if(
Àaf_li°
Ë
	`ch™ge_Àaves
(
√t
.
hõørchy
,Üeaf_list);

460 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

461 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

462 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

464 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

465 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

467 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

468 
m
 = 
∂i°
->
size
;

469 
	`‰ì_li°
(
∂i°
);

471 
avg_acc
 = 0;

472 
avg_t›k
 = 0;

473 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

475 
i
 = 0; i < 
m
; ++i){

476 
˛ass
 = -1;

477 *
∑th
 = 
∑ths
[
i
];

478 
j
 = 0; j < 
˛as£s
; ++j){

479 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

480 
˛ass
 = 
j
;

484 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

485 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
.
w
);

486 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
.w)/2, (ªsized.
h
 -Çet.h)/2,Çet.w,Çet.h);

490 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

491 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥ed
,Çë.
ouçuts
,Çet.hierarchy, 1, 1);

493 if(
ªsized
.
d©a
 !
im
.d©aË
	`‰ì_image
(resized);

494 
	`‰ì_image
(
im
);

495 
	`‰ì_image
(
¸›
);

496 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

498 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

499 
j
 = 0; j < 
t›k
; ++j){

500 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

503 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

505 
	}
}

507 
	$vÆid©e_˛assifõr_mu…i
(*
d©acfg
, *
fûíame
, *
weightfûe
)

509 
i
, 
j
;

510 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

511 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

512 if(
weightfûe
){

513 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

515 
	`§™d
(
	`time
(0));

517 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

519 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

520 *
vÆid_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

521 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

522 
t›k
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

524 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

525 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_li°
);

526 
sˇÀs
[] = {224, 288, 320, 352, 384};

527 
nsˇÀs
 = (
sˇÀs
)/(scales[0]);

529 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

530 
m
 = 
∂i°
->
size
;

531 
	`‰ì_li°
(
∂i°
);

533 
avg_acc
 = 0;

534 
avg_t›k
 = 0;

535 *
ödexes
 = 
	`ˇŒoc
(
t›k
, ());

537 
i
 = 0; i < 
m
; ++i){

538 
˛ass
 = -1;

539 *
∑th
 = 
∑ths
[
i
];

540 
j
 = 0; j < 
˛as£s
; ++j){

541 if(
	`°r°r
(
∑th
, 
œbñs
[
j
])){

542 
˛ass
 = 
j
;

546 *
¥ed
 = 
	`ˇŒoc
(
˛as£s
, ());

547 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

548 
j
 = 0; j < 
nsˇÀs
; ++j){

549 
image
 
r
 = 
	`ªsize_mö
(
im
, 
sˇÀs
[
j
]);

550 
	`ªsize_√tw‹k
(&
√t
, 
r
.
w
,Ñ.
h
);

551 *
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

552 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
p
,Çë.
ouçuts
,Çet.hierarchy, 1 , 1);

553 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

554 
	`Êù_image
(
r
);

555 
p
 = 
	`√tw‹k_¥edi˘
(
√t
, 
r
.
d©a
);

556 
	`axpy_˝u
(
˛as£s
, 1, 
p
, 1, 
¥ed
, 1);

557 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

559 
	`‰ì_image
(
im
);

560 
	`t›_k
(
¥ed
, 
˛as£s
, 
t›k
, 
ödexes
);

561 
	`‰ì
(
¥ed
);

562 if(
ödexes
[0] =
˛ass
Ë
avg_acc
 += 1;

563 
j
 = 0; j < 
t›k
; ++j){

564 if(
ödexes
[
j
] =
˛ass
Ë
avg_t›k
 += 1;

567 
	`¥ötf
("%d:Å› 1: %f,Å› %d: %f\n", 
i
, 
avg_acc
/(i+1), 
t›k
, 
avg_t›k
/(i+1));

569 
	}
}

571 
	$åy_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
œyî_num
)

573 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

574 if(
weightfûe
){

575 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

577 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

578 
	`§™d
(2222222);

580 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

582 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

583 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

584 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

586 
i
 = 0;

587 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

588 
˛ock_t
 
time
;

589 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

590 
buff
[256];

591 *
öput
 = 
buff
;

593 if(
fûíame
){

594 
	`°∫˝y
(
öput
, 
fûíame
, 256);

596 
	`¥ötf
("Enter Image Path: ");

597 
	`fÊush
(
°dout
);

598 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

599 if(!
öput
) ;

600 
	`°πok
(
öput
, "\n");

602 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

603 
image
 
r
 = 
	`ªsize_mö
(
‹ig
, 256);

604 
image
 
im
 = 
	`¸›_image
(
r
, (r.
w
 - 224 - 1)/2 + 1, (r.
h
 - 224 - 1)/2 + 1, 224, 224);

605 
món
[] = {0.48263312050943, 0.45230225481413, 0.40099074308742};

606 
°d
[] = {0.22590347483426, 0.22120921437787, 0.22103996251583};

607 
v¨
[3];

608 
v¨
[0] = 
°d
[0]*std[0];

609 
v¨
[1] = 
°d
[1]*std[1];

610 
v¨
[2] = 
°d
[2]*std[2];

612 
	`n‹mÆize_˝u
(
im
.
d©a
, 
món
, 
v¨
, 1, 3, im.
w
*im.
h
);

614 *
X
 = 
im
.
d©a
;

615 
time
=
	`˛ock
();

616 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

618 
œyî
 
l
 = 
√t
.
œyîs
[
œyî_num
];

619 
i
 = 0; i < 
l
.
c
; ++i){

620 if(
l
.
rﬁlög_món
Ë
	`¥ötf
("%‡%‡%f\n",Ü.rﬁlög_món[
i
],Ü.
rﬁlög_v¨ün˚
[i],Ü.
sˇÀs
[i]);

622 #ifde‡
GPU


623 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
ouçuts
);

625 
i
 = 0; i < 
l
.
ouçuts
; ++i){

626 
	`¥ötf
("%f\n", 
l
.
ouçut
[
i
]);

641 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

642 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

643 
i
 = 0; i < 
t›
; ++i){

644 
ödex
 = 
ödexes
[
i
];

645 
	`¥ötf
("%s: %f\n", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

647 
	`‰ì_image
(
im
);

648 i‡(
fûíame
) ;

650 
	}
}

652 
	$¥edi˘_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
t›
)

654 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

655 if(
weightfûe
){

656 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

658 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

659 
	`§™d
(2222222);

661 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

663 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

664 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", "data/labels.list");

665 if(
t›
 =0Ët› = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

667 
i
 = 0;

668 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

669 
˛ock_t
 
time
;

670 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

671 
buff
[256];

672 *
öput
 = 
buff
;

673 
size
 = 
√t
.
w
;

675 if(
fûíame
){

676 
	`°∫˝y
(
öput
, 
fûíame
, 256);

678 
	`¥ötf
("Enter Image Path: ");

679 
	`fÊush
(
°dout
);

680 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

681 if(!
öput
) ;

682 
	`°πok
(
öput
, "\n");

684 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

685 
image
 
r
 = 
	`ªsize_mö
(
im
, 
size
);

686 
	`ªsize_√tw‹k
(&
√t
, 
r
.
w
,Ñ.
h
);

689 *
X
 = 
r
.
d©a
;

690 
time
=
	`˛ock
();

691 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

692 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
,Çë.
ouçuts
,Çet.hierarchy, 1, 1);

693 
	`t›_k
(
¥edi˘i⁄s
, 
√t
.
ouçuts
, 
t›
, 
ödexes
);

694 
	`Ârötf
(
°dîr
, "%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

695 
i
 = 0; i < 
t›
; ++i){

696 
ödex
 = 
ödexes
[
i
];

699 
	`¥ötf
("%5.2f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

701 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

702 
	`‰ì_image
(
im
);

703 i‡(
fûíame
) ;

705 
	}
}

708 
	$œbñ_˛assifõr
(*
d©acfg
, *
fûíame
, *
weightfûe
)

710 
i
;

711 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

712 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

713 if(
weightfûe
){

714 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

716 
	`§™d
(
	`time
(0));

718 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

720 *
œbñ_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/labels.list");

721 *
ã°_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "test", "data/train.list");

722 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

724 **
œbñs
 = 
	`gë_œbñs
(
œbñ_li°
);

725 
li°
 *
∂i°
 = 
	`gë_∑ths
(
ã°_li°
);

727 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

728 
m
 = 
∂i°
->
size
;

729 
	`‰ì_li°
(
∂i°
);

731 
i
 = 0; i < 
m
; ++i){

732 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

733 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
.
w
);

734 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
.w)/2, (ªsized.
h
 -Çet.h)/2,Çet.w,Çet.h);

735 *
¥ed
 = 
	`√tw‹k_¥edi˘
(
√t
, 
¸›
.
d©a
);

737 if(
ªsized
.
d©a
 !
im
.d©aË
	`‰ì_image
(resized);

738 
	`‰ì_image
(
im
);

739 
	`‰ì_image
(
¸›
);

740 
öd
 = 
	`max_ödex
(
¥ed
, 
˛as£s
);

742 
	`¥ötf
("%s\n", 
œbñs
[
öd
]);

744 
	}
}

747 
	$ã°_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
èrgë_œyî
)

749 
cuº
 = 0;

750 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

751 if(
weightfûe
){

752 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

754 
	`§™d
(
	`time
(0));

756 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

758 *
ã°_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "test", "data/test.list");

759 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

761 
li°
 *
∂i°
 = 
	`gë_∑ths
(
ã°_li°
);

763 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

764 
m
 = 
∂i°
->
size
;

765 
	`‰ì_li°
(
∂i°
);

767 
˛ock_t
 
time
;

769 
d©a
 
vÆ
, 
buf„r
;

771 
lﬂd_¨gs
 
¨gs
 = {0};

772 
¨gs
.
w
 = 
√t
.w;

773 
¨gs
.
h
 = 
√t
.h;

774 
¨gs
.
∑ths
 =Öaths;

775 
¨gs
.
˛as£s
 = classes;

776 
¨gs
.
n
 = 
√t
.
b©ch
;

777 
¨gs
.
m
 = 0;

778 
¨gs
.
œbñs
 = 0;

779 
¨gs
.
d
 = &
buf„r
;

780 
¨gs
.
ty≥
 = 
OLD_CLASSIFICATION_DATA
;

782 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

783 
cuº
 = 
√t
.
b©ch
; cuº < 
m
; curr +=Çet.batch){

784 
time
=
	`˛ock
();

786 
	`±hªad_joö
(
lﬂd_thªad
, 0);

787 
vÆ
 = 
buf„r
;

789 if(
cuº
 < 
m
){

790 
¨gs
.
∑ths
 =Ö©h†+ 
cuº
;

791 i‡(
cuº
 + 
√t
.
b©ch
 > 
m
Ë
¨gs
.
n
 = m - curr;

792 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

794 
	`Ârötf
(
°dîr
, "Lﬂded: %d image†ö %l‡£c⁄ds\n", 
vÆ
.
X
.
rows
, 
	`£c
(
	`˛ock
()-
time
));

796 
time
=
	`˛ock
();

797 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
vÆ
);

799 
i
, 
j
;

800 i‡(
èrgë_œyî
 >= 0){

804 
i
 = 0; i < 
¥ed
.
rows
; ++i){

805 
	`¥ötf
("%s", 
∑ths
[
cuº
-
√t
.
b©ch
+
i
]);

806 
j
 = 0; j < 
¥ed
.
cﬁs
; ++j){

807 
	`¥ötf
("\t%g", 
¥ed
.
vÆs
[
i
][
j
]);

809 
	`¥ötf
("\n");

812 
	`‰ì_m©rix
(
¥ed
);

814 
	`Ârötf
(
°dîr
, "%l‡£c⁄ds, %d images, %dÅŸÆ\n", 
	`£c
(
	`˛ock
()-
time
), 
vÆ
.
X
.
rows
, 
cuº
);

815 
	`‰ì_d©a
(
vÆ
);

817 
	}
}

820 
	$thª©_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

822 #ifde‡
OPENCV


823 
thª©
 = 0;

824 
rﬁl
 = .2;

826 
	`¥ötf
("Classifier Demo\n");

827 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

828 if(
weightfûe
){

829 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

831 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

832 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

834 
	`§™d
(2222222);

835 
CvC≠tuª
 * 
ˇp
;

837 if(
fûíame
){

838 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

840 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

843 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

845 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

846 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

848 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

850 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

853 
Âs
 = 0;

854 
i
;

856 
cou¡
 = 0;

859 ++
cou¡
;

860 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

861 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

863 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

864 if(!
ö
.
d©a
) ;

865 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
.
w
,Çë.
h
);

867 
image
 
out
 = 
ö
;

868 
x1
 = 
out
.
w
 / 20;

869 
y1
 = 
out
.
h
 / 20;

870 
x2
 = 2*
x1
;

871 
y2
 = 
out
.
h
 - out.h/20;

873 
b‹dî
 = .01*
out
.
h
;

874 
h
 = 
y2
 - 
y1
 - 2*
b‹dî
;

875 
w
 = 
x2
 - 
x1
 - 2*
b‹dî
;

877 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

878 
cuº_thª©
 = 0;

880 
cuº_thª©
 = 
¥edi˘i⁄s
[0] * 0 +

881 
¥edi˘i⁄s
[1] * .6 +

882 
¥edi˘i⁄s
[2];

884 
cuº_thª©
 = 
¥edi˘i⁄s
[218] +

885 
¥edi˘i⁄s
[539] +

886 
¥edi˘i⁄s
[540] +

887 
¥edi˘i⁄s
[368] +

888 
¥edi˘i⁄s
[369] +

889 
¥edi˘i⁄s
[370];

891 
thª©
 = 
rﬁl
 * 
cuº_thª©
 + (1-roll) *Åhreat;

893 
	`døw_box_width
(
out
, 
x2
 + 
b‹dî
, 
y1
 + .02*
h
, x2 + .5 * 
w
, y1 + .02*h + border, border, 0,0,0);

894 if(
thª©
 > .97) {

895 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

896 
y1
 + .02*
h
 - 2*
b‹dî
,

897 
x2
 + .5 * 
w
 + 6*
b‹dî
,

898 
y1
 + .02*
h
 + 3*
b‹dî
, 3*border, 1,0,0);

900 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

901 
y1
 + .02*
h
 - 2*
b‹dî
,

902 
x2
 + .5 * 
w
 + 6*
b‹dî
,

903 
y1
 + .02*
h
 + 3*
b‹dî
, .5*border, 0,0,0);

904 
	`døw_box_width
(
out
, 
x2
 + 
b‹dî
, 
y1
 + .42*
h
, x2 + .5 * 
w
, y1 + .42*h + border, border, 0,0,0);

905 if(
thª©
 > .57) {

906 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

907 
y1
 + .42*
h
 - 2*
b‹dî
,

908 
x2
 + .5 * 
w
 + 6*
b‹dî
,

909 
y1
 + .42*
h
 + 3*
b‹dî
, 3*border, 1,1,0);

911 
	`døw_box_width
(
out
, 
x2
 + .5 * 
w
 + 
b‹dî
,

912 
y1
 + .42*
h
 - 2*
b‹dî
,

913 
x2
 + .5 * 
w
 + 6*
b‹dî
,

914 
y1
 + .42*
h
 + 3*
b‹dî
, .5*border, 0,0,0);

916 
	`døw_box_width
(
out
, 
x1
, 
y1
, 
x2
, 
y2
, 
b‹dî
, 0,0,0);

917 
i
 = 0; i < 
thª©
 * 
h
 ; ++i){

918 
øtio
 = (Ë
i
 / 
h
;

919 
r
 = (
øtio
 < .5) ? (2*(ratio)) : 1;

920 
g
 = (
øtio
 < .5) ? 1 : 1 - 2*(ratio - .5);

921 
	`døw_box_width
(
out
, 
x1
 + 
b‹dî
, 
y2
 - b‹dî - 
i
, 
x2
 - b‹dî, y2 - b‹dî - i, 1, 
r
, 
g
, 0);

923 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

924 
buff
[256];

925 
	`•rötf
(
buff
, "/home/pjªddõ/tmp/thª©_%06d", 
cou¡
);

928 
	`¥ötf
("\033[2J");

929 
	`¥ötf
("\033[1;1H");

930 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

932 
i
 = 0; i < 
t›
; ++i){

933 
ödex
 = 
ödexes
[
i
];

934 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

938 
	`show_image
(
out
, "Threat");

939 
	`cvWaôKey
(10);

941 
	`‰ì_image
(
ö_s
);

942 
	`‰ì_image
(
ö
);

944 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

945 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

946 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

947 
Âs
 = .9*Â†+ .1*
cuº
;

950 
	}
}

953 
	$gun_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

955 #ifde‡
OPENCV


956 
bad_ˇts
[] = {218, 539, 540, 1213, 1501, 1742, 1911, 2415, 4348, 19223, 368, 369, 370, 1133, 1200, 1306, 2122, 2301, 2537, 2823, 3179, 3596, 3639, 4489, 5107, 5140, 5289, 6240, 6631, 6762, 7048, 7171, 7969, 7984, 7989, 8824, 8927, 9915, 10270, 10448, 13401, 15205, 18358, 18894, 18895, 19249, 19697};

958 
	`¥ötf
("Classifier Demo\n");

959 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

960 if(
weightfûe
){

961 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

963 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

964 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

966 
	`§™d
(2222222);

967 
CvC≠tuª
 * 
ˇp
;

969 if(
fûíame
){

970 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

972 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

975 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

977 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

978 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

980 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

982 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

983 
	`cvNamedWödow
("Thª© Dëe˘i⁄", 
CV_WINDOW_NORMAL
);

984 
	`cvResizeWödow
("Threat Detection", 512, 512);

985 
Âs
 = 0;

986 
i
;

989 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

990 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

992 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

993 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
.
w
,Çë.
h
);

994 
	`show_image
(
ö
, "Threat Detection");

996 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

997 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

999 
	`¥ötf
("\033[2J");

1000 
	`¥ötf
("\033[1;1H");

1002 
thª©
 = 0;

1003 
i
 = 0; i < (
bad_ˇts
)/(bad_cats[0]); ++i){

1004 
ödex
 = 
bad_ˇts
[
i
];

1005 if(
¥edi˘i⁄s
[
ödex
] > .01){

1006 
	`¥ötf
("Threat Detected!\n");

1007 
thª©
 = 1;

1011 if(!
thª©
Ë
	`¥ötf
("Scanning...\n");

1012 
i
 = 0; i < (
bad_ˇts
)/(bad_cats[0]); ++i){

1013 
ödex
 = 
bad_ˇts
[
i
];

1014 if(
¥edi˘i⁄s
[
ödex
] > .01){

1015 
	`¥ötf
("%s\n", 
«mes
[
ödex
]);

1019 
	`‰ì_image
(
ö_s
);

1020 
	`‰ì_image
(
ö
);

1022 
	`cvWaôKey
(10);

1024 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

1025 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

1026 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

1027 
Âs
 = .9*Â†+ .1*
cuº
;

1030 
	}
}

1032 
	$demo_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

1034 #ifde‡
OPENCV


1035 
	`¥ötf
("Classifier Demo\n");

1036 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

1037 if(
weightfûe
){

1038 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

1040 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

1041 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

1043 
	`§™d
(2222222);

1044 
CvC≠tuª
 * 
ˇp
;

1046 if(
fûíame
){

1047 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

1049 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

1052 
t›
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "top", 1);

1054 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

1055 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

1057 *
ödexes
 = 
	`ˇŒoc
(
t›
, ());

1059 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

1060 
	`cvNamedWödow
("Cœssifõr", 
CV_WINDOW_NORMAL
);

1061 
	`cvResizeWödow
("Classifier", 512, 512);

1062 
Âs
 = 0;

1063 
i
;

1066 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

1067 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

1069 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

1070 
image
 
ö_s
 = 
	`ªsize_image
(
ö
, 
√t
.
w
,Çë.
h
);

1071 
	`show_image
(
ö
, "Classifier");

1073 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

1074 if(
√t
.
hõørchy
Ë
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
,Çë.
ouçuts
,Çet.hierarchy, 1, 1);

1075 
	`t›_¥edi˘i⁄s
(
√t
, 
t›
, 
ödexes
);

1077 
	`¥ötf
("\033[2J");

1078 
	`¥ötf
("\033[1;1H");

1079 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

1081 
i
 = 0; i < 
t›
; ++i){

1082 
ödex
 = 
ödexes
[
i
];

1083 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

1086 
	`‰ì_image
(
ö_s
);

1087 
	`‰ì_image
(
ö
);

1089 
	`cvWaôKey
(10);

1091 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

1092 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

1093 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

1094 
Âs
 = .9*Â†+ .1*
cuº
;

1097 
	}
}

1100 
	$run_˛assifõr
(
¨gc
, **
¨gv
)

1102 if(
¨gc
 < 4){

1103 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

1107 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

1108 
ngpus
;

1109 *
gpus
 = 
	`ªad_öéi°
(
gpu_li°
, &
ngpus
, 
gpu_ödex
);

1112 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

1113 
t›
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-t", 0);

1114 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

1115 *
d©a
 = 
¨gv
[3];

1116 *
cfg
 = 
¨gv
[4];

1117 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

1118 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

1119 *
œyî_s
 = (
¨gc
 > 7Ë? 
¨gv
[7]: 0;

1120 
œyî
 = 
œyî_s
 ? 
	`©oi
(layer_s) : -1;

1121 if(0==
	`°rcmp
(
¨gv
[2], "¥edi˘")Ë
	`¥edi˘_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
fûíame
, 
t›
);

1122 if(0==
	`°rcmp
(
¨gv
[2], "åy")Ë
	`åy_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
fûíame
, 
	`©oi
(
œyî_s
));

1123 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

1124 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1125 if(0==
	`°rcmp
(
¨gv
[2], "gun")Ë
	`gun_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1126 if(0==
	`°rcmp
(
¨gv
[2], "thª©")Ë
	`thª©_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

1127 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_˛assifõr
(
d©a
, 
cfg
, 
weights
, 
œyî
);

1128 if(0==
	`°rcmp
(
¨gv
[2], "œbñ")Ë
	`œbñ_˛assifõr
(
d©a
, 
cfg
, 
weights
);

1129 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_˛assifõr_sögÀ
(
d©a
, 
cfg
, 
weights
);

1130 if(0==
	`°rcmp
(
¨gv
[2], "vÆidmu…i")Ë
	`vÆid©e_˛assifõr_mu…i
(
d©a
, 
cfg
, 
weights
);

1131 if(0==
	`°rcmp
(
¨gv
[2], "vÆid10")Ë
	`vÆid©e_˛assifõr_10
(
d©a
, 
cfg
, 
weights
);

1132 if(0==
	`°rcmp
(
¨gv
[2], "vÆid¸›")Ë
	`vÆid©e_˛assifõr_¸›
(
d©a
, 
cfg
, 
weights
);

1133 if(0==
	`°rcmp
(
¨gv
[2], "vÆidfuŒ")Ë
	`vÆid©e_˛assifõr_fuŒ
(
d©a
, 
cfg
, 
weights
);

1134 
	}
}

	@examples/coco.c

1 
	~"d¨k√t.h
"

3 
	~<°dio.h
>

5 *
	gcoco_˛as£s
[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","trafficÜight","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennisÑacket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","pottedÖlant","bed","diningÅable","toilet","tv","laptop","mouse","remote","keyboard","cellÖhone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};

7 
	gcoco_ids
[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};

9 
	$åaö_coco
(*
cfgfûe
, *
weightfûe
)

13 *
åaö_images
 = "data/coco.trainval.txt";

15 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

16 
	`§™d
(
	`time
(0));

17 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

18 
	`¥ötf
("%s\n", 
ba£
);

19 
avg_loss
 = -1;

20 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

21 if(
weightfûe
){

22 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

24 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

25 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

26 
i
 = *
√t
.
£í
/
imgs
;

27 
d©a
 
åaö
, 
buf„r
;

30 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 1];

32 
side
 = 
l
.side;

33 
˛as£s
 = 
l
.classes;

34 
jôãr
 = 
l
.jitter;

36 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

38 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

40 
lﬂd_¨gs
 
¨gs
 = {0};

41 
¨gs
.
w
 = 
√t
.w;

42 
¨gs
.
h
 = 
√t
.h;

43 
¨gs
.
∑ths
 =Öaths;

44 
¨gs
.
n
 = 
imgs
;

45 
¨gs
.
m
 = 
∂i°
->
size
;

46 
¨gs
.
˛as£s
 = classes;

47 
¨gs
.
jôãr
 = jitter;

48 
¨gs
.
num_boxes
 = 
side
;

49 
¨gs
.
d
 = &
buf„r
;

50 
¨gs
.
ty≥
 = 
REGION_DATA
;

52 
¨gs
.
™gÀ
 = 
√t
.angle;

53 
¨gs
.
exposuª
 = 
√t
.exposure;

54 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

55 
¨gs
.
hue
 = 
√t
.hue;

57 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

58 
˛ock_t
 
time
;

60 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

61 
i
 += 1;

62 
time
=
	`˛ock
();

63 
	`±hªad_joö
(
lﬂd_thªad
, 0);

64 
åaö
 = 
buf„r
;

65 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

67 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

77 
time
=
	`˛ock
();

78 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

79 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

80 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

82 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

83 if(
i
%1000==0 || (i < 1000 && i%100 == 0)){

84 
buff
[256];

85 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

86 
	`ßve_weights
(
√t
, 
buff
);

88 if(
i
%100==0){

89 
buff
[256];

90 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

91 
	`ßve_weights
(
√t
, 
buff
);

93 
	`‰ì_d©a
(
åaö
);

95 
buff
[256];

96 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

97 
	`ßve_weights
(
√t
, 
buff
);

98 
	}
}

100 
	$¥öt_cocos
(
FILE
 *
Â
, 
image_id
, 
box
 *
boxes
, **
¥obs
, 
num_boxes
, 
˛as£s
, 
w
, 
h
)

102 
i
, 
j
;

103 
i
 = 0; i < 
num_boxes
; ++i){

104 
xmö
 = 
boxes
[
i
].
x
 - boxes[i].
w
/2.;

105 
xmax
 = 
boxes
[
i
].
x
 + boxes[i].
w
/2.;

106 
ymö
 = 
boxes
[
i
].
y
 - boxes[i].
h
/2.;

107 
ymax
 = 
boxes
[
i
].
y
 + boxes[i].
h
/2.;

109 i‡(
xmö
 < 0) xmin = 0;

110 i‡(
ymö
 < 0) ymin = 0;

111 i‡(
xmax
 > 
w
) xmax = w;

112 i‡(
ymax
 > 
h
) ymax = h;

114 
bx
 = 
xmö
;

115 
by
 = 
ymö
;

116 
bw
 = 
xmax
 - 
xmö
;

117 
bh
 = 
ymax
 - 
ymö
;

119 
j
 = 0; j < 
˛as£s
; ++j){

120 i‡(
¥obs
[
i
][
j
]Ë
	`Ârötf
(
Â
, "{\"image_id\":%d, \"ˇãg‹y_id\":%d, \"bbox\":[%f, %f, %f, %f], \"sc‹e\":%f},\n", 
image_id
, 
coco_ids
[j], 
bx
, 
by
, 
bw
, 
bh
,Örobs[i][j]);

123 
	}
}

125 
	$gë_coco_image_id
(*
fûíame
)

127 *
p
 = 
	`°ºchr
(
fûíame
, '_');

128  
	`©oi
(
p
+1);

129 
	}
}

131 
	$vÆid©e_coco
(*
cfgfûe
, *
weightfûe
)

133 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

134 if(
weightfûe
){

135 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

137 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

138 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

139 
	`§™d
(
	`time
(0));

141 *
ba£
 = "results/";

142 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/coco_val_5k.list");

145 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

147 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

148 
˛as£s
 = 
l
.classes;

149 
side
 = 
l
.side;

151 
j
;

152 
buff
[1024];

153 
	`¢¥ötf
(
buff
, 1024, "%s/coco_ªsu…s.js⁄", 
ba£
);

154 
FILE
 *
Â
 = 
	`f›í
(
buff
, "w");

155 
	`Ârötf
(
Â
, "[\n");

157 
box
 *
boxes
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (box));

158 **
¥obs
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (*));

159 
j
 = 0; j < 
side
*side*
l
.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
, (*));

161 
m
 = 
∂i°
->
size
;

162 
i
=0;

163 
t
;

165 
thªsh
 = .01;

166 
nms
 = 1;

167 
iou_thªsh
 = .5;

169 
¡hªads
 = 8;

170 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

171 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

172 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

173 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

174 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

176 
lﬂd_¨gs
 
¨gs
 = {0};

177 
¨gs
.
w
 = 
√t
.w;

178 
¨gs
.
h
 = 
√t
.h;

179 
¨gs
.
ty≥
 = 
IMAGE_DATA
;

181 
t
 = 0;Å < 
¡hªads
; ++t){

182 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

183 
¨gs
.
im
 = &
buf
[
t
];

184 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

185 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

187 
time_t
 
°¨t
 = 
	`time
(0);

188 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

189 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

190 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

191 
	`±hªad_joö
(
thr
[
t
], 0);

192 
vÆ
[
t
] = 
buf
[t];

193 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

195 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

196 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

197 
¨gs
.
im
 = &
buf
[
t
];

198 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

199 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

201 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

202 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

203 
image_id
 = 
	`gë_coco_image_id
(
∑th
);

204 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

205 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

206 
w
 = 
vÆ
[
t
].w;

207 
h
 = 
vÆ
[
t
].h;

208 
	`gë_dëe˘i⁄_boxes
(
l
, 
w
, 
h
, 
thªsh
, 
¥obs
, 
boxes
, 0);

209 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
side
*side*
l
.
n
, 
˛as£s
, 
iou_thªsh
);

210 
	`¥öt_cocos
(
Â
, 
image_id
, 
boxes
, 
¥obs
, 
side
*side*
l
.
n
, 
˛as£s
, 
w
, 
h
);

211 
	`‰ì_image
(
vÆ
[
t
]);

212 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

215 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

216 
	`Ârötf
(
Â
, "\n]\n");

217 
	`f˛o£
(
Â
);

219 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

220 
	}
}

222 
	$vÆid©e_coco_ªˇŒ
(*
cfgfûe
, *
weightfûe
)

224 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

225 if(
weightfûe
){

226 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

228 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

229 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

230 
	`§™d
(
	`time
(0));

232 *
ba£
 = "results/comp4_det_test_";

233 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/data/voc/test/2007_test.txt");

234 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

236 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

237 
˛as£s
 = 
l
.classes;

238 
side
 = 
l
.side;

240 
j
, 
k
;

241 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

242 
j
 = 0; j < 
˛as£s
; ++j){

243 
buff
[1024];

244 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
coco_˛as£s
[
j
]);

245 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

247 
box
 *
boxes
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (box));

248 **
¥obs
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (*));

249 
j
 = 0; j < 
side
*side*
l
.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
, (*));

251 
m
 = 
∂i°
->
size
;

252 
i
=0;

254 
thªsh
 = .001;

255 
nms
 = 0;

256 
iou_thªsh
 = .5;

257 
nms_thªsh
 = .5;

259 
tŸÆ
 = 0;

260 
c‹ª˘
 = 0;

261 
¥›oßls
 = 0;

262 
avg_iou
 = 0;

264 
i
 = 0; i < 
m
; ++i){

265 *
∑th
 = 
∑ths
[
i
];

266 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

267 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
.
w
,Çë.
h
);

268 *
id
 = 
	`ba£cfg
(
∑th
);

269 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

270 
	`gë_dëe˘i⁄_boxes
(
l
, 1, 1, 
thªsh
, 
¥obs
, 
boxes
, 1);

271 i‡(
nms
Ë
	`do_nms
(
boxes
, 
¥obs
, 
side
*side*
l
.
n
, 1, 
nms_thªsh
);

273 
œbñ∑th
[4096];

274 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

275 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

276 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

277 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

279 
num_œbñs
 = 0;

280 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

281 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

282 if(
¥obs
[
k
][0] > 
thªsh
){

283 ++
¥›oßls
;

286 
j
 = 0; j < 
num_œbñs
; ++j) {

287 ++
tŸÆ
;

288 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

289 
be°_iou
 = 0;

290 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

291 
iou
 = 
	`box_iou
(
boxes
[
k
], 
t
);

292 if(
¥obs
[
k
][0] > 
thªsh
 && 
iou
 > 
be°_iou
){

293 
be°_iou
 = 
iou
;

296 
avg_iou
 +
be°_iou
;

297 if(
be°_iou
 > 
iou_thªsh
){

298 ++
c‹ª˘
;

302 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

303 
	`‰ì
(
id
);

304 
	`‰ì_image
(
‹ig
);

305 
	`‰ì_image
(
sized
);

307 
	}
}

309 
	$ã°_coco
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
)

311 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

312 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

313 if(
weightfûe
){

314 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

316 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

317 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

318 
	`§™d
(2222222);

319 
nms
 = .4;

320 
˛ock_t
 
time
;

321 
buff
[256];

322 *
öput
 = 
buff
;

323 
j
;

324 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (box));

325 **
¥obs
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (*));

326 
j
 = 0; j < 
l
.
side
*l.side*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
÷.
˛as£s
, (*));

328 if(
fûíame
){

329 
	`°∫˝y
(
öput
, 
fûíame
, 256);

331 
	`¥ötf
("Enter Image Path: ");

332 
	`fÊush
(
°dout
);

333 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

334 if(!
öput
) ;

335 
	`°πok
(
öput
, "\n");

337 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

338 
image
 
sized
 = 
	`ªsize_image
(
im
, 
√t
.
w
,Çë.
h
);

339 *
X
 = 
sized
.
d©a
;

340 
time
=
	`˛ock
();

341 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

342 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

343 
	`gë_dëe˘i⁄_boxes
(
l
, 1, 1, 
thªsh
, 
¥obs
, 
boxes
, 0);

344 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
l
.
side
*l.side*l.
n
,Ü.
˛as£s
,Çms);

345 
	`døw_dëe˘i⁄s
(
im
, 
l
.
side
*l.side*l.
n
, 
thªsh
, 
boxes
, 
¥obs
, 
coco_˛as£s
, 
Æphabë
, 80);

346 
	`ßve_image
(
im
, "prediction");

347 
	`show_image
(
im
, "predictions");

348 
	`‰ì_image
(
im
);

349 
	`‰ì_image
(
sized
);

350 #ifde‡
OPENCV


351 
	`cvWaôKey
(0);

352 
	`cvDe°royAŒWödows
();

354 i‡(
fûíame
) ;

356 
	}
}

358 
	$run_coco
(
¨gc
, **
¨gv
)

360 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

361 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .2);

362 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

363 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

365 if(
¨gc
 < 4){

366 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

370 *
cfg
 = 
¨gv
[3];

371 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

372 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

373 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 1);

374 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_coco
(
cfg
, 
weights
, 
fûíame
, 
thªsh
);

375 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_coco
(
cfg
, 
weights
);

376 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_coco
(
cfg
, 
weights
);

377 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_coco_ªˇŒ
(
cfg
, 
weights
);

378 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
coco_˛as£s
, 80, 
‰ame_skù
, 
¥efix
, 
avg
, .5, 0,0,0,0);

379 
	}
}

	@examples/darknet.c

1 
	~"d¨k√t.h
"

3 
	~<time.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
¥edi˘_˛assifõr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
t›
);

8 
ã°_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
, 
hõr_thªsh
, *
outfûe
, 
fuŒs¸ìn
);

9 
run_voxñ
(
¨gc
, **
¨gv
);

10 
run_yﬁo
(
¨gc
, **
¨gv
);

11 
run_dëe˘‹
(
¨gc
, **
¨gv
);

12 
run_coco
(
¨gc
, **
¨gv
);

13 
run_wrôög
(
¨gc
, **
¨gv
);

14 
run_ˇ±cha
(
¨gc
, **
¨gv
);

15 
run_nightm¨e
(
¨gc
, **
¨gv
);

16 
run_di˚
(
¨gc
, **
¨gv
);

17 
run_com∑ª
(
¨gc
, **
¨gv
);

18 
run_˛assifõr
(
¨gc
, **
¨gv
);

19 
run_ªgªss‹
(
¨gc
, **
¨gv
);

20 
run_£gmíãr
(
¨gc
, **
¨gv
);

21 
run_ch¨_∫n
(
¨gc
, **
¨gv
);

22 
run_vid_∫n
(
¨gc
, **
¨gv
);

23 
run_èg
(
¨gc
, **
¨gv
);

24 
run_ciÁr
(
¨gc
, **
¨gv
);

25 
run_go
(
¨gc
, **
¨gv
);

26 
run_¨t
(
¨gc
, **
¨gv
);

27 
run_su≥r
(
¨gc
, **
¨gv
);

28 
run_lsd
(
¨gc
, **
¨gv
);

30 
	$avîage
(
¨gc
, *
¨gv
[])

32 *
cfgfûe
 = 
¨gv
[2];

33 *
outfûe
 = 
¨gv
[3];

34 
gpu_ödex
 = -1;

35 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

36 
√tw‹k
 
sum
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

38 *
weightfûe
 = 
¨gv
[4];

39 
	`lﬂd_weights
(&
sum
, 
weightfûe
);

41 
i
, 
j
;

42 
n
 = 
¨gc
 - 5;

43 
i
 = 0; i < 
n
; ++i){

44 
weightfûe
 = 
¨gv
[
i
+5];

45 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

46 
j
 = 0; j < 
√t
.
n
; ++j){

47 
œyî
 
l
 = 
√t
.
œyîs
[
j
];

48 
œyî
 
out
 = 
sum
.
œyîs
[
j
];

49 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

50 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

51 
	`axpy_˝u
(
l
.
n
, 1,Ü.
bü£s
, 1, 
out
.biases, 1);

52 
	`axpy_˝u
(
num
, 1, 
l
.
weights
, 1, 
out
.weights, 1);

53 if(
l
.
b©ch_n‹mÆize
){

54 
	`axpy_˝u
(
l
.
n
, 1,Ü.
sˇÀs
, 1, 
out
.scales, 1);

55 
	`axpy_˝u
(
l
.
n
, 1,Ü.
rﬁlög_món
, 1, 
out
.rolling_mean, 1);

56 
	`axpy_˝u
(
l
.
n
, 1,Ü.
rﬁlög_v¨ün˚
, 1, 
out
.rolling_variance, 1);

59 if(
l
.
ty≥
 =
CONNECTED
){

60 
	`axpy_˝u
(
l
.
ouçuts
, 1,Ü.
bü£s
, 1, 
out
.biases, 1);

61 
	`axpy_˝u
(
l
.
ouçuts
*l.
öputs
, 1,Ü.
weights
, 1, 
out
.weights, 1);

65 
n
 =Ç+1;

66 
j
 = 0; j < 
√t
.
n
; ++j){

67 
œyî
 
l
 = 
sum
.
œyîs
[
j
];

68 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

69 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

70 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
bü£s
, 1);

71 
	`sˇl_˝u
(
num
, 1./
n
, 
l
.
weights
, 1);

72 if(
l
.
b©ch_n‹mÆize
){

73 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
sˇÀs
, 1);

74 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
rﬁlög_món
, 1);

75 
	`sˇl_˝u
(
l
.
n
, 1./n,Ü.
rﬁlög_v¨ün˚
, 1);

78 if(
l
.
ty≥
 =
CONNECTED
){

79 
	`sˇl_˝u
(
l
.
ouçuts
, 1./
n
,Ü.
bü£s
, 1);

80 
	`sˇl_˝u
(
l
.
ouçuts
*l.
öputs
, 1./
n
,Ü.
weights
, 1);

83 
	`ßve_weights
(
sum
, 
outfûe
);

84 
	}
}

86 
	$•ìd
(*
cfgfûe
, 
tics
)

88 i‡(
tics
 == 0)Åics = 1000;

89 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

90 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

91 
i
;

92 
time_t
 
°¨t
 = 
	`time
(0);

93 
image
 
im
 = 
	`make_image
(
√t
.
w
,Çë.
h
,Çë.
c
*√t.
b©ch
);

94 
i
 = 0; i < 
tics
; ++i){

95 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

97 
t
 = 
	`dif·ime
(
	`time
(0), 
°¨t
);

98 
	`¥ötf
("\n%dÉvÆs, %‡Sec⁄ds\n", 
tics
, 
t
);

99 
	`¥ötf
("S≥ed: %‡£c/evÆ\n", 
t
/
tics
);

100 
	`¥ötf
("S≥ed: %‡Hz\n", 
tics
/
t
);

101 
	}
}

103 
	$›î©i⁄s
(*
cfgfûe
)

105 
gpu_ödex
 = -1;

106 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

107 
i
;

108 
›s
 = 0;

109 
i
 = 0; i < 
√t
.
n
; ++i){

110 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

111 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

112 
›s
 +2»* 
l
.
n
 *Ü.
size
*l.size*l.
c
 *Ü.
out_h
*l.
out_w
;

113 } if(
l
.
ty≥
 =
CONNECTED
){

114 
›s
 +2»* 
l
.
öputs
 *Ü.
ouçuts
;

115 } i‡(
l
.
ty≥
 =
RNN
){

116 
›s
 +2»* 
l
.
öput_œyî
->
öputs
 *Ü.öput_œyî->
ouçuts
;

117 
›s
 +2»* 
l
.
£lf_œyî
->
öputs
 *Ü.£lf_œyî->
ouçuts
;

118 
›s
 +2»* 
l
.
ouçut_œyî
->
öputs
 *Ü.ouçut_œyî->
ouçuts
;

119 } i‡(
l
.
ty≥
 =
GRU
){

120 
›s
 +2»* 
l
.
uz
->
öputs
 *Ü.uz->
ouçuts
;

121 
›s
 +2»* 
l
.
uh
->
öputs
 *Ü.uh->
ouçuts
;

122 
›s
 +2»* 
l
.
ur
->
öputs
 *Ü.ur->
ouçuts
;

123 
›s
 +2»* 
l
.
wz
->
öputs
 *Ü.wz->
ouçuts
;

124 
›s
 +2»* 
l
.
wh
->
öputs
 *Ü.wh->
ouçuts
;

125 
›s
 +2»* 
l
.
wr
->
öputs
 *Ü.wr->
ouçuts
;

126 } i‡(
l
.
ty≥
 =
LSTM
){

127 
›s
 +2»* 
l
.
uf
->
öputs
 *Ü.uf->
ouçuts
;

128 
›s
 +2»* 
l
.
ui
->
öputs
 *Ü.ui->
ouçuts
;

129 
›s
 +2»* 
l
.
ug
->
öputs
 *Ü.ug->
ouçuts
;

130 
›s
 +2»* 
l
.
uo
->
öputs
 *Ü.uo->
ouçuts
;

131 
›s
 +2»* 
l
.
wf
->
öputs
 *Ü.wf->
ouçuts
;

132 
›s
 +2»* 
l
.
wi
->
öputs
 *Ü.wi->
ouçuts
;

133 
›s
 +2»* 
l
.
wg
->
öputs
 *Ü.wg->
ouçuts
;

134 
›s
 +2»* 
l
.
wo
->
öputs
 *Ü.wo->
ouçuts
;

137 
	`¥ötf
("Flﬂtög PoöàO≥øti⁄s: %ld\n", 
›s
);

138 
	`¥ötf
("Flﬂtög PoöàO≥øti⁄s: %.2‡Bn\n", ()
›s
/1000000000.);

139 
	}
}

141 
	$⁄eoff
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

143 
gpu_ödex
 = -1;

144 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

145 
ﬁdn
 = 
√t
.
œyîs
[√t.
n
 - 2].n;

146 
c
 = 
√t
.
œyîs
[√t.
n
 - 2].c;

147 
	`sˇl_˝u
(
ﬁdn
*
c
, .1, 
√t
.
œyîs
[√t.
n
 - 2].
weights
, 1);

148 
	`sˇl_˝u
(
ﬁdn
, 0, 
√t
.
œyîs
[√t.
n
 - 2].
bü£s
, 1);

149 
√t
.
œyîs
[√t.
n
 - 2].n = 9418;

150 
√t
.
œyîs
[√t.
n
 - 2].
bü£s
 += 5;

151 
√t
.
œyîs
[√t.
n
 - 2].
weights
 +5*
c
;

152 if(
weightfûe
){

153 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

155 
√t
.
œyîs
[√t.
n
 - 2].
bü£s
 -= 5;

156 
√t
.
œyîs
[√t.
n
 - 2].
weights
 -5*
c
;

157 
√t
.
œyîs
[√t.
n
 - 2].¿
ﬁdn
;

158 
	`¥ötf
("%d\n", 
ﬁdn
);

159 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 2];

160 
	`c›y_˝u
(
l
.
n
/3,Ü.
bü£s
, 1,Ü.biases +Ü.n/3, 1);

161 
	`c›y_˝u
(
l
.
n
/3,Ü.
bü£s
, 1,Ü.biases + 2*l.n/3, 1);

162 
	`c›y_˝u
(
l
.
n
/3*l.
c
,Ü.
weights
, 1,Ü.weights +Ü.n/3*l.c, 1);

163 
	`c›y_˝u
(
l
.
n
/3*l.
c
,Ü.
weights
, 1,Ü.weights + 2*l.n/3*l.c, 1);

164 *
√t
.
£í
 = 0;

165 
	`ßve_weights
(
√t
, 
outfûe
);

166 
	}
}

168 
	$⁄eoff2
(*
cfgfûe
, *
weightfûe
, *
outfûe
, 
l
)

170 
gpu_ödex
 = -1;

171 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

172 if(
weightfûe
){

173 
	`lﬂd_weights_u±o
(&
√t
, 
weightfûe
, 0,Çë.
n
);

174 
	`lﬂd_weights_u±o
(&
√t
, 
weightfûe
, 
l
,Çë.
n
);

176 *
√t
.
£í
 = 0;

177 
	`ßve_weights_u±o
(
√t
, 
outfûe
,Çë.
n
);

178 
	}
}

180 
	$∑πül
(*
cfgfûe
, *
weightfûe
, *
outfûe
, 
max
)

182 
gpu_ödex
 = -1;

183 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

184 if(
weightfûe
){

185 
	`lﬂd_weights_u±o
(&
√t
, 
weightfûe
, 0, 
max
);

187 *
√t
.
£í
 = 0;

188 
	`ßve_weights_u±o
(
√t
, 
outfûe
, 
max
);

189 
	}
}

191 
	$ªsˇÀ_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

193 
gpu_ödex
 = -1;

194 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

195 if(
weightfûe
){

196 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

198 
i
;

199 
i
 = 0; i < 
√t
.
n
; ++i){

200 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

201 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

202 
	`ªsˇÀ_weights
(
l
, 2, -.5);

206 
	`ßve_weights
(
√t
, 
outfûe
);

207 
	}
}

209 
	$rgbgr_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

211 
gpu_ödex
 = -1;

212 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

213 if(
weightfûe
){

214 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

216 
i
;

217 
i
 = 0; i < 
√t
.
n
; ++i){

218 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

219 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

220 
	`rgbgr_weights
(
l
);

224 
	`ßve_weights
(
√t
, 
outfûe
);

225 
	}
}

227 
	$ª£t_n‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

229 
gpu_ödex
 = -1;

230 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

231 i‡(
weightfûe
) {

232 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

234 
i
;

235 
i
 = 0; i < 
√t
.
n
; ++i) {

236 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

237 i‡(
l
.
ty≥
 =
CONVOLUTIONAL
 &&Ü.
b©ch_n‹mÆize
) {

238 
	`dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
l
);

240 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

241 
	`dí‹mÆize_c⁄√˘ed_œyî
(
l
);

243 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

244 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

245 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

246 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

247 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

248 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

249 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

252 
	`ßve_weights
(
√t
, 
outfûe
);

253 
	}
}

255 
œyî
 
	$n‹mÆize_œyî
(
œyî
 
l
, 
n
)

257 
j
;

258 
l
.
b©ch_n‹mÆize
=1;

259 
l
.
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

260 
j
 = 0; j < 
n
; ++j){

261 
l
.
sˇÀs
[
j
] = 1;

263 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
n
, ());

264 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

265  
l
;

266 
	}
}

268 
	$n‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

270 
gpu_ödex
 = -1;

271 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

272 if(
weightfûe
){

273 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

275 
i
;

276 
i
 = 0; i < 
√t
.
n
; ++i){

277 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

278 if(
l
.
ty≥
 =
CONVOLUTIONAL
 && !l.
b©ch_n‹mÆize
){

279 
√t
.
œyîs
[
i
] = 
	`n‹mÆize_œyî
(
l
,Ü.
n
);

281 i‡(
l
.
ty≥
 =
CONNECTED
 && !l.
b©ch_n‹mÆize
) {

282 
√t
.
œyîs
[
i
] = 
	`n‹mÆize_œyî
(
l
,Ü.
ouçuts
);

284 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

285 *
l
.
öput_z_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_z_œyî,Ü.öput_z_œyî->
ouçuts
);

286 *
l
.
öput_r_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_r_œyî,Ü.öput_r_œyî->
ouçuts
);

287 *
l
.
öput_h_œyî
 = 
	`n‹mÆize_œyî
(*l.öput_h_œyî,Ü.öput_h_œyî->
ouçuts
);

288 *
l
.
°©e_z_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_z_œyî,Ü.°©e_z_œyî->
ouçuts
);

289 *
l
.
°©e_r_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_r_œyî,Ü.°©e_r_œyî->
ouçuts
);

290 *
l
.
°©e_h_œyî
 = 
	`n‹mÆize_œyî
(*l.°©e_h_œyî,Ü.°©e_h_œyî->
ouçuts
);

291 
√t
.
œyîs
[
i
].
b©ch_n‹mÆize
=1;

294 
	`ßve_weights
(
√t
, 
outfûe
);

295 
	}
}

297 
	$°©i°ics_√t
(*
cfgfûe
, *
weightfûe
)

299 
gpu_ödex
 = -1;

300 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

301 i‡(
weightfûe
) {

302 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

304 
i
;

305 
i
 = 0; i < 
√t
.
n
; ++i) {

306 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

307 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

308 
	`¥ötf
("C⁄√˘ed Layî %d\n", 
i
);

309 
	`°©i°ics_c⁄√˘ed_œyî
(
l
);

311 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

312 
	`¥ötf
("GRU Layî %d\n", 
i
);

313 
	`¥ötf
("Input Z\n");

314 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

315 
	`¥ötf
("Input R\n");

316 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

317 
	`¥ötf
("Input H\n");

318 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

319 
	`¥ötf
("State Z\n");

320 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

321 
	`¥ötf
("State R\n");

322 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

323 
	`¥ötf
("State H\n");

324 
	`°©i°ics_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

326 
	`¥ötf
("\n");

328 
	}
}

330 
	$dí‹mÆize_√t
(*
cfgfûe
, *
weightfûe
, *
outfûe
)

332 
gpu_ödex
 = -1;

333 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

334 i‡(
weightfûe
) {

335 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

337 
i
;

338 
i
 = 0; i < 
√t
.
n
; ++i) {

339 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

340 i‡((
l
.
ty≥
 =
DECONVOLUTIONAL
 ||Ü.ty≥ =
CONVOLUTIONAL
Ë&&Ü.
b©ch_n‹mÆize
) {

341 
	`dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
l
);

342 
√t
.
œyîs
[
i
].
b©ch_n‹mÆize
=0;

344 i‡(
l
.
ty≥
 =
CONNECTED
 &&Ü.
b©ch_n‹mÆize
) {

345 
	`dí‹mÆize_c⁄√˘ed_œyî
(
l
);

346 
√t
.
œyîs
[
i
].
b©ch_n‹mÆize
=0;

348 i‡(
l
.
ty≥
 =
GRU
 &&Ü.
b©ch_n‹mÆize
) {

349 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_z_œyî
);

350 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_r_œyî
);

351 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
öput_h_œyî
);

352 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_z_œyî
);

353 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_r_œyî
);

354 
	`dí‹mÆize_c⁄√˘ed_œyî
(*
l
.
°©e_h_œyî
);

355 
l
.
öput_z_œyî
->
b©ch_n‹mÆize
 = 0;

356 
l
.
öput_r_œyî
->
b©ch_n‹mÆize
 = 0;

357 
l
.
öput_h_œyî
->
b©ch_n‹mÆize
 = 0;

358 
l
.
°©e_z_œyî
->
b©ch_n‹mÆize
 = 0;

359 
l
.
°©e_r_œyî
->
b©ch_n‹mÆize
 = 0;

360 
l
.
°©e_h_œyî
->
b©ch_n‹mÆize
 = 0;

361 
√t
.
œyîs
[
i
].
b©ch_n‹mÆize
=0;

364 
	`ßve_weights
(
√t
, 
outfûe
);

365 
	}
}

367 
	$mkimg
(*
cfgfûe
, *
weightfûe
, 
h
, 
w
, 
num
, *
¥efix
)

369 
√tw‹k
 
√t
 = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 0);

370 
image
 *
ims
 = 
	`gë_weights
(
√t
.
œyîs
[0]);

371 
n
 = 
√t
.
œyîs
[0].n;

372 
z
;

373 
z
 = 0; z < 
num
; ++z){

374 
image
 
im
 = 
	`make_image
(
h
, 
w
, 3);

375 
	`fûl_image
(
im
, .5);

376 
i
;

377 
i
 = 0; i < 100; ++i){

378 
image
 
r
 = 
	`c›y_image
(
ims
[
	`ønd
()%
n
]);

379 
	`rŸ©e_image_cw
(
r
, 
	`ønd
()%4);

380 
	`øndom_di°‹t_image
(
r
, 1, 1.5, 1.5);

381 
dx
 = 
	`ønd
()%(
w
-
r
.w);

382 
dy
 = 
	`ønd
()%(
h
-
r
.h);

383 
	`gho°_image
(
r
, 
im
, 
dx
, 
dy
);

384 
	`‰ì_image
(
r
);

386 
buff
[256];

387 
	`•rötf
(
buff
, "%s/gí_%d", 
¥efix
, 
z
);

388 
	`ßve_image
(
im
, 
buff
);

389 
	`‰ì_image
(
im
);

391 
	}
}

393 
	$visuÆize
(*
cfgfûe
, *
weightfûe
)

395 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

396 if(
weightfûe
){

397 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

399 
	`visuÆize_√tw‹k
(
√t
);

400 #ifde‡
OPENCV


401 
	`cvWaôKey
(0);

403 
	}
}

405 
	$maö
(
¨gc
, **
¨gv
)

410 if(
¨gc
 < 2){

411 
	`Ârötf
(
°dîr
, "ußge: %†<fun˘i⁄>\n", 
¨gv
[0]);

414 
gpu_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-i", 0);

415 if(
	`föd_¨g
(
¨gc
, 
¨gv
, "-nogpu")) {

416 
gpu_ödex
 = -1;

419 #i‚de‡
GPU


420 
gpu_ödex
 = -1;

422 if(
gpu_ödex
 >= 0){

423 
	`cuda_£t_devi˚
(
gpu_ödex
);

427 i‡(0 =
	`°rcmp
(
¨gv
[1], "average")){

428 
	`avîage
(
¨gc
, 
¨gv
);

429 } i‡(0 =
	`°rcmp
(
¨gv
[1], "yolo")){

430 
	`run_yﬁo
(
¨gc
, 
¨gv
);

431 } i‡(0 =
	`°rcmp
(
¨gv
[1], "voxel")){

432 
	`run_voxñ
(
¨gc
, 
¨gv
);

433 } i‡(0 =
	`°rcmp
(
¨gv
[1], "super")){

434 
	`run_su≥r
(
¨gc
, 
¨gv
);

435 } i‡(0 =
	`°rcmp
(
¨gv
[1], "lsd")){

436 
	`run_lsd
(
¨gc
, 
¨gv
);

437 } i‡(0 =
	`°rcmp
(
¨gv
[1], "detector")){

438 
	`run_dëe˘‹
(
¨gc
, 
¨gv
);

439 } i‡(0 =
	`°rcmp
(
¨gv
[1], "detect")){

440 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .24);

441 *
fûíame
 = (
¨gc
 > 4Ë? 
¨gv
[4]: 0;

442 *
outfûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-out", 0);

443 
fuŒs¸ìn
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-fullscreen");

444 
	`ã°_dëe˘‹
("cfg/coco.d©a", 
¨gv
[2],árgv[3], 
fûíame
, 
thªsh
, .5, 
outfûe
, 
fuŒs¸ìn
);

445 } i‡(0 =
	`°rcmp
(
¨gv
[1], "cifar")){

446 
	`run_ciÁr
(
¨gc
, 
¨gv
);

447 } i‡(0 =
	`°rcmp
(
¨gv
[1], "go")){

448 
	`run_go
(
¨gc
, 
¨gv
);

449 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rnn")){

450 
	`run_ch¨_∫n
(
¨gc
, 
¨gv
);

451 } i‡(0 =
	`°rcmp
(
¨gv
[1], "vid")){

452 
	`run_vid_∫n
(
¨gc
, 
¨gv
);

453 } i‡(0 =
	`°rcmp
(
¨gv
[1], "coco")){

454 
	`run_coco
(
¨gc
, 
¨gv
);

455 } i‡(0 =
	`°rcmp
(
¨gv
[1], "classify")){

456 
	`¥edi˘_˛assifõr
("cfg/imagíë1k.d©a", 
¨gv
[2],árgv[3],árgv[4], 5);

457 } i‡(0 =
	`°rcmp
(
¨gv
[1], "classifier")){

458 
	`run_˛assifõr
(
¨gc
, 
¨gv
);

459 } i‡(0 =
	`°rcmp
(
¨gv
[1], "regressor")){

460 
	`run_ªgªss‹
(
¨gc
, 
¨gv
);

461 } i‡(0 =
	`°rcmp
(
¨gv
[1], "segmenter")){

462 
	`run_£gmíãr
(
¨gc
, 
¨gv
);

463 } i‡(0 =
	`°rcmp
(
¨gv
[1], "art")){

464 
	`run_¨t
(
¨gc
, 
¨gv
);

465 } i‡(0 =
	`°rcmp
(
¨gv
[1], "tag")){

466 
	`run_èg
(
¨gc
, 
¨gv
);

467 } i‡(0 =
	`°rcmp
(
¨gv
[1], "compare")){

468 
	`run_com∑ª
(
¨gc
, 
¨gv
);

469 } i‡(0 =
	`°rcmp
(
¨gv
[1], "dice")){

470 
	`run_di˚
(
¨gc
, 
¨gv
);

471 } i‡(0 =
	`°rcmp
(
¨gv
[1], "writing")){

472 
	`run_wrôög
(
¨gc
, 
¨gv
);

473 } i‡(0 =
	`°rcmp
(
¨gv
[1], "3d")){

474 
	`composôe_3d
(
¨gv
[2],árgv[3],árgv[4], (
¨gc
 > 5Ë? 
	`©of
(argv[5]) : 0);

475 } i‡(0 =
	`°rcmp
(
¨gv
[1], "test")){

476 
	`ã°_ªsize
(
¨gv
[2]);

477 } i‡(0 =
	`°rcmp
(
¨gv
[1], "captcha")){

478 
	`run_ˇ±cha
(
¨gc
, 
¨gv
);

479 } i‡(0 =
	`°rcmp
(
¨gv
[1], "nightmare")){

480 
	`run_nightm¨e
(
¨gc
, 
¨gv
);

481 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rgbgr")){

482 
	`rgbgr_√t
(
¨gv
[2],árgv[3],árgv[4]);

483 } i‡(0 =
	`°rcmp
(
¨gv
[1], "reset")){

484 
	`ª£t_n‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

485 } i‡(0 =
	`°rcmp
(
¨gv
[1], "denormalize")){

486 
	`dí‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

487 } i‡(0 =
	`°rcmp
(
¨gv
[1], "statistics")){

488 
	`°©i°ics_√t
(
¨gv
[2],árgv[3]);

489 } i‡(0 =
	`°rcmp
(
¨gv
[1], "normalize")){

490 
	`n‹mÆize_√t
(
¨gv
[2],árgv[3],árgv[4]);

491 } i‡(0 =
	`°rcmp
(
¨gv
[1], "rescale")){

492 
	`ªsˇÀ_√t
(
¨gv
[2],árgv[3],árgv[4]);

493 } i‡(0 =
	`°rcmp
(
¨gv
[1], "ops")){

494 
	`›î©i⁄s
(
¨gv
[2]);

495 } i‡(0 =
	`°rcmp
(
¨gv
[1], "speed")){

496 
	`•ìd
(
¨gv
[2], (
¨gc
 > 3 &&árgv[3]Ë? 
	`©oi
(argv[3]) : 0);

497 } i‡(0 =
	`°rcmp
(
¨gv
[1], "oneoff")){

498 
	`⁄eoff
(
¨gv
[2],árgv[3],árgv[4]);

499 } i‡(0 =
	`°rcmp
(
¨gv
[1], "oneoff2")){

500 
	`⁄eoff2
(
¨gv
[2],árgv[3],árgv[4], 
	`©oi
(argv[5]));

501 } i‡(0 =
	`°rcmp
(
¨gv
[1], "partial")){

502 
	`∑πül
(
¨gv
[2],árgv[3],árgv[4], 
	`©oi
(argv[5]));

503 } i‡(0 =
	`°rcmp
(
¨gv
[1], "average")){

504 
	`avîage
(
¨gc
, 
¨gv
);

505 } i‡(0 =
	`°rcmp
(
¨gv
[1], "visualize")){

506 
	`visuÆize
(
¨gv
[2], (
¨gc
 > 3) ?árgv[3] : 0);

507 } i‡(0 =
	`°rcmp
(
¨gv
[1], "mkimg")){

508 
	`mkimg
(
¨gv
[2],árgv[3], 
	`©oi
(argv[4]),átoi(argv[5]),átoi(argv[6]),árgv[7]);

509 } i‡(0 =
	`°rcmp
(
¨gv
[1], "imtest")){

510 
	`ã°_ªsize
(
¨gv
[2]);

512 
	`Ârötf
(
°dîr
, "NŸá¿›ti⁄: %s\n", 
¨gv
[1]);

515 
	}
}

	@examples/detector.c

1 
	~"d¨k√t.h
"

3 
	gcoco_ids
[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};

5 
	$åaö_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

7 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

8 *
åaö_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

9 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

11 
	`§™d
(
	`time
(0));

12 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

13 
	`¥ötf
("%s\n", 
ba£
);

14 
avg_loss
 = -1;

15 
√tw‹k
 *
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

17 
	`§™d
(
	`time
(0));

18 
£ed
 = 
	`ønd
();

19 
i
;

20 
i
 = 0; i < 
ngpus
; ++i){

21 
	`§™d
(
£ed
);

22 #ifde‡
GPU


23 
	`cuda_£t_devi˚
(
gpus
[
i
]);

25 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

26 
√ts
[
i
].
À¨nög_øã
 *
ngpus
;

28 
	`§™d
(
	`time
(0));

29 
√tw‹k
 
√t
 = 
√ts
[0];

31 
imgs
 = 
√t
.
b©ch
 *Çë.
subdivisi⁄s
 * 
ngpus
;

32 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

33 
d©a
 
åaö
, 
buf„r
;

35 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 1];

37 
˛as£s
 = 
l
.classes;

38 
jôãr
 = 
l
.jitter;

40 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

42 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

44 
lﬂd_¨gs
 
¨gs
 = {0};

45 
¨gs
.
w
 = 
√t
.w;

46 
¨gs
.
h
 = 
√t
.h;

47 
¨gs
.
∑ths
 =Öaths;

48 
¨gs
.
n
 = 
imgs
;

49 
¨gs
.
m
 = 
∂i°
->
size
;

50 
¨gs
.
˛as£s
 = classes;

51 
¨gs
.
jôãr
 = jitter;

52 
¨gs
.
num_boxes
 = 
l
.
max_boxes
;

53 
¨gs
.
d
 = &
buf„r
;

54 
¨gs
.
ty≥
 = 
DETECTION_DATA
;

55 
¨gs
.
thªads
 = 8;

57 
¨gs
.
™gÀ
 = 
√t
.angle;

58 
¨gs
.
exposuª
 = 
√t
.exposure;

59 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

60 
¨gs
.
hue
 = 
√t
.hue;

62 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

63 
˛ock_t
 
time
;

64 
cou¡
 = 0;

66 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

67 if(
l
.
øndom
 && 
cou¡
++%10 == 0){

68 
	`¥ötf
("Resizing\n");

69 
dim
 = (
	`ønd
() % 10 + 10) * 32;

70 i‡(
	`gë_cuºít_b©ch
(
√t
)+200 >Çë.
max_b©ches
Ë
dim
 = 608;

72 
	`¥ötf
("%d\n", 
dim
);

73 
¨gs
.
w
 = 
dim
;

74 
¨gs
.
h
 = 
dim
;

76 
	`±hªad_joö
(
lﬂd_thªad
, 0);

77 
åaö
 = 
buf„r
;

78 
	`‰ì_d©a
(
åaö
);

79 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

81 
i
 = 0; i < 
ngpus
; ++i){

82 
	`ªsize_√tw‹k
(
√ts
 + 
i
, 
dim
, dim);

84 
√t
 = 
√ts
[0];

86 
time
=
	`˛ock
();

87 
	`±hªad_joö
(
lﬂd_thªad
, 0);

88 
åaö
 = 
buf„r
;

89 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

115 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

117 
time
=
	`˛ock
();

118 
loss
 = 0;

119 #ifde‡
GPU


120 if(
ngpus
 == 1){

121 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

123 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

126 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

128 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

129 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

131 
i
 = 
	`gë_cuºít_b©ch
(
√t
);

132 
	`¥ötf
("%ld: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
	`gë_cuºít_b©ch
(
√t
), 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), 
i
*
imgs
);

133 if(
i
%1000==0){

134 #ifde‡
GPU


135 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

137 
buff
[256];

138 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

139 
	`ßve_weights
(
√t
, 
buff
);

141 if(
i
%10000==0 || (i < 1000 && i%100 == 0)){

142 #ifde‡
GPU


143 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

145 
buff
[256];

146 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

147 
	`ßve_weights
(
√t
, 
buff
);

149 
	`‰ì_d©a
(
åaö
);

151 #ifde‡
GPU


152 if(
ngpus
 !1Ë
	`sync_√ts
(
√ts
,Çgpus, 0);

154 
buff
[256];

155 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

156 
	`ßve_weights
(
√t
, 
buff
);

157 
	}
}

160 
	$gë_coco_image_id
(*
fûíame
)

162 *
p
 = 
	`°ºchr
(
fûíame
, '_');

163  
	`©oi
(
p
+1);

164 
	}
}

166 
	$¥öt_cocos
(
FILE
 *
Â
, *
image_∑th
, 
box
 *
boxes
, **
¥obs
, 
num_boxes
, 
˛as£s
, 
w
, 
h
)

168 
i
, 
j
;

169 
image_id
 = 
	`gë_coco_image_id
(
image_∑th
);

170 
i
 = 0; i < 
num_boxes
; ++i){

171 
xmö
 = 
boxes
[
i
].
x
 - boxes[i].
w
/2.;

172 
xmax
 = 
boxes
[
i
].
x
 + boxes[i].
w
/2.;

173 
ymö
 = 
boxes
[
i
].
y
 - boxes[i].
h
/2.;

174 
ymax
 = 
boxes
[
i
].
y
 + boxes[i].
h
/2.;

176 i‡(
xmö
 < 0) xmin = 0;

177 i‡(
ymö
 < 0) ymin = 0;

178 i‡(
xmax
 > 
w
) xmax = w;

179 i‡(
ymax
 > 
h
) ymax = h;

181 
bx
 = 
xmö
;

182 
by
 = 
ymö
;

183 
bw
 = 
xmax
 - 
xmö
;

184 
bh
 = 
ymax
 - 
ymö
;

186 
j
 = 0; j < 
˛as£s
; ++j){

187 i‡(
¥obs
[
i
][
j
]Ë
	`Ârötf
(
Â
, "{\"image_id\":%d, \"ˇãg‹y_id\":%d, \"bbox\":[%f, %f, %f, %f], \"sc‹e\":%f},\n", 
image_id
, 
coco_ids
[j], 
bx
, 
by
, 
bw
, 
bh
,Örobs[i][j]);

190 
	}
}

192 
	$¥öt_dëe˘‹_dëe˘i⁄s
(
FILE
 **
Âs
, *
id
, 
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
)

194 
i
, 
j
;

195 
i
 = 0; i < 
tŸÆ
; ++i){

196 
xmö
 = 
boxes
[
i
].
x
 - boxes[i].
w
/2. + 1;

197 
xmax
 = 
boxes
[
i
].
x
 + boxes[i].
w
/2. + 1;

198 
ymö
 = 
boxes
[
i
].
y
 - boxes[i].
h
/2. + 1;

199 
ymax
 = 
boxes
[
i
].
y
 + boxes[i].
h
/2. + 1;

201 i‡(
xmö
 < 1) xmin = 1;

202 i‡(
ymö
 < 1) ymin = 1;

203 i‡(
xmax
 > 
w
) xmax = w;

204 i‡(
ymax
 > 
h
) ymax = h;

206 
j
 = 0; j < 
˛as£s
; ++j){

207 i‡(
¥obs
[
i
][
j
]Ë
	`Ârötf
(
Âs
[j], "%†%‡%‡%‡%‡%f\n", 
id
,Örobs[i][j],

208 
xmö
, 
ymö
, 
xmax
, 
ymax
);

211 
	}
}

213 
	$¥öt_imagíë_dëe˘i⁄s
(
FILE
 *
Â
, 
id
, 
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
)

215 
i
, 
j
;

216 
i
 = 0; i < 
tŸÆ
; ++i){

217 
xmö
 = 
boxes
[
i
].
x
 - boxes[i].
w
/2.;

218 
xmax
 = 
boxes
[
i
].
x
 + boxes[i].
w
/2.;

219 
ymö
 = 
boxes
[
i
].
y
 - boxes[i].
h
/2.;

220 
ymax
 = 
boxes
[
i
].
y
 + boxes[i].
h
/2.;

222 i‡(
xmö
 < 0) xmin = 0;

223 i‡(
ymö
 < 0) ymin = 0;

224 i‡(
xmax
 > 
w
) xmax = w;

225 i‡(
ymax
 > 
h
) ymax = h;

227 
j
 = 0; j < 
˛as£s
; ++j){

228 
˛ass
 = 
j
;

229 i‡(
¥obs
[
i
][
˛ass
]Ë
	`Ârötf
(
Â
, "%d %d %‡%‡%‡%‡%f\n", 
id
, 
j
+1,Örobs[i][class],

230 
xmö
, 
ymö
, 
xmax
, 
ymax
);

233 
	}
}

235 
	$vÆid©e_dëe˘‹_Êù
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
outfûe
)

237 
j
;

238 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

239 *
vÆid_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

240 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

241 *
¥efix
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "results", "results");

242 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

243 *
m≠f
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "map", 0);

244 *
m≠
 = 0;

245 i‡(
m≠f
Ë
m≠
 = 
	`ªad_m≠
(mapf);

247 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

248 if(
weightfûe
){

249 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

251 
	`£t_b©ch_√tw‹k
(&
√t
, 2);

252 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

253 
	`§™d
(
	`time
(0));

255 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_images
);

256 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

258 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

259 
˛as£s
 = 
l
.classes;

261 
buff
[1024];

262 *
ty≥
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "eval", "voc");

263 
FILE
 *
Â
 = 0;

264 
FILE
 **
Âs
 = 0;

265 
coco
 = 0;

266 
imagíë
 = 0;

267 if(0==
	`°rcmp
(
ty≥
, "coco")){

268 if(!
outfûe
) outfile = "coco_results";

269 
	`¢¥ötf
(
buff
, 1024, "%s/%s.js⁄", 
¥efix
, 
outfûe
);

270 
Â
 = 
	`f›í
(
buff
, "w");

271 
	`Ârötf
(
Â
, "[\n");

272 
coco
 = 1;

273 } if(0==
	`°rcmp
(
ty≥
, "imagenet")){

274 if(!
outfûe
) outfile = "imagenet-detection";

275 
	`¢¥ötf
(
buff
, 1024, "%s/%s.txt", 
¥efix
, 
outfûe
);

276 
Â
 = 
	`f›í
(
buff
, "w");

277 
imagíë
 = 1;

278 
˛as£s
 = 200;

280 if(!
outfûe
) outfile = "comp4_det_test_";

281 
Âs
 = 
	`ˇŒoc
(
˛as£s
, (
FILE
 *));

282 
j
 = 0; j < 
˛as£s
; ++j){

283 
	`¢¥ötf
(
buff
, 1024, "%s/%s%s.txt", 
¥efix
, 
outfûe
, 
«mes
[
j
]);

284 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

289 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (box));

290 **
¥obs
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (*));

291 
j
 = 0; j < 
l
.
w
*l.
h
*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
+1, (*));

293 
m
 = 
∂i°
->
size
;

294 
i
=0;

295 
t
;

297 
thªsh
 = .005;

298 
nms
 = .45;

300 
¡hªads
 = 4;

301 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

302 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

303 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

304 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

305 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

307 
image
 
öput
 = 
	`make_image
(
√t
.
w
,Çë.
h
,Çë.
c
*2);

309 
lﬂd_¨gs
 
¨gs
 = {0};

310 
¨gs
.
w
 = 
√t
.w;

311 
¨gs
.
h
 = 
√t
.h;

313 
¨gs
.
ty≥
 = 
LETTERBOX_DATA
;

315 
t
 = 0;Å < 
¡hªads
; ++t){

316 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

317 
¨gs
.
im
 = &
buf
[
t
];

318 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

319 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

321 
time_t
 
°¨t
 = 
	`time
(0);

322 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

323 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

324 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

325 
	`±hªad_joö
(
thr
[
t
], 0);

326 
vÆ
[
t
] = 
buf
[t];

327 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

329 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

330 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

331 
¨gs
.
im
 = &
buf
[
t
];

332 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

333 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

335 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

336 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

337 *
id
 = 
	`ba£cfg
(
∑th
);

338 
	`c›y_˝u
(
√t
.
w
*√t.
h
*√t.
c
, 
vÆ_ªsized
[
t
].
d©a
, 1, 
öput
.data, 1);

339 
	`Êù_image
(
vÆ_ªsized
[
t
]);

340 
	`c›y_˝u
(
√t
.
w
*√t.
h
*√t.
c
, 
vÆ_ªsized
[
t
].
d©a
, 1, 
öput
.data +Çet.w*net.h*net.c, 1);

342 
	`√tw‹k_¥edi˘
(
√t
, 
öput
.
d©a
);

343 
w
 = 
vÆ
[
t
].w;

344 
h
 = 
vÆ
[
t
].h;

345 
	`gë_ªgi⁄_boxes
(
l
, 
w
, 
h
, 
√t
.w,Çë.h, 
thªsh
, 
¥obs
, 
boxes
, 0, 
m≠
, .5, 0);

346 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
,Çms);

347 i‡(
coco
){

348 
	`¥öt_cocos
(
Â
, 
∑th
, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

349 } i‡(
imagíë
){

350 
	`¥öt_imagíë_dëe˘i⁄s
(
Â
, 
i
+
t
-
¡hªads
+1, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

352 
	`¥öt_dëe˘‹_dëe˘i⁄s
(
Âs
, 
id
, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

354 
	`‰ì
(
id
);

355 
	`‰ì_image
(
vÆ
[
t
]);

356 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

359 
j
 = 0; j < 
˛as£s
; ++j){

360 if(
Âs
Ë
	`f˛o£
(Âs[
j
]);

362 if(
coco
){

363 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

364 
	`Ârötf
(
Â
, "\n]\n");

365 
	`f˛o£
(
Â
);

367 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

368 
	}
}

371 
	$vÆid©e_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
outfûe
)

373 
j
;

374 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

375 *
vÆid_images
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "valid", "data/train.list");

376 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

377 *
¥efix
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "results", "results");

378 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

379 *
m≠f
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "map", 0);

380 *
m≠
 = 0;

381 i‡(
m≠f
Ë
m≠
 = 
	`ªad_m≠
(mapf);

383 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

384 if(
weightfûe
){

385 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

387 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

388 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

389 
	`§™d
(
	`time
(0));

391 
li°
 *
∂i°
 = 
	`gë_∑ths
(
vÆid_images
);

392 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

394 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

395 
˛as£s
 = 
l
.classes;

397 
buff
[1024];

398 *
ty≥
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "eval", "voc");

399 
FILE
 *
Â
 = 0;

400 
FILE
 **
Âs
 = 0;

401 
coco
 = 0;

402 
imagíë
 = 0;

403 if(0==
	`°rcmp
(
ty≥
, "coco")){

404 if(!
outfûe
) outfile = "coco_results";

405 
	`¢¥ötf
(
buff
, 1024, "%s/%s.js⁄", 
¥efix
, 
outfûe
);

406 
Â
 = 
	`f›í
(
buff
, "w");

407 
	`Ârötf
(
Â
, "[\n");

408 
coco
 = 1;

409 } if(0==
	`°rcmp
(
ty≥
, "imagenet")){

410 if(!
outfûe
) outfile = "imagenet-detection";

411 
	`¢¥ötf
(
buff
, 1024, "%s/%s.txt", 
¥efix
, 
outfûe
);

412 
Â
 = 
	`f›í
(
buff
, "w");

413 
imagíë
 = 1;

414 
˛as£s
 = 200;

416 if(!
outfûe
) outfile = "comp4_det_test_";

417 
Âs
 = 
	`ˇŒoc
(
˛as£s
, (
FILE
 *));

418 
j
 = 0; j < 
˛as£s
; ++j){

419 
	`¢¥ötf
(
buff
, 1024, "%s/%s%s.txt", 
¥efix
, 
outfûe
, 
«mes
[
j
]);

420 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

425 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (box));

426 **
¥obs
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (*));

427 
j
 = 0; j < 
l
.
w
*l.
h
*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
+1, (*));

429 
m
 = 
∂i°
->
size
;

430 
i
=0;

431 
t
;

433 
thªsh
 = .005;

434 
nms
 = .45;

436 
¡hªads
 = 4;

437 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

438 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

439 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

440 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

441 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

443 
lﬂd_¨gs
 
¨gs
 = {0};

444 
¨gs
.
w
 = 
√t
.w;

445 
¨gs
.
h
 = 
√t
.h;

447 
¨gs
.
ty≥
 = 
LETTERBOX_DATA
;

449 
t
 = 0;Å < 
¡hªads
; ++t){

450 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

451 
¨gs
.
im
 = &
buf
[
t
];

452 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

453 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

455 
time_t
 
°¨t
 = 
	`time
(0);

456 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

457 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

458 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

459 
	`±hªad_joö
(
thr
[
t
], 0);

460 
vÆ
[
t
] = 
buf
[t];

461 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

463 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

464 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

465 
¨gs
.
im
 = &
buf
[
t
];

466 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

467 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

469 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

470 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

471 *
id
 = 
	`ba£cfg
(
∑th
);

472 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

473 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

474 
w
 = 
vÆ
[
t
].w;

475 
h
 = 
vÆ
[
t
].h;

476 
	`gë_ªgi⁄_boxes
(
l
, 
w
, 
h
, 
√t
.w,Çë.h, 
thªsh
, 
¥obs
, 
boxes
, 0, 
m≠
, .5, 0);

477 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
,Çms);

478 i‡(
coco
){

479 
	`¥öt_cocos
(
Â
, 
∑th
, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

480 } i‡(
imagíë
){

481 
	`¥öt_imagíë_dëe˘i⁄s
(
Â
, 
i
+
t
-
¡hªads
+1, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

483 
	`¥öt_dëe˘‹_dëe˘i⁄s
(
Âs
, 
id
, 
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 
˛as£s
, w, h);

485 
	`‰ì
(
id
);

486 
	`‰ì_image
(
vÆ
[
t
]);

487 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

490 
j
 = 0; j < 
˛as£s
; ++j){

491 if(
Âs
Ë
	`f˛o£
(Âs[
j
]);

493 if(
coco
){

494 
	`f£ek
(
Â
, -2, 
SEEK_CUR
);

495 
	`Ârötf
(
Â
, "\n]\n");

496 
	`f˛o£
(
Â
);

498 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

499 
	}
}

501 
	$vÆid©e_dëe˘‹_ªˇŒ
(*
cfgfûe
, *
weightfûe
)

503 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

504 if(
weightfûe
){

505 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

507 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

508 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

509 
	`§™d
(
	`time
(0));

511 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/voc.2007.test");

512 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

514 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

515 
˛as£s
 = 
l
.classes;

517 
j
, 
k
;

518 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (box));

519 **
¥obs
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (*));

520 
j
 = 0; j < 
l
.
w
*l.
h
*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
+1, (*));

522 
m
 = 
∂i°
->
size
;

523 
i
=0;

525 
thªsh
 = .001;

526 
iou_thªsh
 = .5;

527 
nms
 = .4;

529 
tŸÆ
 = 0;

530 
c‹ª˘
 = 0;

531 
¥›oßls
 = 0;

532 
avg_iou
 = 0;

534 
i
 = 0; i < 
m
; ++i){

535 *
∑th
 = 
∑ths
[
i
];

536 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

537 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
.
w
,Çë.
h
);

538 *
id
 = 
	`ba£cfg
(
∑th
);

539 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

540 
	`gë_ªgi⁄_boxes
(
l
, 
sized
.
w
, sized.
h
, 
√t
.w,Çë.h, 
thªsh
, 
¥obs
, 
boxes
, 1, 0, .5, 1);

541 i‡(
nms
Ë
	`do_nms
(
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
, 1,Çms);

543 
œbñ∑th
[4096];

544 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

545 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

546 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

547 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

549 
num_œbñs
 = 0;

550 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

551 
k
 = 0; k < 
l
.
w
*l.
h
*l.
n
; ++k){

552 if(
¥obs
[
k
][0] > 
thªsh
){

553 ++
¥›oßls
;

556 
j
 = 0; j < 
num_œbñs
; ++j) {

557 ++
tŸÆ
;

558 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

559 
be°_iou
 = 0;

560 
k
 = 0; k < 
l
.
w
*l.
h
*l.
n
; ++k){

561 
iou
 = 
	`box_iou
(
boxes
[
k
], 
t
);

562 if(
¥obs
[
k
][0] > 
thªsh
 && 
iou
 > 
be°_iou
){

563 
be°_iou
 = 
iou
;

566 
avg_iou
 +
be°_iou
;

567 if(
be°_iou
 > 
iou_thªsh
){

568 ++
c‹ª˘
;

572 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

573 
	`‰ì
(
id
);

574 
	`‰ì_image
(
‹ig
);

575 
	`‰ì_image
(
sized
);

577 
	}
}

579 
	$ã°_dëe˘‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
, 
hõr_thªsh
, *
outfûe
, 
fuŒs¸ìn
)

581 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

582 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

583 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

585 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

586 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

587 if(
weightfûe
){

588 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

590 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

591 
	`§™d
(2222222);

592 
˛ock_t
 
time
;

593 
buff
[256];

594 *
öput
 = 
buff
;

595 
j
;

596 
nms
=.4;

598 if(
fûíame
){

599 
	`°∫˝y
(
öput
, 
fûíame
, 256);

601 
	`¥ötf
("Enter Image Path: ");

602 
	`fÊush
(
°dout
);

603 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

604 if(!
öput
) ;

605 
	`°πok
(
öput
, "\n");

607 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

608 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
.
w
,Çë.
h
);

613 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

615 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (box));

616 **
¥obs
 = 
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (*));

617 
j
 = 0; j < 
l
.
w
*l.
h
*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
÷.
˛as£s
 + 1, (*));

619 *
X
 = 
sized
.
d©a
;

620 
time
=
	`˛ock
();

621 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

622 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

623 
	`gë_ªgi⁄_boxes
(
l
, 
im
.
w
, im.
h
, 
√t
.w,Çë.h, 
thªsh
, 
¥obs
, 
boxes
, 0, 0, 
hõr_thªsh
, 1);

624 i‡(
nms
Ë
	`do_nms_obj
(
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
,Ü.
˛as£s
,Çms);

626 
	`døw_dëe˘i⁄s
(
im
, 
l
.
w
*l.
h
*l.
n
, 
thªsh
, 
boxes
, 
¥obs
, 
«mes
, 
Æphabë
,Ü.
˛as£s
);

627 if(
outfûe
){

628 
	`ßve_image
(
im
, 
outfûe
);

631 
	`ßve_image
(
im
, "predictions");

632 #ifde‡
OPENCV


633 
	`cvNamedWödow
("¥edi˘i⁄s", 
CV_WINDOW_NORMAL
);

634 if(
fuŒs¸ìn
){

635 
	`cvSëWödowPr›îty
("¥edi˘i⁄s", 
CV_WND_PROP_FULLSCREEN
, 
CV_WINDOW_FULLSCREEN
);

637 
	`show_image
(
im
, "predictions");

638 
	`cvWaôKey
(0);

639 
	`cvDe°royAŒWödows
();

643 
	`‰ì_image
(
im
);

644 
	`‰ì_image
(
sized
);

645 
	`‰ì
(
boxes
);

646 
	`‰ì_±rs
((**)
¥obs
, 
l
.
w
*l.
h
*l.
n
);

647 i‡(
fûíame
) ;

649 
	}
}

651 
	$run_dëe˘‹
(
¨gc
, **
¨gv
)

653 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

654 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .24);

655 
hõr_thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-hier", .5);

656 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

657 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

658 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 3);

659 if(
¨gc
 < 4){

660 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

663 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

664 *
outfûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-out", 0);

665 *
gpus
 = 0;

666 
gpu
 = 0;

667 
ngpus
 = 0;

668 if(
gpu_li°
){

669 
	`¥ötf
("%s\n", 
gpu_li°
);

670 
Àn
 = 
	`°æí
(
gpu_li°
);

671 
ngpus
 = 1;

672 
i
;

673 
i
 = 0; i < 
Àn
; ++i){

674 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

676 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

677 
i
 = 0; i < 
ngpus
; ++i){

678 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

679 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

682 
gpu
 = 
gpu_ödex
;

683 
gpus
 = &
gpu
;

684 
ngpus
 = 1;

687 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

688 
fuŒs¸ìn
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-fullscreen");

689 
width
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-w", 0);

690 
height
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-h", 0);

691 
Âs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-fps", 0);

693 *
d©acfg
 = 
¨gv
[3];

694 *
cfg
 = 
¨gv
[4];

695 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

696 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

697 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
fûíame
, 
thªsh
, 
hõr_thªsh
, 
outfûe
, 
fuŒs¸ìn
);

698 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

699 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

700 if(0==
	`°rcmp
(
¨gv
[2], "vÆid2")Ë
	`vÆid©e_dëe˘‹_Êù
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

701 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_dëe˘‹_ªˇŒ
(
cfg
, 
weights
);

702 if(0==
	`°rcmp
(
¨gv
[2], "demo")) {

703 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

704 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 20);

705 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

706 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

707 
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
«mes
, 
˛as£s
, 
‰ame_skù
, 
¥efix
, 
avg
, 
hõr_thªsh
, 
width
, 
height
, 
Âs
, 
fuŒs¸ìn
);

709 
	}
}

	@examples/dice.c

1 
	~"d¨k√t.h
"

3 *
	gdi˚_œbñs
[] = {"face1","face2","face3","face4","face5","face6"};

5 
	$åaö_di˚
(*
cfgfûe
, *
weightfûe
)

7 
	`§™d
(
	`time
(0));

8 
avg_loss
 = -1;

9 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

10 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

11 
	`¥ötf
("%s\n", 
ba£
);

12 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

13 if(
weightfûe
){

14 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

16 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

17 
imgs
 = 1024;

18 
i
 = *
√t
.
£í
/
imgs
;

19 **
œbñs
 = 
di˚_œbñs
;

20 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/dice/dice.train.list");

21 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

22 
	`¥ötf
("%d\n", 
∂i°
->
size
);

23 
˛ock_t
 
time
;

25 ++
i
;

26 
time
=
	`˛ock
();

27 
d©a
 
åaö
 = 
	`lﬂd_d©a_ﬁd
(
∑ths
, 
imgs
, 
∂i°
->
size
, 
œbñs
, 6, 
√t
.
w
,Çë.
h
);

28 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

30 
time
=
	`˛ock
();

31 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

32 if(
avg_loss
 =-1Ëavg_los†
loss
;

33 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

34 
	`¥ötf
("%d: %f, %‡avg, %l‡£c⁄ds, %ld images\n", 
i
, 
loss
, 
avg_loss
, 
	`£c
(
	`˛ock
()-
time
), *
√t
.
£í
);

35 
	`‰ì_d©a
(
åaö
);

36 if((
i
 % 100Ë=0Ë
√t
.
À¨nög_øã
 *= .1;

37 if(
i
%100==0){

38 
buff
[256];

39 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
i
);

40 
	`ßve_weights
(
√t
, 
buff
);

43 
	}
}

45 
	$vÆid©e_di˚
(*
fûíame
, *
weightfûe
)

47 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

48 if(
weightfûe
){

49 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

51 
	`§™d
(
	`time
(0));

53 **
œbñs
 = 
di˚_œbñs
;

54 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/dice/dice.val.list");

56 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

57 
m
 = 
∂i°
->
size
;

58 
	`‰ì_li°
(
∂i°
);

60 
d©a
 
vÆ
 = 
	`lﬂd_d©a_ﬁd
(
∑ths
, 
m
, 0, 
œbñs
, 6, 
√t
.
w
,Çë.
h
);

61 *
acc
 = 
	`√tw‹k_accuøcõs
(
√t
, 
vÆ
, 2);

62 
	`¥ötf
("VÆid©i⁄ Accuøcy: %f, %d images\n", 
acc
[0], 
m
);

63 
	`‰ì_d©a
(
vÆ
);

64 
	}
}

66 
	$ã°_di˚
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

68 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

69 if(
weightfûe
){

70 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

72 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

73 
	`§™d
(2222222);

74 
i
 = 0;

75 **
«mes
 = 
di˚_œbñs
;

76 
buff
[256];

77 *
öput
 = 
buff
;

78 
ödexes
[6];

80 if(
fûíame
){

81 
	`°∫˝y
(
öput
, 
fûíame
, 256);

83 
	`¥ötf
("Enter Image Path: ");

84 
	`fÊush
(
°dout
);

85 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

86 if(!
öput
) ;

87 
	`°πok
(
öput
, "\n");

89 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 
√t
.
w
,Çë.
h
);

90 *
X
 = 
im
.
d©a
;

91 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

92 
	`t›_¥edi˘i⁄s
(
√t
, 6, 
ödexes
);

93 
i
 = 0; i < 6; ++i){

94 
ödex
 = 
ödexes
[
i
];

95 
	`¥ötf
("%s: %f\n", 
«mes
[
ödex
], 
¥edi˘i⁄s
[index]);

97 
	`‰ì_image
(
im
);

98 i‡(
fûíame
) ;

100 
	}
}

102 
	$run_di˚
(
¨gc
, **
¨gv
)

104 if(
¨gc
 < 4){

105 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

109 *
cfg
 = 
¨gv
[3];

110 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

111 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

112 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_di˚
(
cfg
, 
weights
, 
fûíame
);

113 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_di˚
(
cfg
, 
weights
);

114 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_di˚
(
cfg
, 
weights
);

115 
	}
}

	@examples/go.c

1 
	~"d¨k√t.h
"

3 
	~<uni°d.h
>

5 
	gövîãd
 = 1;

6 
	gnoi
 = 1;

7 c⁄° 
	gnöd
 = 2;

10 **
	md©a
;

11 
	mn
;

12 } 
	tmoves
;

14 *
	$fgëgo
(
FILE
 *
Â
)

16 if(
	`„of
(
Â
))  0;

17 
size_t
 
size
 = 94;

18 *
löe
 = 
	`mÆloc
(
size
*());

19 if(
size
 !
	`‰ód
(
löe
, (), size, 
Â
)){

20 
	`‰ì
(
löe
);

24  
löe
;

25 
	}
}

27 
moves
 
	$lﬂd_go_moves
(*
fûíame
)

29 
moves
 
m
;

30 
m
.
n
 = 128;

31 
m
.
d©a
 = 
	`ˇŒoc
(128, (*));

32 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

33 
cou¡
 = 0;

34 *
löe
 = 0;

35 (
löe
 = 
	`fgëgo
(
Â
))){

36 if(
cou¡
 >
m
.
n
){

37 
m
.
n
 *= 2;

38 
m
.
d©a
 = 
	`ªÆloc
(m.d©a, m.
n
*(*));

40 
m
.
d©a
[
cou¡
] = 
löe
;

41 ++
cou¡
;

43 
	`¥ötf
("%d\n", 
cou¡
);

44 
m
.
n
 = 
cou¡
;

45 
m
.
d©a
 = 
	`ªÆloc
(m.d©a, 
cou¡
*(*));

46  
m
;

47 
	}
}

49 
	$°rög_to_bﬂrd
(*
s
, *
bﬂrd
)

51 
i
, 
j
;

53 
cou¡
 = 0;

54 
i
 = 0; i < 91; ++i){

55 
c
 = 
s
[
i
];

56 
j
 = 0; j < 4; ++j){

57 
me
 = (
c
 >> (2*
j
)) & 1;

58 
you
 = (
c
 >> (2*
j
 + 1)) & 1;

59 i‡(
me
Ë
bﬂrd
[
cou¡
] = 1;

60 i‡(
you
Ë
bﬂrd
[
cou¡
] = -1;

61 
bﬂrd
[
cou¡
] = 0;

62 ++
cou¡
;

63 if(
cou¡
 >= 19*19) ;

66 
	}
}

68 
	$bﬂrd_to_°rög
(*
s
, *
bﬂrd
)

70 
i
, 
j
;

71 
	`mem£t
(
s
, 0, (19*19/4+1)*());

72 
cou¡
 = 0;

73 
i
 = 0; i < 91; ++i){

74 
j
 = 0; j < 4; ++j){

75 
me
 = (
bﬂrd
[
cou¡
] == 1);

76 
you
 = (
bﬂrd
[
cou¡
] == -1);

77 i‡(
me
Ë
s
[
i
] = s[i] | (1<<(2*
j
));

78 i‡(
you
Ë
s
[
i
] = s[i] | (1<<(2*
j
 + 1));

79 ++
cou¡
;

80 if(
cou¡
 >= 19*19) ;

83 
	}
}

85 
d©a
 
	$øndom_go_moves
(
moves
 
m
, 
n
)

87 
d©a
 
d
 = {0};

88 
d
.
X
 = 
	`make_m©rix
(
n
, 19*19);

89 
d
.
y
 = 
	`make_m©rix
(
n
, 19*19+1);

90 
i
;

91 
i
 = 0; i < 
n
; ++i){

92 *
bﬂrd
 = 
d
.
X
.
vÆs
[
i
];

93 *
œbñ
 = 
d
.
y
.
vÆs
[
i
];

94 *
b
 = 
m
.
d©a
[
	`ønd
()%m.
n
];

95 
row
 = 
b
[0];

96 
cﬁ
 = 
b
[1];

97 if(
row
 >19 || 
cﬁ
 >= 19){

98 
œbñ
[19*19] = 1;

100 
œbñ
[
cﬁ
 + 19*
row
] = 1;

101 
	`°rög_to_bﬂrd
(
b
+2, 
bﬂrd
);

102 if(
bﬂrd
[
cﬁ
 + 19*
row
]Ë
	`¥ötf
("hey\n");

105 
Êù
 = 
	`ønd
()%2;

106 
rŸ©e
 = 
	`ønd
()%4;

107 
image
 
ö
 = 
	`Êﬂt_to_image
(19, 19, 1, 
bﬂrd
);

108 
image
 
out
 = 
	`Êﬂt_to_image
(19, 19, 1, 
œbñ
);

109 if(
Êù
){

110 
	`Êù_image
(
ö
);

111 
	`Êù_image
(
out
);

113 
	`rŸ©e_image_cw
(
ö
, 
rŸ©e
);

114 
	`rŸ©e_image_cw
(
out
, 
rŸ©e
);

116  
d
;

117 
	}
}

120 
	$åaö_go
(*
cfgfûe
, *
weightfûe
, *
fûíame
, *
gpus
, 
ngpus
, 
˛ór
)

122 
i
;

123 
avg_loss
 = -1;

124 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

125 
	`¥ötf
("%s\n", 
ba£
);

126 
	`¥ötf
("%d\n", 
ngpus
);

127 
√tw‹k
 *
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

129 
	`§™d
(
	`time
(0));

130 
£ed
 = 
	`ønd
();

131 
i
 = 0; i < 
ngpus
; ++i){

132 
	`§™d
(
£ed
);

133 #ifde‡
GPU


134 
	`cuda_£t_devi˚
(
gpus
[
i
]);

136 
√ts
[
i
] = 
	`lﬂd_√tw‹k
(
cfgfûe
, 
weightfûe
, 
˛ór
);

137 
√ts
[
i
].
À¨nög_øã
 *
ngpus
;

139 
√tw‹k
 
√t
 = 
√ts
[0];

140 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

142 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

144 
buff
[256];

145 
moves
 
m
 = 
	`lﬂd_go_moves
(
fûíame
);

148 
N
 = 
m
.
n
;

149 
	`¥ötf
("Moves: %d\n", 
N
);

150 
ïoch
 = (*
√t
.
£í
)/
N
;

151 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

152 
˛ock_t
 
time
=
	`˛ock
();

154 
d©a
 
åaö
 = 
	`øndom_go_moves
(
m
, 
√t
.
b©ch
*√t.
subdivisi⁄s
*
ngpus
);

155 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

156 
time
=
	`˛ock
();

158 
loss
 = 0;

159 #ifde‡
GPU


160 if(
ngpus
 == 1){

161 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

163 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

166 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

168 
	`‰ì_d©a
(
åaö
);

170 if(
avg_loss
 =-1Ëavg_los†
loss
;

171 
avg_loss
 =ávg_loss*.95 + 
loss
*.05;

172 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

173 if(*
√t
.
£í
/
N
 > 
ïoch
){

174 
ïoch
 = *
√t
.
£í
/
N
;

175 
buff
[256];

176 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
,
ba£
, 
ïoch
);

177 
	`ßve_weights
(
√t
, 
buff
);

180 if(
	`gë_cuºít_b©ch
(
√t
)%1000 == 0){

181 
buff
[256];

182 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

183 
	`ßve_weights
(
√t
, 
buff
);

185 if(
	`gë_cuºít_b©ch
(
√t
)%10000 == 0){

186 
buff
[256];

187 
	`•rötf
(
buff
, "%s/%s_%ld.backup",
backup_dúe˘‹y
,
ba£
,
	`gë_cuºít_b©ch
(
√t
));

188 
	`ßve_weights
(
√t
, 
buff
);

191 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

192 
	`ßve_weights
(
√t
, 
buff
);

194 
	`‰ì_√tw‹k
(
√t
);

195 
	`‰ì
(
ba£
);

196 
	}
}

198 
	$¥›ag©e_libîty
(*
bﬂrd
, *
lib
, *
visôed
, 
row
, 
cﬁ
, 
side
)

200 i‡(
row
 < 0 ||Ñow > 18 || 
cﬁ
 < 0 || col > 18) ;

201 
ödex
 = 
row
*19 + 
cﬁ
;

202 i‡(
bﬂrd
[
ödex
] !
side
) ;

203 i‡(
visôed
[
ödex
]) ;

204 
visôed
[
ödex
] = 1;

205 
lib
[
ödex
] += 1;

206 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
+1, 
cﬁ
, 
side
);

207 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
-1, 
cﬁ
, 
side
);

208 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
, 
cﬁ
+1, 
side
);

209 
	`¥›ag©e_libîty
(
bﬂrd
, 
lib
, 
visôed
, 
row
, 
cﬁ
-1, 
side
);

210 
	}
}

213 *
	$ˇlcuœã_libîtõs
(*
bﬂrd
)

215 *
lib
 = 
	`ˇŒoc
(19*19, ());

216 
visôed
[361];

217 
i
, 
j
;

218 
j
 = 0; j < 19; ++j){

219 
i
 = 0; i < 19; ++i){

220 
	`mem£t
(
visôed
, 0, 19*19*());

221 
ödex
 = 
j
*19 + 
i
;

222 if(
bﬂrd
[
ödex
] == 0){

223 i‡((
i
 > 0Ë&& 
bﬂrd
[
ödex
 - 1]Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, 
j
, i-1, board[index-1]);

224 i‡((
i
 < 18Ë&& 
bﬂrd
[
ödex
 + 1]Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, 
j
, i+1, board[index+1]);

225 i‡((
j
 > 0Ë&& 
bﬂrd
[
ödex
 - 19]Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, j-1, 
i
, board[index-19]);

226 i‡((
j
 < 18Ë&& 
bﬂrd
[
ödex
 + 19]Ë
	`¥›ag©e_libîty
(bﬂrd, 
lib
, 
visôed
, j+1, 
i
, board[index+19]);

230  
lib
;

231 
	}
}

233 
	$¥öt_bﬂrd
(
FILE
 *
°ªam
, *
bﬂrd
, 
sw≠
, *
ödexes
)

235 
i
,
j
,
n
;

236 
	`Ârötf
(
°ªam
, " ");

237 
i
 = 0; i < 19; ++i){

238 
	`Ârötf
(
°ªam
, "%¯", 'A' + 
i
 + 1*(ò> 7 && 
noi
));

240 
	`Ârötf
(
°ªam
, "\n");

241 
j
 = 0; j < 19; ++j){

242 
	`Ârötf
(
°ªam
, "%2d", (
övîãd
Ë? 19-
j
 : j+1);

243 
i
 = 0; i < 19; ++i){

244 
ödex
 = 
j
*19 + 
i
;

245 if(
ödexes
){

246 
found
 = 0;

247 
n
 = 0;Ç < 
nöd
; ++n){

248 if(
ödex
 =
ödexes
[
n
]){

249 
found
 = 1;

257 if(
n
 =0Ë
	`Ârötf
(
°ªam
, " 1");

258 if(
n
 =1Ë
	`Ârötf
(
°ªam
, " 2");

259 if(
n
 =2Ë
	`Ârötf
(
°ªam
, " 3");

260 if(
n
 =3Ë
	`Ârötf
(
°ªam
, " 4");

261 if(
n
 =4Ë
	`Ârötf
(
°ªam
, " 5");

264 if(
found
) ;

268 if(
bﬂrd
[
ödex
]*-
sw≠
 > 0Ë
	`Ârötf
(
°ªam
, " O");

269 if(
bﬂrd
[
ödex
]*-
sw≠
 < 0Ë
	`Ârötf
(
°ªam
, " X");

270 
	`Ârötf
(
°ªam
, " ");

272 
	`Ârötf
(
°ªam
, "\n");

274 
	}
}

276 
	$Êù_bﬂrd
(*
bﬂrd
)

278 
i
;

279 
i
 = 0; i < 19*19; ++i){

280 
bﬂrd
[
i
] = -board[i];

282 
	}
}

284 
	$¥edi˘_move
(
√tw‹k
 
√t
, *
bﬂrd
, *
move
, 
mu…i
)

286 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
bﬂrd
);

287 
	`c›y_˝u
(19*19+1, 
ouçut
, 1, 
move
, 1);

288 
i
;

289 if(
mu…i
){

290 
image
 
bim
 = 
	`Êﬂt_to_image
(19, 19, 1, 
bﬂrd
);

291 
i
 = 1; i < 8; ++i){

292 
	`rŸ©e_image_cw
(
bim
, 
i
);

293 if(
i
 >4Ë
	`Êù_image
(
bim
);

295 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
bﬂrd
);

296 
image
 
oim
 = 
	`Êﬂt_to_image
(19, 19, 1, 
ouçut
);

298 if(
i
 >4Ë
	`Êù_image
(
oim
);

299 
	`rŸ©e_image_cw
(
oim
, -
i
);

301 
	`axpy_˝u
(19*19+1, 1, 
ouçut
, 1, 
move
, 1);

303 if(
i
 >4Ë
	`Êù_image
(
bim
);

304 
	`rŸ©e_image_cw
(
bim
, -
i
);

306 
	`sˇl_˝u
(19*19+1, 1./8., 
move
, 1);

308 
i
 = 0; i < 19*19; ++i){

309 if(
bﬂrd
[
i
]Ë
move
[i] = 0;

311 
	}
}

313 
	$ªmove_c⁄√˘ed
(*
b
, *
lib
, 
p
, 
r
, 
c
)

315 i‡(
r
 < 0 ||Ñ >19 || 
c
 < 0 || c >= 19) ;

316 i‡(
b
[
r
*19 + 
c
] !
p
) ;

317 i‡(
lib
[
r
*19 + 
c
] != 1) ;

318 
b
[
r
*19 + 
c
] = 0;

319 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
+1, 
c
);

320 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
-1, 
c
);

321 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
, 
c
+1);

322 
	`ªmove_c⁄√˘ed
(
b
, 
lib
, 
p
, 
r
, 
c
-1);

323 
	}
}

326 
	$move_go
(*
b
, 
p
, 
r
, 
c
)

328 *
l
 = 
	`ˇlcuœã_libîtõs
(
b
);

329 
b
[
r
*19 + 
c
] = 
p
;

330 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
+1, 
c
);

331 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
-1, 
c
);

332 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
, 
c
+1);

333 
	`ªmove_c⁄√˘ed
(
b
, 
l
, -
p
, 
r
, 
c
-1);

334 
	`‰ì
(
l
);

335 
	}
}

337 
	$makes_ß„_go
(*
b
, *
lib
, 
p
, 
r
, 
c
){

338 i‡(
r
 < 0 ||Ñ >19 || 
c
 < 0 || c >= 19)  0;

339 i‡(
b
[
r
*19 + 
c
] =-
p
){

340 i‡(
lib
[
r
*19 + 
c
] > 1)  0;

343 i‡(
b
[
r
*19 + 
c
] == 0)  1;

344 i‡(
lib
[
r
*19 + 
c
] > 1)  1;

346 
	}
}

348 
	$suicide_go
(*
b
, 
p
, 
r
, 
c
)

350 *
l
 = 
	`ˇlcuœã_libîtõs
(
b
);

351 
ß„
 = 0;

352 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
+1, 
c
);

353 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
-1, 
c
);

354 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
, 
c
+1);

355 
ß„
 = sa„ || 
	`makes_ß„_go
(
b
, 
l
, 
p
, 
r
, 
c
-1);

356 
	`‰ì
(
l
);

357  !
ß„
;

358 
	}
}

360 
	$ÀgÆ_go
(*
b
, *
ko
, 
p
, 
r
, 
c
)

362 i‡(
b
[
r
*19 + 
c
])  0;

363 
cuº
[91];

364 
√xt
[91];

365 
	`bﬂrd_to_°rög
(
cuº
, 
b
);

366 
	`move_go
(
b
, 
p
, 
r
, 
c
);

367 
	`bﬂrd_to_°rög
(
√xt
, 
b
);

368 
	`°rög_to_bﬂrd
(
cuº
, 
b
);

369 if(
	`memcmp
(
√xt
, 
ko
, 91) == 0)  0;

371 
	}
}

373 
	$gíî©e_move
(
√tw‹k
 
√t
, 
∂ayî
, *
bﬂrd
, 
mu…i
, 
thªsh
, 
ãmp
, *
ko
, 
¥öt
)

375 
i
, 
j
;

376 
em±y
 = 1;

377 
i
 = 0; i < 19*19; ++i){

378 i‡(
bﬂrd
[
i
]) {

379 
em±y
 = 0;

383 if(
em±y
) {

386 
i
 = 0; i < 
√t
.
n
; ++iË√t.
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

388 
move
[362];

389 i‡(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

390 
	`¥edi˘_move
(
√t
, 
bﬂrd
, 
move
, 
mu…i
);

391 i‡(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

394 
i
 = 0; i < 19; ++i){

395 
j
 = 0; j < 19; ++j){

396 i‡(!
	`ÀgÆ_go
(
bﬂrd
, 
ko
, 
∂ayî
, 
i
, 
j
)Ë
move
[i*19 + j] = 0;

400 
ödexes
[
nöd
];

401 
	`t›_k
(
move
, 19*19+1, 
nöd
, 
ödexes
);

402 if(
thªsh
 > 
move
[
ödexes
[0]]Ëthªsh = move[ödexes[
nöd
-1]];

404 
i
 = 0; i < 19*19+1; ++i){

405 i‡(
move
[
i
] < 
thªsh
) move[i] = 0;

409 
max
 = 
	`max_ödex
(
move
, 19*19+1);

410 
row
 = 
max
 / 19;

411 
cﬁ
 = 
max
 % 19;

412 
ödex
 = 
	`ßm∂e_¨øy
(
move
, 19*19+1);

414 if(
¥öt
){

415 
	`t›_k
(
move
, 19*19+1, 
nöd
, 
ödexes
);

416 
i
 = 0; i < 
nöd
; ++i){

417 i‡(!
move
[
ödexes
[
i
]]) indexes[i] = -1;

419 
	`¥öt_bﬂrd
(
°dîr
, 
bﬂrd
, 
∂ayî
, 
ödexes
);

420 
i
 = 0; i < 
nöd
; ++i){

421 
	`Ârötf
(
°dîr
, "%d: %f\n", 
i
+1, 
move
[
ödexes
[i]]);

424 i‡(
row
 == 19)  -1;

426 i‡(
	`suicide_go
(
bﬂrd
, 
∂ayî
, 
row
, 
cﬁ
)){

430 i‡(
	`suicide_go
(
bﬂrd
, 
∂ayî
, 
ödex
/19, index%19)){

431 
ödex
 = 
max
;

433 i‡(
ödex
 == 19*19)  -1;

434  
ödex
;

435 
	}
}

437 
	$vÆid_go
(*
cfgfûe
, *
weightfûe
, 
mu…i
, *
fûíame
)

439 
	`§™d
(
	`time
(0));

440 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

441 
	`¥ötf
("%s\n", 
ba£
);

442 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

443 if(
weightfûe
){

444 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

446 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

447 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

449 *
bﬂrd
 = 
	`ˇŒoc
(19*19, ());

450 *
move
 = 
	`ˇŒoc
(19*19+1, ());

452 
moves
 
m
 = 
	`lﬂd_go_moves
(
fûíame
);

454 
N
 = 
m
.
n
;

455 
i
;

456 
c‹ª˘
 = 0;

457 
i
 = 0; i <
N
; ++i){

458 *
b
 = 
m
.
d©a
[
i
];

459 
row
 = 
b
[0];

460 
cﬁ
 = 
b
[1];

461 
åuth
 = 
cﬁ
 + 19*
row
;

462 
	`°rög_to_bﬂrd
(
b
+2, 
bﬂrd
);

463 
	`¥edi˘_move
(
√t
, 
bﬂrd
, 
move
, 
mu…i
);

464 
ödex
 = 
	`max_ödex
(
move
, 19*19);

465 if(
ödex
 =
åuth
Ë++
c‹ª˘
;

466 
	`¥ötf
("%d Accuøcy %f\n", 
i
, (Ë
c‹ª˘
/(i+1));

468 
	}
}

470 
	$¥öt_game
(*
bﬂrd
, 
FILE
 *
Â
)

472 
i
, 
j
;

473 
cou¡
 = 3;

474 
	`Ârötf
(
Â
, "komi 6.5\n");

475 
	`Ârötf
(
Â
, "boardsize 19\n");

476 
	`Ârötf
(
Â
, "clear_board\n");

477 
j
 = 0; j < 19; ++j){

478 
i
 = 0; i < 19; ++i){

479 if(
bﬂrd
[
j
*19 + 
i
] =1Ë
	`Ârötf
(
Â
, "play black %c%d\n", 'A'+i+(i>=8), 19-j);

480 if(
bﬂrd
[
j
*19 + 
i
] =-1Ë
	`Ârötf
(
Â
, "play white %c%d\n", 'A'+i+(i>=8), 19-j);

481 if(
bﬂrd
[
j
*19 + 
i
]Ë++
cou¡
;

484  
cou¡
;

485 
	}
}

487 
	$ígöe_go
(*
fûíame
, *
weightfûe
, 
mu…i
)

489 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

490 if(
weightfûe
){

491 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

493 
	`§™d
(
	`time
(0));

494 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

495 *
bﬂrd
 = 
	`ˇŒoc
(19*19, ());

496 *
⁄e
 = 
	`ˇŒoc
(91, ());

497 *
two
 = 
	`ˇŒoc
(91, ());

498 
∑s£d
 = 0;

500 
buff
[256];

501 
id
 = 0;

502 
has_id
 = (
	`sˇnf
("%d", &
id
) == 1);

503 
	`sˇnf
("%s", 
buff
);

504 i‡(
	`„of
(
°dö
)) ;

505 
ids
[256];

506 
	`•rötf
(
ids
, "%d", 
id
);

508 i‡(!
has_id
Ë
ids
[0] = 0;

509 i‡(!
	`°rcmp
(
buff
, "protocol_version")){

510 
	`¥ötf
("=%†2\n\n", 
ids
);

511 } i‡(!
	`°rcmp
(
buff
, "name")){

512 
	`¥ötf
("=%†D¨kGo\n\n", 
ids
);

513 } i‡(!
	`°rcmp
(
buff
, "time_settings") || !strcmp(buff, "time_left")){

514 *
löe
 = 
	`fgël
(
°dö
);

515 
	`‰ì
(
löe
);

516 
	`¥ötf
("=%†\n\n", 
ids
);

517 } i‡(!
	`°rcmp
(
buff
, "version")){

518 
	`¥ötf
("=%†1.0. W™àm‹êD¨kGo? You c™ föd mê⁄ OGS, u∆imôed games,Çÿwaôög! hâps://⁄löe-go.com/u£r/võw/434218\n\n", 
ids
);

519 } i‡(!
	`°rcmp
(
buff
, "known_command")){

520 
comm
[256];

521 
	`sˇnf
("%s", 
comm
);

522 
known
 = (!
	`°rcmp
(
comm
, "protocol_version") ||

523 !
	`°rcmp
(
comm
, "name") ||

524 !
	`°rcmp
(
comm
, "version") ||

525 !
	`°rcmp
(
comm
, "known_command") ||

526 !
	`°rcmp
(
comm
, "list_commands") ||

527 !
	`°rcmp
(
comm
, "quit") ||

528 !
	`°rcmp
(
comm
, "boardsize") ||

529 !
	`°rcmp
(
comm
, "clear_board") ||

530 !
	`°rcmp
(
comm
, "komi") ||

531 !
	`°rcmp
(
comm
, "final_status_list") ||

532 !
	`°rcmp
(
comm
, "play") ||

533 !
	`°rcmp
(
comm
, "genmove_white") ||

534 !
	`°rcmp
(
comm
, "genmove_black") ||

535 !
	`°rcmp
(
comm
, "fixed_handicap") ||

536 !
	`°rcmp
(
comm
, "genmove"));

537 if(
known
Ë
	`¥ötf
("=%†åue\n\n", 
ids
);

538 
	`¥ötf
("=%†Ál£\n\n", 
ids
);

539 } i‡(!
	`°rcmp
(
buff
, "list_commands")){

540 
	`¥ötf
("=%†¥Ÿocﬁ_vîsi⁄\nshowbﬂrd\¬ame\nvîsi⁄\nknown_comm™d\∆i°_comm™ds\nquô\nbﬂrdsize\n˛ór_bﬂrd\nkomi\≈œy\ngímove_bœck\ngímove_whôe\ngímove\nföÆ_°©us_li°\nfixed_h™diˇp\n\n", 
ids
);

541 } i‡(!
	`°rcmp
(
buff
, "quit")){

543 } i‡(!
	`°rcmp
(
buff
, "boardsize")){

544 
bﬂrdsize
 = 0;

545 
	`sˇnf
("%d", &
bﬂrdsize
);

547 if(
bﬂrdsize
 != 19){

548 
	`¥ötf
("?%†u«c˚±abÀ size\n\n", 
ids
);

550 
	`mem£t
(
bﬂrd
, 0, 19*19*());

551 
	`¥ötf
("=%†\n\n", 
ids
);

553 } i‡(!
	`°rcmp
(
buff
, "fixed_handicap")){

554 
h™diˇp
 = 0;

555 
	`sˇnf
("%d", &
h™diˇp
);

556 
ödexes
[] = {72, 288, 300, 60, 180, 174, 186, 66, 294};

557 
i
;

558 
i
 = 0; i < 
h™diˇp
; ++i){

559 
bﬂrd
[
ödexes
[
i
]] = 1;

561 } i‡(!
	`°rcmp
(
buff
, "clear_board")){

562 
∑s£d
 = 0;

563 
	`mem£t
(
bﬂrd
, 0, 19*19*());

564 
	`¥ötf
("=%†\n\n", 
ids
);

565 } i‡(!
	`°rcmp
(
buff
, "komi")){

566 
komi
 = 0;

567 
	`sˇnf
("%f", &
komi
);

568 
	`¥ötf
("=%†\n\n", 
ids
);

569 } i‡(!
	`°rcmp
(
buff
, "showboard")){

570 
	`¥ötf
("=%†\n", 
ids
);

571 
	`¥öt_bﬂrd
(
°dout
, 
bﬂrd
, 1, 0);

572 
	`¥ötf
("\n");

573 } i‡(!
	`°rcmp
(
buff
, "play") || !strcmp(buff, "black") || !strcmp(buff, "white")){

574 
cﬁ‹
[256];

575 if(!
	`°rcmp
(
buff
, "play"))

577 
	`sˇnf
("%†", 
cﬁ‹
);

579 
	`sˇnf
(" ");

580 
cﬁ‹
[0] = 
buff
[0];

582 
c
;

583 
r
;

584 
cou¡
 = 
	`sˇnf
("%c%d", &
c
, &
r
);

585 
∂ayî
 = (
cﬁ‹
[0] == 'b' || color[0] == 'B') ? 1 : -1;

586 if((
c
 ='p' || c ='P'Ë&& 
cou¡
 < 2) {

587 
∑s£d
 = 1;

588 
	`¥ötf
("=%†\n\n", 
ids
);

589 *
löe
 = 
	`fgël
(
°dö
);

590 
	`‰ì
(
löe
);

591 
	`fÊush
(
°dout
);

592 
	`fÊush
(
°dîr
);

595 
∑s£d
 = 0;

597 if(
c
 >= 'A' && c <= 'Z') c = c - 'A';

598 if(
c
 >= 'a' && c <= 'z') c = c - 'a';

599 if(
c
 >= 8) --c;

600 
r
 = 19 -Ñ;

601 
	`Ârötf
(
°dîr
, "move: %d %d\n", 
r
, 
c
);

603 *
sw≠
 = 
two
;

604 
two
 = 
⁄e
;

605 
⁄e
 = 
sw≠
;

606 
	`move_go
(
bﬂrd
, 
∂ayî
, 
r
, 
c
);

607 
	`bﬂrd_to_°rög
(
⁄e
, 
bﬂrd
);

609 
	`¥ötf
("=%†\n\n", 
ids
);

611 } i‡(!
	`°rcmp
(
buff
, "genmove") || !strcmp(buff, "genmove_black") || !strcmp(buff, "genmove_white")){

612 
∂ayî
 = 0;

613 if(!
	`°rcmp
(
buff
, "genmove")){

614 
cﬁ‹
[256];

615 
	`sˇnf
("%s", 
cﬁ‹
);

616 
∂ayî
 = (
cﬁ‹
[0] == 'b' || color[0] == 'B') ? 1 : -1;

617 } i‡(!
	`°rcmp
(
buff
, "genmove_black")){

618 
∂ayî
 = 1;

620 
∂ayî
 = -1;

623 
ödex
 = 
	`gíî©e_move
(
√t
, 
∂ayî
, 
bﬂrd
, 
mu…i
, .4, 1, 
two
, 0);

624 if(
∑s£d
 || 
ödex
 < 0){

625 
	`¥ötf
("=%†∑ss\n\n", 
ids
);

626 
∑s£d
 = 0;

628 
row
 = 
ödex
 / 19;

629 
cﬁ
 = 
ödex
 % 19;

631 *
sw≠
 = 
two
;

632 
two
 = 
⁄e
;

633 
⁄e
 = 
sw≠
;

635 
	`move_go
(
bﬂrd
, 
∂ayî
, 
row
, 
cﬁ
);

636 
	`bﬂrd_to_°rög
(
⁄e
, 
bﬂrd
);

637 
row
 = 19 -Ñow;

638 i‡(
cﬁ
 >= 8) ++col;

639 
	`¥ötf
("=%†%c%d\n\n", 
ids
, 'A' + 
cﬁ
, 
row
);

643 } i‡(!
	`°rcmp
(
buff
, "p")){

645 } i‡(!
	`°rcmp
(
buff
, "final_status_list")){

646 
ty≥
[256];

647 
	`sˇnf
("%s", 
ty≥
);

648 
	`Ârötf
(
°dîr
, "final_status\n");

649 *
löe
 = 
	`fgël
(
°dö
);

650 
	`‰ì
(
löe
);

651 if(
ty≥
[0] == 'd' ||Åype[0] == 'D'){

652 
i
;

653 
FILE
 *
f
 = 
	`f›í
("game.txt", "w");

654 
cou¡
 = 
	`¥öt_game
(
bﬂrd
, 
f
);

655 
	`Ârötf
(
f
, "%†föÆ_°©us_li° dód\n", 
ids
);

656 
	`f˛o£
(
f
);

657 
FILE
 *
p
 = 
	`p›í
("./gnugo --mode gtp < game.txt", "r");

658 
i
 = 0; i < 
cou¡
; ++i){

659 
	`‰ì
(
	`fgël
(
p
));

660 
	`‰ì
(
	`fgël
(
p
));

662 *
l
 = 0;

663 (
l
 = 
	`fgël
(
p
))){

664 
	`¥ötf
("%s\n", 
l
);

665 
	`‰ì
(
l
);

668 
	`¥ötf
("?%†unknow¿comm™d\n\n", 
ids
);

671 *
löe
 = 
	`fgël
(
°dö
);

672 
	`‰ì
(
löe
);

673 
	`¥ötf
("?%†unknow¿comm™d\n\n", 
ids
);

675 
	`fÊush
(
°dout
);

676 
	`fÊush
(
°dîr
);

678 
	}
}

680 
	$ã°_go
(*
cfg
, *
weights
, 
mu…i
)

682 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfg
);

683 if(
weights
){

684 
	`lﬂd_weights
(&
√t
, 
weights
);

686 
	`§™d
(
	`time
(0));

687 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

688 *
bﬂrd
 = 
	`ˇŒoc
(19*19, ());

689 *
move
 = 
	`ˇŒoc
(19*19+1, ());

690 
cﬁ‹
 = 1;

692 
i
;

693 
	`¥edi˘_move
(
√t
, 
bﬂrd
, 
move
, 
mu…i
);

695 
ödexes
[
nöd
];

696 
row
, 
cﬁ
;

697 
	`t›_k
(
move
, 19*19+1, 
nöd
, 
ödexes
);

698 
	`¥öt_bﬂrd
(
°dîr
, 
bﬂrd
, 
cﬁ‹
, 
ödexes
);

699 
i
 = 0; i < 
nöd
; ++i){

700 
ödex
 = 
ödexes
[
i
];

701 
row
 = 
ödex
 / 19;

702 
cﬁ
 = 
ödex
 % 19;

703 if(
row
 == 19){

704 
	`¥ötf
("%d: Pass, %.2f%%\n", 
i
+1, 
move
[
ödex
]*100);

706 
	`¥ötf
("%d: %¯%d, %.2f%%\n", 
i
+1, 
cﬁ
 + 'A' + 1*(cﬁ > 7 && 
noi
), (
övîãd
)?19 - 
row
 :Ñow+1, 
move
[
ödex
]*100);

711 if(
cﬁ‹
 =1Ë
	`¥ötf
("X Enter move: ");

712 
	`¥ötf
("O Enter move: ");

714 
c
;

715 *
löe
 = 
	`fgël
(
°dö
);

716 
picked
 = 1;

717 
dnum
 = 
	`ssˇnf
(
löe
, "%d", &
picked
);

718 
˙um
 = 
	`ssˇnf
(
löe
, "%c", &
c
);

719 i‡(
	`°æí
(
löe
Ë=0 || 
dnum
) {

720 --
picked
;

721 i‡(
picked
 < 
nöd
){

722 
ödex
 = 
ödexes
[
picked
];

723 
row
 = 
ödex
 / 19;

724 
cﬁ
 = 
ödex
 % 19;

725 if(
row
 < 19){

726 
	`move_go
(
bﬂrd
, 1, 
row
, 
cﬁ
);

729 } i‡(
˙um
){

730 i‡(
c
 <= 'T' && c >= 'A'){

731 
num
 = 
	`ssˇnf
(
löe
, "%¯%d", &
c
, &
row
);

732 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

733 
cﬁ
 = 
c
 - 'A';

734 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

735 i‡(
num
 =2Ë
	`move_go
(
bﬂrd
, 1, 
row
, 
cﬁ
);

736 } i‡(
c
 == 'p') {

738 } if(
c
=='b' || c == 'w'){

739 
g
;

740 
num
 = 
	`ssˇnf
(
löe
, "%¯%¯%d", &
g
, &
c
, &
row
);

741 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

742 
cﬁ
 = 
c
 - 'A';

743 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

744 i‡(
num
 =3Ë
bﬂrd
[
row
*19 + 
cﬁ
] = (
g
 ='b'Ë? 
cﬁ‹
 : -color;

745 } if(
c
 == 'c'){

746 
g
;

747 
num
 = 
	`ssˇnf
(
löe
, "%¯%¯%d", &
g
, &
c
, &
row
);

748 
row
 = (
övîãd
)?19 -Ñow :Ñow-1;

749 
cﬁ
 = 
c
 - 'A';

750 i‡(
cﬁ
 > 7 && 
noi
) col -= 1;

751 i‡(
num
 =3Ë
bﬂrd
[
row
*19 + 
cﬁ
] = 0;

754 
	`‰ì
(
löe
);

755 
	`Êù_bﬂrd
(
bﬂrd
);

756 
cﬁ‹
 = -color;

758 
	}
}

760 
	$sc‹e_game
(*
bﬂrd
)

762 
i
;

763 
FILE
 *
f
 = 
	`f›í
("game.txt", "w");

764 
cou¡
 = 
	`¥öt_game
(
bﬂrd
, 
f
);

765 
	`Ârötf
(
f
, "final_score\n");

766 
	`f˛o£
(
f
);

767 
FILE
 *
p
 = 
	`p›í
("./gnugo --mode gtp < game.txt", "r");

768 
i
 = 0; i < 
cou¡
; ++i){

769 
	`‰ì
(
	`fgël
(
p
));

770 
	`‰ì
(
	`fgël
(
p
));

772 *
l
 = 0;

773 
sc‹e
 = 0;

774 
∂ayî
 = 0;

775 (
l
 = 
	`fgël
(
p
))){

776 
	`Ârötf
(
°dîr
, "%† \t", 
l
);

777 
n
 = 
	`ssˇnf
(
l
, "%c+%f", &
∂ayî
, &
sc‹e
);

778 
	`‰ì
(
l
);

779 i‡(
n
 == 2) ;

781 if(
∂ayî
 ='W'Ë
sc‹e
 = -score;

782 
	`p˛o£
(
p
);

783  
sc‹e
;

784 
	}
}

786 
	$£lf_go
(*
fûíame
, *
weightfûe
, *
f2
, *
w2
, 
mu…i
)

788 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

789 if(
weightfûe
){

790 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

793 
√tw‹k
 
√t2
 = 
√t
;

794 if(
f2
){

795 
√t2
 = 
	`∑r£_√tw‹k_cfg
(
f2
);

796 if(
w2
){

797 
	`lﬂd_weights
(&
√t2
, 
w2
);

800 
	`§™d
(
	`time
(0));

801 
bﬂrds
[600][93];

802 
cou¡
 = 0;

803 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

804 
	`£t_b©ch_√tw‹k
(&
√t2
, 1);

805 *
bﬂrd
 = 
	`ˇŒoc
(19*19, ());

806 *
⁄e
 = 
	`ˇŒoc
(91, ());

807 *
two
 = 
	`ˇŒoc
(91, ());

808 
d⁄e
 = 0;

809 
∂ayî
 = 1;

810 
p1
 = 0;

811 
p2
 = 0;

812 
tŸÆ
 = 0;

814 i‡(
d⁄e
){

815 
sc‹e
 = 
	`sc‹e_game
(
bﬂrd
);

816 if((
sc‹e
 > 0Ë=(
tŸÆ
%2==0)Ë++
p1
;

817 ++
p2
;

818 ++
tŸÆ
;

819 
	`Ârötf
(
°dîr
, "TŸÆ: %d, Pœyî 1: %f, Pœyî 2: %f\n", 
tŸÆ
, ()
p1
/tŸÆ, ()
p2
/total);

820 
	`¶ìp
(1);

831 
	`mem£t
(
bﬂrd
, 0, 19*19*());

832 
∂ayî
 = 1;

833 
d⁄e
 = 0;

834 
cou¡
 = 0;

835 
	`fÊush
(
°dout
);

836 
	`fÊush
(
°dîr
);

838 
	`¥öt_bﬂrd
(
°dîr
, 
bﬂrd
, 1, 0);

840 
√tw‹k
 
u£
 = ((
tŸÆ
%2==0Ë=(
∂ayî
==1)Ë? 
√t
 : 
√t2
;

841 
ödex
 = 
	`gíî©e_move
(
u£
, 
∂ayî
, 
bﬂrd
, 
mu…i
, .4, 1, 
two
, 0);

842 if(
ödex
 < 0){

843 
d⁄e
 = 1;

846 
row
 = 
ödex
 / 19;

847 
cﬁ
 = 
ödex
 % 19;

849 *
sw≠
 = 
two
;

850 
two
 = 
⁄e
;

851 
⁄e
 = 
sw≠
;

853 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

854 
bﬂrds
[
cou¡
][0] = 
row
;

855 
bﬂrds
[
cou¡
][1] = 
cﬁ
;

856 
	`bﬂrd_to_°rög
(
bﬂrds
[
cou¡
] + 2, 
bﬂrd
);

857 if(
∂ayî
 < 0Ë
	`Êù_bﬂrd
(
bﬂrd
);

858 ++
cou¡
;

860 
	`move_go
(
bﬂrd
, 
∂ayî
, 
row
, 
cﬁ
);

861 
	`bﬂrd_to_°rög
(
⁄e
, 
bﬂrd
);

863 
∂ayî
 = -player;

865 
	}
}

867 
	$run_go
(
¨gc
, **
¨gv
)

870 if(
¨gc
 < 4){

871 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

875 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

876 *
gpus
 = 0;

877 
gpu
 = 0;

878 
ngpus
 = 0;

879 if(
gpu_li°
){

880 
	`¥ötf
("%s\n", 
gpu_li°
);

881 
Àn
 = 
	`°æí
(
gpu_li°
);

882 
ngpus
 = 1;

883 
i
;

884 
i
 = 0; i < 
Àn
; ++i){

885 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

887 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

888 
i
 = 0; i < 
ngpus
; ++i){

889 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

890 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

893 
gpu
 = 
gpu_ödex
;

894 
gpus
 = &
gpu
;

895 
ngpus
 = 1;

897 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

899 *
cfg
 = 
¨gv
[3];

900 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

901 *
c2
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

902 *
w2
 = (
¨gc
 > 6Ë? 
¨gv
[6] : 0;

903 
mu…i
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-multi");

904 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_go
(
cfg
, 
weights
, 
c2
, 
gpus
, 
ngpus
, 
˛ór
);

905 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_go
(
cfg
, 
weights
, 
mu…i
, 
c2
);

906 if(0==
	`°rcmp
(
¨gv
[2], "£lf")Ë
	`£lf_go
(
cfg
, 
weights
, 
c2
, 
w2
, 
mu…i
);

907 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_go
(
cfg
, 
weights
, 
mu…i
);

908 if(0==
	`°rcmp
(
¨gv
[2], "ígöe")Ë
	`ígöe_go
(
cfg
, 
weights
, 
mu…i
);

909 
	}
}

	@examples/lsd.c

1 
	~"d¨k√t.h
"

386 
	$ã°_dcg™
(*
cfgfûe
, *
weightfûe
)

388 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

389 if(
weightfûe
){

390 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

392 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

393 
	`§™d
(2222222);

395 
˛ock_t
 
time
;

396 
buff
[256];

397 *
öput
 = 
buff
;

398 
i
, 
imœyî
 = 0;

400 
i
 = 0; i < 
√t
.
n
; ++i) {

401 i‡(
√t
.
œyîs
[
i
].
out_c
 == 3) {

402 
imœyî
 = 
i
;

403 
	`¥ötf
("%d\n", 
i
);

409 
image
 
im
 = 
	`make_image
(
√t
.
w
,Çë.
h
,Çë.
c
);

410 
i
;

411 
i
 = 0; i < 
im
.
w
*im.
h
*im.
c
; ++i){

412 
im
.
d©a
[
i
] = 
	`ønd_n‹mÆ
();

415 *
X
 = 
im
.
d©a
;

416 
time
=
	`˛ock
();

417 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

418 
image
 
out
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
imœyî
);

420 
	`n‹mÆize_image
(
out
);

421 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

422 
	`show_image
(
out
, "out");

423 
	`ßve_image
(
out
, "out");

424 #ifde‡
OPENCV


425 
	`cvWaôKey
(0);

428 
	`‰ì_image
(
im
);

430 
	}
}

432 
	$dcg™_b©ch
(
√tw‹k
 
g√t
,Çëw‹k 
™ë
)

435 
	}
}

438 
	$åaö_dcg™
(*
cfg
, *
weight
, *
acfg
, *
aweight
, 
˛ór
, 
di•œy
, *
åaö_images
)

440 #ifde‡
GPU


447 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

448 
	`§™d
(
	`time
(0));

449 *
ba£
 = 
	`ba£cfg
(
cfg
);

450 *
aba£
 = 
	`ba£cfg
(
acfg
);

451 
	`¥ötf
("%s\n", 
ba£
);

452 
√tw‹k
 
g√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weight
, 
˛ór
);

453 
√tw‹k
 
™ë
 = 
	`lﬂd_√tw‹k
(
acfg
, 
aweight
, 
˛ór
);

456 
°¨t
 = 0;

457 
i
, 
j
, 
k
;

458 
œyî
 
imœyî
 = {0};

459 
i
 = 0; i < 
g√t
.
n
; ++i) {

460 i‡(
g√t
.
œyîs
[
i
].
out_c
 == 3) {

461 
imœyî
 = 
g√t
.
œyîs
[
i
];

466 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
g√t
.
À¨nög_øã
, g√t.
momítum
, g√t.
deˇy
);

467 
imgs
 = 
g√t
.
b©ch
*g√t.
subdivisi⁄s
;

468 
i
 = *
g√t
.
£í
/
imgs
;

469 
d©a
 
åaö
, 
buf„r
;

472 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

474 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

476 
lﬂd_¨gs
 
¨gs

	`gë_ba£_¨gs
(
™ë
);

477 
¨gs
.
∑ths
 =Öaths;

478 
¨gs
.
n
 = 
imgs
;

479 
¨gs
.
m
 = 
∂i°
->
size
;

480 
¨gs
.
d
 = &
buf„r
;

481 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

482 
¨gs
.
thªads
=16;

483 
¨gs
.
˛as£s
 = 1;

484 *
ls
[2] = {"imagenet", "zzzzzzzz"};

485 
¨gs
.
œbñs
 = 
ls
;

487 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

488 
˛ock_t
 
time
;

490 
g√t
.
åaö
 = 1;

491 
™ë
.
åaö
 = 1;

493 
x_size
 = 
g√t
.
öputs
*g√t.
b©ch
;

494 
y_size
 = 
g√t
.
åuths
*g√t.
b©ch
;

495 *
imîr‹
 = 
	`cuda_make_¨øy
(0, 
y_size
);

499 
Æoss_avg
 = -1;

503 
	`gë_cuºít_b©ch
(
g√t
Ë< g√t.
max_b©ches
) {

504 
°¨t
 += 1;

505 
i
 += 1;

506 
time
=
	`˛ock
();

507 
	`±hªad_joö
(
lﬂd_thªad
, 0);

508 
åaö
 = 
buf„r
;

513 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

515 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

517 
d©a
 
gí
 = 
	`c›y_d©a
(
åaö
);

518 
j
 = 0; j < 
imgs
; ++j) {

519 
åaö
.
y
.
vÆs
[
j
][0] = .95;

520 
gí
.
y
.
vÆs
[
j
][0] = .05;

522 
time
=
	`˛ock
();

524 
j
 = 0; j < 
g√t
.
subdivisi⁄s
; ++j){

525 
	`gë_√xt_b©ch
(
åaö
, 
g√t
.
b©ch
, 
j
*g√t.b©ch, g√t.
åuth
, 0);

526 
z
;

527 
z
 = 0; z < 
x_size
; ++z){

528 
g√t
.
öput
[
z
] = 
	`ønd_n‹mÆ
();

531 
	`cuda_push_¨øy
(
g√t
.
öput_gpu
, g√t.
öput
, 
x_size
);

532 
	`cuda_push_¨øy
(
g√t
.
åuth_gpu
, g√t.
åuth
, 
y_size
);

533 *
g√t
.
£í
 +g√t.
b©ch
;

534 
	`f‹w¨d_√tw‹k_gpu
(
g√t
);

536 
	`fûl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
imîr‹
, 1);

537 
	`fûl_gpu
(
™ë
.
åuths
*™ë.
b©ch
, .95,á√t.
åuth_gpu
, 1);

538 
	`c›y_gpu
(
™ë
.
öputs
*™ë.
b©ch
, 
imœyî
.
ouçut_gpu
, 1,á√t.
öput_gpu
, 1);

539 
™ë
.
dñè_gpu
 = 
imîr‹
;

540 
	`f‹w¨d_√tw‹k_gpu
(
™ë
);

541 
	`backw¨d_√tw‹k_gpu
(
™ë
);

543 
gíÆoss
 = *
™ë
.
co°
 /á√t.
b©ch
;

544 
	`¥ötf
("%f\n", 
gíÆoss
);

546 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1);

547 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, .00, 
g√t
.
œyîs
[g√t.
n
-1].
dñè_gpu
, 1);

549 
	`¥ötf
("ªÆ√s†%f\n", 
	`cuda_mag_¨øy
(
imîr‹
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

550 
	`¥ötf
("„©uª†%f\n", 
	`cuda_mag_¨øy
(
g√t
.
œyîs
[g√t.
n
-1].
dñè_gpu
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

552 
	`axpy_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1, 
g√t
.
œyîs
[g√t.
n
-1].
dñè_gpu
, 1);

554 
	`backw¨d_√tw‹k_gpu
(
g√t
);

556 
k
 = 0; k < 
g√t
.
b©ch
; ++k){

557 
ödex
 = 
j
*
g√t
.
b©ch
 + 
k
;

558 
	`c›y_˝u
(
g√t
.
ouçuts
, g√t.
ouçut
 + 
k
*g√t.ouçuts, 1, 
gí
.
X
.
vÆs
[
ödex
], 1);

561 
	`h¨mÀss_upd©e_√tw‹k_gpu
(
™ë
);

563 
d©a
 
mîge
 = 
	`c⁄ˇt_d©a
(
åaö
, 
gí
);

565 
Æoss
 = 
	`åaö_√tw‹k
(
™ë
, 
mîge
);

571 #ifde‡
OPENCV


572 if(
di•œy
){

573 
image
 
im
 = 
	`Êﬂt_to_image
(
™ë
.
w
,á√t.
h
,á√t.
c
, 
gí
.
X
.
vÆs
[0]);

574 
image
 
im2
 = 
	`Êﬂt_to_image
(
™ë
.
w
,á√t.
h
,á√t.
c
, 
åaö
.
X
.
vÆs
[0]);

575 
	`show_image
(
im
, "gen");

576 
	`show_image
(
im2
, "train");

577 
	`cvWaôKey
(50);

589 
	`upd©e_√tw‹k_gpu
(
g√t
);

591 
	`‰ì_d©a
(
mîge
);

592 
	`‰ì_d©a
(
åaö
);

593 
	`‰ì_d©a
(
gí
);

594 i‡(
Æoss_avg
 < 0ËÆoss_avg = 
Æoss
;

595 
Æoss_avg
 =áloss_avg*.9 + 
Æoss
*.1;

597 
	`¥ötf
("%d:ádv: %‡|ádv_avg: %f, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
Æoss
, 
Æoss_avg
, 
	`gë_cuºít_øã
(
g√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

598 if(
i
%10000==0){

599 
buff
[256];

600 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

601 
	`ßve_weights
(
g√t
, 
buff
);

602 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
aba£
, 
i
);

603 
	`ßve_weights
(
™ë
, 
buff
);

605 if(
i
%1000==0){

606 
buff
[256];

607 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

608 
	`ßve_weights
(
g√t
, 
buff
);

609 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
aba£
);

610 
	`ßve_weights
(
™ë
, 
buff
);

613 
buff
[256];

614 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

615 
	`ßve_weights
(
g√t
, 
buff
);

617 
	}
}

619 
	$åaö_cﬁ‹izî
(*
cfg
, *
weight
, *
acfg
, *
aweight
, 
˛ór
, 
di•œy
)

621 #ifde‡
GPU


624 *
åaö_images
 = "/home/pjreddie/data/imagenet/imagenet1k.train.list";

625 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

626 
	`§™d
(
	`time
(0));

627 *
ba£
 = 
	`ba£cfg
(
cfg
);

628 *
aba£
 = 
	`ba£cfg
(
acfg
);

629 
	`¥ötf
("%s\n", 
ba£
);

630 
√tw‹k
 
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weight
, 
˛ór
);

631 
√tw‹k
 
™ë
 = 
	`lﬂd_√tw‹k
(
acfg
, 
aweight
, 
˛ór
);

633 
i
, 
j
, 
k
;

634 
œyî
 
imœyî
 = {0};

635 
i
 = 0; i < 
√t
.
n
; ++i) {

636 i‡(
√t
.
œyîs
[
i
].
out_c
 == 3) {

637 
imœyî
 = 
√t
.
œyîs
[
i
];

642 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

643 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

644 
i
 = *
√t
.
£í
/
imgs
;

645 
d©a
 
åaö
, 
buf„r
;

648 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

650 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

652 
lﬂd_¨gs
 
¨gs

	`gë_ba£_¨gs
(
√t
);

653 
¨gs
.
∑ths
 =Öaths;

654 
¨gs
.
n
 = 
imgs
;

655 
¨gs
.
m
 = 
∂i°
->
size
;

656 
¨gs
.
d
 = &
buf„r
;

658 
¨gs
.
ty≥
 = 
CLASSIFICATION_DATA
;

659 
¨gs
.
˛as£s
 = 1;

660 *
ls
[2] = {"imagenet"};

661 
¨gs
.
œbñs
 = 
ls
;

663 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

664 
˛ock_t
 
time
;

666 
x_size
 = 
√t
.
öputs
*√t.
b©ch
;

668 
√t
.
dñè
 = 0;

669 
√t
.
åaö
 = 1;

670 *
pixs
 = 
	`ˇŒoc
(
x_size
, ());

671 *
gøypixs
 = 
	`ˇŒoc
(
x_size
, ());

675 
™ë
.
dñè
 = 0;

676 
™ë
.
åaö
 = 1;

678 *
imîr‹
 = 
	`cuda_make_¨øy
(0, 
imœyî
.
ouçuts
*imœyî.
b©ch
);

680 
Æoss_avg
 = -1;

681 
gloss_avg
 = -1;

685 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
) {

686 
i
 += 1;

687 
time
=
	`˛ock
();

688 
	`±hªad_joö
(
lﬂd_thªad
, 0);

689 
åaö
 = 
buf„r
;

690 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

692 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

694 
d©a
 
gøy
 = 
	`c›y_d©a
(
åaö
);

695 
j
 = 0; j < 
imgs
; ++j){

696 
image
 
gim
 = 
	`Êﬂt_to_image
(
√t
.
w
,Çë.
h
,Çë.
c
, 
gøy
.
X
.
vÆs
[
j
]);

697 
	`gøysˇÀ_image_3c
(
gim
);

698 
åaö
.
y
.
vÆs
[
j
][0] = .95;

699 
gøy
.
y
.
vÆs
[
j
][0] = .05;

701 
time
=
	`˛ock
();

702 
gloss
 = 0;

704 
j
 = 0; j < 
√t
.
subdivisi⁄s
; ++j){

705 
	`gë_√xt_b©ch
(
åaö
, 
√t
.
b©ch
, 
j
*√t.b©ch, 
pixs
, 0);

706 
	`gë_√xt_b©ch
(
gøy
, 
√t
.
b©ch
, 
j
*√t.b©ch, 
gøypixs
, 0);

707 
	`cuda_push_¨øy
(
√t
.
öput_gpu
, 
gøypixs
,Çë.
öputs
*√t.
b©ch
);

708 
	`cuda_push_¨øy
(
√t
.
åuth_gpu
, 
pixs
,Çë.
åuths
*√t.
b©ch
);

716 *
√t
.
£í
 +√t.
b©ch
;

717 
	`f‹w¨d_√tw‹k_gpu
(
√t
);

719 
	`fûl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 0, 
imîr‹
, 1);

720 
	`c›y_gpu
(
™ë
.
öputs
*™ë.
b©ch
, 
imœyî
.
ouçut_gpu
, 1,á√t.
öput_gpu
, 1);

721 
	`fûl_gpu
(
™ë
.
öputs
*™ë.
b©ch
, .95,á√t.
åuth_gpu
, 1);

722 
™ë
.
dñè_gpu
 = 
imîr‹
;

723 
	`f‹w¨d_√tw‹k_gpu
(
™ë
);

724 
	`backw¨d_√tw‹k_gpu
(
™ë
);

726 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1./100., 
√t
.
œyîs
[√t.
n
-1].
dñè_gpu
, 1);

728 
	`sˇl_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1);

730 
	`¥ötf
("ªÆ√s†%f\n", 
	`cuda_mag_¨øy
(
imîr‹
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

731 
	`¥ötf
("„©uª†%f\n", 
	`cuda_mag_¨øy
(
√t
.
œyîs
[√t.
n
-1].
dñè_gpu
, 
imœyî
.
ouçuts
*imœyî.
b©ch
));

733 
	`axpy_gpu
(
imœyî
.
ouçuts
*imœyî.
b©ch
, 1, 
imîr‹
, 1, 
√t
.
œyîs
[√t.
n
-1].
dñè_gpu
, 1);

735 
	`backw¨d_√tw‹k_gpu
(
√t
);

738 
gloss
 +*
√t
.
co°
 /“ë.
subdivisi⁄s
*√t.
b©ch
);

740 
k
 = 0; k < 
√t
.
b©ch
; ++k){

741 
ödex
 = 
j
*
√t
.
b©ch
 + 
k
;

742 
	`c›y_˝u
(
imœyî
.
ouçuts
, imœyî.
ouçut
 + 
k
*imœyî.ouçuts, 1, 
gøy
.
X
.
vÆs
[
ödex
], 1);

745 
	`h¨mÀss_upd©e_√tw‹k_gpu
(
™ë
);

747 
d©a
 
mîge
 = 
	`c⁄ˇt_d©a
(
åaö
, 
gøy
);

749 
Æoss
 = 
	`åaö_√tw‹k
(
™ë
, 
mîge
);

751 
	`upd©e_√tw‹k_gpu
(
√t
);

753 #ifde‡
OPENCV


754 if(
di•œy
){

755 
image
 
im
 = 
	`Êﬂt_to_image
(
™ë
.
w
,á√t.
h
,á√t.
c
, 
gøy
.
X
.
vÆs
[0]);

756 
image
 
im2
 = 
	`Êﬂt_to_image
(
™ë
.
w
,á√t.
h
,á√t.
c
, 
åaö
.
X
.
vÆs
[0]);

757 
	`show_image
(
im
, "gen");

758 
	`show_image
(
im2
, "train");

759 
	`cvWaôKey
(50);

762 
	`‰ì_d©a
(
mîge
);

763 
	`‰ì_d©a
(
åaö
);

764 
	`‰ì_d©a
(
gøy
);

765 i‡(
Æoss_avg
 < 0ËÆoss_avg = 
Æoss
;

766 
Æoss_avg
 =áloss_avg*.9 + 
Æoss
*.1;

767 
gloss_avg
 = gloss_avg*.9 + 
gloss
*.1;

769 
	`¥ötf
("%d: gí: %f,ádv: %‡| gí_avg: %f,ádv_avg: %f, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
gloss
, 
Æoss
, 
gloss_avg
, 
Æoss_avg
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

770 if(
i
%1000==0){

771 
buff
[256];

772 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

773 
	`ßve_weights
(
√t
, 
buff
);

774 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
aba£
, 
i
);

775 
	`ßve_weights
(
™ë
, 
buff
);

777 if(
i
%100==0){

778 
buff
[256];

779 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

780 
	`ßve_weights
(
√t
, 
buff
);

781 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
aba£
);

782 
	`ßve_weights
(
™ë
, 
buff
);

785 
buff
[256];

786 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

787 
	`ßve_weights
(
√t
, 
buff
);

789 
	}
}

1048 
	$ã°_lsd
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
gøy
)

1050 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

1051 if(
weightfûe
){

1052 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

1054 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

1055 
	`§™d
(2222222);

1057 
˛ock_t
 
time
;

1058 
buff
[256];

1059 *
öput
 = 
buff
;

1060 
i
, 
imœyî
 = 0;

1062 
i
 = 0; i < 
√t
.
n
; ++i) {

1063 i‡(
√t
.
œyîs
[
i
].
out_c
 == 3) {

1064 
imœyî
 = 
i
;

1065 
	`¥ötf
("%d\n", 
i
);

1071 if(
fûíame
){

1072 
	`°∫˝y
(
öput
, 
fûíame
, 256);

1074 
	`¥ötf
("Enter Image Path: ");

1075 
	`fÊush
(
°dout
);

1076 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

1077 if(!
öput
) ;

1078 
	`°πok
(
öput
, "\n");

1080 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

1081 
image
 
ªsized
 = 
	`ªsize_mö
(
im
, 
√t
.
w
);

1082 
image
 
¸›
 = 
	`¸›_image
(
ªsized
, (ªsized.
w
 - 
√t
.w)/2, (ªsized.
h
 -Çet.h)/2,Çet.w,Çet.h);

1083 if(
gøy
Ë
	`gøysˇÀ_image_3c
(
¸›
);

1085 *
X
 = 
¸›
.
d©a
;

1086 
time
=
	`˛ock
();

1087 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

1088 
image
 
out
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
imœyî
);

1090 
	`c⁄°øö_image
(
out
);

1091 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

1092 
	`show_image
(
out
, "out");

1093 
	`show_image
(
¸›
, "crop");

1094 
	`ßve_image
(
out
, "out");

1095 #ifde‡
OPENCV


1096 
	`cvWaôKey
(0);

1099 
	`‰ì_image
(
im
);

1100 
	`‰ì_image
(
ªsized
);

1101 
	`‰ì_image
(
¸›
);

1102 i‡(
fûíame
) ;

1104 
	}
}

1107 
	$run_lsd
(
¨gc
, **
¨gv
)

1109 if(
¨gc
 < 4){

1110 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

1114 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

1115 
di•œy
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-display");

1116 *
fûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-file", "/home/pjreddie/data/imagenet/imagenet1k.train.list");

1118 *
cfg
 = 
¨gv
[3];

1119 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

1120 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

1121 *
acfg
 = 
¨gv
[5];

1122 *
aweights
 = (
¨gc
 > 6Ë? 
¨gv
[6] : 0;

1127 if(0==
	`°rcmp
(
¨gv
[2], "åaög™")Ë
	`åaö_dcg™
(
cfg
, 
weights
, 
acfg
, 
aweights
, 
˛ór
, 
di•œy
, 
fûe
);

1128 if(0==
	`°rcmp
(
¨gv
[2], "åaöcﬁ‹")Ë
	`åaö_cﬁ‹izî
(
cfg
, 
weights
, 
acfg
, 
aweights
, 
˛ór
, 
di•œy
);

1129 if(0==
	`°rcmp
(
¨gv
[2], "g™")Ë
	`ã°_dcg™
(
cfg
, 
weights
);

1130 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_lsd
(
cfg
, 
weights
, 
fûíame
, 0);

1131 if(0==
	`°rcmp
(
¨gv
[2], "cﬁ‹")Ë
	`ã°_lsd
(
cfg
, 
weights
, 
fûíame
, 1);

1135 
	}
}

	@examples/nightmare.c

1 
	~"d¨k√t.h
"

3 
	~<m©h.h
>

7 
	$abs_món
(*
x
, 
n
)

9 
i
;

10 
sum
 = 0;

11 
i
 = 0; i < 
n
; ++i){

12 
sum
 +
	`Ábs
(
x
[
i
]);

14  
sum
/
n
;

15 
	}
}

17 
	$ˇlcuœã_loss
(*
ouçut
, *
dñè
, 
n
, 
thªsh
)

19 
i
;

20 
món
 = 
	`món_¨øy
(
ouçut
, 
n
);

21 
v¨
 = 
	`v¨ün˚_¨øy
(
ouçut
, 
n
);

22 
i
 = 0; i < 
n
; ++i){

23 if(
dñè
[
i
] > 
món
 + 
thªsh
*
	`sqπ
(
v¨
)Ëdñè[i] = 
ouçut
[i];

24 
dñè
[
i
] = 0;

26 
	}
}

28 
	$›timize_pi˘uª
(
√tw‹k
 *
√t
, 
image
 
‹ig
, 
max_œyî
, 
sˇÀ
, 
øã
, 
thªsh
, 
n‹m
)

32 
√t
->
n
 = 
max_œyî
 + 1;

34 
dx
 = 
	`ønd
()%16 - 8;

35 
dy
 = 
	`ønd
()%16 - 8;

36 
Êù
 = 
	`ønd
()%2;

38 
image
 
¸›
 = 
	`¸›_image
(
‹ig
, 
dx
, 
dy
, orig.
w
, orig.
h
);

39 
image
 
im
 = 
	`ªsize_image
(
¸›
, ()(
‹ig
.
w
 * 
sˇÀ
), ()(‹ig.
h
 * scale));

40 if(
Êù
Ë
	`Êù_image
(
im
);

42 
	`ªsize_√tw‹k
(
√t
, 
im
.
w
, im.
h
);

43 
œyî
 
œ°
 = 
√t
->
œyîs
[√t->
n
-1];

46 
image
 
dñè
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

48 #ifde‡
GPU


49 
√t
->
dñè_gpu
 = 
	`cuda_make_¨øy
(
dñè
.
d©a
, 
im
.
w
*im.
h
*im.
c
);

50 
	`cuda_push_¨øy
(
√t
->
öput_gpu
, 
im
.
d©a
,Çë->
öputs
);

52 
	`f‹w¨d_√tw‹k_gpu
(*
√t
);

53 
	`c›y_gpu
(
œ°
.
ouçuts
,Üa°.
ouçut_gpu
, 1,Üa°.
dñè_gpu
, 1);

55 
	`cuda_puŒ_¨øy
(
œ°
.
dñè_gpu
,Üa°.
dñè
,Üa°.
ouçuts
);

56 
	`ˇlcuœã_loss
(
œ°
.
dñè
,Üa°.dñè,Üa°.
ouçuts
, 
thªsh
);

57 
	`cuda_push_¨øy
(
œ°
.
dñè_gpu
,Üa°.
dñè
,Üa°.
ouçuts
);

59 
	`backw¨d_√tw‹k_gpu
(*
√t
);

61 
	`cuda_puŒ_¨øy
(
√t
->
dñè_gpu
, 
dñè
.
d©a
, 
im
.
w
*im.
h
*im.
c
);

62 
	`cuda_‰ì
(
√t
->
dñè_gpu
);

63 
√t
->
dñè_gpu
 = 0;

65 
√t
->
öput
 = 
im
.
d©a
;

66 
√t
->
dñè
 = dñè.
d©a
;

67 
	`f‹w¨d_√tw‹k
(*
√t
);

68 
	`c›y_˝u
(
œ°
.
ouçuts
,Üa°.
ouçut
, 1,Üa°.
dñè
, 1);

69 
	`ˇlcuœã_loss
(
œ°
.
ouçut
,Üa°.
dñè
,Üa°.
ouçuts
, 
thªsh
);

70 
	`backw¨d_√tw‹k
(*
√t
);

73 if(
Êù
Ë
	`Êù_image
(
dñè
);

75 
image
 
ªsized
 = 
	`ªsize_image
(
dñè
, 
‹ig
.
w
, orig.
h
);

76 
image
 
out
 = 
	`¸›_image
(
ªsized
, -
dx
, -
dy
, 
‹ig
.
w
, orig.
h
);

86 if(
n‹m
Ë
	`n‹mÆize_¨øy
(
out
.
d©a
, out.
w
*out.
h
*out.
c
);

87 
	`axpy_˝u
(
‹ig
.
w
*‹ig.
h
*‹ig.
c
, 
øã
, 
out
.
d©a
, 1, orig.data, 1);

99 
	`c⁄°øö_image
(
‹ig
);

101 
	`‰ì_image
(
¸›
);

102 
	`‰ì_image
(
im
);

103 
	`‰ì_image
(
dñè
);

104 
	`‰ì_image
(
ªsized
);

105 
	`‰ì_image
(
out
);

107 
	}
}

109 
	$smoŸh
(
image
 
ªc⁄
, imagê
upd©e
, 
œmbda
, 
num
)

111 
i
, 
j
, 
k
;

112 
ii
, 
jj
;

113 
k
 = 0; k < 
ªc⁄
.
c
; ++k){

114 
j
 = 0; j < 
ªc⁄
.
h
; ++j){

115 
i
 = 0; i < 
ªc⁄
.
w
; ++i){

116 
out_ödex
 = 
i
 + 
ªc⁄
.
w
*(
j
 +Ñec⁄.
h
*
k
);

117 
jj
 = 
j
-
num
; jj <j +Çum && jj < 
ªc⁄
.
h
; ++jj){

118 i‡(
jj
 < 0) ;

119 
ii
 = 
i
-
num
; iò<ò+Çum && iò< 
ªc⁄
.
w
; ++ii){

120 i‡(
ii
 < 0) ;

121 
ö_ödex
 = 
ii
 + 
ªc⁄
.
w
*(
jj
 +Ñec⁄.
h
*
k
);

122 
upd©e
.
d©a
[
out_ödex
] +
œmbda
 * (
ªc⁄
.d©a[
ö_ödex
] -Ñecon.data[out_index]);

128 
	}
}

130 
	$ªc⁄°ru˘_pi˘uª
(
√tw‹k
 
√t
, *
„©uªs
, 
image
 
ªc⁄
, imagê
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 
ôîs
)

132 
ôî
 = 0;

133 
ôî
 = 0; iã∏< 
ôîs
; ++iter) {

134 
image
 
dñè
 = 
	`make_image
(
ªc⁄
.
w
,Ñec⁄.
h
,Ñec⁄.
c
);

136 #ifde‡
GPU


137 
œyî
 
l
 = 
	`gë_√tw‹k_ouçut_œyî
(
√t
);

138 
	`cuda_push_¨øy
(
√t
.
öput_gpu
, 
ªc⁄
.
d©a
,Ñec⁄.
w
*ªc⁄.
h
*ªc⁄.
c
);

140 
√t
.
dñè_gpu
 = 
	`cuda_make_¨øy
(
dñè
.
d©a
, dñè.
w
*dñè.
h
*dñè.
c
);

142 
	`f‹w¨d_√tw‹k_gpu
(
√t
);

143 
	`cuda_push_¨øy
(
l
.
dñè_gpu
, 
„©uªs
,Ü.
ouçuts
);

144 
	`axpy_gpu
(
l
.
ouçuts
, -1,Ü.
ouçut_gpu
, 1,Ü.
dñè_gpu
, 1);

145 
	`backw¨d_√tw‹k_gpu
(
√t
);

147 
	`cuda_puŒ_¨øy
(
√t
.
dñè_gpu
, 
dñè
.
d©a
, dñè.
w
*dñè.
h
*dñè.
c
);

149 
	`cuda_‰ì
(
√t
.
dñè_gpu
);

151 
√t
.
öput
 = 
ªc⁄
.
d©a
;

152 
√t
.
dñè
 = dñè.
d©a
;

153 
√t
.
åuth
 = 
„©uªs
;

155 
	`f‹w¨d_√tw‹k
(
√t
);

156 
	`backw¨d_√tw‹k
(
√t
);

160 
	`axpy_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 1, 
dñè
.
d©a
, 1, 
upd©e
.data, 1);

163 
	`axpy_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 
øã
, 
upd©e
.
d©a
, 1,Ñecon.data, 1);

164 
	`sˇl_˝u
(
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
, 
momítum
, 
upd©e
.
d©a
, 1);

166 
mag
 = 
	`mag_¨øy
(
dñè
.
d©a
, 
ªc⁄
.
w
*ªc⁄.
h
*ªc⁄.
c
);

167 
	`¥ötf
("mag: %f\n", 
mag
);

170 
	`c⁄°øö_image
(
ªc⁄
);

171 
	`‰ì_image
(
dñè
);

173 
	}
}

283 
	$run_nightm¨e
(
¨gc
, **
¨gv
)

285 
	`§™d
(0);

286 if(
¨gc
 < 4){

287 
	`Ârötf
(
°dîr
, "ußge: %†%†[cfg] [weights] [image] [œyî] [›ti⁄s! (›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

291 *
cfg
 = 
¨gv
[2];

292 *
weights
 = 
¨gv
[3];

293 *
öput
 = 
¨gv
[4];

294 
max_œyî
 = 
	`©oi
(
¨gv
[5]);

296 
ønge
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-range", 1);

297 
n‹m
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-norm", 1);

298 
rounds
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-rounds", 1);

299 
ôîs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-iters", 10);

300 
o˘aves
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-octaves", 4);

301 
zoom
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-zoom", 1.);

302 
øã
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-rate", .04);

303 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", 1.);

304 
rŸ©e
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-rotate", 0);

305 
momítum
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-momentum", .9);

306 
œmbda
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-lambda", .01);

307 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

308 
ªc⁄°ru˘
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-reconstruct");

309 
smoŸh_size
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-smooth", 1);

311 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfg
);

312 
	`lﬂd_weights
(&
√t
, 
weights
);

313 *
cfgba£
 = 
	`ba£cfg
(
cfg
);

314 *
imba£
 = 
	`ba£cfg
(
öput
);

316 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

317 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

319 
sˇÀ
 = 1;

320 if(
im
.
w
 > 512 || im.
h
 > 512){

321 if(
im
.
w
 > im.
h
Ë
sˇÀ
 = 512.0/im.w;

322 
sˇÀ
 = 512.0/
im
.
h
;

324 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
sˇÀ
*im.
w
, sˇÀ*im.
h
);

325 
	`‰ì_image
(
im
);

326 
im
 = 
ªsized
;

330 *
„©uªs
 = 0;

331 
image
 
upd©e
;

332 i‡(
ªc⁄°ru˘
){

333 
√t
.
n
 = 
max_œyî
;

334 
im
 = 
	`Àâîbox_image
(im, 
√t
.
w
,Çë.
h
);

337 
	`√tw‹k_¥edi˘
(
√t
, 
im
.
d©a
);

338 if(
√t
.
œyîs
[√t.
n
-1].
ty≥
 =
REGION
){

339 
	`¥ötf
("region!\n");

340 
	`zîo_obje˘√ss
(
√t
.
œyîs
[√t.
n
-1]);

342 
image
 
out_im
 = 
	`c›y_image
(
	`gë_√tw‹k_image
(
√t
));

349 
	`¥ötf
("%d fótuªs\n", 
out_im
.
w
*out_im.
h
*out_im.
c
);

351 
„©uªs
 = 
out_im
.
d©a
;

361 
upd©e
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

364 
e
;

365 
n
;

366 
e
 = 0;É < 
rounds
; ++e){

367 
	`Ârötf
(
°dîr
, "Iteration: ");

368 
	`fÊush
(
°dîr
);

369 
n
 = 0;Ç < 
ôîs
; ++n){

370 
	`Ârötf
(
°dîr
, "%d, ", 
n
);

371 
	`fÊush
(
°dîr
);

372 if(
ªc⁄°ru˘
){

373 
	`ªc⁄°ru˘_pi˘uª
(
√t
, 
„©uªs
, 
im
, 
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 1);

375 
	`show_image
(
im
, "reconstruction");

376 #ifde‡
OPENCV


377 
	`cvWaôKey
(10);

380 
œyî
 = 
max_œyî
 + 
	`ønd
()%
ønge
 -Ñange/2;

381 
o˘ave
 = 
	`ønd
()%
o˘aves
;

382 
	`›timize_pi˘uª
(&
√t
, 
im
, 
œyî
, 1/
	`pow
(1.33333333, 
o˘ave
), 
øã
, 
thªsh
, 
n‹m
);

385 
	`Ârötf
(
°dîr
, "done\n");

387 
image
 
g
 = 
	`gøysˇÀ_image
(
im
);

388 
	`‰ì_image
(
im
);

389 
im
 = 
g
;

391 
buff
[256];

392 i‡(
¥efix
){

393 
	`•rötf
(
buff
, "%s/%s_%s_%d_%06d",
¥efix
, 
imba£
, 
cfgba£
, 
max_œyî
, 
e
);

395 
	`•rötf
(
buff
, "%s_%s_%d_%06d",
imba£
, 
cfgba£
, 
max_œyî
, 
e
);

397 
	`¥ötf
("%d %s\n", 
e
, 
buff
);

398 
	`ßve_image
(
im
, 
buff
);

402 if(
rŸ©e
){

403 
image
 
rŸ
 = 
	`rŸ©e_image
(
im
, 
rŸ©e
);

404 
	`‰ì_image
(
im
);

405 
im
 = 
rŸ
;

407 
image
 
¸›
 = 
	`¸›_image
(
im
, im.
w
 * (1. - 
zoom
)/2., im.
h
 * (1.-zoom)/2., im.w*zoom, im.h*zoom);

408 
image
 
ªsized
 = 
	`ªsize_image
(
¸›
, 
im
.
w
, im.
h
);

409 
	`‰ì_image
(
im
);

410 
	`‰ì_image
(
¸›
);

411 
im
 = 
ªsized
;

413 
	}
}

	@examples/regressor.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

3 
	~<as£π.h
>

5 
	$åaö_ªgªss‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
)

7 
i
;

9 
avg_loss
 = -1;

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
	`¥ötf
("%d\n", 
ngpus
);

13 
√tw‹k
 *
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

15 
	`§™d
(
	`time
(0));

16 
£ed
 = 
	`ønd
();

17 
i
 = 0; i < 
ngpus
; ++i){

18 
	`§™d
(
£ed
);

19 #ifde‡
GPU


20 
	`cuda_£t_devi˚
(
gpus
[
i
]);

22 
√ts
[
i
] = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

23 if(
weightfûe
){

24 
	`lﬂd_weights
(&
√ts
[
i
], 
weightfûe
);

26 if(
˛ór
Ë*
√ts
[
i
].
£í
 = 0;

27 
√ts
[
i
].
À¨nög_øã
 *
ngpus
;

29 
	`§™d
(
	`time
(0));

30 
√tw‹k
 
√t
 = 
√ts
[0];

32 
imgs
 = 
√t
.
b©ch
 *Çë.
subdivisi⁄s
 * 
ngpus
;

34 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

35 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

37 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

38 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

40 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

41 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

42 
	`¥ötf
("%d\n", 
∂i°
->
size
);

43 
N
 = 
∂i°
->
size
;

44 
˛ock_t
 
time
;

46 
lﬂd_¨gs
 
¨gs
 = {0};

47 
¨gs
.
w
 = 
√t
.w;

48 
¨gs
.
h
 = 
√t
.h;

49 
¨gs
.
thªads
 = 32;

51 
¨gs
.
mö
 = 
√t
.
mö_¸›
;

52 
¨gs
.
max
 = 
√t
.
max_¸›
;

53 
¨gs
.
™gÀ
 = 
√t
.angle;

54 
¨gs
.
a•e˘
 = 
√t
.aspect;

55 
¨gs
.
exposuª
 = 
√t
.exposure;

56 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

57 
¨gs
.
hue
 = 
√t
.hue;

58 
¨gs
.
size
 = 
√t
.
w
;

60 
¨gs
.
∑ths
 =Öaths;

61 
¨gs
.
n
 = 
imgs
;

62 
¨gs
.
m
 = 
N
;

63 
¨gs
.
ty≥
 = 
REGRESSION_DATA
;

65 
d©a
 
åaö
;

66 
d©a
 
buf„r
;

67 
±hªad_t
 
lﬂd_thªad
;

68 
¨gs
.
d
 = &
buf„r
;

69 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

71 
ïoch
 = (*
√t
.
£í
)/
N
;

72 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

73 
time
=
	`˛ock
();

75 
	`±hªad_joö
(
lﬂd_thªad
, 0);

76 
åaö
 = 
buf„r
;

77 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

79 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

80 
time
=
	`˛ock
();

82 
loss
 = 0;

83 #ifde‡
GPU


84 if(
ngpus
 == 1){

85 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

87 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

90 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

92 if(
avg_loss
 =-1Ëavg_los†
loss
;

93 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

94 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

95 
	`‰ì_d©a
(
åaö
);

96 if(*
√t
.
£í
/
N
 > 
ïoch
){

97 
ïoch
 = *
√t
.
£í
/
N
;

98 
buff
[256];

99 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

100 
	`ßve_weights
(
√t
, 
buff
);

102 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

103 
buff
[256];

104 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

105 
	`ßve_weights
(
√t
, 
buff
);

108 
buff
[256];

109 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

110 
	`ßve_weights
(
√t
, 
buff
);

112 
	`‰ì_√tw‹k
(
√t
);

113 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

114 
	`‰ì_li°
(
∂i°
);

115 
	`‰ì
(
ba£
);

116 
	}
}

118 
	$¥edi˘_ªgªss‹
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

120 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

121 if(
weightfûe
){

122 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

124 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

125 
	`§™d
(2222222);

127 
˛ock_t
 
time
;

128 
buff
[256];

129 *
öput
 = 
buff
;

131 if(
fûíame
){

132 
	`°∫˝y
(
öput
, 
fûíame
, 256);

134 
	`¥ötf
("Enter Image Path: ");

135 
	`fÊush
(
°dout
);

136 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

137 if(!
öput
) ;

138 
	`°πok
(
öput
, "\n");

140 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

141 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
.
w
,Çë.
h
);

143 *
X
 = 
sized
.
d©a
;

144 
time
=
	`˛ock
();

145 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

146 
	`¥ötf
("Pªdi˘ed: %f\n", 
¥edi˘i⁄s
[0]);

147 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

148 
	`‰ì_image
(
im
);

149 
	`‰ì_image
(
sized
);

150 i‡(
fûíame
) ;

152 
	}
}

155 
	$demo_ªgªss‹
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

157 #ifde‡
OPENCV


158 
	`¥ötf
("Regressor Demo\n");

159 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

160 if(
weightfûe
){

161 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

163 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

165 
	`§™d
(2222222);

166 
CvC≠tuª
 * 
ˇp
;

168 if(
fûíame
){

169 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

171 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

174 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

175 
	`cvNamedWödow
("Regªss‹", 
CV_WINDOW_NORMAL
);

176 
	`cvResizeWödow
("Regressor", 512, 512);

177 
Âs
 = 0;

180 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

181 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

183 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

184 
image
 
ö_s
 = 
	`Àâîbox_image
(
ö
, 
√t
.
w
,Çë.
h
);

185 
	`show_image
(
ö
, "Regressor");

187 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

189 
	`¥ötf
("\033[2J");

190 
	`¥ötf
("\033[1;1H");

191 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

193 
	`¥ötf
("Pe›À: %f\n", 
¥edi˘i⁄s
[0]);

195 
	`‰ì_image
(
ö_s
);

196 
	`‰ì_image
(
ö
);

198 
	`cvWaôKey
(10);

200 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

201 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

202 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

203 
Âs
 = .9*Â†+ .1*
cuº
;

206 
	}
}

209 
	$run_ªgªss‹
(
¨gc
, **
¨gv
)

211 if(
¨gc
 < 4){

212 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

216 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

217 *
gpus
 = 0;

218 
gpu
 = 0;

219 
ngpus
 = 0;

220 if(
gpu_li°
){

221 
	`¥ötf
("%s\n", 
gpu_li°
);

222 
Àn
 = 
	`°æí
(
gpu_li°
);

223 
ngpus
 = 1;

224 
i
;

225 
i
 = 0; i < 
Àn
; ++i){

226 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

228 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

229 
i
 = 0; i < 
ngpus
; ++i){

230 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

231 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

234 
gpu
 = 
gpu_ödex
;

235 
gpus
 = &
gpu
;

236 
ngpus
 = 1;

239 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

240 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

241 *
d©a
 = 
¨gv
[3];

242 *
cfg
 = 
¨gv
[4];

243 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

244 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

245 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`¥edi˘_ªgªss‹
(
d©a
, 
cfg
, 
weights
);

246 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ªgªss‹
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

247 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_ªgªss‹
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

248 
	}
}

	@examples/rnn.c

1 
	~"d¨k√t.h
"

3 
	~<m©h.h
>

6 *
	mx
;

7 *
	my
;

8 } 
	tÊﬂt_∑ú
;

10 *
	$ªad_tokíized_d©a
(*
fûíame
, 
size_t
 *
ªad
)

12 
size_t
 
size
 = 512;

13 
size_t
 
cou¡
 = 0;

14 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

15 *
d
 = 
	`ˇŒoc
(
size
, ());

16 
n
, 
⁄e
;

17 
⁄e
 = 
	`fsˇnf
(
Â
, "%d", &
n
);

18 
⁄e
 == 1){

19 ++
cou¡
;

20 if(
cou¡
 > 
size
){

21 
size
 = size*2;

22 
d
 = 
	`ªÆloc
(d, 
size
*());

24 
d
[
cou¡
-1] = 
n
;

25 
⁄e
 = 
	`fsˇnf
(
Â
, "%d", &
n
);

27 
	`f˛o£
(
Â
);

28 
d
 = 
	`ªÆloc
(d, 
cou¡
*());

29 *
ªad
 = 
cou¡
;

30  
d
;

31 
	}
}

33 **
	$ªad_tokís
(*
fûíame
, 
size_t
 *
ªad
)

35 
size_t
 
size
 = 512;

36 
size_t
 
cou¡
 = 0;

37 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

38 **
d
 = 
	`ˇŒoc
(
size
, (*));

39 *
löe
;

40 (
löe
=
	`fgël
(
Â
)) != 0){

41 ++
cou¡
;

42 if(
cou¡
 > 
size
){

43 
size
 = size*2;

44 
d
 = 
	`ªÆloc
(d, 
size
*(*));

46 if(0==
	`°rcmp
(
löe
, "<NEWLINE>"))Üine = "\n";

47 
d
[
cou¡
-1] = 
löe
;

49 
	`f˛o£
(
Â
);

50 
d
 = 
	`ªÆloc
(d, 
cou¡
*(*));

51 *
ªad
 = 
cou¡
;

52  
d
;

53 
	}
}

55 
Êﬂt_∑ú
 
	$gë_∫n_tokí_d©a
(*
tokís
, 
size_t
 *
off£ts
, 
ch¨a˘îs
, size_à
Àn
, 
b©ch
, 
°ïs
)

57 *
x
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

58 *
y
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

59 
i
,
j
;

60 
i
 = 0; i < 
b©ch
; ++i){

61 
j
 = 0; j < 
°ïs
; ++j){

62 
cuº
 = 
tokís
[(
off£ts
[
i
])%
Àn
];

63 
√xt
 = 
tokís
[(
off£ts
[
i
] + 1)%
Àn
];

65 
x
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
cuº
] = 1;

66 
y
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
√xt
] = 1;

68 
off£ts
[
i
] = (off£ts[i] + 1Ë% 
Àn
;

70 if(
cuº
 >
ch¨a˘îs
 || cuº < 0 || 
√xt
 >= characters ||Çext < 0){

71 
	`îr‹
("Bad char");

75 
Êﬂt_∑ú
 
p
;

76 
p
.
x
 = x;

77 
p
.
y
 = y;

78  
p
;

79 
	}
}

81 
Êﬂt_∑ú
 
	$gë_∫n_d©a
(*
ãxt
, 
size_t
 *
off£ts
, 
ch¨a˘îs
, size_à
Àn
, 
b©ch
, 
°ïs
)

83 *
x
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

84 *
y
 = 
	`ˇŒoc
(
b©ch
 * 
°ïs
 * 
ch¨a˘îs
, ());

85 
i
,
j
;

86 
i
 = 0; i < 
b©ch
; ++i){

87 
j
 = 0; j < 
°ïs
; ++j){

88 
cuº
 = 
ãxt
[(
off£ts
[
i
])%
Àn
];

89 
√xt
 = 
ãxt
[(
off£ts
[
i
] + 1)%
Àn
];

91 
x
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
cuº
] = 1;

92 
y
[(
j
*
b©ch
 + 
i
)*
ch¨a˘îs
 + 
√xt
] = 1;

94 
off£ts
[
i
] = (off£ts[i] + 1Ë% 
Àn
;

96 if(
cuº
 > 255 || cuº <0 || 
√xt
 > 255 ||Çext <= 0){

101 
	`îr‹
("Bad char");

105 
Êﬂt_∑ú
 
p
;

106 
p
.
x
 = x;

107 
p
.
y
 = y;

108  
p
;

109 
	}
}

111 
	$ª£t_∫n_°©e
(
√tw‹k
 
√t
, 
b
)

113 
i
;

114 
i
 = 0; i < 
√t
.
n
; ++i) {

115 #ifde‡
GPU


116 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

117 if(
l
.
°©e_gpu
){

118 
	`fûl_gpu
(
l
.
ouçuts
, 0,Ü.
°©e_gpu
 +Ü.ouçuts*
b
, 1);

120 if(
l
.
h_gpu
){

121 
	`fûl_gpu
(
l
.
ouçuts
, 0,Ü.
h_gpu
 +Ü.ouçuts*
b
, 1);

125 
	}
}

127 
	$åaö_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
˛ór
, 
tokíized
)

129 
	`§™d
(
	`time
(0));

130 *
ãxt
 = 0;

131 *
tokís
 = 0;

132 
size_t
 
size
;

133 if(
tokíized
){

134 
tokís
 = 
	`ªad_tokíized_d©a
(
fûíame
, &
size
);

136 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

138 
	`f£ek
(
Â
, 0, 
SEEK_END
);

139 
size
 = 
	`·ñl
(
Â
);

140 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

142 
ãxt
 = 
	`ˇŒoc
(
size
+1, ());

143 
	`‰ód
(
ãxt
, 1, 
size
, 
Â
);

144 
	`f˛o£
(
Â
);

147 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

148 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

149 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

150 
avg_loss
 = -1;

151 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

152 if(
weightfûe
){

153 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

156 
öputs
 = 
√t
.inputs;

157 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g, I≈uts: %d %d %d\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
, 
öputs
,Çë.
b©ch
,Çë.
time_°ïs
);

158 
b©ch
 = 
√t
.batch;

159 
°ïs
 = 
√t
.
time_°ïs
;

160 if(
˛ór
Ë*
√t
.
£í
 = 0;

161 
i
 = (*
√t
.
£í
)/√t.
b©ch
;

163 
°ªams
 = 
b©ch
/
°ïs
;

164 
size_t
 *
off£ts
 = 
	`ˇŒoc
(
°ªams
, (size_t));

165 
j
;

166 
j
 = 0; j < 
°ªams
; ++j){

167 
off£ts
[
j
] = 
	`ønd_size_t
()%
size
;

170 
˛ock_t
 
time
;

171 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

172 
i
 += 1;

173 
time
=
	`˛ock
();

174 
Êﬂt_∑ú
 
p
;

175 if(
tokíized
){

176 
p
 = 
	`gë_∫n_tokí_d©a
(
tokís
, 
off£ts
, 
öputs
, 
size
, 
°ªams
, 
°ïs
);

178 
p
 = 
	`gë_∫n_d©a
(
ãxt
, 
off£ts
, 
öputs
, 
size
, 
°ªams
, 
°ïs
);

181 
	`c›y_˝u
(
√t
.
öputs
*√t.
b©ch
, 
p
.
x
, 1,Çë.
öput
, 1);

182 
	`c›y_˝u
(
√t
.
åuths
*√t.
b©ch
, 
p
.
y
, 1,Çë.
åuth
, 1);

183 
loss
 = 
	`åaö_√tw‹k_d©um
(
√t
Ë/ (
b©ch
);

184 
	`‰ì
(
p
.
x
);

185 
	`‰ì
(
p
.
y
);

186 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

187 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

189 
size_t
 
ch¨s
 = 
	`gë_cuºít_b©ch
(
√t
)*
b©ch
;

190 
	`Ârötf
(
°dîr
, "%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %‡ïochs\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), (Ë
ch¨s
/
size
);

192 
j
 = 0; j < 
°ªams
; ++j){

194 if(
	`ønd
()%64 == 0){

196 
off£ts
[
j
] = 
	`ønd_size_t
()%
size
;

197 
	`ª£t_∫n_°©e
(
√t
, 
j
);

201 if(
i
%10000==0){

202 
buff
[256];

203 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

204 
	`ßve_weights
(
√t
, 
buff
);

206 if(
i
%100==0){

207 
buff
[256];

208 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

209 
	`ßve_weights
(
√t
, 
buff
);

212 
buff
[256];

213 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

214 
	`ßve_weights
(
√t
, 
buff
);

215 
	}
}

217 
	$¥öt_symbﬁ
(
n
, **
tokís
){

218 if(
tokís
){

219 
	`¥ötf
("%†", 
tokís
[
n
]);

221 
	`¥ötf
("%c", 
n
);

223 
	}
}

225 
	$ã°_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, 
num
, *
£ed
, 
ãmp
, 
r£ed
, *
tokí_fûe
)

227 **
tokís
 = 0;

228 if(
tokí_fûe
){

229 
size_t
 
n
;

230 
tokís
 = 
	`ªad_tokís
(
tokí_fûe
, &
n
);

233 
	`§™d
(
r£ed
);

234 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

235 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

237 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

238 if(
weightfûe
){

239 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

241 
öputs
 = 
√t
.inputs;

243 
i
, 
j
;

244 
i
 = 0; i < 
√t
.
n
; ++iË√t.
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

245 
c
 = 0;

246 
Àn
 = 
	`°æí
(
£ed
);

247 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

257 
i
 = 0; i < 
Àn
-1; ++i){

258 
c
 = 
£ed
[
i
];

259 
öput
[
c
] = 1;

260 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

261 
öput
[
c
] = 0;

262 
	`¥öt_symbﬁ
(
c
, 
tokís
);

264 if(
Àn
Ë
c
 = 
£ed
[len-1];

265 
	`¥öt_symbﬁ
(
c
, 
tokís
);

266 
i
 = 0; i < 
num
; ++i){

267 
öput
[
c
] = 1;

268 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

269 
öput
[
c
] = 0;

270 
j
 = 32; j < 127; ++j){

273 
j
 = 0; j < 
öputs
; ++j){

274 i‡(
out
[
j
] < .0001) out[j] = 0;

276 
c
 = 
	`ßm∂e_¨øy
(
out
, 
öputs
);

277 
	`¥öt_symbﬁ
(
c
, 
tokís
);

279 
	`¥ötf
("\n");

280 
	}
}

282 
	$ã°_è˘ic_∫n
(*
cfgfûe
, *
weightfûe
, 
num
, 
ãmp
, 
r£ed
, *
tokí_fûe
)

284 **
tokís
 = 0;

285 if(
tokí_fûe
){

286 
size_t
 
n
;

287 
tokís
 = 
	`ªad_tokís
(
tokí_fûe
, &
n
);

290 
	`§™d
(
r£ed
);

291 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

292 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

294 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

295 if(
weightfûe
){

296 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

298 
öputs
 = 
√t
.inputs;

300 
i
, 
j
;

301 
i
 = 0; i < 
√t
.
n
; ++iË√t.
œyîs
[i].
ãm≥øtuª
 = 
ãmp
;

302 
c
 = 0;

303 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

304 *
out
 = 0;

306 (
c
 = 
	`gëc
(
°dö
)Ë!
EOF
){

307 
öput
[
c
] = 1;

308 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

309 
öput
[
c
] = 0;

311 
i
 = 0; i < 
num
; ++i){

312 
j
 = 0; j < 
öputs
; ++j){

313 i‡(
out
[
j
] < .0001) out[j] = 0;

315 
√xt
 = 
	`ßm∂e_¨øy
(
out
, 
öputs
);

316 if(
c
 ='.' && 
√xt
 == '\n') ;

317 
c
 = 
√xt
;

318 
	`¥öt_symbﬁ
(
c
, 
tokís
);

320 
öput
[
c
] = 1;

321 
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

322 
öput
[
c
] = 0;

324 
	`¥ötf
("\n");

325 
	}
}

327 
	$vÆid_è˘ic_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

329 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

330 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

332 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

333 if(
weightfûe
){

334 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

336 
öputs
 = 
√t
.inputs;

338 
cou¡
 = 0;

339 
w‹ds
 = 1;

340 
c
;

341 
Àn
 = 
	`°æí
(
£ed
);

342 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

343 
i
;

344 
i
 = 0; i < 
Àn
; ++i){

345 
c
 = 
£ed
[
i
];

346 
öput
[()
c
] = 1;

347 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

348 
öput
[()
c
] = 0;

350 
sum
 = 0;

351 
c
 = 
	`gëc
(
°dö
);

352 
log2
 = 
	`log
(2);

353 
ö
 = 0;

354 
c
 !
EOF
){

355 
√xt
 = 
	`gëc
(
°dö
);

356 if(
√xt
 =
EOF
) ;

357 if(
√xt
 < 0 ||Çexà>255Ë
	`îr‹
("Out ofÑange character");

359 
öput
[
c
] = 1;

360 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

361 
öput
[
c
] = 0;

363 if(
c
 ='.' && 
√xt
 ='\n'Ë
ö
 = 0;

364 if(!
ö
) {

365 if(
c
 ='>' && 
√xt
 == '>'){

366 
ö
 = 1;

367 ++
w‹ds
;

369 
c
 = 
√xt
;

372 ++
cou¡
;

373 
sum
 +
	`log
(
out
[
√xt
])/
log2
;

374 
c
 = 
√xt
;

375 
	`¥ötf
("%d %d Pî∂exôy: %4.4‡ W‹d Pî∂exôy: %4.4f\n", 
cou¡
, 
w‹ds
, 
	`pow
(2, -
sum
/count),Öow(2, -sum/words));

377 
	}
}

379 
	$vÆid_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

381 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

382 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

384 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

385 if(
weightfûe
){

386 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

388 
öputs
 = 
√t
.inputs;

390 
cou¡
 = 0;

391 
w‹ds
 = 1;

392 
c
;

393 
Àn
 = 
	`°æí
(
£ed
);

394 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

395 
i
;

396 
i
 = 0; i < 
Àn
; ++i){

397 
c
 = 
£ed
[
i
];

398 
öput
[()
c
] = 1;

399 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

400 
öput
[()
c
] = 0;

402 
sum
 = 0;

403 
c
 = 
	`gëc
(
°dö
);

404 
log2
 = 
	`log
(2);

405 
c
 !
EOF
){

406 
√xt
 = 
	`gëc
(
°dö
);

407 if(
√xt
 =
EOF
) ;

408 if(
√xt
 < 0 ||Çexà>255Ë
	`îr‹
("Out ofÑange character");

409 ++
cou¡
;

410 if(
√xt
 =' ' ||Çexà='\n' ||Çexà='\t'Ë++
w‹ds
;

411 
öput
[
c
] = 1;

412 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

413 
öput
[
c
] = 0;

414 
sum
 +
	`log
(
out
[
√xt
])/
log2
;

415 
c
 = 
√xt
;

416 
	`¥ötf
("%d BPC: %4.4‡ Pî∂exôy: %4.4‡ W‹d Pî∂exôy: %4.4f\n", 
cou¡
, -
sum
/cou¡, 
	`pow
(2, -sum/cou¡),Öow(2, -sum/
w‹ds
));

418 
	}
}

420 
	$vec_ch¨_∫n
(*
cfgfûe
, *
weightfûe
, *
£ed
)

422 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

423 
	`Ârötf
(
°dîr
, "%s\n", 
ba£
);

425 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

426 if(
weightfûe
){

427 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

429 
öputs
 = 
√t
.inputs;

431 
c
;

432 
£ed_Àn
 = 
	`°æí
(
£ed
);

433 *
öput
 = 
	`ˇŒoc
(
öputs
, ());

434 
i
;

435 *
löe
;

436 (
löe
=
	`fgël
(
°dö
)) != 0){

437 
	`ª£t_∫n_°©e
(
√t
, 0);

438 
i
 = 0; i < 
£ed_Àn
; ++i){

439 
c
 = 
£ed
[
i
];

440 
öput
[()
c
] = 1;

441 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

442 
öput
[()
c
] = 0;

444 
	`°rù
(
löe
);

445 
°r_Àn
 = 
	`°æí
(
löe
);

446 
i
 = 0; i < 
°r_Àn
; ++i){

447 
c
 = 
löe
[
i
];

448 
öput
[()
c
] = 1;

449 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

450 
öput
[()
c
] = 0;

452 
c
 = ' ';

453 
öput
[()
c
] = 1;

454 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

455 
öput
[()
c
] = 0;

457 
œyî
 
l
 = 
√t
.
œyîs
[0];

458 #ifde‡
GPU


459 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
ouçuts
);

461 
	`¥ötf
("%s", 
löe
);

462 
i
 = 0; i < 
l
.
ouçuts
; ++i){

463 
	`¥ötf
(",%g", 
l
.
ouçut
[
i
]);

465 
	`¥ötf
("\n");

467 
	}
}

469 
	$run_ch¨_∫n
(
¨gc
, **
¨gv
)

471 if(
¨gc
 < 4){

472 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

475 *
fûíame
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-file", "data/shakespeare.txt");

476 *
£ed
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-seed", "\n\n");

477 
Àn
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-len", 1000);

478 
ãmp
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-temp", .7);

479 
r£ed
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-§™d", 
	`time
(0));

480 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

481 
tokíized
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-tokenized");

482 *
tokís
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-tokens", 0);

484 *
cfg
 = 
¨gv
[3];

485 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

486 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_ch¨_∫n
(
cfg
, 
weights
, 
fûíame
, 
˛ór
, 
tokíized
);

487 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid_ch¨_∫n
(
cfg
, 
weights
, 
£ed
);

488 if(0==
	`°rcmp
(
¨gv
[2], "vÆidè˘ic")Ë
	`vÆid_è˘ic_∫n
(
cfg
, 
weights
, 
£ed
);

489 if(0==
	`°rcmp
(
¨gv
[2], "vec")Ë
	`vec_ch¨_∫n
(
cfg
, 
weights
, 
£ed
);

490 if(0==
	`°rcmp
(
¨gv
[2], "gíî©e")Ë
	`ã°_ch¨_∫n
(
cfg
, 
weights
, 
Àn
, 
£ed
, 
ãmp
, 
r£ed
, 
tokís
);

491 if(0==
	`°rcmp
(
¨gv
[2], "gíî©ëa˘ic")Ë
	`ã°_è˘ic_∫n
(
cfg
, 
weights
, 
Àn
, 
ãmp
, 
r£ed
, 
tokís
);

492 
	}
}

	@examples/rnn_vid.c

1 
	~"d¨k√t.h
"

3 #ifde‡
OPENCV


4 
image
 
gë_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
);

5 
image
 
ùl_to_image
(
I∂Image
* 
§c
);

7 
ªc⁄°ru˘_pi˘uª
(
√tw‹k
 
√t
, *
„©uªs
, 
image
 
ªc⁄
, imagê
upd©e
, 
øã
, 
momítum
, 
œmbda
, 
smoŸh_size
, 
ôîs
);

11 *
	mx
;

12 *
	my
;

13 } 
	tÊﬂt_∑ú
;

15 
Êﬂt_∑ú
 
	$gë_∫n_vid_d©a
(
√tw‹k
 
√t
, **
fûes
, 
n
, 
b©ch
, 
°ïs
)

17 
b
;

18 
	`as£π
(
√t
.
b©ch
 =
°ïs
 + 1);

19 
image
 
out_im
 = 
	`gë_√tw‹k_image
(
√t
);

20 
ouçut_size
 = 
out_im
.
w
*out_im.
h
*out_im.
c
;

21 
	`¥ötf
("%d %d %d\n", 
out_im
.
w
, out_im.
h
, out_im.
c
);

22 *
„©s
 = 
	`ˇŒoc
(
√t
.
b©ch
*b©ch*
ouçut_size
, ());

23 
b
 = 0; b < 
b©ch
; ++b){

24 
öput_size
 = 
√t
.
w
*√t.
h
*√t.
c
;

25 *
öput
 = 
	`ˇŒoc
(
öput_size
*
√t
.
b©ch
, ());

26 *
fûíame
 = 
fûes
[
	`ønd
()%
n
];

27 
CvC≠tuª
 *
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

28 
‰ames
 = 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_COUNT
);

29 
ödex
 = 
	`ønd
(Ë% (
‰ames
 - 
°ïs
 - 2);

30 i‡(
‰ames
 < (
°ïs
 + 4)){

31 --
b
;

32 
	`‰ì
(
öput
);

36 
	`¥ötf
("‰ames: %d, index: %d\n", 
‰ames
, 
ödex
);

37 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_POS_FRAMES
, 
ödex
);

39 
i
;

40 
i
 = 0; i < 
√t
.
b©ch
; ++i){

41 
I∂Image
* 
§c
 = 
	`cvQuîyFøme
(
ˇp
);

42 
image
 
im
 = 
	`ùl_to_image
(
§c
);

43 
	`rgbgr_image
(
im
);

44 
image
 
ª
 = 
	`ªsize_image
(
im
, 
√t
.
w
,Çë.
h
);

47 
	`mem˝y
(
öput
 + 
i
*
öput_size
, 
ª
.
d©a
, input_size*());

48 
	`‰ì_image
(
im
);

49 
	`‰ì_image
(
ª
);

51 *
ouçut
 = 
	`√tw‹k_¥edi˘
(
√t
, 
öput
);

53 
	`‰ì
(
öput
);

55 
i
 = 0; i < 
√t
.
b©ch
; ++i){

56 
	`mem˝y
(
„©s
 + (
b
 + 
i
*
b©ch
)*
ouçut_size
, 
ouçut
 + i*output_size, output_size*());

59 
	`cvRñó£C≠tuª
(&
ˇp
);

63 
Êﬂt_∑ú
 
p
 = {0};

64 
p
.
x
 = 
„©s
;

65 
p
.
y
 = 
„©s
 + 
ouçut_size
*
b©ch
;

67  
p
;

68 
	}
}

71 
	$åaö_vid_∫n
(*
cfgfûe
, *
weightfûe
)

73 *
åaö_videos
 = "data/vid/train.txt";

74 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

75 
	`§™d
(
	`time
(0));

76 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

77 
	`¥ötf
("%s\n", 
ba£
);

78 
avg_loss
 = -1;

79 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

80 if(
weightfûe
){

81 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

83 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

84 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

85 
i
 = *
√t
.
£í
/
imgs
;

87 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_videos
);

88 
N
 = 
∂i°
->
size
;

89 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

90 
˛ock_t
 
time
;

91 
°ïs
 = 
√t
.
time_°ïs
;

92 
b©ch
 = 
√t
.b©ch /Çë.
time_°ïs
;

94 
√tw‹k
 
exåa˘‹
 = 
	`∑r£_√tw‹k_cfg
("cfg/extractor.cfg");

95 
	`lﬂd_weights
(&
exåa˘‹
, "/home/pjreddie/trained/yolo-coco.conv");

97 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

98 
i
 += 1;

99 
time
=
	`˛ock
();

100 
Êﬂt_∑ú
 
p
 = 
	`gë_∫n_vid_d©a
(
exåa˘‹
, 
∑ths
, 
N
, 
b©ch
, 
°ïs
);

102 
	`c›y_˝u
(
√t
.
öputs
*√t.
b©ch
, 
p
.
x
, 1,Çë.
öput
, 1);

103 
	`c›y_˝u
(
√t
.
åuths
*√t.
b©ch
, 
p
.
y
, 1,Çë.
åuth
, 1);

104 
loss
 = 
	`åaö_√tw‹k_d©um
(
√t
Ë/ (√t.
b©ch
);

107 
	`‰ì
(
p
.
x
);

108 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

109 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

111 
	`Ârötf
(
°dîr
, "%d: %f, %‡avg, %‡øã, %l‡£c⁄ds\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
));

112 if(
i
%100==0){

113 
buff
[256];

114 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

115 
	`ßve_weights
(
√t
, 
buff
);

117 if(
i
%10==0){

118 
buff
[256];

119 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

120 
	`ßve_weights
(
√t
, 
buff
);

123 
buff
[256];

124 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

125 
	`ßve_weights
(
√t
, 
buff
);

126 
	}
}

129 
image
 
	$ßve_ªc⁄°ru˘i⁄
(
√tw‹k
 
√t
, 
image
 *
öô
, *
„©
, *
«me
, 
i
)

131 
image
 
ªc⁄
;

132 i‡(
öô
) {

133 
ªc⁄
 = 
	`c›y_image
(*
öô
);

135 
ªc⁄
 = 
	`make_øndom_image
(
√t
.
w
,Çë.
h
, 3);

138 
image
 
upd©e
 = 
	`make_image
(
√t
.
w
,Çë.
h
, 3);

139 
	`ªc⁄°ru˘_pi˘uª
(
√t
, 
„©
, 
ªc⁄
, 
upd©e
, .01, .9, .1, 2, 50);

140 
buff
[256];

141 
	`•rötf
(
buff
, "%s%d", 
«me
, 
i
);

142 
	`ßve_image
(
ªc⁄
, 
buff
);

143 
	`‰ì_image
(
upd©e
);

144  
ªc⁄
;

145 
	}
}

147 
	$gíî©e_vid_∫n
(*
cfgfûe
, *
weightfûe
)

149 
√tw‹k
 
exåa˘‹
 = 
	`∑r£_√tw‹k_cfg
("cfg/extractor.recon.cfg");

150 
	`lﬂd_weights
(&
exåa˘‹
, "/home/pjreddie/trained/yolo-coco.conv");

152 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

153 if(
weightfûe
){

154 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

156 
	`£t_b©ch_√tw‹k
(&
exåa˘‹
, 1);

157 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

159 
i
;

160 
CvC≠tuª
 *
ˇp
 = 
	`cvC≠tuªFromFûe
("/extra/vid/ILSVRC2015/Data/VID/snippets/val/ILSVRC2015_val_00007030.mp4");

161 *
„©
;

162 *
√xt
;

163 
image
 
œ°
;

164 
i
 = 0; i < 25; ++i){

165 
image
 
im
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

166 
image
 
ª
 = 
	`ªsize_image
(
im
, 
exåa˘‹
.
w
,Éxåa˘‹.
h
);

167 
„©
 = 
	`√tw‹k_¥edi˘
(
exåa˘‹
, 
ª
.
d©a
);

168 if(
i
 > 0){

169 
	`¥ötf
("%‡%f\n", 
	`món_¨øy
(
„©
, 14*14*512), 
	`v¨ün˚_¨øy
(feat, 14*14*512));

170 
	`¥ötf
("%‡%f\n", 
	`món_¨øy
(
√xt
, 14*14*512), 
	`v¨ün˚_¨øy
(next, 14*14*512));

171 
	`¥ötf
("%f\n", 
	`m£_¨øy
(
„©
, 14*14*512));

172 
	`axpy_˝u
(14*14*512, -1, 
„©
, 1, 
√xt
, 1);

173 
	`¥ötf
("%f\n", 
	`m£_¨øy
(
√xt
, 14*14*512));

175 
√xt
 = 
	`√tw‹k_¥edi˘
(
√t
, 
„©
);

177 
	`‰ì_image
(
im
);

179 
	`‰ì_image
(
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, 0, 
„©
, "„©", 
i
));

180 
	`‰ì_image
(
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, 0, 
√xt
, "√xt", 
i
));

181 i‡(
i
==24Ë
œ°
 = 
	`c›y_image
(
ª
);

182 
	`‰ì_image
(
ª
);

184 
i
 = 0; i < 30; ++i){

185 
√xt
 = 
	`√tw‹k_¥edi˘
(
√t
,Çext);

186 
image
 
√w
 = 
	`ßve_ªc⁄°ru˘i⁄
(
exåa˘‹
, &
œ°
, 
√xt
, "√w", 
i
);

187 
	`‰ì_image
(
œ°
);

188 
œ°
 = 
√w
;

190 
	}
}

192 
	$run_vid_∫n
(
¨gc
, **
¨gv
)

194 if(
¨gc
 < 4){

195 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

199 *
cfg
 = 
¨gv
[3];

200 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

202 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_vid_∫n
(
cfg
, 
weights
);

203 if(0==
	`°rcmp
(
¨gv
[2], "gíî©e")Ë
	`gíî©e_vid_∫n
(
cfg
, 
weights
);

204 
	}
}

206 
	$run_vid_∫n
(
¨gc
, **
¨gv
){
	}
}

	@examples/segmenter.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

3 
	~<as£π.h
>

5 
	$åaö_£gmíãr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, *
gpus
, 
ngpus
, 
˛ór
, 
di•œy
)

7 
i
;

9 
avg_loss
 = -1;

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
	`¥ötf
("%d\n", 
ngpus
);

13 
√tw‹k
 *
√ts
 = 
	`ˇŒoc
(
ngpus
, (network));

15 
	`§™d
(
	`time
(0));

16 
£ed
 = 
	`ønd
();

17 
i
 = 0; i < 
ngpus
; ++i){

18 
	`§™d
(
£ed
);

19 #ifde‡
GPU


20 
	`cuda_£t_devi˚
(
gpus
[
i
]);

22 
√ts
[
i
] = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

23 if(
weightfûe
){

24 
	`lﬂd_weights
(&
√ts
[
i
], 
weightfûe
);

26 if(
˛ór
Ë*
√ts
[
i
].
£í
 = 0;

28 
	`§™d
(
	`time
(0));

29 
√tw‹k
 
√t
 = 
√ts
[0];

30 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

32 
div
 = 
√t
.
w
/
¥ed
.w;

33 
	`as£π
(
¥ed
.
w
 * 
div
 =
√t
.w);

34 
	`as£π
(
¥ed
.
h
 * 
div
 =
√t
.h);

36 
imgs
 = 
√t
.
b©ch
 *Çë.
subdivisi⁄s
 * 
ngpus
;

38 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

39 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

41 *
backup_dúe˘‹y
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "backup", "/backup/");

42 *
åaö_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "train", "data/train.list");

44 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_li°
);

45 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

46 
	`¥ötf
("%d\n", 
∂i°
->
size
);

47 
N
 = 
∂i°
->
size
;

48 
˛ock_t
 
time
;

50 
lﬂd_¨gs
 
¨gs
 = {0};

51 
¨gs
.
w
 = 
√t
.w;

52 
¨gs
.
h
 = 
√t
.h;

53 
¨gs
.
thªads
 = 32;

54 
¨gs
.
sˇÀ
 = 
div
;

56 
¨gs
.
mö
 = 
√t
.
mö_¸›
;

57 
¨gs
.
max
 = 
√t
.
max_¸›
;

58 
¨gs
.
™gÀ
 = 
√t
.angle;

59 
¨gs
.
a•e˘
 = 
√t
.aspect;

60 
¨gs
.
exposuª
 = 
√t
.exposure;

61 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

62 
¨gs
.
hue
 = 
√t
.hue;

63 
¨gs
.
size
 = 
√t
.
w
;

64 
¨gs
.
˛as£s
 = 80;

66 
¨gs
.
∑ths
 =Öaths;

67 
¨gs
.
n
 = 
imgs
;

68 
¨gs
.
m
 = 
N
;

69 
¨gs
.
ty≥
 = 
SEGMENTATION_DATA
;

71 
d©a
 
åaö
;

72 
d©a
 
buf„r
;

73 
±hªad_t
 
lﬂd_thªad
;

74 
¨gs
.
d
 = &
buf„r
;

75 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

77 
ïoch
 = (*
√t
.
£í
)/
N
;

78 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

79 
time
=
	`˛ock
();

81 
	`±hªad_joö
(
lﬂd_thªad
, 0);

82 
åaö
 = 
buf„r
;

83 
lﬂd_thªad
 = 
	`lﬂd_d©a
(
¨gs
);

85 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

86 
time
=
	`˛ock
();

88 
loss
 = 0;

89 #ifde‡
GPU


90 if(
ngpus
 == 1){

91 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

93 
loss
 = 
	`åaö_√tw‹ks
(
√ts
, 
ngpus
, 
åaö
, 4);

96 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

98 if(
di•œy
){

99 
image
 
å
 = 
	`Êﬂt_to_image
(
√t
.
w
/
div
,Çë.
h
/div, 80, 
åaö
.
y
.
vÆs
[√t.
b©ch
*“ë.
subdivisi⁄s
-1)]);

100 
image
 
im
 = 
	`Êﬂt_to_image
(
√t
.
w
,Çë.
h
,Çë.
c
, 
åaö
.
X
.
vÆs
[√t.
b©ch
*“ë.
subdivisi⁄s
-1)]);

101 
image
 
mask
 = 
	`mask_to_rgb
(
å
);

102 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

103 
	`show_image
(
im
, "input");

104 
	`show_image
(
¥mask
, "pred");

105 
	`show_image
(
mask
, "truth");

106 #ifde‡
OPENCV


107 
	`cvWaôKey
(100);

109 
	`‰ì_image
(
mask
);

110 
	`‰ì_image
(
¥mask
);

112 if(
avg_loss
 =-1Ëavg_los†
loss
;

113 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

114 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

115 
	`‰ì_d©a
(
åaö
);

116 if(*
√t
.
£í
/
N
 > 
ïoch
){

117 
ïoch
 = *
√t
.
£í
/
N
;

118 
buff
[256];

119 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

120 
	`ßve_weights
(
√t
, 
buff
);

122 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

123 
buff
[256];

124 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

125 
	`ßve_weights
(
√t
, 
buff
);

128 
buff
[256];

129 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

130 
	`ßve_weights
(
√t
, 
buff
);

132 
	`‰ì_√tw‹k
(
√t
);

133 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

134 
	`‰ì_li°
(
∂i°
);

135 
	`‰ì
(
ba£
);

136 
	}
}

138 
	$¥edi˘_£gmíãr
(*
d©afûe
, *
cfgfûe
, *
weightfûe
, *
fûíame
)

140 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

141 if(
weightfûe
){

142 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

144 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

145 
	`§™d
(2222222);

147 
˛ock_t
 
time
;

148 
buff
[256];

149 *
öput
 = 
buff
;

151 if(
fûíame
){

152 
	`°∫˝y
(
öput
, 
fûíame
, 256);

154 
	`¥ötf
("Enter Image Path: ");

155 
	`fÊush
(
°dout
);

156 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

157 if(!
öput
) ;

158 
	`°πok
(
öput
, "\n");

160 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

161 
image
 
sized
 = 
	`Àâîbox_image
(
im
, 
√t
.
w
,Çë.
h
);

163 *
X
 = 
sized
.
d©a
;

164 
time
=
	`˛ock
();

165 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

166 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

167 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

168 
	`show_image
(
sized
, "orig");

169 
	`show_image
(
¥mask
, "pred");

170 #ifde‡
OPENCV


171 
	`cvWaôKey
(0);

173 
	`¥ötf
("Pªdi˘ed: %f\n", 
¥edi˘i⁄s
[0]);

174 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

175 
	`‰ì_image
(
im
);

176 
	`‰ì_image
(
sized
);

177 
	`‰ì_image
(
¥mask
);

178 i‡(
fûíame
) ;

180 
	}
}

183 
	$demo_£gmíãr
(*
d©acfg
, *
cfgfûe
, *
weightfûe
, 
ˇm_ödex
, c⁄° *
fûíame
)

185 #ifde‡
OPENCV


186 
	`¥ötf
("Classifier Demo\n");

187 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

188 if(
weightfûe
){

189 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

191 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

193 
	`§™d
(2222222);

194 
CvC≠tuª
 * 
ˇp
;

196 if(
fûíame
){

197 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

199 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

202 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

203 
	`cvNamedWödow
("Segmíãr", 
CV_WINDOW_NORMAL
);

204 
	`cvResizeWödow
("Segmenter", 512, 512);

205 
Âs
 = 0;

208 
timevÆ
 
tvÆ_bef‹e
, 
tvÆ_a·î
, 
tvÆ_ªsu…
;

209 
	`gëtimeofday
(&
tvÆ_bef‹e
, 
NULL
);

211 
image
 
ö
 = 
	`gë_image_‰om_°ªam
(
ˇp
);

212 
image
 
ö_s
 = 
	`Àâîbox_image
(
ö
, 
√t
.
w
,Çë.
h
);

214 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
ö_s
.
d©a
);

216 
	`¥ötf
("\033[2J");

217 
	`¥ötf
("\033[1;1H");

218 
	`¥ötf
("\nFPS:%.0f\n",
Âs
);

220 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

221 
image
 
¥mask
 = 
	`mask_to_rgb
(
¥ed
);

222 
	`show_image
(
¥mask
, "Segmenter");

224 
	`‰ì_image
(
ö_s
);

225 
	`‰ì_image
(
ö
);

226 
	`‰ì_image
(
¥mask
);

228 
	`cvWaôKey
(10);

230 
	`gëtimeofday
(&
tvÆ_a·î
, 
NULL
);

231 
	`timîsub
(&
tvÆ_a·î
, &
tvÆ_bef‹e
, &
tvÆ_ªsu…
);

232 
cuº
 = 1000000.f/(()
tvÆ_ªsu…
.
tv_u£c
);

233 
Âs
 = .9*Â†+ .1*
cuº
;

236 
	}
}

239 
	$run_£gmíãr
(
¨gc
, **
¨gv
)

241 if(
¨gc
 < 4){

242 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

246 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

247 *
gpus
 = 0;

248 
gpu
 = 0;

249 
ngpus
 = 0;

250 if(
gpu_li°
){

251 
	`¥ötf
("%s\n", 
gpu_li°
);

252 
Àn
 = 
	`°æí
(
gpu_li°
);

253 
ngpus
 = 1;

254 
i
;

255 
i
 = 0; i < 
Àn
; ++i){

256 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

258 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

259 
i
 = 0; i < 
ngpus
; ++i){

260 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

261 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

264 
gpu
 = 
gpu_ödex
;

265 
gpus
 = &
gpu
;

266 
ngpus
 = 1;

269 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

270 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

271 
di•œy
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-display");

272 *
d©a
 = 
¨gv
[3];

273 *
cfg
 = 
¨gv
[4];

274 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

275 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

276 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`¥edi˘_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
fûíame
);

277 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
, 
di•œy
);

278 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo_£gmíãr
(
d©a
, 
cfg
, 
weights
, 
ˇm_ödex
, 
fûíame
);

279 
	}
}

	@examples/super.c

1 
	~"d¨k√t.h
"

3 
	$åaö_su≥r
(*
cfgfûe
, *
weightfûe
, 
˛ór
)

5 *
åaö_images
 = "/data/imagenet/imagenet1k.train.list";

6 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

7 
	`§™d
(
	`time
(0));

8 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

9 
	`¥ötf
("%s\n", 
ba£
);

10 
avg_loss
 = -1;

11 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

12 if(
weightfûe
){

13 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

15 if(
˛ór
Ë*
√t
.
£í
 = 0;

16 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

17 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

18 
i
 = *
√t
.
£í
/
imgs
;

19 
d©a
 
åaö
, 
buf„r
;

22 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

24 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

26 
lﬂd_¨gs
 
¨gs
 = {0};

27 
¨gs
.
w
 = 
√t
.w;

28 
¨gs
.
h
 = 
√t
.h;

29 
¨gs
.
sˇÀ
 = 4;

30 
¨gs
.
∑ths
 =Öaths;

31 
¨gs
.
n
 = 
imgs
;

32 
¨gs
.
m
 = 
∂i°
->
size
;

33 
¨gs
.
d
 = &
buf„r
;

34 
¨gs
.
ty≥
 = 
SUPER_DATA
;

36 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

37 
˛ock_t
 
time
;

39 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

40 
i
 += 1;

41 
time
=
	`˛ock
();

42 
	`±hªad_joö
(
lﬂd_thªad
, 0);

43 
åaö
 = 
buf„r
;

44 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

46 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

48 
time
=
	`˛ock
();

49 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

50 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

51 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

53 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

54 if(
i
%1000==0){

55 
buff
[256];

56 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

57 
	`ßve_weights
(
√t
, 
buff
);

59 if(
i
%100==0){

60 
buff
[256];

61 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

62 
	`ßve_weights
(
√t
, 
buff
);

64 
	`‰ì_d©a
(
åaö
);

66 
buff
[256];

67 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

68 
	`ßve_weights
(
√t
, 
buff
);

69 
	}
}

71 
	$ã°_su≥r
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

73 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

74 if(
weightfûe
){

75 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

77 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

78 
	`§™d
(2222222);

80 
˛ock_t
 
time
;

81 
buff
[256];

82 *
öput
 = 
buff
;

84 if(
fûíame
){

85 
	`°∫˝y
(
öput
, 
fûíame
, 256);

87 
	`¥ötf
("Enter Image Path: ");

88 
	`fÊush
(
°dout
);

89 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

90 if(!
öput
) ;

91 
	`°πok
(
öput
, "\n");

93 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

94 
	`ªsize_√tw‹k
(&
√t
, 
im
.
w
, im.
h
);

95 
	`¥ötf
("%d %d\n", 
im
.
w
, im.
h
);

97 *
X
 = 
im
.
d©a
;

98 
time
=
	`˛ock
();

99 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

100 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

101 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

102 
	`ßve_image
(
out
, "out");

104 
	`‰ì_image
(
im
);

105 i‡(
fûíame
) ;

107 
	}
}

110 
	$run_su≥r
(
¨gc
, **
¨gv
)

112 if(
¨gc
 < 4){

113 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

117 *
cfg
 = 
¨gv
[3];

118 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

119 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

120 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

121 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_su≥r
(
cfg
, 
weights
, 
˛ór
);

122 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_su≥r
(
cfg
, 
weights
, 
fûíame
);

126 
	}
}

	@examples/swag.c

1 
	~"d¨k√t.h
"

2 
	~<sys/time.h
>

4 
	$åaö_swag
(*
cfgfûe
, *
weightfûe
)

6 *
åaö_images
 = "data/voc.0712.trainval";

7 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

8 
	`§™d
(
	`time
(0));

9 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

10 
	`¥ötf
("%s\n", 
ba£
);

11 
avg_loss
 = -1;

12 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

13 if(
weightfûe
){

14 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

16 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

17 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

18 
i
 = *
√t
.
£í
/
imgs
;

19 
d©a
 
åaö
, 
buf„r
;

21 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 1];

23 
side
 = 
l
.side;

24 
˛as£s
 = 
l
.classes;

25 
jôãr
 = 
l
.jitter;

27 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

29 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

31 
lﬂd_¨gs
 
¨gs
 = {0};

32 
¨gs
.
w
 = 
√t
.w;

33 
¨gs
.
h
 = 
√t
.h;

34 
¨gs
.
∑ths
 =Öaths;

35 
¨gs
.
n
 = 
imgs
;

36 
¨gs
.
m
 = 
∂i°
->
size
;

37 
¨gs
.
˛as£s
 = classes;

38 
¨gs
.
jôãr
 = jitter;

39 
¨gs
.
num_boxes
 = 
side
;

40 
¨gs
.
d
 = &
buf„r
;

41 
¨gs
.
ty≥
 = 
REGION_DATA
;

43 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

44 
˛ock_t
 
time
;

46 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

47 
i
 += 1;

48 
time
=
	`˛ock
();

49 
	`±hªad_joö
(
lﬂd_thªad
, 0);

50 
åaö
 = 
buf„r
;

51 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

53 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

55 
time
=
	`˛ock
();

56 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

57 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

58 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

60 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

61 if(
i
%1000==0 || i == 600){

62 
buff
[256];

63 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

64 
	`ßve_weights
(
√t
, 
buff
);

66 
	`‰ì_d©a
(
åaö
);

68 
buff
[256];

69 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

70 
	`ßve_weights
(
√t
, 
buff
);

71 
	}
}

73 
	$run_swag
(
¨gc
, **
¨gv
)

75 if(
¨gc
 < 4){

76 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

80 *
cfg
 = 
¨gv
[3];

81 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

82 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_swag
(
cfg
, 
weights
);

83 
	}
}

	@examples/tag.c

1 
	~"d¨k√t.h
"

3 
	$åaö_èg
(*
cfgfûe
, *
weightfûe
, 
˛ór
)

5 
	`§™d
(
	`time
(0));

6 
avg_loss
 = -1;

7 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

8 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

9 
	`¥ötf
("%s\n", 
ba£
);

10 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

11 if(
weightfûe
){

12 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

14 if(
˛ór
Ë*
√t
.
£í
 = 0;

15 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

16 
imgs
 = 1024;

17 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/tag/train.list");

18 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

19 
	`¥ötf
("%d\n", 
∂i°
->
size
);

20 
N
 = 
∂i°
->
size
;

21 
˛ock_t
 
time
;

22 
±hªad_t
 
lﬂd_thªad
;

23 
d©a
 
åaö
;

24 
d©a
 
buf„r
;

26 
lﬂd_¨gs
 
¨gs
 = {0};

27 
¨gs
.
w
 = 
√t
.w;

28 
¨gs
.
h
 = 
√t
.h;

30 
¨gs
.
mö
 = 
√t
.
w
;

31 
¨gs
.
max
 = 
√t
.
max_¸›
;

32 
¨gs
.
size
 = 
√t
.
w
;

34 
¨gs
.
∑ths
 =Öaths;

35 
¨gs
.
˛as£s
 = 
√t
.
ouçuts
;

36 
¨gs
.
n
 = 
imgs
;

37 
¨gs
.
m
 = 
N
;

38 
¨gs
.
d
 = &
buf„r
;

39 
¨gs
.
ty≥
 = 
TAG_DATA
;

41 
¨gs
.
™gÀ
 = 
√t
.angle;

42 
¨gs
.
exposuª
 = 
√t
.exposure;

43 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

44 
¨gs
.
hue
 = 
√t
.hue;

46 
	`Ârötf
(
°dîr
, "%d cœs£s\n", 
√t
.
ouçuts
);

48 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

49 
ïoch
 = (*
√t
.
£í
)/
N
;

50 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

51 
time
=
	`˛ock
();

52 
	`±hªad_joö
(
lﬂd_thªad
, 0);

53 
åaö
 = 
buf„r
;

55 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

56 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

57 
time
=
	`˛ock
();

58 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

59 if(
avg_loss
 =-1Ëavg_los†
loss
;

60 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

61 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

62 
	`‰ì_d©a
(
åaö
);

63 if(*
√t
.
£í
/
N
 > 
ïoch
){

64 
ïoch
 = *
√t
.
£í
/
N
;

65 
buff
[256];

66 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

67 
	`ßve_weights
(
√t
, 
buff
);

69 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

70 
buff
[256];

71 
	`•rötf
(
buff
, "%s/%s.backup",
backup_dúe˘‹y
,
ba£
);

72 
	`ßve_weights
(
√t
, 
buff
);

75 
buff
[256];

76 
	`•rötf
(
buff
, "%s/%s.weights", 
backup_dúe˘‹y
, 
ba£
);

77 
	`ßve_weights
(
√t
, 
buff
);

79 
	`±hªad_joö
(
lﬂd_thªad
, 0);

80 
	`‰ì_d©a
(
buf„r
);

81 
	`‰ì_√tw‹k
(
√t
);

82 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

83 
	`‰ì_li°
(
∂i°
);

84 
	`‰ì
(
ba£
);

85 
	}
}

87 
	$ã°_èg
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

89 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

90 if(
weightfûe
){

91 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

93 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

94 
	`§™d
(2222222);

95 
i
 = 0;

96 **
«mes
 = 
	`gë_œbñs
("data/tags.txt");

97 
˛ock_t
 
time
;

98 
ödexes
[10];

99 
buff
[256];

100 *
öput
 = 
buff
;

101 
size
 = 
√t
.
w
;

103 if(
fûíame
){

104 
	`°∫˝y
(
öput
, 
fûíame
, 256);

106 
	`¥ötf
("Enter Image Path: ");

107 
	`fÊush
(
°dout
);

108 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

109 if(!
öput
) ;

110 
	`°πok
(
öput
, "\n");

112 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

113 
image
 
r
 = 
	`ªsize_mö
(
im
, 
size
);

114 
	`ªsize_√tw‹k
(&
√t
, 
r
.
w
,Ñ.
h
);

115 
	`¥ötf
("%d %d\n", 
r
.
w
,Ñ.
h
);

117 *
X
 = 
r
.
d©a
;

118 
time
=
	`˛ock
();

119 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

120 
	`t›_¥edi˘i⁄s
(
√t
, 10, 
ödexes
);

121 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

122 
i
 = 0; i < 10; ++i){

123 
ödex
 = 
ödexes
[
i
];

124 
	`¥ötf
("%.1f%%: %s\n", 
¥edi˘i⁄s
[
ödex
]*100, 
«mes
[index]);

126 if(
r
.
d©a
 !
im
.d©aË
	`‰ì_image
(r);

127 
	`‰ì_image
(
im
);

128 i‡(
fûíame
) ;

130 
	}
}

133 
	$run_èg
(
¨gc
, **
¨gv
)

135 if(
¨gc
 < 4){

136 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

140 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

141 *
cfg
 = 
¨gv
[3];

142 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

143 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

144 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_èg
(
cfg
, 
weights
, 
˛ór
);

145 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_èg
(
cfg
, 
weights
, 
fûíame
);

146 
	}
}

	@examples/voxel.c

1 
	~"d¨k√t.h
"

3 
	$exåa˘_voxñ
(*
lfûe
, *
rfûe
, *
¥efix
)

5 #ifde‡
OPENCV


6 
w
 = 1920;

7 
h
 = 1080;

8 
shi·
 = 0;

9 
cou¡
 = 0;

10 
CvC≠tuª
 *
lˇp
 = 
	`cvC≠tuªFromFûe
(
lfûe
);

11 
CvC≠tuª
 *
rˇp
 = 
	`cvC≠tuªFromFûe
(
rfûe
);

13 
image
 
l
 = 
	`gë_image_‰om_°ªam
(
lˇp
);

14 
image
 
r
 = 
	`gë_image_‰om_°ªam
(
rˇp
);

15 if(!
l
.
w
 || !
r
.w) ;

16 if(
cou¡
%100 == 0) {

17 
shi·
 = 
	`be°_3d_shi·_r
(
l
, 
r
, -l.
h
/100,Ü.h/100);

18 
	`¥ötf
("%d\n", 
shi·
);

20 
image
 
ls
 = 
	`¸›_image
(
l
, (l.
w
 - w)/2, (l.
h
 - h)/2, w, h);

21 
image
 
rs
 = 
	`¸›_image
(
r
, 105 + (r.
w
 - w)/2, (r.
h
 - h)/2 + 
shi·
, w, h);

22 
buff
[256];

23 
	`•rötf
(
buff
, "%s_%05d_l", 
¥efix
, 
cou¡
);

24 
	`ßve_image
(
ls
, 
buff
);

25 
	`•rötf
(
buff
, "%s_%05d_r", 
¥efix
, 
cou¡
);

26 
	`ßve_image
(
rs
, 
buff
);

27 
	`‰ì_image
(
l
);

28 
	`‰ì_image
(
r
);

29 
	`‰ì_image
(
ls
);

30 
	`‰ì_image
(
rs
);

31 ++
cou¡
;

35 
	`¥ötf
("need OpenCV forÉxtraction\n");

37 
	}
}

39 
	$åaö_voxñ
(*
cfgfûe
, *
weightfûe
)

41 *
åaö_images
 = "/data/imagenet/imagenet1k.train.list";

42 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

43 
	`§™d
(
	`time
(0));

44 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

45 
	`¥ötf
("%s\n", 
ba£
);

46 
avg_loss
 = -1;

47 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

48 if(
weightfûe
){

49 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

51 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

52 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

53 
i
 = *
√t
.
£í
/
imgs
;

54 
d©a
 
åaö
, 
buf„r
;

57 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

59 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

61 
lﬂd_¨gs
 
¨gs
 = {0};

62 
¨gs
.
w
 = 
√t
.w;

63 
¨gs
.
h
 = 
√t
.h;

64 
¨gs
.
sˇÀ
 = 4;

65 
¨gs
.
∑ths
 =Öaths;

66 
¨gs
.
n
 = 
imgs
;

67 
¨gs
.
m
 = 
∂i°
->
size
;

68 
¨gs
.
d
 = &
buf„r
;

69 
¨gs
.
ty≥
 = 
SUPER_DATA
;

71 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

72 
˛ock_t
 
time
;

74 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

75 
i
 += 1;

76 
time
=
	`˛ock
();

77 
	`±hªad_joö
(
lﬂd_thªad
, 0);

78 
åaö
 = 
buf„r
;

79 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

81 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

83 
time
=
	`˛ock
();

84 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

85 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

86 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

88 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

89 if(
i
%1000==0){

90 
buff
[256];

91 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

92 
	`ßve_weights
(
√t
, 
buff
);

94 if(
i
%100==0){

95 
buff
[256];

96 
	`•rötf
(
buff
, "%s/%s.backup", 
backup_dúe˘‹y
, 
ba£
);

97 
	`ßve_weights
(
√t
, 
buff
);

99 
	`‰ì_d©a
(
åaö
);

101 
buff
[256];

102 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

103 
	`ßve_weights
(
√t
, 
buff
);

104 
	}
}

106 
	$ã°_voxñ
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

108 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

109 if(
weightfûe
){

110 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

112 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

113 
	`§™d
(2222222);

115 
˛ock_t
 
time
;

116 
buff
[256];

117 *
öput
 = 
buff
;

119 if(
fûíame
){

120 
	`°∫˝y
(
öput
, 
fûíame
, 256);

122 
	`¥ötf
("Enter Image Path: ");

123 
	`fÊush
(
°dout
);

124 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

125 if(!
öput
) ;

126 
	`°πok
(
öput
, "\n");

128 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

129 
	`ªsize_√tw‹k
(&
√t
, 
im
.
w
, im.
h
);

130 
	`¥ötf
("%d %d\n", 
im
.
w
, im.
h
);

132 *
X
 = 
im
.
d©a
;

133 
time
=
	`˛ock
();

134 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

135 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

136 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

137 
	`ßve_image
(
out
, "out");

139 
	`‰ì_image
(
im
);

140 i‡(
fûíame
) ;

142 
	}
}

145 
	$run_voxñ
(
¨gc
, **
¨gv
)

147 if(
¨gc
 < 4){

148 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

152 *
cfg
 = 
¨gv
[3];

153 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

154 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

155 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_voxñ
(
cfg
, 
weights
);

156 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_voxñ
(
cfg
, 
weights
, 
fûíame
);

157 if(0==
	`°rcmp
(
¨gv
[2], "exåa˘")Ë
	`exåa˘_voxñ
(argv[3],árgv[4],árgv[5]);

161 
	}
}

	@examples/writing.c

1 
	~"d¨k√t.h
"

3 
	$åaö_wrôög
(*
cfgfûe
, *
weightfûe
)

5 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

6 
	`§™d
(
	`time
(0));

7 
avg_loss
 = -1;

8 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

9 
	`¥ötf
("%s\n", 
ba£
);

10 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

11 if(
weightfûe
){

12 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

14 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

15 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

16 
li°
 *
∂i°
 = 
	`gë_∑ths
("figures.list");

17 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

18 
˛ock_t
 
time
;

19 
N
 = 
∂i°
->
size
;

20 
	`¥ötf
("N: %d\n", 
N
);

21 
image
 
out
 = 
	`gë_√tw‹k_image
(
√t
);

23 
d©a
 
åaö
, 
buf„r
;

25 
lﬂd_¨gs
 
¨gs
 = {0};

26 
¨gs
.
w
 = 
√t
.w;

27 
¨gs
.
h
 = 
√t
.h;

28 
¨gs
.
out_w
 = 
out
.
w
;

29 
¨gs
.
out_h
 = 
out
.
h
;

30 
¨gs
.
∑ths
 =Öaths;

31 
¨gs
.
n
 = 
imgs
;

32 
¨gs
.
m
 = 
N
;

33 
¨gs
.
d
 = &
buf„r
;

34 
¨gs
.
ty≥
 = 
WRITING_DATA
;

36 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

37 
ïoch
 = (*
√t
.
£í
)/
N
;

38 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
 ||Çet.max_batches == 0){

39 
time
=
	`˛ock
();

40 
	`±hªad_joö
(
lﬂd_thªad
, 0);

41 
åaö
 = 
buf„r
;

42 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

43 
	`¥ötf
("Lﬂded %l‡£c⁄ds\n",
	`£c
(
	`˛ock
()-
time
));

45 
time
=
	`˛ock
();

46 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

64 if(
avg_loss
 =-1Ëavg_los†
loss
;

65 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

66 
	`¥ötf
("%ld, %.3f: %f, %‡avg, %‡øã, %l‡£c⁄ds, %ld images\n", 
	`gë_cuºít_b©ch
(
√t
), ()(*√t.
£í
)/
N
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
“ë), 
	`£c
(
	`˛ock
()-
time
), *net.seen);

67 
	`‰ì_d©a
(
åaö
);

68 if(
	`gë_cuºít_b©ch
(
√t
)%100 == 0){

69 
buff
[256];

70 
	`•rötf
(
buff
, "%s/%s_b©ch_%ld.weights", 
backup_dúe˘‹y
, 
ba£
, 
	`gë_cuºít_b©ch
(
√t
));

71 
	`ßve_weights
(
√t
, 
buff
);

73 if(*
√t
.
£í
/
N
 > 
ïoch
){

74 
ïoch
 = *
√t
.
£í
/
N
;

75 
buff
[256];

76 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

77 
	`ßve_weights
(
√t
, 
buff
);

80 
	}
}

82 
	$ã°_wrôög
(*
cfgfûe
, *
weightfûe
, *
fûíame
)

84 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

85 if(
weightfûe
){

86 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

88 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

89 
	`§™d
(2222222);

90 
˛ock_t
 
time
;

91 
buff
[256];

92 *
öput
 = 
buff
;

94 if(
fûíame
){

95 
	`°∫˝y
(
öput
, 
fûíame
, 256);

97 
	`¥ötf
("Enter Image Path: ");

98 
	`fÊush
(
°dout
);

99 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

100 if(!
öput
) ;

101 
	`°πok
(
öput
, "\n");

104 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
, 0, 0);

105 
	`ªsize_√tw‹k
(&
√t
, 
im
.
w
, im.
h
);

106 
	`¥ötf
("%d %d %d\n", 
im
.
h
, im.
w
, im.
c
);

107 *
X
 = 
im
.
d©a
;

108 
time
=
	`˛ock
();

109 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

110 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

111 
image
 
¥ed
 = 
	`gë_√tw‹k_image
(
√t
);

113 
image
 
upßm∂ed
 = 
	`ªsize_image
(
¥ed
, 
im
.
w
, im.
h
);

114 
image
 
thªsh
 = 
	`thªshﬁd_image
(
upßm∂ed
, .5);

115 
¥ed
 = 
thªsh
;

117 
	`show_image
(
¥ed
, "prediction");

118 
	`show_image
(
im
, "orig");

119 #ifde‡
OPENCV


120 
	`cvWaôKey
(0);

121 
	`cvDe°royAŒWödows
();

124 
	`‰ì_image
(
upßm∂ed
);

125 
	`‰ì_image
(
thªsh
);

126 
	`‰ì_image
(
im
);

127 i‡(
fûíame
) ;

129 
	}
}

131 
	$run_wrôög
(
¨gc
, **
¨gv
)

133 if(
¨gc
 < 4){

134 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

138 *
cfg
 = 
¨gv
[3];

139 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

140 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

141 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_wrôög
(
cfg
, 
weights
);

142 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_wrôög
(
cfg
, 
weights
, 
fûíame
);

143 
	}
}

	@examples/yolo.c

1 
	~"d¨k√t.h
"

3 *
	gvoc_«mes
[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};

5 
	$åaö_yﬁo
(*
cfgfûe
, *
weightfûe
)

7 *
åaö_images
 = "/data/voc/train.txt";

8 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

9 
	`§™d
(
	`time
(0));

10 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

11 
	`¥ötf
("%s\n", 
ba£
);

12 
avg_loss
 = -1;

13 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

14 if(
weightfûe
){

15 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

17 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

18 
imgs
 = 
√t
.
b©ch
*√t.
subdivisi⁄s
;

19 
i
 = *
√t
.
£í
/
imgs
;

20 
d©a
 
åaö
, 
buf„r
;

23 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
 - 1];

25 
side
 = 
l
.side;

26 
˛as£s
 = 
l
.classes;

27 
jôãr
 = 
l
.jitter;

29 
li°
 *
∂i°
 = 
	`gë_∑ths
(
åaö_images
);

31 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

33 
lﬂd_¨gs
 
¨gs
 = {0};

34 
¨gs
.
w
 = 
√t
.w;

35 
¨gs
.
h
 = 
√t
.h;

36 
¨gs
.
∑ths
 =Öaths;

37 
¨gs
.
n
 = 
imgs
;

38 
¨gs
.
m
 = 
∂i°
->
size
;

39 
¨gs
.
˛as£s
 = classes;

40 
¨gs
.
jôãr
 = jitter;

41 
¨gs
.
num_boxes
 = 
side
;

42 
¨gs
.
d
 = &
buf„r
;

43 
¨gs
.
ty≥
 = 
REGION_DATA
;

45 
¨gs
.
™gÀ
 = 
√t
.angle;

46 
¨gs
.
exposuª
 = 
√t
.exposure;

47 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

48 
¨gs
.
hue
 = 
√t
.hue;

50 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

51 
˛ock_t
 
time
;

53 
	`gë_cuºít_b©ch
(
√t
Ë<Çë.
max_b©ches
){

54 
i
 += 1;

55 
time
=
	`˛ock
();

56 
	`±hªad_joö
(
lﬂd_thªad
, 0);

57 
åaö
 = 
buf„r
;

58 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

60 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

62 
time
=
	`˛ock
();

63 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

64 i‡(
avg_loss
 < 0Ëavg_los†
loss
;

65 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

67 
	`¥ötf
("%d: %f, %‡avg, %‡øã, %l‡£c⁄ds, %d images\n", 
i
, 
loss
, 
avg_loss
, 
	`gë_cuºít_øã
(
√t
), 
	`£c
(
	`˛ock
()-
time
), i*
imgs
);

68 if(
i
%1000==0 || (i < 1000 && i%100 == 0)){

69 
buff
[256];

70 
	`•rötf
(
buff
, "%s/%s_%d.weights", 
backup_dúe˘‹y
, 
ba£
, 
i
);

71 
	`ßve_weights
(
√t
, 
buff
);

73 
	`‰ì_d©a
(
åaö
);

75 
buff
[256];

76 
	`•rötf
(
buff
, "%s/%s_föÆ.weights", 
backup_dúe˘‹y
, 
ba£
);

77 
	`ßve_weights
(
√t
, 
buff
);

78 
	}
}

80 
	$¥öt_yﬁo_dëe˘i⁄s
(
FILE
 **
Âs
, *
id
, 
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
w
, 
h
)

82 
i
, 
j
;

83 
i
 = 0; i < 
tŸÆ
; ++i){

84 
xmö
 = 
boxes
[
i
].
x
 - boxes[i].
w
/2.;

85 
xmax
 = 
boxes
[
i
].
x
 + boxes[i].
w
/2.;

86 
ymö
 = 
boxes
[
i
].
y
 - boxes[i].
h
/2.;

87 
ymax
 = 
boxes
[
i
].
y
 + boxes[i].
h
/2.;

89 i‡(
xmö
 < 0) xmin = 0;

90 i‡(
ymö
 < 0) ymin = 0;

91 i‡(
xmax
 > 
w
) xmax = w;

92 i‡(
ymax
 > 
h
) ymax = h;

94 
j
 = 0; j < 
˛as£s
; ++j){

95 i‡(
¥obs
[
i
][
j
]Ë
	`Ârötf
(
Âs
[j], "%†%‡%‡%‡%‡%f\n", 
id
,Örobs[i][j],

96 
xmö
, 
ymö
, 
xmax
, 
ymax
);

99 
	}
}

101 
	$vÆid©e_yﬁo
(*
cfgfûe
, *
weightfûe
)

103 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

104 if(
weightfûe
){

105 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

107 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

108 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

109 
	`§™d
(
	`time
(0));

111 *
ba£
 = "results/comp4_det_test_";

113 
li°
 *
∂i°
 = 
	`gë_∑ths
("/home/pjreddie/data/voc/2007_test.txt");

115 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

117 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

118 
˛as£s
 = 
l
.classes;

120 
j
;

121 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

122 
j
 = 0; j < 
˛as£s
; ++j){

123 
buff
[1024];

124 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
voc_«mes
[
j
]);

125 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

127 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (box));

128 **
¥obs
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (*));

129 
j
 = 0; j < 
l
.
side
*l.side*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
, (*));

131 
m
 = 
∂i°
->
size
;

132 
i
=0;

133 
t
;

135 
thªsh
 = .001;

136 
nms
 = 1;

137 
iou_thªsh
 = .5;

139 
¡hªads
 = 8;

140 
image
 *
vÆ
 = 
	`ˇŒoc
(
¡hªads
, (image));

141 
image
 *
vÆ_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

142 
image
 *
buf
 = 
	`ˇŒoc
(
¡hªads
, (image));

143 
image
 *
buf_ªsized
 = 
	`ˇŒoc
(
¡hªads
, (image));

144 
±hªad_t
 *
thr
 = 
	`ˇŒoc
(
¡hªads
, (pthread_t));

146 
lﬂd_¨gs
 
¨gs
 = {0};

147 
¨gs
.
w
 = 
√t
.w;

148 
¨gs
.
h
 = 
√t
.h;

149 
¨gs
.
ty≥
 = 
IMAGE_DATA
;

151 
t
 = 0;Å < 
¡hªads
; ++t){

152 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

153 
¨gs
.
im
 = &
buf
[
t
];

154 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

155 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

157 
time_t
 
°¨t
 = 
	`time
(0);

158 
i
 = 
¡hªads
; i < 
m
+nthreads; i +=Çthreads){

159 
	`Ârötf
(
°dîr
, "%d\n", 
i
);

160 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

161 
	`±hªad_joö
(
thr
[
t
], 0);

162 
vÆ
[
t
] = 
buf
[t];

163 
vÆ_ªsized
[
t
] = 
buf_ªsized
[t];

165 
t
 = 0;Å < 
¡hªads
 && 
i
+à< 
m
; ++t){

166 
¨gs
.
∑th
 = 
∑ths
[
i
+
t
];

167 
¨gs
.
im
 = &
buf
[
t
];

168 
¨gs
.
ªsized
 = &
buf_ªsized
[
t
];

169 
thr
[
t
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

171 
t
 = 0;Å < 
¡hªads
 && 
i
+t-¡hªad†< 
m
; ++t){

172 *
∑th
 = 
∑ths
[
i
+
t
-
¡hªads
];

173 *
id
 = 
	`ba£cfg
(
∑th
);

174 *
X
 = 
vÆ_ªsized
[
t
].
d©a
;

175 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

176 
w
 = 
vÆ
[
t
].w;

177 
h
 = 
vÆ
[
t
].h;

178 
	`gë_dëe˘i⁄_boxes
(
l
, 
w
, 
h
, 
thªsh
, 
¥obs
, 
boxes
, 0);

179 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
iou_thªsh
);

180 
	`¥öt_yﬁo_dëe˘i⁄s
(
Âs
, 
id
, 
boxes
, 
¥obs
, 
l
.
side
*l.side*l.
n
, 
˛as£s
, 
w
, 
h
);

181 
	`‰ì
(
id
);

182 
	`‰ì_image
(
vÆ
[
t
]);

183 
	`‰ì_image
(
vÆ_ªsized
[
t
]);

186 
	`Ârötf
(
°dîr
, "TŸÆ Dëe˘i⁄ Time: %‡Sec⁄ds\n", ()(
	`time
(0Ë- 
°¨t
));

187 
	}
}

189 
	$vÆid©e_yﬁo_ªˇŒ
(*
cfgfûe
, *
weightfûe
)

191 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

192 if(
weightfûe
){

193 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

195 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

196 
	`Ârötf
(
°dîr
, "Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

197 
	`§™d
(
	`time
(0));

199 *
ba£
 = "results/comp4_det_test_";

200 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/voc.2007.test");

201 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

203 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

204 
˛as£s
 = 
l
.classes;

205 
side
 = 
l
.side;

207 
j
, 
k
;

208 
FILE
 **
Âs
 = 
	`ˇŒoc
(
˛as£s
, (FILE *));

209 
j
 = 0; j < 
˛as£s
; ++j){

210 
buff
[1024];

211 
	`¢¥ötf
(
buff
, 1024, "%s%s.txt", 
ba£
, 
voc_«mes
[
j
]);

212 
Âs
[
j
] = 
	`f›í
(
buff
, "w");

214 
box
 *
boxes
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (box));

215 **
¥obs
 = 
	`ˇŒoc
(
side
*side*
l
.
n
, (*));

216 
j
 = 0; j < 
side
*side*
l
.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
(
˛as£s
, (*));

218 
m
 = 
∂i°
->
size
;

219 
i
=0;

221 
thªsh
 = .001;

222 
iou_thªsh
 = .5;

223 
nms
 = 0;

225 
tŸÆ
 = 0;

226 
c‹ª˘
 = 0;

227 
¥›oßls
 = 0;

228 
avg_iou
 = 0;

230 
i
 = 0; i < 
m
; ++i){

231 *
∑th
 = 
∑ths
[
i
];

232 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
∑th
, 0, 0);

233 
image
 
sized
 = 
	`ªsize_image
(
‹ig
, 
√t
.
w
,Çë.
h
);

234 *
id
 = 
	`ba£cfg
(
∑th
);

235 
	`√tw‹k_¥edi˘
(
√t
, 
sized
.
d©a
);

236 
	`gë_dëe˘i⁄_boxes
(
l
, 
‹ig
.
w
, orig.
h
, 
thªsh
, 
¥obs
, 
boxes
, 1);

237 i‡(
nms
Ë
	`do_nms
(
boxes
, 
¥obs
, 
side
*side*
l
.
n
, 1,Çms);

239 
œbñ∑th
[4096];

240 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

241 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

242 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

243 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

245 
num_œbñs
 = 0;

246 
box_œbñ
 *
åuth
 = 
	`ªad_boxes
(
œbñ∑th
, &
num_œbñs
);

247 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

248 if(
¥obs
[
k
][0] > 
thªsh
){

249 ++
¥›oßls
;

252 
j
 = 0; j < 
num_œbñs
; ++j) {

253 ++
tŸÆ
;

254 
box
 
t
 = {
åuth
[
j
].
x
,Åruth[j].
y
,Åruth[j].
w
,Åruth[j].
h
};

255 
be°_iou
 = 0;

256 
k
 = 0; k < 
side
*side*
l
.
n
; ++k){

257 
iou
 = 
	`box_iou
(
boxes
[
k
], 
t
);

258 if(
¥obs
[
k
][0] > 
thªsh
 && 
iou
 > 
be°_iou
){

259 
be°_iou
 = 
iou
;

262 
avg_iou
 +
be°_iou
;

263 if(
be°_iou
 > 
iou_thªsh
){

264 ++
c‹ª˘
;

268 
	`Ârötf
(
°dîr
, "%5d %5d %5d\tRPs/Img: %.2f\tIOU: %.2f%%\tReˇŒ:%.2f%%\n", 
i
, 
c‹ª˘
, 
tŸÆ
, ()
¥›oßls
/(i+1), 
avg_iou
*100/total, 100.*correct/total);

269 
	`‰ì
(
id
);

270 
	`‰ì_image
(
‹ig
);

271 
	`‰ì_image
(
sized
);

273 
	}
}

275 
	$ã°_yﬁo
(*
cfgfûe
, *
weightfûe
, *
fûíame
, 
thªsh
)

277 
image
 **
Æphabë
 = 
	`lﬂd_Æphabë
();

278 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

279 if(
weightfûe
){

280 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

282 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

283 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

284 
	`§™d
(2222222);

285 
˛ock_t
 
time
;

286 
buff
[256];

287 *
öput
 = 
buff
;

288 
j
;

289 
nms
=.4;

290 
box
 *
boxes
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (box));

291 **
¥obs
 = 
	`ˇŒoc
(
l
.
side
*l.side*l.
n
, (*));

292 
j
 = 0; j < 
l
.
side
*l.side*l.
n
; ++jË
¥obs
[j] = 
	`ˇŒoc
÷.
˛as£s
, (*));

294 if(
fûíame
){

295 
	`°∫˝y
(
öput
, 
fûíame
, 256);

297 
	`¥ötf
("Enter Image Path: ");

298 
	`fÊush
(
°dout
);

299 
öput
 = 
	`fgës
(öput, 256, 
°dö
);

300 if(!
öput
) ;

301 
	`°πok
(
öput
, "\n");

303 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
öput
,0,0);

304 
image
 
sized
 = 
	`ªsize_image
(
im
, 
√t
.
w
,Çë.
h
);

305 *
X
 = 
sized
.
d©a
;

306 
time
=
	`˛ock
();

307 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

308 
	`¥ötf
("%s: Pªdi˘ed i¿%‡£c⁄ds.\n", 
öput
, 
	`£c
(
	`˛ock
()-
time
));

309 
	`gë_dëe˘i⁄_boxes
(
l
, 1, 1, 
thªsh
, 
¥obs
, 
boxes
, 0);

310 i‡(
nms
Ë
	`do_nms_s‹t
(
boxes
, 
¥obs
, 
l
.
side
*l.side*l.
n
,Ü.
˛as£s
,Çms);

312 
	`døw_dëe˘i⁄s
(
im
, 
l
.
side
*l.side*l.
n
, 
thªsh
, 
boxes
, 
¥obs
, 
voc_«mes
, 
Æphabë
, 20);

313 
	`ßve_image
(
im
, "predictions");

314 
	`show_image
(
im
, "predictions");

316 
	`‰ì_image
(
im
);

317 
	`‰ì_image
(
sized
);

318 #ifde‡
OPENCV


319 
	`cvWaôKey
(0);

320 
	`cvDe°royAŒWödows
();

322 i‡(
fûíame
) ;

324 
	}
}

326 
	$run_yﬁo
(
¨gc
, **
¨gv
)

328 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

329 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .2);

330 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

331 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

332 if(
¨gc
 < 4){

333 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

337 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 1);

338 *
cfg
 = 
¨gv
[3];

339 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

340 *
fûíame
 = (
¨gc
 > 5Ë? 
¨gv
[5]: 0;

341 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_yﬁo
(
cfg
, 
weights
, 
fûíame
, 
thªsh
);

342 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_yﬁo
(
cfg
, 
weights
);

343 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_yﬁo
(
cfg
, 
weights
);

344 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_yﬁo_ªˇŒ
(
cfg
, 
weights
);

345 if(0==
	`°rcmp
(
¨gv
[2], "demo")Ë
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
voc_«mes
, 20, 
‰ame_skù
, 
¥efix
, 
avg
, .5, 0,0,0,0);

346 
	}
}

	@include/darknet.h

1 #i‚de‡
DARKNET_API


2 
	#DARKNET_API


	)

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<±hªad.h
>

8 
	#SECRET_NUM
 -1234

	)

9 
gpu_ödex
;

11 #ifde‡
GPU


12 
	#BLOCK
 512

	)

14 
	~"cuda_ru¡ime.h
"

15 
	~"cuønd.h
"

16 
	~"cubœs_v2.h
"

18 #ifde‡
CUDNN


19 
	~"cud¬.h
"

23 #i‚de‡
__˝lu•lus


24 #ifde‡
OPENCV


25 
	~"›ícv2/highgui/highgui_c.h
"

26 
	~"›ícv2/img¥oc/img¥oc_c.h
"

27 
	~"›ícv2/c‹e/vîsi⁄.hµ
"

28 #i‡
CV_MAJOR_VERSION
 == 3

29 
	~"›ícv2/videoio/videoio_c.h
"

35 
	m˛as£s
;

36 **
	m«mes
;

37 } 
	tmëad©a
;

39 
mëad©a
 
gë_mëad©a
(*
fûe
);

42 *
	mÀaf
;

43 
	mn
;

44 *
	m∑ª¡
;

45 *
	mchûd
;

46 *
	mgroup
;

47 **
	m«me
;

49 
	mgroups
;

50 *
	mgroup_size
;

51 *
	mgroup_off£t
;

52 } 
	tåì
;

55 
	mLOGISTIC
, 
	mRELU
, 
	mRELIE
, 
	mLINEAR
, 
	mRAMP
, 
	mTANH
, 
	mPLSE
, 
	mLEAKY
, 
	mELU
, 
	mLOGGY
, 
	mSTAIR
, 
	mHARDTAN
, 
	mLHTAN


56 } 
	tACTIVATION
;

59 
	mCONVOLUTIONAL
,

60 
	mDECONVOLUTIONAL
,

61 
	mCONNECTED
,

62 
	mMAXPOOL
,

63 
	mSOFTMAX
,

64 
	mDETECTION
,

65 
	mDROPOUT
,

66 
	mCROP
,

67 
	mROUTE
,

68 
	mCOST
,

69 
	mNORMALIZATION
,

70 
	mAVGPOOL
,

71 
	mLOCAL
,

72 
	mSHORTCUT
,

73 
	mACTIVE
,

74 
	mRNN
,

75 
	mGRU
,

76 
	mLSTM
,

77 
	mCRNN
,

78 
	mBATCHNORM
,

79 
	mNETWORK
,

80 
	mXNOR
,

81 
	mREGION
,

82 
	mREORG
,

83 
	mBLANK


84 } 
	tLAYER_TYPE
;

87 
	mSSE
, 
	mMASKED
, 
	mL1
, 
	mSEG
, 
	mSMOOTH


88 } 
	tCOST_TYPE
;

91 
	mb©ch
;

92 
	mÀ¨nög_øã
;

93 
	mmomítum
;

94 
	mdeˇy
;

95 
	madam
;

96 
	mB1
;

97 
	mB2
;

98 
	mïs
;

99 
	mt
;

100 } 
	tupd©e_¨gs
;

102 
	g√tw‹k
;

103 
√tw‹k
 
	t√tw‹k
;

105 
	gœyî
;

106 
œyî
 
	tœyî
;

108 
	sœyî
{

109 
LAYER_TYPE
 
	mty≥
;

110 
ACTIVATION
 
	ma˘iv©i⁄
;

111 
COST_TYPE
 
	mco°_ty≥
;

112 (*
	mf‹w¨d
Ë(
	mœyî
, 
	m√tw‹k
);

113 (*
	mbackw¨d
Ë(
	mœyî
, 
	m√tw‹k
);

114 (*
	mupd©e
Ë(
	mœyî
, 
	mupd©e_¨gs
);

115 (*
	mf‹w¨d_gpu
Ë(
	mœyî
, 
	m√tw‹k
);

116 (*
	mbackw¨d_gpu
Ë(
	mœyî
, 
	m√tw‹k
);

117 (*
	mupd©e_gpu
Ë(
	mœyî
, 
	mupd©e_¨gs
);

118 
	mb©ch_n‹mÆize
;

119 
	msh‹tcut
;

120 
	mb©ch
;

121 
	mf‹˚d
;

122 
	mÊù≥d
;

123 
	möputs
;

124 
	mouçuts
;

125 
	mnweights
;

126 
	mnbü£s
;

127 
	mexåa
;

128 
	måuths
;

129 
	mh
,
	mw
,
	mc
;

130 
	mout_h
, 
	mout_w
, 
	mout_c
;

131 
	mn
;

132 
	mmax_boxes
;

133 
	mgroups
;

134 
	msize
;

135 
	mside
;

136 
	m°ride
;

137 
	mªvî£
;

138 
	mÊ©ãn
;

139 
	m•©ül
;

140 
	m∑d
;

141 
	msqπ
;

142 
	mÊù
;

143 
	mödex
;

144 
	mbö¨y
;

145 
	mxn‹
;

146 
	m°ïs
;

147 
	mhiddí
;

148 
	måuth
;

149 
	msmoŸh
;

150 
	mdŸ
;

151 
	m™gÀ
;

152 
	mjôãr
;

153 
	mßtuøti⁄
;

154 
	mexposuª
;

155 
	mshi·
;

156 
	møtio
;

157 
	mÀ¨nög_øã_sˇÀ
;

158 
	mso·max
;

159 
	m˛as£s
;

160 
	mco‹ds
;

161 
	mbackground
;

162 
	mªsc‹e
;

163 
	mobje˘√ss
;

164 
	md€s_co°
;

165 
	mjoöt
;

166 
	mnﬂdju°
;

167 
	mª‹g
;

168 
	mlog
;

169 
	mènh
;

171 
	mÆpha
;

172 
	mbëa
;

173 
	mk≠∑
;

175 
	mco‹d_sˇÀ
;

176 
	mobje˘_sˇÀ
;

177 
	mnoobje˘_sˇÀ
;

178 
	m˛ass_sˇÀ
;

179 
	mbüs_m©ch
;

180 
	møndom
;

181 
	mthªsh
;

182 
	m˛assfix
;

183 
	mabsﬁuã
;

185 
	m⁄lyf‹w¨d
;

186 
	m°›backw¨d
;

187 
	md⁄éﬂd
;

188 
	md⁄éﬂdsˇÀs
;

190 
	mãm≥øtuª
;

191 
	m¥obabûôy
;

192 
	msˇÀ
;

194 * 
	mcweights
;

195 * 
	mödexes
;

196 * 
	möput_œyîs
;

197 * 
	möput_sizes
;

198 * 
	mm≠
;

199 * 
	mønd
;

200 * 
	mco°
;

201 * 
	m°©e
;

202 * 
	m¥ev_°©e
;

203 * 
	mf‹gŸ_°©e
;

204 * 
	mf‹gŸ_dñè
;

205 * 
	m°©e_dñè
;

206 * 
	mcomböe_˝u
;

207 * 
	mcomböe_dñè_˝u
;

209 * 
	mc⁄ˇt
;

210 * 
	mc⁄ˇt_dñè
;

212 * 
	mbö¨y_weights
;

214 * 
	mbü£s
;

215 * 
	mbüs_upd©es
;

217 * 
	msˇÀs
;

218 * 
	msˇÀ_upd©es
;

220 * 
	mweights
;

221 * 
	mweight_upd©es
;

223 * 
	mdñè
;

224 * 
	mouçut
;

225 * 
	msqu¨ed
;

226 * 
	mn‹ms
;

228 * 
	m•©ül_món
;

229 * 
	mmón
;

230 * 
	mv¨ün˚
;

232 * 
	mmón_dñè
;

233 * 
	mv¨ün˚_dñè
;

235 * 
	mrﬁlög_món
;

236 * 
	mrﬁlög_v¨ün˚
;

238 * 
	mx
;

239 * 
	mx_n‹m
;

241 * 
	mm
;

242 * 
	mv
;

244 * 
	mbüs_m
;

245 * 
	mbüs_v
;

246 * 
	msˇÀ_m
;

247 * 
	msˇÀ_v
;

250 *
	mz_˝u
;

251 *
	mr_˝u
;

252 *
	mh_˝u
;

253 * 
	m¥ev_°©e_˝u
;

255 *
	mãmp_˝u
;

256 *
	mãmp2_˝u
;

257 *
	mãmp3_˝u
;

259 *
	mdh_˝u
;

260 *
	mhh_˝u
;

261 *
	m¥ev_˚Œ_˝u
;

262 *
	m˚Œ_˝u
;

263 *
	mf_˝u
;

264 *
	mi_˝u
;

265 *
	mg_˝u
;

266 *
	mo_˝u
;

267 *
	mc_˝u
;

268 *
	mdc_˝u
;

270 * 
	mbö¨y_öput
;

272 
œyî
 *
	möput_œyî
;

273 
œyî
 *
	m£lf_œyî
;

274 
œyî
 *
	mouçut_œyî
;

276 
œyî
 *
	mª£t_œyî
;

277 
œyî
 *
	mupd©e_œyî
;

278 
œyî
 *
	m°©e_œyî
;

280 
œyî
 *
	möput_g©e_œyî
;

281 
œyî
 *
	m°©e_g©e_œyî
;

282 
œyî
 *
	möput_ßve_œyî
;

283 
œyî
 *
	m°©e_ßve_œyî
;

284 
œyî
 *
	möput_°©e_œyî
;

285 
œyî
 *
	m°©e_°©e_œyî
;

287 
œyî
 *
	möput_z_œyî
;

288 
œyî
 *
	m°©e_z_œyî
;

290 
œyî
 *
	möput_r_œyî
;

291 
œyî
 *
	m°©e_r_œyî
;

293 
œyî
 *
	möput_h_œyî
;

294 
œyî
 *
	m°©e_h_œyî
;

296 
œyî
 *
	mwz
;

297 
œyî
 *
	muz
;

298 
œyî
 *
	mwr
;

299 
œyî
 *
	mur
;

300 
œyî
 *
	mwh
;

301 
œyî
 *
	muh
;

302 
œyî
 *
	muo
;

303 
œyî
 *
	mwo
;

304 
œyî
 *
	muf
;

305 
œyî
 *
	mwf
;

306 
œyî
 *
	mui
;

307 
œyî
 *
	mwi
;

308 
œyî
 *
	mug
;

309 
œyî
 *
	mwg
;

311 
åì
 *
	mso·max_åì
;

313 
size_t
 
	mw‹k•a˚_size
;

315 #ifde‡
GPU


316 *
	mödexes_gpu
;

318 *
	mz_gpu
;

319 *
	mr_gpu
;

320 *
	mh_gpu
;

322 *
	mãmp_gpu
;

323 *
	mãmp2_gpu
;

324 *
	mãmp3_gpu
;

326 *
	mdh_gpu
;

327 *
	mhh_gpu
;

328 *
	m¥ev_˚Œ_gpu
;

329 *
	m˚Œ_gpu
;

330 *
	mf_gpu
;

331 *
	mi_gpu
;

332 *
	mg_gpu
;

333 *
	mo_gpu
;

334 *
	mc_gpu
;

335 *
	mdc_gpu
;

337 *
	mm_gpu
;

338 *
	mv_gpu
;

339 *
	mbüs_m_gpu
;

340 *
	msˇÀ_m_gpu
;

341 *
	mbüs_v_gpu
;

342 *
	msˇÀ_v_gpu
;

344 * 
	mcomböe_gpu
;

345 * 
	mcomböe_dñè_gpu
;

347 * 
	m¥ev_°©e_gpu
;

348 * 
	mf‹gŸ_°©e_gpu
;

349 * 
	mf‹gŸ_dñè_gpu
;

350 * 
	m°©e_gpu
;

351 * 
	m°©e_dñè_gpu
;

352 * 
	mg©e_gpu
;

353 * 
	mg©e_dñè_gpu
;

354 * 
	mßve_gpu
;

355 * 
	mßve_dñè_gpu
;

356 * 
	mc⁄ˇt_gpu
;

357 * 
	mc⁄ˇt_dñè_gpu
;

359 * 
	mbö¨y_öput_gpu
;

360 * 
	mbö¨y_weights_gpu
;

362 * 
	mmón_gpu
;

363 * 
	mv¨ün˚_gpu
;

365 * 
	mrﬁlög_món_gpu
;

366 * 
	mrﬁlög_v¨ün˚_gpu
;

368 * 
	mv¨ün˚_dñè_gpu
;

369 * 
	mmón_dñè_gpu
;

371 * 
	mx_gpu
;

372 * 
	mx_n‹m_gpu
;

373 * 
	mweights_gpu
;

374 * 
	mweight_upd©es_gpu
;

375 * 
	mweight_ch™ge_gpu
;

377 * 
	mbü£s_gpu
;

378 * 
	mbüs_upd©es_gpu
;

379 * 
	mbüs_ch™ge_gpu
;

381 * 
	msˇÀs_gpu
;

382 * 
	msˇÀ_upd©es_gpu
;

383 * 
	msˇÀ_ch™ge_gpu
;

385 * 
	mouçut_gpu
;

386 * 
	mdñè_gpu
;

387 * 
	mønd_gpu
;

388 * 
	msqu¨ed_gpu
;

389 * 
	mn‹ms_gpu
;

390 #ifde‡
CUDNN


391 
cud¬Tís‹Des¸ùt‹_t
 
	m§cTís‹Desc
, 
	md°Tís‹Desc
;

392 
cud¬Tís‹Des¸ùt‹_t
 
	md§cTís‹Desc
, 
	mdd°Tís‹Desc
;

393 
cud¬Tís‹Des¸ùt‹_t
 
	mn‹mTís‹Desc
;

394 
cud¬FûãrDes¸ùt‹_t
 
	mweightDesc
;

395 
cud¬FûãrDes¸ùt‹_t
 
	mdweightDesc
;

396 
cud¬C⁄vﬁuti⁄Des¸ùt‹_t
 
	mc⁄vDesc
;

397 
cud¬C⁄vﬁuti⁄FwdAlgo_t
 
	mfw_Ægo
;

398 
cud¬C⁄vﬁuti⁄BwdD©aAlgo_t
 
	mbd_Ægo
;

399 
cud¬C⁄vﬁuti⁄BwdFûãrAlgo_t
 
	mbf_Ægo
;

404 
‰ì_œyî
(
œyî
);

407 
	mCONSTANT
, 
	mSTEP
, 
	mEXP
, 
	mPOLY
, 
	mSTEPS
, 
	mSIG
, 
	mRANDOM


408 } 
	tÀ¨nög_øã_pﬁicy
;

410 
	s√tw‹k
{

411 
	mn
;

412 
	mb©ch
;

413 
size_t
 *
	m£í
;

414 *
	mt
;

415 
	mïoch
;

416 
	msubdivisi⁄s
;

417 
œyî
 *
	mœyîs
;

418 *
	mouçut
;

419 
À¨nög_øã_pﬁicy
 
	mpﬁicy
;

421 
	mÀ¨nög_øã
;

422 
	mmomítum
;

423 
	mdeˇy
;

424 
	mgamma
;

425 
	msˇÀ
;

426 
	mpowî
;

427 
	mtime_°ïs
;

428 
	m°ï
;

429 
	mmax_b©ches
;

430 *
	msˇÀs
;

431 *
	m°ïs
;

432 
	mnum_°ïs
;

433 
	mbu∫_ö
;

435 
	madam
;

436 
	mB1
;

437 
	mB2
;

438 
	mïs
;

440 
	möputs
;

441 
	mouçuts
;

442 
	måuths
;

443 
	mnŸruth
;

444 
	mh
, 
	mw
, 
	mc
;

445 
	mmax_¸›
;

446 
	mmö_¸›
;

447 
	m˚¡î
;

448 
	m™gÀ
;

449 
	ma•e˘
;

450 
	mexposuª
;

451 
	mßtuøti⁄
;

452 
	mhue
;

454 
	mgpu_ödex
;

455 
åì
 *
	mhõørchy
;

457 *
	möput
;

458 *
	måuth
;

459 *
	mdñè
;

460 *
	mw‹k•a˚
;

461 
	måaö
;

462 
	mödex
;

463 *
	mco°
;

465 #ifde‡
GPU


466 *
	möput_gpu
;

467 *
	måuth_gpu
;

468 *
	mdñè_gpu
;

469 *
	mouçut_gpu
;

472 } 
	t√tw‹k
;

475 
	mw
;

476 
	mh
;

477 
	msˇÀ
;

478 
	mød
;

479 
	mdx
;

480 
	mdy
;

481 
	ma•e˘
;

482 } 
	taugmít_¨gs
;

485 
	mw
;

486 
	mh
;

487 
	mc
;

488 *
	md©a
;

489 } 
	timage
;

492 
	mx
, 
	my
, 
	mw
, 
	mh
;

493 } 
	tbox
;

495 
	sm©rix
{

496 
	mrows
, 
	mcﬁs
;

497 **
	mvÆs
;

498 } 
	tm©rix
;

502 
	mw
, 
	mh
;

503 
m©rix
 
	mX
;

504 
m©rix
 
	my
;

505 
	mshÆlow
;

506 *
	mnum_boxes
;

507 
box
 **
	mboxes
;

508 } 
	td©a
;

511 
	mCLASSIFICATION_DATA
, 
	mDETECTION_DATA
, 
	mCAPTCHA_DATA
, 
	mREGION_DATA
, 
	mIMAGE_DATA
, 
	mCOMPARE_DATA
, 
	mWRITING_DATA
, 
	mSWAG_DATA
, 
	mTAG_DATA
, 
	mOLD_CLASSIFICATION_DATA
, 
	mSTUDY_DATA
, 
	mDET_DATA
, 
	mSUPER_DATA
, 
	mLETTERBOX_DATA
, 
	mREGRESSION_DATA
, 
	mSEGMENTATION_DATA


512 } 
	td©a_ty≥
;

514 
	slﬂd_¨gs
{

515 
	mthªads
;

516 **
	m∑ths
;

517 *
	m∑th
;

518 
	mn
;

519 
	mm
;

520 **
	mœbñs
;

521 
	mh
;

522 
	mw
;

523 
	mout_w
;

524 
	mout_h
;

525 
	mnh
;

526 
	mnw
;

527 
	mnum_boxes
;

528 
	mmö
, 
	mmax
, 
	msize
;

529 
	m˛as£s
;

530 
	mbackground
;

531 
	msˇÀ
;

532 
	m˚¡î
;

533 
	mjôãr
;

534 
	m™gÀ
;

535 
	ma•e˘
;

536 
	mßtuøti⁄
;

537 
	mexposuª
;

538 
	mhue
;

539 
d©a
 *
	md
;

540 
image
 *
	mim
;

541 
image
 *
	mªsized
;

542 
d©a_ty≥
 
	mty≥
;

543 
åì
 *
	mhõørchy
;

544 } 
	tlﬂd_¨gs
;

547 
	mid
;

548 
	mx
,
	my
,
	mw
,
	mh
;

549 
	mÀ·
, 
	mright
, 
	mt›
, 
	mbŸtom
;

550 } 
	tbox_œbñ
;

553 
√tw‹k
 
lﬂd_√tw‹k
(*
cfg
, *
weights
, 
˛ór
);

554 
√tw‹k
 *
lﬂd_√tw‹k_p
(*
cfg
, *
weights
, 
˛ór
);

555 
lﬂd_¨gs
 
gë_ba£_¨gs
(
√tw‹k
 
√t
);

557 
‰ì_d©a
(
d©a
 
d
);

559 
	snode
{

560 *
	mvÆ
;

561 
node
 *
	m√xt
;

562 
node
 *
	m¥ev
;

563 } 
	tnode
;

565 
	sli°
{

566 
	msize
;

567 
node
 *
	m‰⁄t
;

568 
node
 *
	mback
;

569 } 
	tli°
;

571 
±hªad_t
 
lﬂd_d©a
(
lﬂd_¨gs
 
¨gs
);

572 
li°
 *
ªad_d©a_cfg
(*
fûíame
);

573 
li°
 *
ªad_cfg
(*
fûíame
);

575 
f‹w¨d_√tw‹k
(
√tw‹k
 
√t
);

576 
backw¨d_√tw‹k
(
√tw‹k
 
√t
);

577 
upd©e_√tw‹k
(
√tw‹k
 
√t
);

580 
axpy_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
, *
Y
, 
INCY
);

581 
c›y_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
);

582 
sˇl_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
);

583 
n‹mÆize_˝u
(*
x
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
);

585 
be°_3d_shi·_r
(
image
 
a
, imagê
b
, 
mö
, 
max
);

586 #ifde‡
GPU


587 
axpy_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
, * 
Y
, 
INCY
);

588 
fûl_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
);

589 
sˇl_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
);

590 
c›y_gpu
(
N
, * 
X
, 
INCX
, * 
Y
, 
INCY
);

592 
cuda_£t_devi˚
(
n
);

593 
cuda_‰ì
(*
x_gpu
);

594 *
cuda_make_¨øy
(*
x
, 
size_t
 
n
);

595 
cuda_puŒ_¨øy
(*
x_gpu
, *
x
, 
size_t
 
n
);

596 
cuda_mag_¨øy
(*
x_gpu
, 
size_t
 
n
);

597 
cuda_push_¨øy
(*
x_gpu
, *
x
, 
size_t
 
n
);

599 
f‹w¨d_√tw‹k_gpu
(
√tw‹k
 
√t
);

600 
backw¨d_√tw‹k_gpu
(
√tw‹k
 
√t
);

601 
upd©e_√tw‹k_gpu
(
√tw‹k
 
√t
);

603 
åaö_√tw‹ks
(
√tw‹k
 *
√ts
, 
n
, 
d©a
 
d
, 
öãrvÆ
);

604 
sync_√ts
(
√tw‹k
 *
√ts
, 
n
, 
öãrvÆ
);

605 
h¨mÀss_upd©e_√tw‹k_gpu
(
√tw‹k
 
√t
);

607 
ßve_image_≤g
(
image
 
im
, c⁄° *
«me
);

608 
gë_√xt_b©ch
(
d©a
 
d
, 
n
, 
off£t
, *
X
, *
y
);

609 
gøysˇÀ_image_3c
(
image
 
im
);

610 
n‹mÆize_image
(
image
 
p
);

611 
m©rix_to_csv
(
m©rix
 
m
);

612 
åaö_√tw‹k_sgd
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
);

613 
rgbgr_image
(
image
 
im
);

614 
d©a
 
c›y_d©a
(d©®
d
);

615 
d©a
 
c⁄ˇt_d©a
(d©®
d1
, d©®
d2
);

616 
d©a
 
lﬂd_ciÁr10_d©a
(*
fûíame
);

617 
m©rix_t›k_accuøcy
(
m©rix
 
åuth
, m©rix 
guess
, 
k
);

618 
m©rix_add_m©rix
(
m©rix
 
‰om
, m©rix 
to
);

619 
sˇÀ_m©rix
(
m©rix
 
m
, 
sˇÀ
);

620 
m©rix
 
csv_to_m©rix
(*
fûíame
);

621 *
√tw‹k_accuøcõs
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
);

622 
åaö_√tw‹k_d©um
(
√tw‹k
 
√t
);

623 
image
 
make_øndom_image
(
w
, 
h
, 
c
);

625 
dí‹mÆize_c⁄√˘ed_œyî
(
œyî
 
l
);

626 
dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
);

627 
°©i°ics_c⁄√˘ed_œyî
(
œyî
 
l
);

628 
ªsˇÀ_weights
(
œyî
 
l
, 
sˇÀ
, 
å™s
);

629 
rgbgr_weights
(
œyî
 
l
);

630 
image
 *
gë_weights
(
œyî
 
l
);

632 
demo
(*
cfgfûe
, *
weightfûe
, 
thªsh
, 
ˇm_ödex
, c⁄° *
fûíame
, **
«mes
, 
˛as£s
, 
‰ame_skù
, *
¥efix
, 
avg
, 
hõr_thªsh
, 
w
, 
h
, 
Âs
, 
fuŒs¸ìn
);

633 
gë_dëe˘i⁄_boxes
(
œyî
 
l
, 
w
, 
h
, 
thªsh
, **
¥obs
, 
box
 *
boxes
, 
⁄ly_obje˘√ss
);

635 *
›ti⁄_föd_°r
(
li°
 *
l
, *
key
, *
def
);

636 
›ti⁄_föd_öt
(
li°
 *
l
, *
key
, 
def
);

638 
√tw‹k
 
∑r£_√tw‹k_cfg
(*
fûíame
);

639 
ßve_weights
(
√tw‹k
 
√t
, *
fûíame
);

640 
lﬂd_weights
(
√tw‹k
 *
√t
, *
fûíame
);

641 
ßve_weights_u±o
(
√tw‹k
 
√t
, *
fûíame
, 
cutoff
);

642 
lﬂd_weights_u±o
(
√tw‹k
 *
√t
, *
fûíame
, 
°¨t
, 
cutoff
);

644 
zîo_obje˘√ss
(
œyî
 
l
);

645 
gë_ªgi⁄_boxes
(
œyî
 
l
, 
w
, 
h
, 
√tw
, 
√th
, 
thªsh
, **
¥obs
, 
box
 *
boxes
, 
⁄ly_obje˘√ss
, *
m≠
, 
åì_thªsh
, 
ªœtive
);

646 
‰ì_√tw‹k
(
√tw‹k
 
√t
);

647 
£t_b©ch_√tw‹k
(
√tw‹k
 *
√t
, 
b
);

648 
image
 
lﬂd_image
(*
fûíame
, 
w
, 
h
, 
c
);

649 
image
 
lﬂd_image_cﬁ‹
(*
fûíame
, 
w
, 
h
);

650 
image
 
make_image
(
w
, 
h
, 
c
);

651 
image
 
ªsize_image
(imagê
im
, 
w
, 
h
);

652 
image
 
Àâîbox_image
(imagê
im
, 
w
, 
h
);

653 
image
 
¸›_image
(imagê
im
, 
dx
, 
dy
, 
w
, 
h
);

654 
image
 
ªsize_mö
(imagê
im
, 
mö
);

655 
image
 
thªshﬁd_image
(imagê
im
, 
thªsh
);

656 
image
 
mask_to_rgb
(imagê
mask
);

657 
ªsize_√tw‹k
(
√tw‹k
 *
√t
, 
w
, 
h
);

658 
‰ì_m©rix
(
m©rix
 
m
);

659 
ã°_ªsize
(*
fûíame
);

660 
ßve_image
(
image
 
p
, c⁄° *
«me
);

661 
show_image
(
image
 
p
, c⁄° *
«me
);

662 
image
 
c›y_image
(imagê
p
);

663 
døw_box_width
(
image
 
a
, 
x1
, 
y1
, 
x2
, 
y2
, 
w
, 
r
, 
g
, 
b
);

664 
gë_cuºít_øã
(
√tw‹k
 
√t
);

665 
composôe_3d
(*
f1
, *
f2
, *
out
, 
dñè
);

666 
d©a
 
lﬂd_d©a_ﬁd
(**
∑ths
, 
n
, 
m
, **
œbñs
, 
k
, 
w
, 
h
);

667 
size_t
 
gë_cuºít_b©ch
(
√tw‹k
 
√t
);

668 
c⁄°øö_image
(
image
 
im
);

669 
image
 
gë_√tw‹k_image_œyî
(
√tw‹k
 
√t
, 
i
);

670 
œyî
 
gë_√tw‹k_ouçut_œyî
(
√tw‹k
 
√t
);

671 
t›_¥edi˘i⁄s
(
√tw‹k
 
√t
, 
n
, *
ödex
);

672 
Êù_image
(
image
 
a
);

673 
image
 
Êﬂt_to_image
(
w
, 
h
, 
c
, *
d©a
);

674 
gho°_image
(
image
 
sour˚
, imagê
de°
, 
dx
, 
dy
);

675 
√tw‹k_accuøcy
(
√tw‹k
 
√t
, 
d©a
 
d
);

676 
øndom_di°‹t_image
(
image
 
im
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

677 
fûl_image
(
image
 
m
, 
s
);

678 
image
 
gøysˇÀ_image
(imagê
im
);

679 
rŸ©e_image_cw
(
image
 
im
, 
times
);

680 
image
 
rŸ©e_image
(imagê
m
, 
ød
);

681 
visuÆize_√tw‹k
(
√tw‹k
 
√t
);

682 
box_iou
(
box
 
a
, box 
b
);

683 
do_nms
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
);

684 
d©a
 
lﬂd_Æl_ciÁr10
();

685 
box_œbñ
 *
ªad_boxes
(*
fûíame
, *
n
);

686 
døw_dëe˘i⁄s
(
image
 
im
, 
num
, 
thªsh
, 
box
 *
boxes
, **
¥obs
, **
«mes
, imagê**
œbñs
, 
˛as£s
);

688 
m©rix
 
√tw‹k_¥edi˘_d©a
(
√tw‹k
 
√t
, 
d©a
 
ã°
);

689 
image
 **
lﬂd_Æphabë
();

690 
image
 
gë_√tw‹k_image
(
√tw‹k
 
√t
);

691 *
√tw‹k_¥edi˘
(
√tw‹k
 
√t
, *
öput
);

692 *
√tw‹k_¥edi˘_p
(
√tw‹k
 *
√t
, *
öput
);

694 
√tw‹k_width
(
√tw‹k
 *
√t
);

695 
√tw‹k_height
(
√tw‹k
 *
√t
);

696 *
√tw‹k_¥edi˘_image
(
√tw‹k
 *
√t
, 
image
 
im
);

698 **
gë_œbñs
(*
fûíame
);

699 
do_nms_s‹t
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
);

700 
do_nms_obj
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
);

702 
m©rix
 
make_m©rix
(
rows
, 
cﬁs
);

704 #i‚de‡
__˝lu•lus


705 #ifde‡
OPENCV


706 
image
 
gë_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
);

709 
‰ì_image
(
image
 
m
);

710 
åaö_√tw‹k
(
√tw‹k
 
√t
, 
d©a
 
d
);

711 
±hªad_t
 
lﬂd_d©a_ö_thªad
(
lﬂd_¨gs
 
¨gs
);

712 
li°
 *
gë_∑ths
(*
fûíame
);

713 
hõørchy_¥edi˘i⁄s
(*
¥edi˘i⁄s
, 
n
, 
åì
 *
hõr
, 
⁄ly_Àaves
, 
°ride
);

714 
ch™ge_Àaves
(
åì
 *
t
, *
Àaf_li°
);

716 
föd_öt_¨g
(
¨gc
, **
¨gv
, *
¨g
, 
def
);

717 
föd_Êﬂt_¨g
(
¨gc
, **
¨gv
, *
¨g
, 
def
);

718 
föd_¨g
(
¨gc
, * 
¨gv
[], *
¨g
);

719 *
föd_ch¨_¨g
(
¨gc
, **
¨gv
, *
¨g
, *
def
);

720 *
ba£cfg
(*
cfgfûe
);

721 
föd_ª∂a˚
(*
°r
, *
‹ig
, *
ªp
, *
ouçut
);

722 
‰ì_±rs
(**
±rs
, 
n
);

723 *
fgël
(
FILE
 *
Â
);

724 
°rù
(*
s
);

725 
£c
(
˛ock_t
 
˛ocks
);

726 **
li°_to_¨øy
(
li°
 *
l
);

727 
t›_k
(*
a
, 
n
, 
k
, *
ödex
);

728 *
ªad_m≠
(*
fûíame
);

729 
îr‹
(c⁄° *
s
);

730 
max_ödex
(*
a
, 
n
);

731 
ßm∂e_¨øy
(*
a
, 
n
);

732 
‰ì_li°
(
li°
 *
l
);

733 
m£_¨øy
(*
a
, 
n
);

734 
v¨ün˚_¨øy
(*
a
, 
n
);

735 
mag_¨øy
(*
a
, 
n
);

736 
món_¨øy
(*
a
, 
n
);

737 
n‹mÆize_¨øy
(*
a
, 
n
);

738 *
ªad_öéi°
(*
s
, *
n
, 
d
);

739 
size_t
 
ønd_size_t
();

740 
ønd_n‹mÆ
();

	@src/activation_layer.c

1 
	~"a˘iv©i⁄_œyî.h
"

2 
	~"utûs.h
"

3 
	~"cuda.h
"

4 
	~"bœs.h
"

5 
	~"gemm.h
"

7 
	~<m©h.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
œyî
 
	$make_a˘iv©i⁄_œyî
(
b©ch
, 
öputs
, 
ACTIVATION
 
a˘iv©i⁄
)

14 
œyî
 
l
 = {0};

15 
l
.
ty≥
 = 
ACTIVE
;

17 
l
.
öputs
 = inputs;

18 
l
.
ouçuts
 = 
öputs
;

19 
l
.
b©ch
=batch;

21 
l
.
ouçut
 = 
	`ˇŒoc
(
b©ch
*
öputs
, (*));

22 
l
.
dñè
 = 
	`ˇŒoc
(
b©ch
*
öputs
, (*));

24 
l
.
f‹w¨d
 = 
f‹w¨d_a˘iv©i⁄_œyî
;

25 
l
.
backw¨d
 = 
backw¨d_a˘iv©i⁄_œyî
;

26 #ifde‡
GPU


27 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_a˘iv©i⁄_œyî_gpu
;

28 
l
.
backw¨d_gpu
 = 
backw¨d_a˘iv©i⁄_œyî_gpu
;

30 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
öputs
*
b©ch
);

31 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
öputs
*
b©ch
);

33 
l
.
a˘iv©i⁄
 =áctivation;

34 
	`Ârötf
(
°dîr
, "A˘iv©i⁄ Layî: %d i≈uts\n", 
öputs
);

35  
l
;

36 
	}
}

38 
	$f‹w¨d_a˘iv©i⁄_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

40 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
√t
.
öput
, 1,Ü.
ouçut
, 1);

41 
	`a˘iv©e_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

42 
	}
}

44 
	$backw¨d_a˘iv©i⁄_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

46 
	`gødõ¡_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

47 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
dñè
, 1, 
√t
.delta, 1);

48 
	}
}

50 #ifde‡
GPU


52 
	$f‹w¨d_a˘iv©i⁄_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

54 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
√t
.
öput_gpu
, 1,Ü.
ouçut_gpu
, 1);

55 
	`a˘iv©e_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

56 
	}
}

58 
	$backw¨d_a˘iv©i⁄_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

60 
	`gødõ¡_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè_gpu
);

61 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

62 
	}
}

	@src/activation_layer.h

1 #i‚de‡
ACTIVATION_LAYER_H


2 
	#ACTIVATION_LAYER_H


	)

4 
	~"a˘iv©i⁄s.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
make_a˘iv©i⁄_œyî
(
b©ch
, 
öputs
, 
ACTIVATION
 
a˘iv©i⁄
);

10 
f‹w¨d_a˘iv©i⁄_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

11 
backw¨d_a˘iv©i⁄_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

13 #ifde‡
GPU


14 
f‹w¨d_a˘iv©i⁄_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_a˘iv©i⁄_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

	@src/activations.c

1 
	~"a˘iv©i⁄s.h
"

3 
	~<m©h.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 *
	$gë_a˘iv©i⁄_°rög
(
ACTIVATION
 
a
)

10 
a
){

11 
LOGISTIC
:

13 
LOGGY
:

15 
RELU
:

17 
ELU
:

19 
RELIE
:

21 
RAMP
:

23 
LINEAR
:

25 
TANH
:

27 
PLSE
:

29 
LEAKY
:

31 
STAIR
:

33 
HARDTAN
:

35 
LHTAN
:

41 
	}
}

43 
ACTIVATION
 
	$gë_a˘iv©i⁄
(*
s
)

45 i‡(
	`°rcmp
(
s
, "logi°ic")==0Ë 
LOGISTIC
;

46 i‡(
	`°rcmp
(
s
, "loggy")==0Ë 
LOGGY
;

47 i‡(
	`°rcmp
(
s
, "ªlu")==0Ë 
RELU
;

48 i‡(
	`°rcmp
(
s
, "ñu")==0Ë 
ELU
;

49 i‡(
	`°rcmp
(
s
, "ªlõ")==0Ë 
RELIE
;

50 i‡(
	`°rcmp
(
s
, "∂£")==0Ë 
PLSE
;

51 i‡(
	`°rcmp
(
s
, "h¨dèn")==0Ë 
HARDTAN
;

52 i‡(
	`°rcmp
(
s
, "lhèn")==0Ë 
LHTAN
;

53 i‡(
	`°rcmp
(
s
, "löór")==0Ë 
LINEAR
;

54 i‡(
	`°rcmp
(
s
, "ømp")==0Ë 
RAMP
;

55 i‡(
	`°rcmp
(
s
, "Àaky")==0Ë 
LEAKY
;

56 i‡(
	`°rcmp
(
s
, "ènh")==0Ë 
TANH
;

57 i‡(
	`°rcmp
(
s
, "°aú")==0Ë 
STAIR
;

58 
	`Ârötf
(
°dîr
, "Couldn'àfödá˘iv©i⁄ fun˘i⁄ %s, goög wôh ReLU\n", 
s
);

59  
RELU
;

60 
	}
}

62 
	$a˘iv©e
(
x
, 
ACTIVATION
 
a
)

64 
a
){

65 
LINEAR
:

66  
	`löór_a˘iv©e
(
x
);

67 
LOGISTIC
:

68  
	`logi°ic_a˘iv©e
(
x
);

69 
LOGGY
:

70  
	`loggy_a˘iv©e
(
x
);

71 
RELU
:

72  
	`ªlu_a˘iv©e
(
x
);

73 
ELU
:

74  
	`ñu_a˘iv©e
(
x
);

75 
RELIE
:

76  
	`ªlõ_a˘iv©e
(
x
);

77 
RAMP
:

78  
	`ømp_a˘iv©e
(
x
);

79 
LEAKY
:

80  
	`Àaky_a˘iv©e
(
x
);

81 
TANH
:

82  
	`ènh_a˘iv©e
(
x
);

83 
PLSE
:

84  
	`∂£_a˘iv©e
(
x
);

85 
STAIR
:

86  
	`°aú_a˘iv©e
(
x
);

87 
HARDTAN
:

88  
	`h¨dèn_a˘iv©e
(
x
);

89 
LHTAN
:

90  
	`lhèn_a˘iv©e
(
x
);

93 
	}
}

95 
	$a˘iv©e_¨øy
(*
x
, c⁄° 
n
, c⁄° 
ACTIVATION
 
a
)

97 
i
;

98 
i
 = 0; i < 
n
; ++i){

99 
x
[
i
] = 
	`a˘iv©e
(x[i], 
a
);

101 
	}
}

103 
	$gødõ¡
(
x
, 
ACTIVATION
 
a
)

105 
a
){

106 
LINEAR
:

107  
	`löór_gødõ¡
(
x
);

108 
LOGISTIC
:

109  
	`logi°ic_gødõ¡
(
x
);

110 
LOGGY
:

111  
	`loggy_gødõ¡
(
x
);

112 
RELU
:

113  
	`ªlu_gødõ¡
(
x
);

114 
ELU
:

115  
	`ñu_gødõ¡
(
x
);

116 
RELIE
:

117  
	`ªlõ_gødõ¡
(
x
);

118 
RAMP
:

119  
	`ømp_gødõ¡
(
x
);

120 
LEAKY
:

121  
	`Àaky_gødõ¡
(
x
);

122 
TANH
:

123  
	`ènh_gødõ¡
(
x
);

124 
PLSE
:

125  
	`∂£_gødõ¡
(
x
);

126 
STAIR
:

127  
	`°aú_gødõ¡
(
x
);

128 
HARDTAN
:

129  
	`h¨dèn_gødõ¡
(
x
);

130 
LHTAN
:

131  
	`lhèn_gødõ¡
(
x
);

134 
	}
}

136 
	$gødõ¡_¨øy
(c⁄° *
x
, c⁄° 
n
, c⁄° 
ACTIVATION
 
a
, *
dñè
)

138 
i
;

139 
i
 = 0; i < 
n
; ++i){

140 
dñè
[
i
] *
	`gødõ¡
(
x
[i], 
a
);

142 
	}
}

	@src/activations.h

1 #i‚de‡
ACTIVATIONS_H


2 
	#ACTIVATIONS_H


	)

3 
	~"d¨k√t.h
"

4 
	~"cuda.h
"

5 
	~"m©h.h
"

7 
ACTIVATION
 
gë_a˘iv©i⁄
(*
s
);

9 *
gë_a˘iv©i⁄_°rög
(
ACTIVATION
 
a
);

10 
a˘iv©e
(
x
, 
ACTIVATION
 
a
);

11 
gødõ¡
(
x
, 
ACTIVATION
 
a
);

12 
gødõ¡_¨øy
(c⁄° *
x
, c⁄° 
n
, c⁄° 
ACTIVATION
 
a
, *
dñè
);

13 
a˘iv©e_¨øy
(*
x
, c⁄° 
n
, c⁄° 
ACTIVATION
 
a
);

14 #ifde‡
GPU


15 
a˘iv©e_¨øy_gpu
(*
x
, 
n
, 
ACTIVATION
 
a
);

16 
gødõ¡_¨øy_gpu
(*
x
, 
n
, 
ACTIVATION
 
a
, *
dñè
);

19 
ölöe
 
	$°aú_a˘iv©e
(
x
)

21 
n
 = 
	`Êo‹
(
x
);

22 i‡(
n
%2 =0Ë 
	`Êo‹
(
x
/2.);

23  (
x
 - 
n
Ë+ 
	`Êo‹
(x/2.);

24 
	}
}

25 
ölöe
 
	$h¨dèn_a˘iv©e
(
x
)

27 i‡(
x
 < -1)  -1;

28 i‡(
x
 > 1)  1;

29  
x
;

30 
	}
}

31 
ölöe
 
	$löór_a˘iv©e
(
x
){ x;
	}
}

32 
ölöe
 
	$logi°ic_a˘iv©e
(
x
){ 1./(1. + 
	`exp
(-x));
	}
}

33 
ölöe
 
	$loggy_a˘iv©e
(
x
){ 2./(1. + 
	`exp
(-x)Ë- 1;
	}
}

34 
ölöe
 
	$ªlu_a˘iv©e
(
x
){ x*(x>0);
	}
}

35 
ölöe
 
	$ñu_a˘iv©e
(
x
){ (x >0)*x + (x < 0)*(
	`exp
(x)-1);
	}
}

36 
ölöe
 
	$ªlõ_a˘iv©e
(
x
){ (x>0Ë? x : .01*x;
	}
}

37 
ölöe
 
	$ømp_a˘iv©e
(
x
){ x*(x>0)+.1*x;
	}
}

38 
ölöe
 
	$Àaky_a˘iv©e
(
x
){ (x>0Ë? x : .1*x;
	}
}

39 
ölöe
 
	$ènh_a˘iv©e
(
x
){ (
	`exp
(2*x)-1)/”xp(2*x)+1);
	}
}

40 
ölöe
 
	$∂£_a˘iv©e
(
x
)

42 if(
x
 < -4)  .01 * (x + 4);

43 if(
x
 > 4)  .01 * (x - 4) + 1;

44  .125*
x
 + .5;

45 
	}
}

47 
ölöe
 
	$lhèn_a˘iv©e
(
x
)

49 if(
x
 < 0)  .001*x;

50 if(
x
 > 1)  .001*(x-1) + 1;

51  
x
;

52 
	}
}

53 
ölöe
 
	$lhèn_gødõ¡
(
x
)

55 if(
x
 > 0 && x < 1)  1;

57 
	}
}

59 
ölöe
 
	$h¨dèn_gødõ¡
(
x
)

61 i‡(
x
 > -1 && x < 1)  1;

63 
	}
}

64 
ölöe
 
	$löór_gødõ¡
(
x
){ 1;
	}
}

65 
ölöe
 
	$logi°ic_gødõ¡
(
x
){ (1-x)*x;
	}
}

66 
ölöe
 
	$loggy_gødõ¡
(
x
)

68 
y
 = (
x
+1.)/2.;

69  2*(1-
y
)*y;

70 
	}
}

71 
ölöe
 
	$°aú_gødõ¡
(
x
)

73 i‡(
	`Êo‹
(
x
) == x)  0;

75 
	}
}

76 
ölöe
 
	$ªlu_gødõ¡
(
x
){ (x>0);
	}
}

77 
ölöe
 
	$ñu_gødõ¡
(
x
){ (x >0Ë+ (x < 0)*(x + 1);
	}
}

78 
ölöe
 
	$ªlõ_gødõ¡
(
x
){ (x>0Ë? 1 : .01;
	}
}

79 
ölöe
 
	$ømp_gødõ¡
(
x
){ (x>0)+.1;
	}
}

80 
ölöe
 
	$Àaky_gødõ¡
(
x
){ (x>0Ë? 1 : .1;
	}
}

81 
ölöe
 
	$ènh_gødõ¡
(
x
){ 1-x*x;
	}
}

82 
ölöe
 
	$∂£_gødõ¡
(
x
){ (x < 0 || x > 1Ë? .01 : .125;
	}
}

	@src/avgpool_layer.c

1 
	~"avgpoﬁ_œyî.h
"

2 
	~"cuda.h
"

3 
	~<°dio.h
>

5 
avgpoﬁ_œyî
 
	$make_avgpoﬁ_œyî
(
b©ch
, 
w
, 
h
, 
c
)

7 
	`Ârötf
(
°dîr
, "avg %4d x%4d x%4d -> %4d\n", 
w
, 
h
, 
c
, c);

8 
avgpoﬁ_œyî
 
l
 = {0};

9 
l
.
ty≥
 = 
AVGPOOL
;

10 
l
.
b©ch
 = batch;

11 
l
.
h
 = h;

12 
l
.
w
 = w;

13 
l
.
c
 = c;

14 
l
.
out_w
 = 1;

15 
l
.
out_h
 = 1;

16 
l
.
out_c
 = 
c
;

17 
l
.
ouçuts
 =Ü.
out_c
;

18 
l
.
öputs
 = 
h
*
w
*
c
;

19 
ouçut_size
 = 
l
.
ouçuts
 * 
b©ch
;

20 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçut_size
, ());

21 
l
.
dñè
 = 
	`ˇŒoc
(
ouçut_size
, ());

22 
l
.
f‹w¨d
 = 
f‹w¨d_avgpoﬁ_œyî
;

23 
l
.
backw¨d
 = 
backw¨d_avgpoﬁ_œyî
;

24 #ifde‡
GPU


25 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_avgpoﬁ_œyî_gpu
;

26 
l
.
backw¨d_gpu
 = 
backw¨d_avgpoﬁ_œyî_gpu
;

27 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
ouçut_size
);

28 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
ouçut_size
);

30  
l
;

31 
	}
}

33 
	$ªsize_avgpoﬁ_œyî
(
avgpoﬁ_œyî
 *
l
, 
w
, 
h
)

35 
l
->
w
 = w;

36 
l
->
h
 = h;

37 
l
->
öputs
 = 
h
*
w
*l->
c
;

38 
	}
}

40 
	$f‹w¨d_avgpoﬁ_œyî
(c⁄° 
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
)

42 
b
,
i
,
k
;

44 
b
 = 0; b < 
l
.
b©ch
; ++b){

45 
k
 = 0; k < 
l
.
c
; ++k){

46 
out_ödex
 = 
k
 + 
b
*
l
.
c
;

47 
l
.
ouçut
[
out_ödex
] = 0;

48 
i
 = 0; i < 
l
.
h
*l.
w
; ++i){

49 
ö_ödex
 = 
i
 + 
l
.
h
*l.
w
*(
k
 + 
b
*l.
c
);

50 
l
.
ouçut
[
out_ödex
] +
√t
.
öput
[
ö_ödex
];

52 
l
.
ouçut
[
out_ödex
] /l.
h
*l.
w
;

55 
	}
}

57 
	$backw¨d_avgpoﬁ_œyî
(c⁄° 
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
)

59 
b
,
i
,
k
;

61 
b
 = 0; b < 
l
.
b©ch
; ++b){

62 
k
 = 0; k < 
l
.
c
; ++k){

63 
out_ödex
 = 
k
 + 
b
*
l
.
c
;

64 
i
 = 0; i < 
l
.
h
*l.
w
; ++i){

65 
ö_ödex
 = 
i
 + 
l
.
h
*l.
w
*(
k
 + 
b
*l.
c
);

66 
√t
.
dñè
[
ö_ödex
] +
l
.dñè[
out_ödex
] / (l.
h
*l.
w
);

70 
	}
}

	@src/avgpool_layer.h

1 #i‚de‡
AVGPOOL_LAYER_H


2 
	#AVGPOOL_LAYER_H


	)

4 
	~"image.h
"

5 
	~"cuda.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

9 
œyî
 
	tavgpoﬁ_œyî
;

11 
image
 
gë_avgpoﬁ_image
(
avgpoﬁ_œyî
 
l
);

12 
avgpoﬁ_œyî
 
make_avgpoﬁ_œyî
(
b©ch
, 
w
, 
h
, 
c
);

13 
ªsize_avgpoﬁ_œyî
(
avgpoﬁ_œyî
 *
l
, 
w
, 
h
);

14 
f‹w¨d_avgpoﬁ_œyî
(c⁄° 
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_avgpoﬁ_œyî
(c⁄° 
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

17 #ifde‡
GPU


18 
f‹w¨d_avgpoﬁ_œyî_gpu
(
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

19 
backw¨d_avgpoﬁ_œyî_gpu
(
avgpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/batchnorm_layer.c

1 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

2 
	~"b©chn‹m_œyî.h
"

3 
	~"bœs.h
"

4 
	~<°dio.h
>

6 
œyî
 
	$make_b©chn‹m_œyî
(
b©ch
, 
w
, 
h
, 
c
)

8 
	`Ârötf
(
°dîr
, "B©ch N‹mÆiz©i⁄ Layî: %d x %d x %d image\n", 
w
,
h
,
c
);

9 
œyî
 
l
 = {0};

10 
l
.
ty≥
 = 
BATCHNORM
;

11 
l
.
b©ch
 = batch;

12 
l
.
h
 =Ü.
out_h
 = h;

13 
l
.
w
 =Ü.
out_w
 = w;

14 
l
.
c
 =Ü.
out_c
 = c;

15 
l
.
ouçut
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

16 
l
.
dñè
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

17 
l
.
öputs
 = 
w
*
h
*
c
;

18 
l
.
ouçuts
 =Ü.
öputs
;

20 
l
.
sˇÀs
 = 
	`ˇŒoc
(
c
, ());

21 
l
.
sˇÀ_upd©es
 = 
	`ˇŒoc
(
c
, ());

22 
l
.
bü£s
 = 
	`ˇŒoc
(
c
, ());

23 
l
.
büs_upd©es
 = 
	`ˇŒoc
(
c
, ());

24 
i
;

25 
i
 = 0; i < 
c
; ++i){

26 
l
.
sˇÀs
[
i
] = 1;

29 
l
.
món
 = 
	`ˇŒoc
(
c
, ());

30 
l
.
v¨ün˚
 = 
	`ˇŒoc
(
c
, ());

32 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
c
, ());

33 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
c
, ());

35 
l
.
f‹w¨d
 = 
f‹w¨d_b©chn‹m_œyî
;

36 
l
.
backw¨d
 = 
backw¨d_b©chn‹m_œyî
;

37 #ifde‡
GPU


38 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_b©chn‹m_œyî_gpu
;

39 
l
.
backw¨d_gpu
 = 
backw¨d_b©chn‹m_œyî_gpu
;

41 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
h
 * 
w
 * 
c
 * 
b©ch
);

42 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
h
 * 
w
 * 
c
 * 
b©ch
);

44 
l
.
bü£s_gpu
 = 
	`cuda_make_¨øy
÷.
bü£s
, 
c
);

45 
l
.
büs_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
büs_upd©es
, 
c
);

47 
l
.
sˇÀs_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀs
, 
c
);

48 
l
.
sˇÀ_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_upd©es
, 
c
);

50 
l
.
món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
c
);

51 
l
.
v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
c
);

53 
l
.
rﬁlög_món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
c
);

54 
l
.
rﬁlög_v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
c
);

56 
l
.
món_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
c
);

57 
l
.
v¨ün˚_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
c
);

59 
l
.
x_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*l.
ouçuts
);

60 
l
.
x_n‹m_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*l.
ouçuts
);

61 #ifde‡
CUDNN


62 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
n‹mTís‹Desc
);

63 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
d°Tís‹Desc
);

64 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
,Ü.
out_w
);

65 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü.
out_c
, 1, 1);

69  
l
;

70 
	}
}

72 
	$backw¨d_sˇÀ_˝u
(*
x_n‹m
, *
dñè
, 
b©ch
, 
n
, 
size
, *
sˇÀ_upd©es
)

74 
i
,
b
,
f
;

75 
f
 = 0; f < 
n
; ++f){

76 
sum
 = 0;

77 
b
 = 0; b < 
b©ch
; ++b){

78 
i
 = 0; i < 
size
; ++i){

79 
ödex
 = 
i
 + 
size
*(
f
 + 
n
*
b
);

80 
sum
 +
dñè
[
ödex
] * 
x_n‹m
[index];

83 
sˇÀ_upd©es
[
f
] +
sum
;

85 
	}
}

87 
	$món_dñè_˝u
(*
dñè
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món_dñè
)

90 
i
,
j
,
k
;

91 
i
 = 0; i < 
fûãrs
; ++i){

92 
món_dñè
[
i
] = 0;

93 
j
 = 0; j < 
b©ch
; ++j) {

94 
k
 = 0; k < 
•©ül
; ++k) {

95 
ödex
 = 
j
*
fûãrs
*
•©ül
 + 
i
*•©ü»+ 
k
;

96 
món_dñè
[
i
] +
dñè
[
ödex
];

99 
món_dñè
[
i
] *(-1./
	`sqπ
(
v¨ün˚
[i] + .00001f));

101 
	}
}

102 
	$v¨ün˚_dñè_˝u
(*
x
, *
dñè
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚_dñè
)

105 
i
,
j
,
k
;

106 
i
 = 0; i < 
fûãrs
; ++i){

107 
v¨ün˚_dñè
[
i
] = 0;

108 
j
 = 0; j < 
b©ch
; ++j){

109 
k
 = 0; k < 
•©ül
; ++k){

110 
ödex
 = 
j
*
fûãrs
*
•©ül
 + 
i
*•©ü»+ 
k
;

111 
v¨ün˚_dñè
[
i
] +
dñè
[
ödex
]*(
x
[ödex] - 
món
[i]);

114 
v¨ün˚_dñè
[
i
] *-.5 * 
	`pow
(
v¨ün˚
[i] + .00001f, ()(-3./2.));

116 
	}
}

117 
	$n‹mÆize_dñè_˝u
(*
x
, *
món
, *
v¨ün˚
, *
món_dñè
, *
v¨ün˚_dñè
, 
b©ch
, 
fûãrs
, 
•©ül
, *
dñè
)

119 
f
, 
j
, 
k
;

120 
j
 = 0; j < 
b©ch
; ++j){

121 
f
 = 0; f < 
fûãrs
; ++f){

122 
k
 = 0; k < 
•©ül
; ++k){

123 
ödex
 = 
j
*
fûãrs
*
•©ül
 + 
f
*•©ü»+ 
k
;

124 
dñè
[
ödex
] = dñè[ödex] * 1./(
	`sqπ
(
v¨ün˚
[
f
] + .00001f)Ë+ 
v¨ün˚_dñè
[f] * 2. * (
x
[ödex] - 
món
[f]Ë/ (
•©ül
 * 
b©ch
Ë+ 
món_dñè
[f]/(spatial*batch);

128 
	}
}

130 
	$ªsize_b©chn‹m_œyî
(
œyî
 *œyî, 
w
, 
h
)

132 
	`Ârötf
(
°dîr
, "Not implemented\n");

133 
	}
}

135 
	$f‹w¨d_b©chn‹m_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

137 if(
l
.
ty≥
 =
BATCHNORM
Ë
	`c›y_˝u
÷.
ouçuts
*l.
b©ch
, 
√t
.
öput
, 1,Ü.
ouçut
, 1);

138 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut
, 1,Ü.
x
, 1);

139 if(
√t
.
åaö
){

140 
	`món_˝u
(
l
.
ouçut
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
,Ü.
món
);

141 
	`v¨ün˚_˝u
(
l
.
ouçut
,Ü.
món
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
,Ü.
v¨ün˚
);

143 
	`sˇl_˝u
(
l
.
out_c
, .99,Ü.
rﬁlög_món
, 1);

144 
	`axpy_˝u
(
l
.
out_c
, .01,Ü.
món
, 1,Ü.
rﬁlög_món
, 1);

145 
	`sˇl_˝u
(
l
.
out_c
, .99,Ü.
rﬁlög_v¨ün˚
, 1);

146 
	`axpy_˝u
(
l
.
out_c
, .01,Ü.
v¨ün˚
, 1,Ü.
rﬁlög_v¨ün˚
, 1);

148 
	`n‹mÆize_˝u
(
l
.
ouçut
,Ü.
món
,Ü.
v¨ün˚
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

149 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut
, 1,Ü.
x_n‹m
, 1);

151 
	`n‹mÆize_˝u
(
l
.
ouçut
,Ü.
rﬁlög_món
,Ü.
rﬁlög_v¨ün˚
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

153 
	`sˇÀ_büs
(
l
.
ouçut
,Ü.
sˇÀs
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

154 
	`add_büs
(
l
.
ouçut
,Ü.
bü£s
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

155 
	}
}

157 
	$backw¨d_b©chn‹m_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

159 if(!
√t
.
åaö
){

160 
l
.
món
 =Ü.
rﬁlög_món
;

161 
l
.
v¨ün˚
 =Ü.
rﬁlög_v¨ün˚
;

163 
	`backw¨d_büs
(
l
.
büs_upd©es
,Ü.
dñè
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
);

164 
	`backw¨d_sˇÀ_˝u
(
l
.
x_n‹m
,Ü.
dñè
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
sˇÀ_upd©es
);

166 
	`sˇÀ_büs
(
l
.
dñè
,Ü.
sˇÀs
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

168 
	`món_dñè_˝u
(
l
.
dñè
,Ü.
v¨ün˚
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
món_dñè
);

169 
	`v¨ün˚_dñè_˝u
(
l
.
x
,Ü.
dñè
,Ü.
món
,Ü.
v¨ün˚
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
v¨ün˚_dñè
);

170 
	`n‹mÆize_dñè_˝u
(
l
.
x
,Ü.
món
,Ü.
v¨ün˚
,Ü.
món_dñè
,Ü.
v¨ün˚_dñè
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
dñè
);

171 if(
l
.
ty≥
 =
BATCHNORM
Ë
	`c›y_˝u
÷.
ouçuts
*l.
b©ch
,Ü.
dñè
, 1, 
√t
.delta, 1);

172 
	}
}

174 #ifde‡
GPU


176 
	$puŒ_b©chn‹m_œyî
(
œyî
 
l
)

178 
	`cuda_puŒ_¨øy
(
l
.
sˇÀs_gpu
,Ü.
sˇÀs
,Ü.
c
);

179 
	`cuda_puŒ_¨øy
(
l
.
rﬁlög_món_gpu
,Ü.
rﬁlög_món
,Ü.
c
);

180 
	`cuda_puŒ_¨øy
(
l
.
rﬁlög_v¨ün˚_gpu
,Ü.
rﬁlög_v¨ün˚
,Ü.
c
);

181 
	}
}

182 
	$push_b©chn‹m_œyî
(
œyî
 
l
)

184 
	`cuda_push_¨øy
(
l
.
sˇÀs_gpu
,Ü.
sˇÀs
,Ü.
c
);

185 
	`cuda_push_¨øy
(
l
.
rﬁlög_món_gpu
,Ü.
rﬁlög_món
,Ü.
c
);

186 
	`cuda_push_¨øy
(
l
.
rﬁlög_v¨ün˚_gpu
,Ü.
rﬁlög_v¨ün˚
,Ü.
c
);

187 
	}
}

189 
	$f‹w¨d_b©chn‹m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

191 if(
l
.
ty≥
 =
BATCHNORM
Ë
	`c›y_gpu
÷.
ouçuts
*l.
b©ch
, 
√t
.
öput_gpu
, 1,Ü.
ouçut_gpu
, 1);

192 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
, 1,Ü.
x_gpu
, 1);

193 i‡(
√t
.
åaö
) {

194 #ifde‡
CUDNN


195 
⁄e
 = 1;

196 
zîo
 = 0;

197 
	`cud¬B©chN‹mÆiz©i⁄F‹w¨dTøöög
(
	`cud¬_h™dÀ
(),

198 
CUDNN_BATCHNORM_SPATIAL
,

199 &
⁄e
,

200 &
zîo
,

201 
l
.
d°Tís‹Desc
,

202 
l
.
x_gpu
,

203 
l
.
d°Tís‹Desc
,

204 
l
.
ouçut_gpu
,

205 
l
.
n‹mTís‹Desc
,

206 
l
.
sˇÀs_gpu
,

207 
l
.
bü£s_gpu
,

209 
l
.
rﬁlög_món_gpu
,

210 
l
.
rﬁlög_v¨ün˚_gpu
,

212 
l
.
món_gpu
,

213 
l
.
v¨ün˚_gpu
);

215 
	`Á°_món_gpu
(
l
.
ouçut_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
,Ü.
món_gpu
);

216 
	`Á°_v¨ün˚_gpu
(
l
.
ouçut_gpu
,Ü.
món_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
,Ü.
v¨ün˚_gpu
);

218 
	`sˇl_gpu
(
l
.
out_c
, .99,Ü.
rﬁlög_món_gpu
, 1);

219 
	`axpy_gpu
(
l
.
out_c
, .01,Ü.
món_gpu
, 1,Ü.
rﬁlög_món_gpu
, 1);

220 
	`sˇl_gpu
(
l
.
out_c
, .99,Ü.
rﬁlög_v¨ün˚_gpu
, 1);

221 
	`axpy_gpu
(
l
.
out_c
, .01,Ü.
v¨ün˚_gpu
, 1,Ü.
rﬁlög_v¨ün˚_gpu
, 1);

223 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
, 1,Ü.
x_gpu
, 1);

224 
	`n‹mÆize_gpu
(
l
.
ouçut_gpu
,Ü.
món_gpu
,Ü.
v¨ün˚_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

225 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
, 1,Ü.
x_n‹m_gpu
, 1);

227 
	`sˇÀ_büs_gpu
(
l
.
ouçut_gpu
,Ü.
sˇÀs_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

228 
	`add_büs_gpu
(
l
.
ouçut_gpu
,Ü.
bü£s_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
);

231 
	`n‹mÆize_gpu
(
l
.
ouçut_gpu
,Ü.
rﬁlög_món_gpu
,Ü.
rﬁlög_v¨ün˚_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

232 
	`sˇÀ_büs_gpu
(
l
.
ouçut_gpu
,Ü.
sˇÀs_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

233 
	`add_büs_gpu
(
l
.
ouçut_gpu
,Ü.
bü£s_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
);

236 
	}
}

238 
	$backw¨d_b©chn‹m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

240 if(!
√t
.
åaö
){

241 
l
.
món_gpu
 =Ü.
rﬁlög_món_gpu
;

242 
l
.
v¨ün˚_gpu
 =Ü.
rﬁlög_v¨ün˚_gpu
;

244 #ifde‡
CUDNN


245 
⁄e
 = 1;

246 
zîo
 = 0;

247 
	`cud¬B©chN‹mÆiz©i⁄Backw¨d
(
	`cud¬_h™dÀ
(),

248 
CUDNN_BATCHNORM_SPATIAL
,

249 &
⁄e
,

250 &
zîo
,

251 &
⁄e
,

252 &
⁄e
,

253 
l
.
d°Tís‹Desc
,

254 
l
.
x_gpu
,

255 
l
.
d°Tís‹Desc
,

256 
l
.
dñè_gpu
,

257 
l
.
d°Tís‹Desc
,

258 
l
.
x_n‹m_gpu
,

259 
l
.
n‹mTís‹Desc
,

260 
l
.
sˇÀs_gpu
,

261 
l
.
sˇÀ_upd©es_gpu
,

262 
l
.
büs_upd©es_gpu
,

264 
l
.
món_gpu
,

265 
l
.
v¨ün˚_gpu
);

266 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
x_n‹m_gpu
, 1,Ü.
dñè_gpu
, 1);

268 
	`backw¨d_büs_gpu
(
l
.
büs_upd©es_gpu
,Ü.
dñè_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
);

269 
	`backw¨d_sˇÀ_gpu
(
l
.
x_n‹m_gpu
,Ü.
dñè_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
sˇÀ_upd©es_gpu
);

271 
	`sˇÀ_büs_gpu
(
l
.
dñè_gpu
,Ü.
sˇÀs_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
*l.
out_w
);

273 
	`Á°_món_dñè_gpu
(
l
.
dñè_gpu
,Ü.
v¨ün˚_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
món_dñè_gpu
);

274 
	`Á°_v¨ün˚_dñè_gpu
(
l
.
x_gpu
,Ü.
dñè_gpu
,Ü.
món_gpu
,Ü.
v¨ün˚_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
v¨ün˚_dñè_gpu
);

275 
	`n‹mÆize_dñè_gpu
(
l
.
x_gpu
,Ü.
món_gpu
,Ü.
v¨ün˚_gpu
,Ü.
món_dñè_gpu
,Ü.
v¨ün˚_dñè_gpu
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_w
*l.
out_h
,Ü.
dñè_gpu
);

277 if(
l
.
ty≥
 =
BATCHNORM
Ë
	`c›y_gpu
÷.
ouçuts
*l.
b©ch
,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

278 
	}
}

	@src/batchnorm_layer.h

1 #i‚de‡
BATCHNORM_LAYER_H


2 
	#BATCHNORM_LAYER_H


	)

4 
	~"image.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
make_b©chn‹m_œyî
(
b©ch
, 
w
, 
h
, 
c
);

9 
f‹w¨d_b©chn‹m_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

10 
backw¨d_b©chn‹m_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

12 #ifde‡
GPU


13 
f‹w¨d_b©chn‹m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

14 
backw¨d_b©chn‹m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

15 
puŒ_b©chn‹m_œyî
(
œyî
 
l
);

16 
push_b©chn‹m_œyî
(
œyî
 
l
);

	@src/blas.c

1 
	~"bœs.h
"

3 
	~<m©h.h
>

4 
	~<as£π.h
>

5 
	~<Êﬂt.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	$ª‹g_˝u
(*
x
, 
w
, 
h
, 
c
, 
b©ch
, 
°ride
, 
f‹w¨d
, *
out
)

11 
b
,
i
,
j
,
k
;

12 
out_c
 = 
c
/(
°ride
*stride);

14 
b
 = 0; b < 
b©ch
; ++b){

15 
k
 = 0; k < 
c
; ++k){

16 
j
 = 0; j < 
h
; ++j){

17 
i
 = 0; i < 
w
; ++i){

18 
ö_ödex
 = 
i
 + 
w
*(
j
 + 
h
*(
k
 + 
c
*
b
));

19 
c2
 = 
k
 % 
out_c
;

20 
off£t
 = 
k
 / 
out_c
;

21 
w2
 = 
i
*
°ride
 + 
off£t
 % stride;

22 
h2
 = 
j
*
°ride
 + 
off£t
 / stride;

23 
out_ödex
 = 
w2
 + 
w
*
°ride
*(
h2
 + 
h
*°ride*(
c2
 + 
out_c
*
b
));

24 if(
f‹w¨d
Ë
out
[
out_ödex
] = 
x
[
ö_ödex
];

25 
out
[
ö_ödex
] = 
x
[
out_ödex
];

30 
	}
}

32 
	$Ê©ãn
(*
x
, 
size
, 
œyîs
, 
b©ch
, 
f‹w¨d
)

34 *
sw≠
 = 
	`ˇŒoc
(
size
*
œyîs
*
b©ch
, ());

35 
i
,
c
,
b
;

36 
b
 = 0; b < 
b©ch
; ++b){

37 
c
 = 0; c < 
œyîs
; ++c){

38 
i
 = 0; i < 
size
; ++i){

39 
i1
 = 
b
*
œyîs
*
size
 + 
c
*sizê+ 
i
;

40 
i2
 = 
b
*
œyîs
*
size
 + 
i
*œyî†+ 
c
;

41 i‡(
f‹w¨d
Ë
sw≠
[
i2
] = 
x
[
i1
];

42 
sw≠
[
i1
] = 
x
[
i2
];

46 
	`mem˝y
(
x
, 
sw≠
, 
size
*
œyîs
*
b©ch
*());

47 
	`‰ì
(
sw≠
);

48 
	}
}

50 
	$weighãd_sum_˝u
(*
a
, *
b
, *
s
, 
n
, *
c
)

52 
i
;

53 
i
 = 0; i < 
n
; ++i){

54 
c
[
i
] = 
s
[i]*
a
[i] + (1-s[i])*(
b
 ? b[i] : 0);

56 
	}
}

58 
	$weighãd_dñè_˝u
(*
a
, *
b
, *
s
, *
da
, *
db
, *
ds
, 
n
, *
dc
)

60 
i
;

61 
i
 = 0; i < 
n
; ++i){

62 if(
da
Ëda[
i
] +
dc
[i] * 
s
[i];

63 if(
db
Ëdb[
i
] +
dc
[i] * (1-
s
[i]);

64 
ds
[
i
] +
dc
[i] * (
a
[i] - 
b
[i]);

66 
	}
}

68 
	$sh‹tcut_˝u
(
b©ch
, 
w1
, 
h1
, 
c1
, *
add
, 
w2
, 
h2
, 
c2
, *
out
)

70 
°ride
 = 
w1
/
w2
;

71 
ßm∂e
 = 
w2
/
w1
;

72 
	`as£π
(
°ride
 =
h1
/
h2
);

73 
	`as£π
(
ßm∂e
 =
h2
/
h1
);

74 if(
°ride
 < 1) stride = 1;

75 if(
ßm∂e
 < 1) sample = 1;

76 
möw
 = (
w1
 < 
w2
) ? w1 : w2;

77 
möh
 = (
h1
 < 
h2
) ? h1 : h2;

78 
möc
 = (
c1
 < 
c2
) ? c1 : c2;

80 
i
,
j
,
k
,
b
;

81 
b
 = 0; b < 
b©ch
; ++b){

82 
k
 = 0; k < 
möc
; ++k){

83 
j
 = 0; j < 
möh
; ++j){

84 
i
 = 0; i < 
möw
; ++i){

85 
out_ödex
 = 
i
*
ßm∂e
 + 
w2
*(
j
*ßm∂ê+ 
h2
*(
k
 + 
c2
*
b
));

86 
add_ödex
 = 
i
*
°ride
 + 
w1
*(
j
*°ridê+ 
h1
*(
k
 + 
c1
*
b
));

87 
out
[
out_ödex
] +
add
[
add_ödex
];

92 
	}
}

94 
	$món_˝u
(*
x
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món
)

96 
sˇÀ
 = 1./(
b©ch
 * 
•©ül
);

97 
i
,
j
,
k
;

98 
i
 = 0; i < 
fûãrs
; ++i){

99 
món
[
i
] = 0;

100 
j
 = 0; j < 
b©ch
; ++j){

101 
k
 = 0; k < 
•©ül
; ++k){

102 
ödex
 = 
j
*
fûãrs
*
•©ül
 + 
i
*•©ü»+ 
k
;

103 
món
[
i
] +
x
[
ödex
];

106 
món
[
i
] *
sˇÀ
;

108 
	}
}

110 
	$v¨ün˚_˝u
(*
x
, *
món
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚
)

112 
sˇÀ
 = 1./(
b©ch
 * 
•©ül
 - 1);

113 
i
,
j
,
k
;

114 
i
 = 0; i < 
fûãrs
; ++i){

115 
v¨ün˚
[
i
] = 0;

116 
j
 = 0; j < 
b©ch
; ++j){

117 
k
 = 0; k < 
•©ül
; ++k){

118 
ödex
 = 
j
*
fûãrs
*
•©ül
 + 
i
*•©ü»+ 
k
;

119 
v¨ün˚
[
i
] +
	`pow
((
x
[
ödex
] - 
món
[i]), 2);

122 
v¨ün˚
[
i
] *
sˇÀ
;

124 
	}
}

126 
	$n‹mÆize_˝u
(*
x
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
)

128 
b
, 
f
, 
i
;

129 
b
 = 0; b < 
b©ch
; ++b){

130 
f
 = 0; f < 
fûãrs
; ++f){

131 
i
 = 0; i < 
•©ül
; ++i){

132 
ödex
 = 
b
*
fûãrs
*
•©ül
 + 
f
*•©ü»+ 
i
;

133 
x
[
ödex
] = (x[ödex] - 
món
[
f
])/(
	`sqπ
(
v¨ün˚
[f]) + .000001f);

137 
	}
}

139 
	$c⁄°_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
)

141 
i
;

142 
i
 = 0; i < 
N
; ++iË
X
[i*
INCX
] = 
ALPHA
;

143 
	}
}

145 
	$mul_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
)

147 
i
;

148 
i
 = 0; i < 
N
; ++iË
Y
[i*
INCY
] *
X
[i*
INCX
];

149 
	}
}

151 
	$pow_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
, *
Y
, 
INCY
)

153 
i
;

154 
i
 = 0; i < 
N
; ++iË
Y
[i*
INCY
] = 
	`pow
(
X
[i*
INCX
], 
ALPHA
);

155 
	}
}

157 
	$axpy_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
, *
Y
, 
INCY
)

159 
i
;

160 
i
 = 0; i < 
N
; ++iË
Y
[i*
INCY
] +
ALPHA
*
X
[i*
INCX
];

161 
	}
}

163 
	$sˇl_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
)

165 
i
;

166 
i
 = 0; i < 
N
; ++iË
X
[i*
INCX
] *
ALPHA
;

167 
	}
}

169 
	$fûl_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
)

171 
i
;

172 
i
 = 0; i < 
N
; ++iË
X
[i*
INCX
] = 
ALPHA
;

173 
	}
}

175 
	$deöãr_˝u
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
)

177 
i
, 
j
;

178 
ödex
 = 0;

179 
j
 = 0; j < 
B
; ++j) {

180 
i
 = 0; i < 
NX
; ++i){

181 if(
X
ËX[
j
*
NX
 + 
i
] +
OUT
[
ödex
];

182 ++
ödex
;

184 
i
 = 0; i < 
NY
; ++i){

185 if(
Y
ËY[
j
*
NY
 + 
i
] +
OUT
[
ödex
];

186 ++
ödex
;

189 
	}
}

191 
	$öãr_˝u
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
)

193 
i
, 
j
;

194 
ödex
 = 0;

195 
j
 = 0; j < 
B
; ++j) {

196 
i
 = 0; i < 
NX
; ++i){

197 
OUT
[
ödex
++] = 
X
[
j
*
NX
 + 
i
];

199 
i
 = 0; i < 
NY
; ++i){

200 
OUT
[
ödex
++] = 
Y
[
j
*
NY
 + 
i
];

203 
	}
}

205 
	$c›y_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
)

207 
i
;

208 
i
 = 0; i < 
N
; ++iË
Y
[i*
INCY
] = 
X
[i*
INCX
];

209 
	}
}

211 
	$mu…_add_öto_˝u
(
N
, *
X
, *
Y
, *
Z
)

213 
i
;

214 
i
 = 0; i < 
N
; ++iË
Z
[i] +
X
[i]*
Y
[i];

215 
	}
}

217 
	$smoŸh_l1_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
)

219 
i
;

220 
i
 = 0; i < 
n
; ++i){

221 
diff
 = 
åuth
[
i
] - 
¥ed
[i];

222 
abs_vÆ
 = 
	`Ábs
(
diff
);

223 if(
abs_vÆ
 < 1) {

224 
îr‹
[
i
] = 
diff
 * diff;

225 
dñè
[
i
] = 
diff
;

228 
îr‹
[
i
] = 2*
abs_vÆ
 - 1;

229 
dñè
[
i
] = (
diff
 < 0) ? 1 : -1;

232 
	}
}

234 
	$l1_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
)

236 
i
;

237 
i
 = 0; i < 
n
; ++i){

238 
diff
 = 
åuth
[
i
] - 
¥ed
[i];

239 
îr‹
[
i
] = 
	`Ábs
(
diff
);

240 
dñè
[
i
] = 
diff
 > 0 ? 1 : -1;

242 
	}
}

244 
	$l2_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
)

246 
i
;

247 
i
 = 0; i < 
n
; ++i){

248 
diff
 = 
åuth
[
i
] - 
¥ed
[i];

249 
îr‹
[
i
] = 
diff
 * diff;

250 
dñè
[
i
] = 
diff
;

252 
	}
}

254 
	$dŸ_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
)

256 
i
;

257 
dŸ
 = 0;

258 
i
 = 0; i < 
N
; ++iË
dŸ
 +
X
[i*
INCX
] * 
Y
[i*
INCY
];

259  
dŸ
;

260 
	}
}

262 
	$so·max
(*
öput
, 
n
, 
ãmp
, 
°ride
, *
ouçut
)

264 
i
;

265 
sum
 = 0;

266 
œrge°
 = -
FLT_MAX
;

267 
i
 = 0; i < 
n
; ++i){

268 if(
öput
[
i
*
°ride
] > 
œrge°
)Üargest = input[i*stride];

270 
i
 = 0; i < 
n
; ++i){

271 
e
 = 
	`exp
(
öput
[
i
*
°ride
]/
ãmp
 - 
œrge°
/temp);

272 
sum
 +
e
;

273 
ouçut
[
i
*
°ride
] = 
e
;

275 
i
 = 0; i < 
n
; ++i){

276 
ouçut
[
i
*
°ride
] /
sum
;

278 
	}
}

281 
	$so·max_˝u
(*
öput
, 
n
, 
b©ch
, 
b©ch_off£t
, 
groups
, 
group_off£t
, 
°ride
, 
ãmp
, *
ouçut
)

283 
g
, 
b
;

284 
b
 = 0; b < 
b©ch
; ++b){

285 
g
 = 0; g < 
groups
; ++g){

286 
	`so·max
(
öput
 + 
b
*
b©ch_off£t
 + 
g
*
group_off£t
, 
n
, 
ãmp
, 
°ride
, 
ouçut
 + b*batch_offset + g*group_offset);

289 
	}
}

	@src/blas.h

1 #i‚de‡
BLAS_H


2 
	#BLAS_H


	)

3 
	~"d¨k√t.h
"

5 
Ê©ãn
(*
x
, 
size
, 
œyîs
, 
b©ch
, 
f‹w¨d
);

6 
pm
(
M
, 
N
, *
A
);

7 *
øndom_m©rix
(
rows
, 
cﬁs
);

8 
time_øndom_m©rix
(
TA
, 
TB
, 
m
, 
k
, 
n
);

9 
ª‹g_˝u
(*
x
, 
w
, 
h
, 
c
, 
b©ch
, 
°ride
, 
f‹w¨d
, *
out
);

11 
ã°_bœs
();

13 
öãr_˝u
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
);

14 
deöãr_˝u
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
);

15 
mu…_add_öto_˝u
(
N
, *
X
, *
Y
, *
Z
);

17 
c⁄°_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
);

18 
c⁄°øö_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
);

19 
pow_˝u
(
N
, 
ALPHA
, *
X
, 
INCX
, *
Y
, 
INCY
);

20 
mul_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
);

22 
fûl_˝u
(
N
, 
ALPHA
, * 
X
, 
INCX
);

23 
dŸ_˝u
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
);

24 
ã°_gpu_bœs
();

25 
sh‹tcut_˝u
(
b©ch
, 
w1
, 
h1
, 
c1
, *
add
, 
w2
, 
h2
, 
c2
, *
out
);

27 
món_˝u
(*
x
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món
);

28 
v¨ün˚_˝u
(*
x
, *
món
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚
);

30 
sˇÀ_büs
(*
ouçut
, *
sˇÀs
, 
b©ch
, 
n
, 
size
);

31 
backw¨d_sˇÀ_˝u
(*
x_n‹m
, *
dñè
, 
b©ch
, 
n
, 
size
, *
sˇÀ_upd©es
);

32 
món_dñè_˝u
(*
dñè
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món_dñè
);

33 
v¨ün˚_dñè_˝u
(*
x
, *
dñè
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚_dñè
);

34 
n‹mÆize_dñè_˝u
(*
x
, *
món
, *
v¨ün˚
, *
món_dñè
, *
v¨ün˚_dñè
, 
b©ch
, 
fûãrs
, 
•©ül
, *
dñè
);

36 
smoŸh_l1_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

37 
l2_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

38 
l1_˝u
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

39 
weighãd_sum_˝u
(*
a
, *
b
, *
s
, 
num
, *
c
);

40 
weighãd_dñè_˝u
(*
a
, *
b
, *
s
, *
da
, *
db
, *
ds
, 
n
, *
dc
);

42 
so·max
(*
öput
, 
n
, 
ãmp
, 
°ride
, *
ouçut
);

43 
so·max_˝u
(*
öput
, 
n
, 
b©ch
, 
b©ch_off£t
, 
groups
, 
group_off£t
, 
°ride
, 
ãmp
, *
ouçut
);

45 #ifde‡
GPU


46 
	~"cuda.h
"

47 
	~"åì.h
"

49 
axpy_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
, * 
Y
, 
INCY
);

50 
axpy_gpu_off£t
(
N
, 
ALPHA
, * 
X
, 
OFFX
, 
INCX
, * 
Y
, 
OFFY
, 
INCY
);

51 
c›y_gpu
(
N
, * 
X
, 
INCX
, * 
Y
, 
INCY
);

52 
c›y_gpu_off£t
(
N
, * 
X
, 
OFFX
, 
INCX
, * 
Y
, 
OFFY
, 
INCY
);

53 
add_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
);

54 
suµ_gpu
(
N
, 
ALPHA
, * 
X
, 
INCX
);

55 
mask_gpu
(
N
, * 
X
, 
mask_num
, * 
mask
);

56 
sˇÀ_mask_gpu
(
N
, * 
X
, 
mask_num
, * 
mask
, 
sˇÀ
);

57 
c⁄°_gpu
(
N
, 
ALPHA
, *
X
, 
INCX
);

58 
pow_gpu
(
N
, 
ALPHA
, *
X
, 
INCX
, *
Y
, 
INCY
);

59 
mul_gpu
(
N
, *
X
, 
INCX
, *
Y
, 
INCY
);

61 
món_gpu
(*
x
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món
);

62 
v¨ün˚_gpu
(*
x
, *
món
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚
);

63 
n‹mÆize_gpu
(*
x
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
);

65 
n‹mÆize_dñè_gpu
(*
x
, *
món
, *
v¨ün˚
, *
món_dñè
, *
v¨ün˚_dñè
, 
b©ch
, 
fûãrs
, 
•©ül
, *
dñè
);

67 
Á°_món_dñè_gpu
(*
dñè
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món_dñè
);

68 
Á°_v¨ün˚_dñè_gpu
(*
x
, *
dñè
, *
món
, *
v¨ün˚
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚_dñè
);

70 
Á°_v¨ün˚_gpu
(*
x
, *
món
, 
b©ch
, 
fûãrs
, 
•©ül
, *
v¨ün˚
);

71 
Á°_món_gpu
(*
x
, 
b©ch
, 
fûãrs
, 
•©ül
, *
món
);

72 
sh‹tcut_gpu
(
b©ch
, 
w1
, 
h1
, 
c1
, *
add
, 
w2
, 
h2
, 
c2
, *
out
);

73 
sˇÀ_büs_gpu
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

74 
backw¨d_sˇÀ_gpu
(*
x_n‹m
, *
dñè
, 
b©ch
, 
n
, 
size
, *
sˇÀ_upd©es
);

75 
sˇÀ_büs_gpu
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

76 
add_büs_gpu
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

77 
backw¨d_büs_gpu
(*
büs_upd©es
, *
dñè
, 
b©ch
, 
n
, 
size
);

79 
smoŸh_l1_gpu
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

80 
l2_gpu
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

81 
l1_gpu
(
n
, *
¥ed
, *
åuth
, *
dñè
, *
îr‹
);

82 
weighãd_dñè_gpu
(*
a
, *
b
, *
s
, *
da
, *
db
, *
ds
, 
num
, *
dc
);

83 
weighãd_sum_gpu
(*
a
, *
b
, *
s
, 
num
, *
c
);

84 
mu…_add_öto_gpu
(
num
, *
a
, *
b
, *
c
);

85 
öãr_gpu
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
);

86 
deöãr_gpu
(
NX
, *
X
, 
NY
, *
Y
, 
B
, *
OUT
);

88 
ª‹g_gpu
(*
x
, 
w
, 
h
, 
c
, 
b©ch
, 
°ride
, 
f‹w¨d
, *
out
);

90 
so·max_gpu
(*
öput
, 
n
, 
b©ch
, 
b©ch_off£t
, 
groups
, 
group_off£t
, 
°ride
, 
ãmp
, *
ouçut
);

91 
adam_upd©e_gpu
(*
w
, *
d
, *
m
, *
v
, 
B1
, 
B2
, 
ïs
, 
deˇy
, 
øã
, 
n
, 
b©ch
, 
t
);

92 
adam_gpu
(
n
, *
x
, *
m
, *
v
, 
B1
, 
B2
, 
øã
, 
ïs
, 
t
);

94 
Ê©ãn_gpu
(*
x
, 
•©ül
, 
œyîs
, 
b©ch
, 
f‹w¨d
, *
out
);

95 
so·max_åì
(*
öput
, 
•©ül
, 
b©ch
, 
°ride
, 
ãmp
, *
ouçut
, 
åì
 
hõr
);

	@src/box.c

1 
	~"box.h
"

2 
	~<°dio.h
>

3 
	~<m©h.h
>

4 
	~<°dlib.h
>

6 
box
 
	$Êﬂt_to_box
(*
f
, 
°ride
)

8 
box
 
b
;

9 
b
.
x
 = 
f
[0];

10 
b
.
y
 = 
f
[1*
°ride
];

11 
b
.
w
 = 
f
[2*
°ride
];

12 
b
.
h
 = 
f
[3*
°ride
];

13  
b
;

14 
	}
}

16 
dbox
 
	$dîiv©ive
(
box
 
a
, box 
b
)

18 
dbox
 
d
;

19 
d
.
dx
 = 0;

20 
d
.
dw
 = 0;

21 
l1
 = 
a
.
x
 -á.
w
/2;

22 
l2
 = 
b
.
x
 - b.
w
/2;

23 i‡(
l1
 > 
l2
){

24 
d
.
dx
 -= 1;

25 
d
.
dw
 += .5;

27 
r1
 = 
a
.
x
 +á.
w
/2;

28 
r2
 = 
b
.
x
 + b.
w
/2;

29 if(
r1
 < 
r2
){

30 
d
.
dx
 += 1;

31 
d
.
dw
 += .5;

33 i‡(
l1
 > 
r2
) {

34 
d
.
dx
 = -1;

35 
d
.
dw
 = 0;

37 i‡(
r1
 < 
l2
){

38 
d
.
dx
 = 1;

39 
d
.
dw
 = 0;

42 
d
.
dy
 = 0;

43 
d
.
dh
 = 0;

44 
t1
 = 
a
.
y
 -á.
h
/2;

45 
t2
 = 
b
.
y
 - b.
h
/2;

46 i‡(
t1
 > 
t2
){

47 
d
.
dy
 -= 1;

48 
d
.
dh
 += .5;

50 
b1
 = 
a
.
y
 +á.
h
/2;

51 
b2
 = 
b
.
y
 + b.
h
/2;

52 if(
b1
 < 
b2
){

53 
d
.
dy
 += 1;

54 
d
.
dh
 += .5;

56 i‡(
t1
 > 
b2
) {

57 
d
.
dy
 = -1;

58 
d
.
dh
 = 0;

60 i‡(
b1
 < 
t2
){

61 
d
.
dy
 = 1;

62 
d
.
dh
 = 0;

64  
d
;

65 
	}
}

67 
	$ovîœp
(
x1
, 
w1
, 
x2
, 
w2
)

69 
l1
 = 
x1
 - 
w1
/2;

70 
l2
 = 
x2
 - 
w2
/2;

71 
À·
 = 
l1
 > 
l2
 ?Ü1 :Ü2;

72 
r1
 = 
x1
 + 
w1
/2;

73 
r2
 = 
x2
 + 
w2
/2;

74 
right
 = 
r1
 < 
r2
 ?Ñ1 :Ñ2;

75  
right
 - 
À·
;

76 
	}
}

78 
	$box_öãr£˘i⁄
(
box
 
a
, box 
b
)

80 
w
 = 
	`ovîœp
(
a
.
x
,á.w, 
b
.x, b.w);

81 
h
 = 
	`ovîœp
(
a
.
y
,á.h, 
b
.y, b.h);

82 if(
w
 < 0 || 
h
 < 0)  0;

83 
¨ó
 = 
w
*
h
;

84  
¨ó
;

85 
	}
}

87 
	$box_uni⁄
(
box
 
a
, box 
b
)

89 
i
 = 
	`box_öãr£˘i⁄
(
a
, 
b
);

90 
u
 = 
a
.
w
*a.
h
 + 
b
.w*b.h - 
i
;

91  
u
;

92 
	}
}

94 
	$box_iou
(
box
 
a
, box 
b
)

96  
	`box_öãr£˘i⁄
(
a
, 
b
)/
	`box_uni⁄
(a, b);

97 
	}
}

99 
	$box_rm£
(
box
 
a
, box 
b
)

101  
	`sqπ
(
	`pow
(
a
.
x
-
b
.x, 2) +

102 
	`pow
(
a
.
y
-
b
.y, 2) +

103 
	`pow
(
a
.
w
-
b
.w, 2) +

104 
	`pow
(
a
.
h
-
b
.h, 2));

105 
	}
}

107 
dbox
 
	$döãr£˘
(
box
 
a
, box 
b
)

109 
w
 = 
	`ovîœp
(
a
.
x
,á.w, 
b
.x, b.w);

110 
h
 = 
	`ovîœp
(
a
.
y
,á.h, 
b
.y, b.h);

111 
dbox
 
dovî
 = 
	`dîiv©ive
(
a
, 
b
);

112 
dbox
 
di
;

114 
di
.
dw
 = 
dovî
.dw*
h
;

115 
di
.
dx
 = 
dovî
.dx*
h
;

116 
di
.
dh
 = 
dovî
.dh*
w
;

117 
di
.
dy
 = 
dovî
.dy*
w
;

119  
di
;

120 
	}
}

122 
dbox
 
	$duni⁄
(
box
 
a
, box 
b
)

124 
dbox
 
du
;

126 
dbox
 
di
 = 
	`döãr£˘
(
a
, 
b
);

127 
du
.
dw
 = 
a
.
h
 - 
di
.dw;

128 
du
.
dh
 = 
a
.
w
 - 
di
.dh;

129 
du
.
dx
 = -
di
.dx;

130 
du
.
dy
 = -
di
.dy;

132  
du
;

133 
	}
}

136 
	$ã°_duni⁄
()

138 
box
 
a
 = {0, 0, 1, 1};

139 
box
 
dxa
= {0+.0001, 0, 1, 1};

140 
box
 
dya
= {0, 0+.0001, 1, 1};

141 
box
 
dwa
= {0, 0, 1+.0001, 1};

142 
box
 
dha
= {0, 0, 1, 1+.0001};

144 
box
 
b
 = {.5, .5, .2, .2};

145 
dbox
 
di
 = 
	`duni⁄
(
a
,
b
);

146 
	`¥ötf
("Uni⁄: %‡%‡%‡%f\n", 
di
.
dx
, di.
dy
, di.
dw
, di.
dh
);

147 
öãr
 = 
	`box_uni⁄
(
a
, 
b
);

148 
xöãr
 = 
	`box_uni⁄
(
dxa
, 
b
);

149 
yöãr
 = 
	`box_uni⁄
(
dya
, 
b
);

150 
wöãr
 = 
	`box_uni⁄
(
dwa
, 
b
);

151 
höãr
 = 
	`box_uni⁄
(
dha
, 
b
);

152 
xöãr
 = (xöã∏- 
öãr
)/(.0001);

153 
yöãr
 = (yöã∏- 
öãr
)/(.0001);

154 
wöãr
 = (wöã∏- 
öãr
)/(.0001);

155 
höãr
 = (höã∏- 
öãr
)/(.0001);

156 
	`¥ötf
("Uni⁄ M™uÆ %‡%‡%‡%f\n", 
xöãr
, 
yöãr
, 
wöãr
, 
höãr
);

157 
	}
}

158 
	$ã°_döãr£˘
()

160 
box
 
a
 = {0, 0, 1, 1};

161 
box
 
dxa
= {0+.0001, 0, 1, 1};

162 
box
 
dya
= {0, 0+.0001, 1, 1};

163 
box
 
dwa
= {0, 0, 1+.0001, 1};

164 
box
 
dha
= {0, 0, 1, 1+.0001};

166 
box
 
b
 = {.5, .5, .2, .2};

167 
dbox
 
di
 = 
	`döãr£˘
(
a
,
b
);

168 
	`¥ötf
("I¡î: %‡%‡%‡%f\n", 
di
.
dx
, di.
dy
, di.
dw
, di.
dh
);

169 
öãr
 = 
	`box_öãr£˘i⁄
(
a
, 
b
);

170 
xöãr
 = 
	`box_öãr£˘i⁄
(
dxa
, 
b
);

171 
yöãr
 = 
	`box_öãr£˘i⁄
(
dya
, 
b
);

172 
wöãr
 = 
	`box_öãr£˘i⁄
(
dwa
, 
b
);

173 
höãr
 = 
	`box_öãr£˘i⁄
(
dha
, 
b
);

174 
xöãr
 = (xöã∏- 
öãr
)/(.0001);

175 
yöãr
 = (yöã∏- 
öãr
)/(.0001);

176 
wöãr
 = (wöã∏- 
öãr
)/(.0001);

177 
höãr
 = (höã∏- 
öãr
)/(.0001);

178 
	`¥ötf
("I¡î M™uÆ %‡%‡%‡%f\n", 
xöãr
, 
yöãr
, 
wöãr
, 
höãr
);

179 
	}
}

181 
	$ã°_box
()

183 
	`ã°_döãr£˘
();

184 
	`ã°_duni⁄
();

185 
box
 
a
 = {0, 0, 1, 1};

186 
box
 
dxa
= {0+.00001, 0, 1, 1};

187 
box
 
dya
= {0, 0+.00001, 1, 1};

188 
box
 
dwa
= {0, 0, 1+.00001, 1};

189 
box
 
dha
= {0, 0, 1, 1+.00001};

191 
box
 
b
 = {.5, 0, .2, .2};

193 
iou
 = 
	`box_iou
(
a
,
b
);

194 
iou
 = (1-iou)*(1-iou);

195 
	`¥ötf
("%f\n", 
iou
);

196 
dbox
 
d
 = 
	`diou
(
a
, 
b
);

197 
	`¥ötf
("%‡%‡%‡%f\n", 
d
.
dx
, d.
dy
, d.
dw
, d.
dh
);

199 
xiou
 = 
	`box_iou
(
dxa
, 
b
);

200 
yiou
 = 
	`box_iou
(
dya
, 
b
);

201 
wiou
 = 
	`box_iou
(
dwa
, 
b
);

202 
hiou
 = 
	`box_iou
(
dha
, 
b
);

203 
xiou
 = ((1-xiou)*(1-xiouË- 
iou
)/(.00001);

204 
yiou
 = ((1-yiou)*(1-yiouË- 
iou
)/(.00001);

205 
wiou
 = ((1-wiou)*(1-wiouË- 
iou
)/(.00001);

206 
hiou
 = ((1-hiou)*(1-hiouË- 
iou
)/(.00001);

207 
	`¥ötf
("m™uÆ %‡%‡%‡%f\n", 
xiou
, 
yiou
, 
wiou
, 
hiou
);

208 
	}
}

210 
dbox
 
	$diou
(
box
 
a
, box 
b
)

212 
u
 = 
	`box_uni⁄
(
a
,
b
);

213 
i
 = 
	`box_öãr£˘i⁄
(
a
,
b
);

214 
dbox
 
di
 = 
	`döãr£˘
(
a
,
b
);

215 
dbox
 
du
 = 
	`duni⁄
(
a
,
b
);

216 
dbox
 
dd
 = {0,0,0,0};

218 if(
i
 <= 0 || 1) {

219 
dd
.
dx
 = 
b
.
x
 - 
a
.x;

220 
dd
.
dy
 = 
b
.
y
 - 
a
.y;

221 
dd
.
dw
 = 
b
.
w
 - 
a
.w;

222 
dd
.
dh
 = 
b
.
h
 - 
a
.h;

223  
dd
;

226 
dd
.
dx
 = 2*
	`pow
((1-(
i
/
u
)),1)*(
di
.dx*u - 
du
.dx*i)/(u*u);

227 
dd
.
dy
 = 2*
	`pow
((1-(
i
/
u
)),1)*(
di
.dy*u - 
du
.dy*i)/(u*u);

228 
dd
.
dw
 = 2*
	`pow
((1-(
i
/
u
)),1)*(
di
.dw*u - 
du
.dw*i)/(u*u);

229 
dd
.
dh
 = 2*
	`pow
((1-(
i
/
u
)),1)*(
di
.dh*u - 
du
.dh*i)/(u*u);

230  
dd
;

231 
	}
}

234 
	mödex
;

235 
	m˛ass
;

236 **
	m¥obs
;

237 } 
	ts‹èbÀ_bbox
;

239 
	$nms_com∑øt‹
(c⁄° *
∑
, c⁄° *
pb
)

241 
s‹èbÀ_bbox
 
a
 = *(s‹èbÀ_bbox *)
∑
;

242 
s‹èbÀ_bbox
 
b
 = *(s‹èbÀ_bbox *)
pb
;

243 
diff
 = 
a
.
¥obs
[a.
ödex
][
b
.
˛ass
] - b.probs[b.index][b.class];

244 if(
diff
 < 0)  1;

245 if(
diff
 > 0)  -1;

247 
	}
}

249 
	$do_nms_obj
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
)

251 
i
, 
j
, 
k
;

252 
s‹èbÀ_bbox
 *
s
 = 
	`ˇŒoc
(
tŸÆ
, (sortable_bbox));

254 
i
 = 0; i < 
tŸÆ
; ++i){

255 
s
[
i
].
ödex
 = i;

256 
s
[
i
].
˛ass
 = 
˛as£s
;

257 
s
[
i
].
¥obs
 =Örobs;

260 
	`qs‹t
(
s
, 
tŸÆ
, (
s‹èbÀ_bbox
), 
nms_com∑øt‹
);

261 
i
 = 0; i < 
tŸÆ
; ++i){

262 if(
¥obs
[
s
[
i
].
ödex
][
˛as£s
] == 0) ;

263 
box
 
a
 = 
boxes
[
s
[
i
].
ödex
];

264 
j
 = 
i
+1; j < 
tŸÆ
; ++j){

265 
box
 
b
 = 
boxes
[
s
[
j
].
ödex
];

266 i‡(
	`box_iou
(
a
, 
b
Ë> 
thªsh
){

267 
k
 = 0; k < 
˛as£s
+1; ++k){

268 
¥obs
[
s
[
j
].
ödex
][
k
] = 0;

273 
	`‰ì
(
s
);

274 
	}
}

277 
	$do_nms_s‹t
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
)

279 
i
, 
j
, 
k
;

280 
s‹èbÀ_bbox
 *
s
 = 
	`ˇŒoc
(
tŸÆ
, (sortable_bbox));

282 
i
 = 0; i < 
tŸÆ
; ++i){

283 
s
[
i
].
ödex
 = i;

284 
s
[
i
].
˛ass
 = 0;

285 
s
[
i
].
¥obs
 =Örobs;

288 
k
 = 0; k < 
˛as£s
; ++k){

289 
i
 = 0; i < 
tŸÆ
; ++i){

290 
s
[
i
].
˛ass
 = 
k
;

292 
	`qs‹t
(
s
, 
tŸÆ
, (
s‹èbÀ_bbox
), 
nms_com∑øt‹
);

293 
i
 = 0; i < 
tŸÆ
; ++i){

294 if(
¥obs
[
s
[
i
].
ödex
][
k
] == 0) ;

295 
box
 
a
 = 
boxes
[
s
[
i
].
ödex
];

296 
j
 = 
i
+1; j < 
tŸÆ
; ++j){

297 
box
 
b
 = 
boxes
[
s
[
j
].
ödex
];

298 i‡(
	`box_iou
(
a
, 
b
Ë> 
thªsh
){

299 
¥obs
[
s
[
j
].
ödex
][
k
] = 0;

304 
	`‰ì
(
s
);

305 
	}
}

307 
	$do_nms
(
box
 *
boxes
, **
¥obs
, 
tŸÆ
, 
˛as£s
, 
thªsh
)

309 
i
, 
j
, 
k
;

310 
i
 = 0; i < 
tŸÆ
; ++i){

311 
™y
 = 0;

312 
k
 = 0; k < 
˛as£s
; ++kË
™y
 =ány || (
¥obs
[
i
][k] > 0);

313 if(!
™y
) {

316 
j
 = 
i
+1; j < 
tŸÆ
; ++j){

317 i‡(
	`box_iou
(
boxes
[
i
], boxes[
j
]Ë> 
thªsh
){

318 
k
 = 0; k < 
˛as£s
; ++k){

319 i‡(
¥obs
[
i
][
k
] <Örobs[
j
][k])Örobs[i][k] = 0;

320 
¥obs
[
j
][
k
] = 0;

325 
	}
}

327 
box
 
	$ícode_box
(
box
 
b
, box 
™ch‹
)

329 
box
 
ícode
;

330 
ícode
.
x
 = (
b
.x - 
™ch‹
.xË/ánch‹.
w
;

331 
ícode
.
y
 = (
b
.y - 
™ch‹
.yË/ánch‹.
h
;

332 
ícode
.
w
 = 
	`log2
(
b
.w / 
™ch‹
.w);

333 
ícode
.
h
 = 
	`log2
(
b
.h / 
™ch‹
.h);

334  
ícode
;

335 
	}
}

337 
box
 
	$decode_box
(
box
 
b
, box 
™ch‹
)

339 
box
 
decode
;

340 
decode
.
x
 = 
b
.x * 
™ch‹
.
w
 +ánchor.x;

341 
decode
.
y
 = 
b
.y * 
™ch‹
.
h
 +ánchor.y;

342 
decode
.
w
 = 
	`pow
(2., 
b
.wË* 
™ch‹
.w;

343 
decode
.
h
 = 
	`pow
(2., 
b
.hË* 
™ch‹
.h;

344  
decode
;

345 
	}
}

	@src/box.h

1 #i‚de‡
BOX_H


2 
	#BOX_H


	)

3 
	~"d¨k√t.h
"

6 
	mdx
, 
	mdy
, 
	mdw
, 
	mdh
;

7 } 
	tdbox
;

9 
box
 
Êﬂt_to_box
(*
f
, 
°ride
);

10 
box_rm£
(
box
 
a
, box 
b
);

11 
dbox
 
diou
(
box
 
a
, box 
b
);

12 
box
 
decode_box
(box 
b
, box 
™ch‹
);

13 
box
 
ícode_box
(box 
b
, box 
™ch‹
);

	@src/classifier.h

	@src/col2im.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	$cﬁ2im_add_pixñ
(*
im
, 
height
, 
width
, 
ch™√ls
,

4 
row
, 
cﬁ
, 
ch™√l
, 
∑d
, 
vÆ
)

6 
row
 -
∑d
;

7 
cﬁ
 -
∑d
;

9 i‡(
row
 < 0 || 
cﬁ
 < 0 ||

10 
row
 >
height
 || 
cﬁ
 >
width
) ;

11 
im
[
cﬁ
 + 
width
*(
row
 + 
height
*
ch™√l
)] +
vÆ
;

12 
	}
}

14 
	$cﬁ2im_˝u
(* 
d©a_cﬁ
,

15 
ch™√ls
, 
height
, 
width
,

16 
ksize
, 
°ride
, 
∑d
, * 
d©a_im
)

18 
c
,
h
,
w
;

19 
height_cﬁ
 = (
height
 + 2*
∑d
 - 
ksize
Ë/ 
°ride
 + 1;

20 
width_cﬁ
 = (
width
 + 2*
∑d
 - 
ksize
Ë/ 
°ride
 + 1;

22 
ch™√ls_cﬁ
 = 
ch™√ls
 * 
ksize
 * ksize;

23 
c
 = 0; c < 
ch™√ls_cﬁ
; ++c) {

24 
w_off£t
 = 
c
 % 
ksize
;

25 
h_off£t
 = (
c
 / 
ksize
) % ksize;

26 
c_im
 = 
c
 / 
ksize
 / ksize;

27 
h
 = 0; h < 
height_cﬁ
; ++h) {

28 
w
 = 0; w < 
width_cﬁ
; ++w) {

29 
im_row
 = 
h_off£t
 + 
h
 * 
°ride
;

30 
im_cﬁ
 = 
w_off£t
 + 
w
 * 
°ride
;

31 
cﬁ_ödex
 = (
c
 * 
height_cﬁ
 + 
h
Ë* 
width_cﬁ
 + 
w
;

32 
vÆ
 = 
d©a_cﬁ
[
cﬁ_ödex
];

33 
	`cﬁ2im_add_pixñ
(
d©a_im
, 
height
, 
width
, 
ch™√ls
,

34 
im_row
, 
im_cﬁ
, 
c_im
, 
∑d
, 
vÆ
);

38 
	}
}

	@src/col2im.h

1 #i‚de‡
COL2IM_H


2 
	#COL2IM_H


	)

4 
cﬁ2im_˝u
(* 
d©a_cﬁ
,

5 
ch™√ls
, 
height
, 
width
,

6 
ksize
, 
°ride
, 
∑d
, * 
d©a_im
);

8 #ifde‡
GPU


9 
cﬁ2im_gpu
(*
d©a_cﬁ
,

10 
ch™√ls
, 
height
, 
width
,

11 
ksize
, 
°ride
, 
∑d
, *
d©a_im
);

	@src/compare.c

1 
	~<°dio.h
>

3 
	~"√tw‹k.h
"

4 
	~"dëe˘i⁄_œyî.h
"

5 
	~"co°_œyî.h
"

6 
	~"utûs.h
"

7 
	~"∑r£r.h
"

8 
	~"box.h
"

10 
	$åaö_com∑ª
(*
cfgfûe
, *
weightfûe
)

12 
	`§™d
(
	`time
(0));

13 
avg_loss
 = -1;

14 *
ba£
 = 
	`ba£cfg
(
cfgfûe
);

15 *
backup_dúe˘‹y
 = "/home/pjreddie/backup/";

16 
	`¥ötf
("%s\n", 
ba£
);

17 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

18 if(
weightfûe
){

19 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

21 
	`¥ötf
("Ló∫ög R©e: %g, Momítum: %g, Deˇy: %g\n", 
√t
.
À¨nög_øã
,Çë.
momítum
,Çë.
deˇy
);

22 
imgs
 = 1024;

23 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/compare.train.list");

24 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

25 
N
 = 
∂i°
->
size
;

26 
	`¥ötf
("%d\n", 
N
);

27 
˛ock_t
 
time
;

28 
±hªad_t
 
lﬂd_thªad
;

29 
d©a
 
åaö
;

30 
d©a
 
buf„r
;

32 
lﬂd_¨gs
 
¨gs
 = {0};

33 
¨gs
.
w
 = 
√t
.w;

34 
¨gs
.
h
 = 
√t
.h;

35 
¨gs
.
∑ths
 =Öaths;

36 
¨gs
.
˛as£s
 = 20;

37 
¨gs
.
n
 = 
imgs
;

38 
¨gs
.
m
 = 
N
;

39 
¨gs
.
d
 = &
buf„r
;

40 
¨gs
.
ty≥
 = 
COMPARE_DATA
;

42 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

43 
ïoch
 = *
√t
.
£í
/
N
;

44 
i
 = 0;

46 ++
i
;

47 
time
=
	`˛ock
();

48 
	`±hªad_joö
(
lﬂd_thªad
, 0);

49 
åaö
 = 
buf„r
;

51 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

52 
	`¥ötf
("Lﬂded: %l‡£c⁄ds\n", 
	`£c
(
	`˛ock
()-
time
));

53 
time
=
	`˛ock
();

54 
loss
 = 
	`åaö_√tw‹k
(
√t
, 
åaö
);

55 if(
avg_loss
 =-1Ëavg_los†
loss
;

56 
avg_loss
 =ávg_loss*.9 + 
loss
*.1;

57 
	`¥ötf
("%.3f: %f, %‡avg, %l‡£c⁄ds, %ld images\n", ()*
√t
.
£í
/
N
, 
loss
, 
avg_loss
, 
	`£c
(
	`˛ock
()-
time
), *net.seen);

58 
	`‰ì_d©a
(
åaö
);

59 if(
i
%100 == 0){

60 
buff
[256];

61 
	`•rötf
(
buff
, "%s/%s_%d_mö‹_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
, 
i
);

62 
	`ßve_weights
(
√t
, 
buff
);

64 if(*
√t
.
£í
/
N
 > 
ïoch
){

65 
ïoch
 = *
√t
.
£í
/
N
;

66 
i
 = 0;

67 
buff
[256];

68 
	`•rötf
(
buff
, "%s/%s_%d.weights",
backup_dúe˘‹y
,
ba£
, 
ïoch
);

69 
	`ßve_weights
(
√t
, 
buff
);

70 if(
ïoch
%22 =0Ë
√t
.
À¨nög_øã
 *= .1;

73 
	`±hªad_joö
(
lﬂd_thªad
, 0);

74 
	`‰ì_d©a
(
buf„r
);

75 
	`‰ì_√tw‹k
(
√t
);

76 
	`‰ì_±rs
((**)
∑ths
, 
∂i°
->
size
);

77 
	`‰ì_li°
(
∂i°
);

78 
	`‰ì
(
ba£
);

79 
	}
}

81 
	$vÆid©e_com∑ª
(*
fûíame
, *
weightfûe
)

83 
i
 = 0;

84 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

85 if(
weightfûe
){

86 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

88 
	`§™d
(
	`time
(0));

90 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/compare.val.list");

92 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

93 
N
 = 
∂i°
->
size
/2;

94 
	`‰ì_li°
(
∂i°
);

96 
˛ock_t
 
time
;

97 
c‹ª˘
 = 0;

98 
tŸÆ
 = 0;

99 
•lôs
 = 10;

100 
num
 = (
i
+1)*
N
/
•lôs
 - i*N/splits;

102 
d©a
 
vÆ
, 
buf„r
;

104 
lﬂd_¨gs
 
¨gs
 = {0};

105 
¨gs
.
w
 = 
√t
.w;

106 
¨gs
.
h
 = 
√t
.h;

107 
¨gs
.
∑ths
 =Öaths;

108 
¨gs
.
˛as£s
 = 20;

109 
¨gs
.
n
 = 
num
;

110 
¨gs
.
m
 = 0;

111 
¨gs
.
d
 = &
buf„r
;

112 
¨gs
.
ty≥
 = 
COMPARE_DATA
;

114 
±hªad_t
 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

115 
i
 = 1; i <
•lôs
; ++i){

116 
time
=
	`˛ock
();

118 
	`±hªad_joö
(
lﬂd_thªad
, 0);

119 
vÆ
 = 
buf„r
;

121 
num
 = (
i
+1)*
N
/
•lôs
 - i*N/splits;

122 **
∑π
 = 
∑ths
+(
i
*
N
/
•lôs
);

123 if(
i
 !
•lôs
){

124 
¨gs
.
∑ths
 = 
∑π
;

125 
lﬂd_thªad
 = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

127 
	`¥ötf
("Lﬂded: %d image†ö %l‡£c⁄ds\n", 
vÆ
.
X
.
rows
, 
	`£c
(
	`˛ock
()-
time
));

129 
time
=
	`˛ock
();

130 
m©rix
 
¥ed
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
vÆ
);

131 
j
,
k
;

132 
j
 = 0; j < 
vÆ
.
y
.
rows
; ++j){

133 
k
 = 0; k < 20; ++k){

134 if(
vÆ
.
y
.
vÆs
[
j
][
k
*2] != val.y.vals[j][k*2+1]){

135 ++
tŸÆ
;

136 if((
vÆ
.
y
.
vÆs
[
j
][
k
*2] < vÆ.y.vÆs[j][k*2+1]Ë=(
¥ed
.vals[j][k*2] <Öred.vals[j][k*2+1])){

137 ++
c‹ª˘
;

142 
	`‰ì_m©rix
(
¥ed
);

143 
	`¥ötf
("%d: Acc: %f, %l‡£c⁄ds, %d images\n", 
i
, ()
c‹ª˘
/
tŸÆ
, 
	`£c
(
	`˛ock
()-
time
), 
vÆ
.
X
.
rows
);

144 
	`‰ì_d©a
(
vÆ
);

146 
	}
}

149 
√tw‹k
 
	m√t
;

150 *
	mfûíame
;

151 
	m˛ass
;

152 
	m˛as£s
;

153 
	mño
;

154 *
	mños
;

155 } 
	ts‹èbÀ_bbox
;

157 
	gtŸÆ_com∑ªs
 = 0;

158 
	gcuºít_˛ass
 = 0;

160 
	$ño_com∑øt‹
(c⁄° *
a
, c⁄° *
b
)

162 
s‹èbÀ_bbox
 
box1
 = *(s‹èbÀ_bbox*)
a
;

163 
s‹èbÀ_bbox
 
box2
 = *(s‹èbÀ_bbox*)
b
;

164 if(
box1
.
ños
[
cuºít_˛ass
] =
box2
.elos[current_class])  0;

165 if(
box1
.
ños
[
cuºít_˛ass
] > 
box2
.elos[current_class])  -1;

167 
	}
}

169 
	$bbox_com∑øt‹
(c⁄° *
a
, c⁄° *
b
)

171 ++
tŸÆ_com∑ªs
;

172 
s‹èbÀ_bbox
 
box1
 = *(s‹èbÀ_bbox*)
a
;

173 
s‹èbÀ_bbox
 
box2
 = *(s‹èbÀ_bbox*)
b
;

174 
√tw‹k
 
√t
 = 
box1
.net;

175 
˛ass
 = 
box1
.class;

177 
image
 
im1
 = 
	`lﬂd_image_cﬁ‹
(
box1
.
fûíame
, 
√t
.
w
,Çë.
h
);

178 
image
 
im2
 = 
	`lﬂd_image_cﬁ‹
(
box2
.
fûíame
, 
√t
.
w
,Çë.
h
);

179 *
X
 = 
	`ˇŒoc
(
√t
.
w
*√t.
h
*√t.
c
, ());

180 
	`mem˝y
(
X
, 
im1
.
d©a
, im1.
w
*im1.
h
*im1.
c
*());

181 
	`mem˝y
(
X
+
im1
.
w
*im1.
h
*im1.
c
, 
im2
.
d©a
, im2.w*im2.h*im2.c*());

182 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

184 
	`‰ì_image
(
im1
);

185 
	`‰ì_image
(
im2
);

186 
	`‰ì
(
X
);

187 i‡(
¥edi˘i⁄s
[
˛ass
*2] >Öredictions[class*2+1]){

191 
	}
}

193 
	$bbox_upd©e
(
s‹èbÀ_bbox
 *
a
, s‹èbÀ_bbox *
b
, 
˛ass
, 
ªsu…
)

195 
k
 = 32;

196 
EA
 = 1./(1+
	`pow
(10, (
b
->
ños
[
˛ass
] - 
a
->elos[class])/400.));

197 
EB
 = 1./(1+
	`pow
(10, (
a
->
ños
[
˛ass
] - 
b
->elos[class])/400.));

198 
SA
 = 
ªsu…
 ? 1 : 0;

199 
SB
 = 
ªsu…
 ? 0 : 1;

200 
a
->
ños
[
˛ass
] +
k
*(
SA
 - 
EA
);

201 
b
->
ños
[
˛ass
] +
k
*(
SB
 - 
EB
);

202 
	}
}

204 
	$bbox_fight
(
√tw‹k
 
√t
, 
s‹èbÀ_bbox
 *
a
, s‹èbÀ_bbox *
b
, 
˛as£s
, 
˛ass
)

206 
image
 
im1
 = 
	`lﬂd_image_cﬁ‹
(
a
->
fûíame
, 
√t
.
w
,Çë.
h
);

207 
image
 
im2
 = 
	`lﬂd_image_cﬁ‹
(
b
->
fûíame
, 
√t
.
w
,Çë.
h
);

208 *
X
 = 
	`ˇŒoc
(
√t
.
w
*√t.
h
*√t.
c
, ());

209 
	`mem˝y
(
X
, 
im1
.
d©a
, im1.
w
*im1.
h
*im1.
c
*());

210 
	`mem˝y
(
X
+
im1
.
w
*im1.
h
*im1.
c
, 
im2
.
d©a
, im2.w*im2.h*im2.c*());

211 *
¥edi˘i⁄s
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

212 ++
tŸÆ_com∑ªs
;

214 
i
;

215 
i
 = 0; i < 
˛as£s
; ++i){

216 if(
˛ass
 < 0 || cœs†=
i
){

217 
ªsu…
 = 
¥edi˘i⁄s
[
i
*2] >Öredictions[i*2+1];

218 
	`bbox_upd©e
(
a
, 
b
, 
i
, 
ªsu…
);

222 
	`‰ì_image
(
im1
);

223 
	`‰ì_image
(
im2
);

224 
	`‰ì
(
X
);

225 
	}
}

227 
	$S‹tMa°î3000
(*
fûíame
, *
weightfûe
)

229 
i
 = 0;

230 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

231 if(
weightfûe
){

232 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

234 
	`§™d
(
	`time
(0));

235 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

237 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/compare.sort.list");

239 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

240 
N
 = 
∂i°
->
size
;

241 
	`‰ì_li°
(
∂i°
);

242 
s‹èbÀ_bbox
 *
boxes
 = 
	`ˇŒoc
(
N
, (sortable_bbox));

243 
	`¥ötf
("S‹tög %d boxes...\n", 
N
);

244 
i
 = 0; i < 
N
; ++i){

245 
boxes
[
i
].
fûíame
 = 
∑ths
[i];

246 
boxes
[
i
].
√t
 =Çet;

247 
boxes
[
i
].
˛ass
 = 7;

248 
boxes
[
i
].
ño
 = 1500;

250 
˛ock_t
 
time
=
	`˛ock
();

251 
	`qs‹t
(
boxes
, 
N
, (
s‹èbÀ_bbox
), 
bbox_com∑øt‹
);

252 
i
 = 0; i < 
N
; ++i){

253 
	`¥ötf
("%s\n", 
boxes
[
i
].
fûíame
);

255 
	`¥ötf
("S‹ãd i¿%d com∑ªs, %‡£cs\n", 
tŸÆ_com∑ªs
, 
	`£c
(
	`˛ock
()-
time
));

256 
	}
}

258 
	$B©éeRoyÆeWôhChì£
(*
fûíame
, *
weightfûe
)

260 
˛as£s
 = 20;

261 
i
,
j
;

262 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
fûíame
);

263 if(
weightfûe
){

264 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

266 
	`§™d
(
	`time
(0));

267 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

269 
li°
 *
∂i°
 = 
	`gë_∑ths
("data/compare.sort.list");

273 **
∑ths
 = (**)
	`li°_to_¨øy
(
∂i°
);

274 
N
 = 
∂i°
->
size
;

275 
tŸÆ
 = 
N
;

276 
	`‰ì_li°
(
∂i°
);

277 
s‹èbÀ_bbox
 *
boxes
 = 
	`ˇŒoc
(
N
, (sortable_bbox));

278 
	`¥ötf
("B©éög %d boxes...\n", 
N
);

279 
i
 = 0; i < 
N
; ++i){

280 
boxes
[
i
].
fûíame
 = 
∑ths
[i];

281 
boxes
[
i
].
√t
 =Çet;

282 
boxes
[
i
].
˛as£s
 = classes;

283 
boxes
[
i
].
ños
 = 
	`ˇŒoc
(
˛as£s
, ());;

284 
j
 = 0; j < 
˛as£s
; ++j){

285 
boxes
[
i
].
ños
[
j
] = 1500;

288 
round
;

289 
˛ock_t
 
time
=
	`˛ock
();

290 
round
 = 1;Ñound <= 4; ++round){

291 
˛ock_t
 
round_time
=
	`˛ock
();

292 
	`¥ötf
("Round: %d\n", 
round
);

293 
	`shufÊe
(
boxes
, 
N
, (
s‹èbÀ_bbox
));

294 
i
 = 0; i < 
N
/2; ++i){

295 
	`bbox_fight
(
√t
, 
boxes
+
i
*2, boxes+i*2+1, 
˛as£s
, -1);

297 
	`¥ötf
("Round: %‡£cs, %dÑemaöög\n", 
	`£c
(
	`˛ock
()-
round_time
), 
N
);

300 
˛ass
;

302 
˛ass
 = 0; cœs†< 
˛as£s
; ++class){

304 
N
 = 
tŸÆ
;

305 
cuºít_˛ass
 = 
˛ass
;

306 
	`qs‹t
(
boxes
, 
N
, (
s‹èbÀ_bbox
), 
ño_com∑øt‹
);

307 
N
 /= 2;

309 
round
 = 1;Ñound <= 100; ++round){

310 
˛ock_t
 
round_time
=
	`˛ock
();

311 
	`¥ötf
("Round: %d\n", 
round
);

313 
	`s‹è_shufÊe
(
boxes
, 
N
, (
s‹èbÀ_bbox
), 10);

314 
i
 = 0; i < 
N
/2; ++i){

315 
	`bbox_fight
(
√t
, 
boxes
+
i
*2, boxes+i*2+1, 
˛as£s
, 
˛ass
);

317 
	`qs‹t
(
boxes
, 
N
, (
s‹èbÀ_bbox
), 
ño_com∑øt‹
);

318 if(
round
 <20Ë
N
 = (N*9/10)/2*2;

320 
	`¥ötf
("Round: %‡£cs, %dÑemaöög\n", 
	`£c
(
	`˛ock
()-
round_time
), 
N
);

322 
buff
[256];

323 
	`•rötf
(
buff
, "ªsu…s/b©ée_%d.log", 
˛ass
);

324 
FILE
 *
outÂ
 = 
	`f›í
(
buff
, "w");

325 
i
 = 0; i < 
N
; ++i){

326 
	`Ârötf
(
outÂ
, "%†%f\n", 
boxes
[
i
].
fûíame
, boxes[i].
ños
[
˛ass
]);

328 
	`f˛o£
(
outÂ
);

330 
	`¥ötf
("Tou∫amíàö %d com∑ªs, %‡£cs\n", 
tŸÆ_com∑ªs
, 
	`£c
(
	`˛ock
()-
time
));

331 
	}
}

333 
	$run_com∑ª
(
¨gc
, **
¨gv
)

335 if(
¨gc
 < 4){

336 
	`Ârötf
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

340 *
cfg
 = 
¨gv
[3];

341 *
weights
 = (
¨gc
 > 4Ë? 
¨gv
[4] : 0;

343 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_com∑ª
(
cfg
, 
weights
);

344 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_com∑ª
(
cfg
, 
weights
);

345 if(0==
	`°rcmp
(
¨gv
[2], "s‹t")Ë
	`S‹tMa°î3000
(
cfg
, 
weights
);

346 if(0==
	`°rcmp
(
¨gv
[2], "b©ée")Ë
	`B©éeRoyÆeWôhChì£
(
cfg
, 
weights
);

352 
	}
}

	@src/connected_layer.c

1 
	~"c⁄√˘ed_œyî.h
"

2 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

3 
	~"b©chn‹m_œyî.h
"

4 
	~"utûs.h
"

5 
	~"cuda.h
"

6 
	~"bœs.h
"

7 
	~"gemm.h
"

9 
	~<m©h.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
œyî
 
	$make_c⁄√˘ed_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
)

16 
i
;

17 
œyî
 
l
 = {0};

18 
l
.
À¨nög_øã_sˇÀ
 = 1;

19 
l
.
ty≥
 = 
CONNECTED
;

21 
l
.
öputs
 = inputs;

22 
l
.
ouçuts
 = outputs;

23 
l
.
b©ch
=batch;

24 
l
.
b©ch_n‹mÆize
 = batch_normalize;

25 
l
.
h
 = 1;

26 
l
.
w
 = 1;

27 
l
.
c
 = 
öputs
;

28 
l
.
out_h
 = 1;

29 
l
.
out_w
 = 1;

30 
l
.
out_c
 = 
ouçuts
;

32 
l
.
ouçut
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

33 
l
.
dñè
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

35 
l
.
weight_upd©es
 = 
	`ˇŒoc
(
öputs
*
ouçuts
, ());

36 
l
.
büs_upd©es
 = 
	`ˇŒoc
(
ouçuts
, ());

38 
l
.
weights
 = 
	`ˇŒoc
(
ouçuts
*
öputs
, ());

39 
l
.
bü£s
 = 
	`ˇŒoc
(
ouçuts
, ());

41 
l
.
f‹w¨d
 = 
f‹w¨d_c⁄√˘ed_œyî
;

42 
l
.
backw¨d
 = 
backw¨d_c⁄√˘ed_œyî
;

43 
l
.
upd©e
 = 
upd©e_c⁄√˘ed_œyî
;

46 
sˇÀ
 = 
	`sqπ
(2./
öputs
);

47 
i
 = 0; i < 
ouçuts
*
öputs
; ++i){

48 
l
.
weights
[
i
] = 
sˇÀ
*
	`ønd_unif‹m
(-1, 1);

51 
i
 = 0; i < 
ouçuts
; ++i){

52 
l
.
bü£s
[
i
] = 0;

55 if(
adam
){

56 
l
.
m
 = 
	`ˇŒoc
÷.
öputs
*l.
ouçuts
, ());

57 
l
.
v
 = 
	`ˇŒoc
÷.
öputs
*l.
ouçuts
, ());

58 
l
.
büs_m
 = 
	`ˇŒoc
÷.
ouçuts
, ());

59 
l
.
sˇÀ_m
 = 
	`ˇŒoc
÷.
ouçuts
, ());

60 
l
.
büs_v
 = 
	`ˇŒoc
÷.
ouçuts
, ());

61 
l
.
sˇÀ_v
 = 
	`ˇŒoc
÷.
ouçuts
, ());

63 if(
b©ch_n‹mÆize
){

64 
l
.
sˇÀs
 = 
	`ˇŒoc
(
ouçuts
, ());

65 
l
.
sˇÀ_upd©es
 = 
	`ˇŒoc
(
ouçuts
, ());

66 
i
 = 0; i < 
ouçuts
; ++i){

67 
l
.
sˇÀs
[
i
] = 1;

70 
l
.
món
 = 
	`ˇŒoc
(
ouçuts
, ());

71 
l
.
món_dñè
 = 
	`ˇŒoc
(
ouçuts
, ());

72 
l
.
v¨ün˚
 = 
	`ˇŒoc
(
ouçuts
, ());

73 
l
.
v¨ün˚_dñè
 = 
	`ˇŒoc
(
ouçuts
, ());

75 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
ouçuts
, ());

76 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
ouçuts
, ());

78 
l
.
x
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

79 
l
.
x_n‹m
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

82 #ifde‡
GPU


83 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_c⁄√˘ed_œyî_gpu
;

84 
l
.
backw¨d_gpu
 = 
backw¨d_c⁄√˘ed_œyî_gpu
;

85 
l
.
upd©e_gpu
 = 
upd©e_c⁄√˘ed_œyî_gpu
;

87 
l
.
weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
ouçuts
*
öputs
);

88 
l
.
bü£s_gpu
 = 
	`cuda_make_¨øy
÷.
bü£s
, 
ouçuts
);

90 
l
.
weight_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
weight_upd©es
, 
ouçuts
*
öputs
);

91 
l
.
büs_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
büs_upd©es
, 
ouçuts
);

93 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
ouçuts
*
b©ch
);

94 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
ouçuts
*
b©ch
);

95 i‡(
adam
) {

96 
l
.
m_gpu
 = 
	`cuda_make_¨øy
(0, 
öputs
*
ouçuts
);

97 
l
.
v_gpu
 = 
	`cuda_make_¨øy
(0, 
öputs
*
ouçuts
);

98 
l
.
büs_m_gpu
 = 
	`cuda_make_¨øy
(0, 
ouçuts
);

99 
l
.
büs_v_gpu
 = 
	`cuda_make_¨øy
(0, 
ouçuts
);

100 
l
.
sˇÀ_m_gpu
 = 
	`cuda_make_¨øy
(0, 
ouçuts
);

101 
l
.
sˇÀ_v_gpu
 = 
	`cuda_make_¨øy
(0, 
ouçuts
);

104 if(
b©ch_n‹mÆize
){

105 
l
.
món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
ouçuts
);

106 
l
.
v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
ouçuts
);

108 
l
.
rﬁlög_món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
ouçuts
);

109 
l
.
rﬁlög_v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
ouçuts
);

111 
l
.
món_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
ouçuts
);

112 
l
.
v¨ün˚_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
ouçuts
);

114 
l
.
sˇÀs_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀs
, 
ouçuts
);

115 
l
.
sˇÀ_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_upd©es
, 
ouçuts
);

117 
l
.
x_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
ouçuts
);

118 
l
.
x_n‹m_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
ouçuts
);

119 #ifde‡
CUDNN


120 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
n‹mTís‹Desc
);

121 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
d°Tís‹Desc
);

122 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
,Ü.
out_w
);

123 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü.
out_c
, 1, 1);

127 
l
.
a˘iv©i⁄
 =áctivation;

128 
	`Ârötf
(
°dîr
, "c⁄√˘ed %4d -> %4d\n", 
öputs
, 
ouçuts
);

129  
l
;

130 
	}
}

132 
	$upd©e_c⁄√˘ed_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

134 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

135 
momítum
 = 
a
.momentum;

136 
deˇy
 = 
a
.decay;

137 
b©ch
 = 
a
.batch;

138 
	`axpy_˝u
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es
, 1,Ü.
bü£s
, 1);

139 
	`sˇl_˝u
(
l
.
ouçuts
, 
momítum
,Ü.
büs_upd©es
, 1);

141 if(
l
.
b©ch_n‹mÆize
){

142 
	`axpy_˝u
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
sˇÀ_upd©es
, 1,Ü.
sˇÀs
, 1);

143 
	`sˇl_˝u
(
l
.
ouçuts
, 
momítum
,Ü.
sˇÀ_upd©es
, 1);

146 
	`axpy_˝u
(
l
.
öputs
*l.
ouçuts
, -
deˇy
*
b©ch
,Ü.
weights
, 1,Ü.
weight_upd©es
, 1);

147 
	`axpy_˝u
(
l
.
öputs
*l.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
weight_upd©es
, 1,Ü.
weights
, 1);

148 
	`sˇl_˝u
(
l
.
öputs
*l.
ouçuts
, 
momítum
,Ü.
weight_upd©es
, 1);

149 
	}
}

151 
	$f‹w¨d_c⁄√˘ed_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

153 
	`fûl_˝u
(
l
.
ouçuts
*l.
b©ch
, 0,Ü.
ouçut
, 1);

154 
m
 = 
l
.
b©ch
;

155 
k
 = 
l
.
öputs
;

156 
n
 = 
l
.
ouçuts
;

157 *
a
 = 
√t
.
öput
;

158 *
b
 = 
l
.
weights
;

159 *
c
 = 
l
.
ouçut
;

160 
	`gemm
(0,1,
m
,
n
,
k
,1,
a
,k,
b
,k,1,
c
,n);

161 if(
l
.
b©ch_n‹mÆize
){

162 
	`f‹w¨d_b©chn‹m_œyî
(
l
, 
√t
);

164 
	`add_büs
(
l
.
ouçut
,Ü.
bü£s
,Ü.
b©ch
,Ü.
ouçuts
, 1);

166 
	`a˘iv©e_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

167 
	}
}

169 
	$backw¨d_c⁄√˘ed_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

171 
	`gødõ¡_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

173 if(
l
.
b©ch_n‹mÆize
){

174 
	`backw¨d_b©chn‹m_œyî
(
l
, 
√t
);

176 
	`backw¨d_büs
(
l
.
büs_upd©es
,Ü.
dñè
,Ü.
b©ch
,Ü.
ouçuts
, 1);

179 
m
 = 
l
.
ouçuts
;

180 
k
 = 
l
.
b©ch
;

181 
n
 = 
l
.
öputs
;

182 *
a
 = 
l
.
dñè
;

183 *
b
 = 
√t
.
öput
;

184 *
c
 = 
l
.
weight_upd©es
;

185 
	`gemm
(1,0,
m
,
n
,
k
,1,
a
,m,
b
,n,1,
c
,n);

187 
m
 = 
l
.
b©ch
;

188 
k
 = 
l
.
ouçuts
;

189 
n
 = 
l
.
öputs
;

191 
a
 = 
l
.
dñè
;

192 
b
 = 
l
.
weights
;

193 
c
 = 
√t
.
dñè
;

195 if(
c
Ë
	`gemm
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,n,1,c,n);

196 
	}
}

199 
	$dí‹mÆize_c⁄√˘ed_œyî
(
œyî
 
l
)

201 
i
, 
j
;

202 
i
 = 0; i < 
l
.
ouçuts
; ++i){

203 
sˇÀ
 = 
l
.
sˇÀs
[
i
]/
	`sqπ
÷.
rﬁlög_v¨ün˚
[i] + .000001);

204 
j
 = 0; j < 
l
.
öputs
; ++j){

205 
l
.
weights
[
i
*l.
öputs
 + 
j
] *
sˇÀ
;

207 
l
.
bü£s
[
i
] -l.
rﬁlög_món
[i] * 
sˇÀ
;

208 
l
.
sˇÀs
[
i
] = 1;

209 
l
.
rﬁlög_món
[
i
] = 0;

210 
l
.
rﬁlög_v¨ün˚
[
i
] = 1;

212 
	}
}

215 
	$°©i°ics_c⁄√˘ed_œyî
(
œyî
 
l
)

217 if(
l
.
b©ch_n‹mÆize
){

218 
	`¥ötf
("Scales ");

219 
	`¥öt_°©i°ics
(
l
.
sˇÀs
,Ü.
ouçuts
);

227 
	`¥ötf
("Biases ");

228 
	`¥öt_°©i°ics
(
l
.
bü£s
,Ü.
ouçuts
);

229 
	`¥ötf
("Weights ");

230 
	`¥öt_°©i°ics
(
l
.
weights
,Ü.
ouçuts
);

231 
	}
}

233 #ifde‡
GPU


235 
	$puŒ_c⁄√˘ed_œyî
(
œyî
 
l
)

237 
	`cuda_puŒ_¨øy
(
l
.
weights_gpu
,Ü.
weights
,Ü.
öputs
*l.
ouçuts
);

238 
	`cuda_puŒ_¨øy
(
l
.
bü£s_gpu
,Ü.
bü£s
,Ü.
ouçuts
);

239 
	`cuda_puŒ_¨øy
(
l
.
weight_upd©es_gpu
,Ü.
weight_upd©es
,Ü.
öputs
*l.
ouçuts
);

240 
	`cuda_puŒ_¨øy
(
l
.
büs_upd©es_gpu
,Ü.
büs_upd©es
,Ü.
ouçuts
);

241 i‡(
l
.
b©ch_n‹mÆize
){

242 
	`cuda_puŒ_¨øy
(
l
.
sˇÀs_gpu
,Ü.
sˇÀs
,Ü.
ouçuts
);

243 
	`cuda_puŒ_¨øy
(
l
.
rﬁlög_món_gpu
,Ü.
rﬁlög_món
,Ü.
ouçuts
);

244 
	`cuda_puŒ_¨øy
(
l
.
rﬁlög_v¨ün˚_gpu
,Ü.
rﬁlög_v¨ün˚
,Ü.
ouçuts
);

246 
	}
}

248 
	$push_c⁄√˘ed_œyî
(
œyî
 
l
)

250 
	`cuda_push_¨øy
(
l
.
weights_gpu
,Ü.
weights
,Ü.
öputs
*l.
ouçuts
);

251 
	`cuda_push_¨øy
(
l
.
bü£s_gpu
,Ü.
bü£s
,Ü.
ouçuts
);

252 
	`cuda_push_¨øy
(
l
.
weight_upd©es_gpu
,Ü.
weight_upd©es
,Ü.
öputs
*l.
ouçuts
);

253 
	`cuda_push_¨øy
(
l
.
büs_upd©es_gpu
,Ü.
büs_upd©es
,Ü.
ouçuts
);

254 i‡(
l
.
b©ch_n‹mÆize
){

255 
	`cuda_push_¨øy
(
l
.
sˇÀs_gpu
,Ü.
sˇÀs
,Ü.
ouçuts
);

256 
	`cuda_push_¨øy
(
l
.
rﬁlög_món_gpu
,Ü.
rﬁlög_món
,Ü.
ouçuts
);

257 
	`cuda_push_¨øy
(
l
.
rﬁlög_v¨ün˚_gpu
,Ü.
rﬁlög_v¨ün˚
,Ü.
ouçuts
);

259 
	}
}

261 
	$upd©e_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

263 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

264 
momítum
 = 
a
.momentum;

265 
deˇy
 = 
a
.decay;

266 
b©ch
 = 
a
.batch;

267 if(
a
.
adam
){

268 
	`adam_upd©e_gpu
(
l
.
weights_gpu
,Ü.
weight_upd©es_gpu
,Ü.
m_gpu
,Ü.
v_gpu
, 
a
.
B1
,á.
B2
,á.
ïs
, 
deˇy
, 
À¨nög_øã
,Ü.
öputs
*l.
ouçuts
, 
b©ch
,á.
t
);

269 
	`adam_upd©e_gpu
(
l
.
bü£s_gpu
,Ü.
büs_upd©es_gpu
,Ü.
büs_m_gpu
,Ü.
büs_v_gpu
, 
a
.
B1
,á.
B2
,á.
ïs
, 
deˇy
, 
À¨nög_øã
,Ü.
ouçuts
, 
b©ch
,á.
t
);

270 if(
l
.
sˇÀs_gpu
){

271 
	`adam_upd©e_gpu
(
l
.
sˇÀs_gpu
,Ü.
sˇÀ_upd©es_gpu
,Ü.
sˇÀ_m_gpu
,Ü.
sˇÀ_v_gpu
, 
a
.
B1
,á.
B2
,á.
ïs
, 
deˇy
, 
À¨nög_øã
,Ü.
ouçuts
, 
b©ch
,á.
t
);

274 
	`axpy_gpu
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es_gpu
, 1,Ü.
bü£s_gpu
, 1);

275 
	`sˇl_gpu
(
l
.
ouçuts
, 
momítum
,Ü.
büs_upd©es_gpu
, 1);

277 if(
l
.
b©ch_n‹mÆize
){

278 
	`axpy_gpu
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
sˇÀ_upd©es_gpu
, 1,Ü.
sˇÀs_gpu
, 1);

279 
	`sˇl_gpu
(
l
.
ouçuts
, 
momítum
,Ü.
sˇÀ_upd©es_gpu
, 1);

282 
	`axpy_gpu
(
l
.
öputs
*l.
ouçuts
, -
deˇy
*
b©ch
,Ü.
weights_gpu
, 1,Ü.
weight_upd©es_gpu
, 1);

283 
	`axpy_gpu
(
l
.
öputs
*l.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
weight_upd©es_gpu
, 1,Ü.
weights_gpu
, 1);

284 
	`sˇl_gpu
(
l
.
öputs
*l.
ouçuts
, 
momítum
,Ü.
weight_upd©es_gpu
, 1);

286 
	}
}

288 
	$f‹w¨d_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

290 
	`fûl_gpu
(
l
.
ouçuts
*l.
b©ch
, 0,Ü.
ouçut_gpu
, 1);

292 
m
 = 
l
.
b©ch
;

293 
k
 = 
l
.
öputs
;

294 
n
 = 
l
.
ouçuts
;

295 * 
a
 = 
√t
.
öput_gpu
;

296 * 
b
 = 
l
.
weights_gpu
;

297 * 
c
 = 
l
.
ouçut_gpu
;

298 
	`gemm_gpu
(0,1,
m
,
n
,
k
,1,
a
,k,
b
,k,1,
c
,n);

300 i‡(
l
.
b©ch_n‹mÆize
) {

301 
	`f‹w¨d_b©chn‹m_œyî_gpu
(
l
, 
√t
);

303 
	`add_büs_gpu
(
l
.
ouçut_gpu
,Ü.
bü£s_gpu
,Ü.
b©ch
,Ü.
ouçuts
, 1);

305 
	`a˘iv©e_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

306 
	}
}

308 
	$backw¨d_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

310 
	`c⁄°øö_gpu
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
dñè_gpu
, 1);

311 
	`gødõ¡_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè_gpu
);

312 if(
l
.
b©ch_n‹mÆize
){

313 
	`backw¨d_b©chn‹m_œyî_gpu
(
l
, 
√t
);

315 
	`backw¨d_büs_gpu
(
l
.
büs_upd©es_gpu
,Ü.
dñè_gpu
,Ü.
b©ch
,Ü.
ouçuts
, 1);

318 
m
 = 
l
.
ouçuts
;

319 
k
 = 
l
.
b©ch
;

320 
n
 = 
l
.
öputs
;

321 * 
a
 = 
l
.
dñè_gpu
;

322 * 
b
 = 
√t
.
öput_gpu
;

323 * 
c
 = 
l
.
weight_upd©es_gpu
;

324 
	`gemm_gpu
(1,0,
m
,
n
,
k
,1,
a
,m,
b
,n,1,
c
,n);

326 
m
 = 
l
.
b©ch
;

327 
k
 = 
l
.
ouçuts
;

328 
n
 = 
l
.
öputs
;

330 
a
 = 
l
.
dñè_gpu
;

331 
b
 = 
l
.
weights_gpu
;

332 
c
 = 
√t
.
dñè_gpu
;

334 if(
c
Ë
	`gemm_gpu
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,n,1,c,n);

335 
	}
}

	@src/connected_layer.h

1 #i‚de‡
CONNECTED_LAYER_H


2 
	#CONNECTED_LAYER_H


	)

4 
	~"a˘iv©i⁄s.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
make_c⁄√˘ed_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

10 
f‹w¨d_c⁄√˘ed_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

11 
backw¨d_c⁄√˘ed_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

12 
upd©e_c⁄√˘ed_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

14 #ifde‡
GPU


15 
f‹w¨d_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

16 
backw¨d_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

17 
upd©e_c⁄√˘ed_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

18 
push_c⁄√˘ed_œyî
(
œyî
 
l
);

19 
puŒ_c⁄√˘ed_œyî
(
œyî
 
l
);

	@src/convolutional_layer.c

1 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

2 
	~"utûs.h
"

3 
	~"b©chn‹m_œyî.h
"

4 
	~"im2cﬁ.h
"

5 
	~"cﬁ2im.h
"

6 
	~"bœs.h
"

7 
	~"gemm.h
"

8 
	~<°dio.h
>

9 
	~<time.h
>

11 #ifde‡
AI2


12 
	~"xn‹_œyî.h
"

15 
	$sw≠_bö¨y
(
c⁄vﬁuti⁄Æ_œyî
 *
l
)

17 *
sw≠
 = 
l
->
weights
;

18 
l
->
weights
 =Ü->
bö¨y_weights
;

19 
l
->
bö¨y_weights
 = 
sw≠
;

21 #ifde‡
GPU


22 
sw≠
 = 
l
->
weights_gpu
;

23 
l
->
weights_gpu
 =Ü->
bö¨y_weights_gpu
;

24 
l
->
bö¨y_weights_gpu
 = 
sw≠
;

26 
	}
}

28 
	$bö¨ize_weights
(*
weights
, 
n
, 
size
, *
bö¨y
)

30 
i
, 
f
;

31 
f
 = 0; f < 
n
; ++f){

32 
món
 = 0;

33 
i
 = 0; i < 
size
; ++i){

34 
món
 +
	`Ábs
(
weights
[
f
*
size
 + 
i
]);

36 
món
 = mó¿/ 
size
;

37 
i
 = 0; i < 
size
; ++i){

38 
bö¨y
[
f
*
size
 + 
i
] = (
weights
[f*sizê+ i] > 0Ë? 
món
 : -mean;

41 
	}
}

43 
	$bö¨ize_˝u
(*
öput
, 
n
, *
bö¨y
)

45 
i
;

46 
i
 = 0; i < 
n
; ++i){

47 
bö¨y
[
i
] = (
öput
[i] > 0) ? 1 : -1;

49 
	}
}

51 
	$bö¨ize_öput
(*
öput
, 
n
, 
size
, *
bö¨y
)

53 
i
, 
s
;

54 
s
 = 0; s < 
size
; ++s){

55 
món
 = 0;

56 
i
 = 0; i < 
n
; ++i){

57 
món
 +
	`Ábs
(
öput
[
i
*
size
 + 
s
]);

59 
món
 = mó¿/ 
n
;

60 
i
 = 0; i < 
n
; ++i){

61 
bö¨y
[
i
*
size
 + 
s
] = (
öput
[i*sizê+ s] > 0Ë? 
món
 : -mean;

64 
	}
}

66 
	$c⁄vﬁuti⁄Æ_out_height
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

68  (
l
.
h
 + 2*l.
∑d
 -Ü.
size
Ë/Ü.
°ride
 + 1;

69 
	}
}

71 
	$c⁄vﬁuti⁄Æ_out_width
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

73  (
l
.
w
 + 2*l.
∑d
 -Ü.
size
Ë/Ü.
°ride
 + 1;

74 
	}
}

76 
image
 
	$gë_c⁄vﬁuti⁄Æ_image
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

78  
	`Êﬂt_to_image
(
l
.
out_w
,l.
out_h
,l.
out_c
,l.
ouçut
);

79 
	}
}

81 
image
 
	$gë_c⁄vﬁuti⁄Æ_dñè
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

83  
	`Êﬂt_to_image
(
l
.
out_w
,l.
out_h
,l.
out_c
,l.
dñè
);

84 
	}
}

86 
size_t
 
	$gë_w‹k•a˚_size
(
œyî
 
l
){

87 #ifde‡
CUDNN


88 if(
gpu_ödex
 >= 0){

89 
size_t
 
mo°
 = 0;

90 
size_t
 
s
 = 0;

91 
	`cud¬GëC⁄vﬁuti⁄F‹w¨dW‹k•a˚Size
(
	`cud¬_h™dÀ
(),

92 
l
.
§cTís‹Desc
,

93 
l
.
weightDesc
,

94 
l
.
c⁄vDesc
,

95 
l
.
d°Tís‹Desc
,

96 
l
.
fw_Ægo
,

97 &
s
);

98 i‡(
s
 > 
mo°
) most = s;

99 
	`cud¬GëC⁄vﬁuti⁄Backw¨dFûãrW‹k•a˚Size
(
	`cud¬_h™dÀ
(),

100 
l
.
§cTís‹Desc
,

101 
l
.
dd°Tís‹Desc
,

102 
l
.
c⁄vDesc
,

103 
l
.
dweightDesc
,

104 
l
.
bf_Ægo
,

105 &
s
);

106 i‡(
s
 > 
mo°
) most = s;

107 
	`cud¬GëC⁄vﬁuti⁄Backw¨dD©aW‹k•a˚Size
(
	`cud¬_h™dÀ
(),

108 
l
.
weightDesc
,

109 
l
.
dd°Tís‹Desc
,

110 
l
.
c⁄vDesc
,

111 
l
.
d§cTís‹Desc
,

112 
l
.
bd_Ægo
,

113 &
s
);

114 i‡(
s
 > 
mo°
) most = s;

115  
mo°
;

118  (
size_t
)
l
.
out_h
*l.
out_w
*l.
size
*l.size*l.
c
*();

119 
	}
}

121 #ifde‡
GPU


122 #ifde‡
CUDNN


123 
	$cud¬_c⁄vﬁuti⁄Æ_£tup
(
œyî
 *
l
)

125 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
d§cTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü->
b©ch
,Ü->
c
,Ü->
h
,Ü->
w
);

126 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
dd°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü->
b©ch
,Ü->
out_c
,Ü->
out_h
,Ü->
out_w
);

127 
	`cud¬SëFûãr4dDes¸ùt‹
(
l
->
dweightDesc
, 
CUDNN_DATA_FLOAT
, 
CUDNN_TENSOR_NCHW
,Ü->
n
,Ü->
c
,Ü->
size
,Ü->size);

129 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
§cTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü->
b©ch
,Ü->
c
,Ü->
h
,Ü->
w
);

130 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü->
b©ch
,Ü->
out_c
,Ü->
out_h
,Ü->
out_w
);

131 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü->
out_c
, 1, 1);

132 
	`cud¬SëFûãr4dDes¸ùt‹
(
l
->
weightDesc
, 
CUDNN_DATA_FLOAT
, 
CUDNN_TENSOR_NCHW
,Ü->
n
,Ü->
c
,Ü->
size
,Ü->size);

133 
	`cud¬SëC⁄vﬁuti⁄2dDes¸ùt‹
(
l
->
c⁄vDesc
,Ü->
∑d
,Ü->∑d,Ü->
°ride
,Ü->°ride, 1, 1, 
CUDNN_CROSS_CORRELATION
);

134 
	`cud¬GëC⁄vﬁuti⁄F‹w¨dAlg‹ôhm
(
	`cud¬_h™dÀ
(),

135 
l
->
§cTís‹Desc
,

136 
l
->
weightDesc
,

137 
l
->
c⁄vDesc
,

138 
l
->
d°Tís‹Desc
,

139 
CUDNN_CONVOLUTION_FWD_PREFER_FASTEST
,

141 &
l
->
fw_Ægo
);

142 
	`cud¬GëC⁄vﬁuti⁄Backw¨dD©aAlg‹ôhm
(
	`cud¬_h™dÀ
(),

143 
l
->
weightDesc
,

144 
l
->
dd°Tís‹Desc
,

145 
l
->
c⁄vDesc
,

146 
l
->
d§cTís‹Desc
,

147 
CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST
,

149 &
l
->
bd_Ægo
);

150 
	`cud¬GëC⁄vﬁuti⁄Backw¨dFûãrAlg‹ôhm
(
	`cud¬_h™dÀ
(),

151 
l
->
§cTís‹Desc
,

152 
l
->
dd°Tís‹Desc
,

153 
l
->
c⁄vDesc
,

154 
l
->
dweightDesc
,

155 
CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST
,

157 &
l
->
bf_Ægo
);

158 
	}
}

162 
c⁄vﬁuti⁄Æ_œyî
 
	$make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑ddög
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
bö¨y
, 
xn‹
, 
adam
)

164 
i
;

165 
c⁄vﬁuti⁄Æ_œyî
 
l
 = {0};

166 
l
.
ty≥
 = 
CONVOLUTIONAL
;

168 
l
.
h
 = h;

169 
l
.
w
 = w;

170 
l
.
c
 = c;

171 
l
.
n
 =Ç;

172 
l
.
bö¨y
 = binary;

173 
l
.
xn‹
 = xnor;

174 
l
.
b©ch
 = batch;

175 
l
.
°ride
 = stride;

176 
l
.
size
 = size;

177 
l
.
∑d
 = 
∑ddög
;

178 
l
.
b©ch_n‹mÆize
 = batch_normalize;

180 
l
.
weights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

181 
l
.
weight_upd©es
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

183 
l
.
bü£s
 = 
	`ˇŒoc
(
n
, ());

184 
l
.
büs_upd©es
 = 
	`ˇŒoc
(
n
, ());

186 
l
.
nweights
 = 
c
*
n
*
size
*size;

187 
l
.
nbü£s
 = 
n
;

190 
sˇÀ
 = 
	`sqπ
(2./(
size
*size*
c
));

193 
i
 = 0; i < 
c
*
n
*
size
*size; ++iË
l
.
weights
[i] = 
sˇÀ
*
	`ønd_n‹mÆ
();

194 
out_w
 = 
	`c⁄vﬁuti⁄Æ_out_width
(
l
);

195 
out_h
 = 
	`c⁄vﬁuti⁄Æ_out_height
(
l
);

196 
l
.
out_h
 = out_h;

197 
l
.
out_w
 = out_w;

198 
l
.
out_c
 = 
n
;

199 
l
.
ouçuts
 =Ü.
out_h
 *Ü.
out_w
 *Ü.
out_c
;

200 
l
.
öputs
 =Ü.
w
 *Ü.
h
 *Ü.
c
;

202 
l
.
ouçut
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

203 
l
.
dñè
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

205 
l
.
f‹w¨d
 = 
f‹w¨d_c⁄vﬁuti⁄Æ_œyî
;

206 
l
.
backw¨d
 = 
backw¨d_c⁄vﬁuti⁄Æ_œyî
;

207 
l
.
upd©e
 = 
upd©e_c⁄vﬁuti⁄Æ_œyî
;

208 if(
bö¨y
){

209 
l
.
bö¨y_weights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

210 
l
.
cweights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

211 
l
.
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

213 if(
xn‹
){

214 
l
.
bö¨y_weights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

215 
l
.
bö¨y_öput
 = 
	`ˇŒoc
÷.
öputs
*l.
b©ch
, ());

218 if(
b©ch_n‹mÆize
){

219 
l
.
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

220 
l
.
sˇÀ_upd©es
 = 
	`ˇŒoc
(
n
, ());

221 
i
 = 0; i < 
n
; ++i){

222 
l
.
sˇÀs
[
i
] = 1;

225 
l
.
món
 = 
	`ˇŒoc
(
n
, ());

226 
l
.
v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

228 
l
.
món_dñè
 = 
	`ˇŒoc
(
n
, ());

229 
l
.
v¨ün˚_dñè
 = 
	`ˇŒoc
(
n
, ());

231 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
n
, ());

232 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

233 
l
.
x
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

234 
l
.
x_n‹m
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

236 if(
adam
){

237 
l
.
m
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

238 
l
.
v
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

239 
l
.
büs_m
 = 
	`ˇŒoc
(
n
, ());

240 
l
.
sˇÀ_m
 = 
	`ˇŒoc
(
n
, ());

241 
l
.
büs_v
 = 
	`ˇŒoc
(
n
, ());

242 
l
.
sˇÀ_v
 = 
	`ˇŒoc
(
n
, ());

245 #ifde‡
GPU


246 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_c⁄vﬁuti⁄Æ_œyî_gpu
;

247 
l
.
backw¨d_gpu
 = 
backw¨d_c⁄vﬁuti⁄Æ_œyî_gpu
;

248 
l
.
upd©e_gpu
 = 
upd©e_c⁄vﬁuti⁄Æ_œyî_gpu
;

250 if(
gpu_ödex
 >= 0){

251 i‡(
adam
) {

252 
l
.
m_gpu
 = 
	`cuda_make_¨øy
÷.
m
, 
c
*
n
*
size
*size);

253 
l
.
v_gpu
 = 
	`cuda_make_¨øy
÷.
v
, 
c
*
n
*
size
*size);

254 
l
.
büs_m_gpu
 = 
	`cuda_make_¨øy
÷.
büs_m
, 
n
);

255 
l
.
büs_v_gpu
 = 
	`cuda_make_¨øy
÷.
büs_v
, 
n
);

256 
l
.
sˇÀ_m_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_m
, 
n
);

257 
l
.
sˇÀ_v_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_v
, 
n
);

260 
l
.
weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
c
*
n
*
size
*size);

261 
l
.
weight_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
weight_upd©es
, 
c
*
n
*
size
*size);

263 
l
.
bü£s_gpu
 = 
	`cuda_make_¨øy
÷.
bü£s
, 
n
);

264 
l
.
büs_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
büs_upd©es
, 
n
);

266 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

267 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

269 if(
bö¨y
){

270 
l
.
bö¨y_weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
c
*
n
*
size
*size);

272 if(
xn‹
){

273 
l
.
bö¨y_weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
c
*
n
*
size
*size);

274 
l
.
bö¨y_öput_gpu
 = 
	`cuda_make_¨øy
(0,Ü.
öputs
*l.
b©ch
);

277 if(
b©ch_n‹mÆize
){

278 
l
.
món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
n
);

279 
l
.
v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
n
);

281 
l
.
rﬁlög_món_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
n
);

282 
l
.
rﬁlög_v¨ün˚_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
n
);

284 
l
.
món_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
món
, 
n
);

285 
l
.
v¨ün˚_dñè_gpu
 = 
	`cuda_make_¨øy
÷.
v¨ün˚
, 
n
);

287 
l
.
sˇÀs_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀs
, 
n
);

288 
l
.
sˇÀ_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_upd©es
, 
n
);

290 
l
.
x_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

291 
l
.
x_n‹m_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

293 #ifde‡
CUDNN


294 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
n‹mTís‹Desc
);

295 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
§cTís‹Desc
);

296 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
d°Tís‹Desc
);

297 
	`cud¬Cª©eFûãrDes¸ùt‹
(&
l
.
weightDesc
);

298 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
d§cTís‹Desc
);

299 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
dd°Tís‹Desc
);

300 
	`cud¬Cª©eFûãrDes¸ùt‹
(&
l
.
dweightDesc
);

301 
	`cud¬Cª©eC⁄vﬁuti⁄Des¸ùt‹
(&
l
.
c⁄vDesc
);

302 
	`cud¬_c⁄vﬁuti⁄Æ_£tup
(&
l
);

306 
l
.
w‹k•a˚_size
 = 
	`gë_w‹k•a˚_size
(l);

307 
l
.
a˘iv©i⁄
 =áctivation;

309 
	`Ârötf
(
°dîr
, "c⁄v %5d %2d x%2d /%2d %4d x%4d x%4d -> %4d x%4d x%4d\n", 
n
, 
size
, size, 
°ride
, 
w
, 
h
, 
c
, 
l
.
out_w
,Ü.
out_h
,Ü.
out_c
);

311  
l
;

312 
	}
}

314 
	$dí‹mÆize_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

316 
i
, 
j
;

317 
i
 = 0; i < 
l
.
n
; ++i){

318 
sˇÀ
 = 
l
.
sˇÀs
[
i
]/
	`sqπ
÷.
rﬁlög_v¨ün˚
[i] + .00001);

319 
j
 = 0; j < 
l
.
c
*l.
size
*l.size; ++j){

320 
l
.
weights
[
i
*l.
c
*l.
size
*l.sizê+ 
j
] *
sˇÀ
;

322 
l
.
bü£s
[
i
] -l.
rﬁlög_món
[i] * 
sˇÀ
;

323 
l
.
sˇÀs
[
i
] = 1;

324 
l
.
rﬁlög_món
[
i
] = 0;

325 
l
.
rﬁlög_v¨ün˚
[
i
] = 1;

327 
	}
}

354 
	$ªsize_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 *
l
, 
w
, 
h
)

356 
l
->
w
 = w;

357 
l
->
h
 = h;

358 
out_w
 = 
	`c⁄vﬁuti⁄Æ_out_width
(*
l
);

359 
out_h
 = 
	`c⁄vﬁuti⁄Æ_out_height
(*
l
);

361 
l
->
out_w
 = out_w;

362 
l
->
out_h
 = out_h;

364 
l
->
ouçuts
 =Ü->
out_h
 *Ü->
out_w
 *Ü->
out_c
;

365 
l
->
öputs
 =Ü->
w
 *Ü->
h
 *Ü->
c
;

367 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut,Ü->
b©ch
*l->
ouçuts
*());

368 
l
->
dñè
 = 
	`ªÆloc
÷->dñè,Ü->
b©ch
*l->
ouçuts
*());

369 if(
l
->
b©ch_n‹mÆize
){

370 
l
->
x
 = 
	`ªÆloc
÷->x,Ü->
b©ch
*l->
ouçuts
*());

371 
l
->
x_n‹m
 = 
	`ªÆloc
÷->x_n‹m,Ü->
b©ch
*l->
ouçuts
*());

374 #ifde‡
GPU


375 
	`cuda_‰ì
(
l
->
dñè_gpu
);

376 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

378 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
,Ü->
b©ch
*l->
ouçuts
);

379 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

381 if(
l
->
b©ch_n‹mÆize
){

382 
	`cuda_‰ì
(
l
->
x_gpu
);

383 
	`cuda_‰ì
(
l
->
x_n‹m_gpu
);

385 
l
->
x_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

386 
l
->
x_n‹m_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

388 #ifde‡
CUDNN


389 
	`cud¬_c⁄vﬁuti⁄Æ_£tup
(
l
);

392 
l
->
w‹k•a˚_size
 = 
	`gë_w‹k•a˚_size
(*l);

393 
	}
}

395 
	$add_büs
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
)

397 
i
,
j
,
b
;

398 
b
 = 0; b < 
b©ch
; ++b){

399 
i
 = 0; i < 
n
; ++i){

400 
j
 = 0; j < 
size
; ++j){

401 
ouçut
[(
b
*
n
 + 
i
)*
size
 + 
j
] +
bü£s
[i];

405 
	}
}

407 
	$sˇÀ_büs
(*
ouçut
, *
sˇÀs
, 
b©ch
, 
n
, 
size
)

409 
i
,
j
,
b
;

410 
b
 = 0; b < 
b©ch
; ++b){

411 
i
 = 0; i < 
n
; ++i){

412 
j
 = 0; j < 
size
; ++j){

413 
ouçut
[(
b
*
n
 + 
i
)*
size
 + 
j
] *
sˇÀs
[i];

417 
	}
}

419 
	$backw¨d_büs
(*
büs_upd©es
, *
dñè
, 
b©ch
, 
n
, 
size
)

421 
i
,
b
;

422 
b
 = 0; b < 
b©ch
; ++b){

423 
i
 = 0; i < 
n
; ++i){

424 
büs_upd©es
[
i
] +
	`sum_¨øy
(
dñè
+
size
*(i+
b
*
n
), size);

427 
	}
}

429 
	$f‹w¨d_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
l
, 
√tw‹k
 
√t
)

431 
out_h
 = 
l
.out_h;

432 
out_w
 = 
l
.out_w;

433 
i
;

435 
	`fûl_˝u
(
l
.
ouçuts
*l.
b©ch
, 0,Ü.
ouçut
, 1);

437 if(
l
.
xn‹
){

438 
	`bö¨ize_weights
(
l
.
weights
,Ü.
n
,Ü.
c
*l.
size
*l.size,Ü.
bö¨y_weights
);

439 
	`sw≠_bö¨y
(&
l
);

440 
	`bö¨ize_˝u
(
√t
.
öput
, 
l
.
c
*l.
h
*l.
w
*l.
b©ch
,Ü.
bö¨y_öput
);

441 
√t
.
öput
 = 
l
.
bö¨y_öput
;

444 
m
 = 
l
.
n
;

445 
k
 = 
l
.
size
*l.size*l.
c
;

446 
n
 = 
out_h
*
out_w
;

449 *
a
 = 
l
.
weights
;

450 *
b
 = 
√t
.
w‹k•a˚
;

451 *
c
 = 
l
.
ouçut
;

453 
i
 = 0; i < 
l
.
b©ch
; ++i){

454 
	`im2cﬁ_˝u
(
√t
.
öput
, 
l
.
c
,Ü.
h
,Ü.
w
,

455 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
b
);

456 
	`gemm
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,n,1,
c
,n);

457 
c
 +
n
*
m
;

458 
√t
.
öput
 +
l
.
c
*l.
h
*l.
w
;

461 if(
l
.
b©ch_n‹mÆize
){

462 
	`f‹w¨d_b©chn‹m_œyî
(
l
, 
√t
);

464 
	`add_büs
(
l
.
ouçut
,Ü.
bü£s
,Ü.
b©ch
,Ü.
n
, 
out_h
*
out_w
);

467 
	`a˘iv©e_¨øy
(
l
.
ouçut
, 
m
*
n
*l.
b©ch
,Ü.
a˘iv©i⁄
);

468 if(
l
.
bö¨y
 ||Ü.
xn‹
Ë
	`sw≠_bö¨y
(&l);

469 
	}
}

471 
	$backw¨d_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
l
, 
√tw‹k
 
√t
)

473 
i
;

474 
m
 = 
l
.
n
;

475 
n
 = 
l
.
size
*l.size*l.
c
;

476 
k
 = 
l
.
out_w
*l.
out_h
;

478 
	`gødõ¡_¨øy
(
l
.
ouçut
, 
m
*
k
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

480 if(
l
.
b©ch_n‹mÆize
){

481 
	`backw¨d_b©chn‹m_œyî
(
l
, 
√t
);

483 
	`backw¨d_büs
(
l
.
büs_upd©es
,Ü.
dñè
,Ü.
b©ch
,Ü.
n
, 
k
);

486 
i
 = 0; i < 
l
.
b©ch
; ++i){

487 *
a
 = 
l
.
dñè
 + 
i
*
m
*
k
;

488 *
b
 = 
√t
.
w‹k•a˚
;

489 *
c
 = 
l
.
weight_upd©es
;

491 *
im
 = 
√t
.
öput
+
i
*
l
.
c
*l.
h
*l.
w
;

493 
	`im2cﬁ_˝u
(
im
, 
l
.
c
,Ü.
h
,Ü.
w
,

494 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
b
);

495 
	`gemm
(0,1,
m
,
n
,
k
,1,
a
,k,
b
,k,1,
c
,n);

497 if(
√t
.
dñè
){

498 
a
 = 
l
.
weights
;

499 
b
 = 
l
.
dñè
 + 
i
*
m
*
k
;

500 
c
 = 
√t
.
w‹k•a˚
;

502 
	`gemm
(1,0,
n
,
k
,
m
,1,
a
,n,
b
,k,0,
c
,k);

504 
	`cﬁ2im_˝u
(
√t
.
w‹k•a˚
, 
l
.
c
,Ü.
h
,Ü.
w
,Ü.
size
,Ü.
°ride
,Ü.
∑d
,Çë.
dñè
+
i
*l.c*l.h*l.w);

507 
	}
}

509 
	$upd©e_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
l
, 
upd©e_¨gs
 
a
)

511 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

512 
momítum
 = 
a
.momentum;

513 
deˇy
 = 
a
.decay;

514 
b©ch
 = 
a
.batch;

516 
size
 = 
l
.size*l.size*l.
c
*l.
n
;

517 
	`axpy_˝u
(
l
.
n
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es
, 1,Ü.
bü£s
, 1);

518 
	`sˇl_˝u
(
l
.
n
, 
momítum
,Ü.
büs_upd©es
, 1);

520 if(
l
.
sˇÀs
){

521 
	`axpy_˝u
(
l
.
n
, 
À¨nög_øã
/
b©ch
,Ü.
sˇÀ_upd©es
, 1,Ü.
sˇÀs
, 1);

522 
	`sˇl_˝u
(
l
.
n
, 
momítum
,Ü.
sˇÀ_upd©es
, 1);

525 
	`axpy_˝u
(
size
, -
deˇy
*
b©ch
, 
l
.
weights
, 1,Ü.
weight_upd©es
, 1);

526 
	`axpy_˝u
(
size
, 
À¨nög_øã
/
b©ch
, 
l
.
weight_upd©es
, 1,Ü.
weights
, 1);

527 
	`sˇl_˝u
(
size
, 
momítum
, 
l
.
weight_upd©es
, 1);

528 
	}
}

531 
image
 
	$gë_c⁄vﬁuti⁄Æ_weight
(
c⁄vﬁuti⁄Æ_œyî
 
l
, 
i
)

533 
h
 = 
l
.
size
;

534 
w
 = 
l
.
size
;

535 
c
 = 
l
.c;

536  
	`Êﬂt_to_image
(
w
,
h
,
c
,
l
.
weights
+
i
*h*w*c);

537 
	}
}

539 
	$rgbgr_weights
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

541 
i
;

542 
i
 = 0; i < 
l
.
n
; ++i){

543 
image
 
im
 = 
	`gë_c⁄vﬁuti⁄Æ_weight
(
l
, 
i
);

544 i‡(
im
.
c
 == 3) {

545 
	`rgbgr_image
(
im
);

548 
	}
}

550 
	$ªsˇÀ_weights
(
c⁄vﬁuti⁄Æ_œyî
 
l
, 
sˇÀ
, 
å™s
)

552 
i
;

553 
i
 = 0; i < 
l
.
n
; ++i){

554 
image
 
im
 = 
	`gë_c⁄vﬁuti⁄Æ_weight
(
l
, 
i
);

555 i‡(
im
.
c
 == 3) {

556 
	`sˇÀ_image
(
im
, 
sˇÀ
);

557 
sum
 = 
	`sum_¨øy
(
im
.
d©a
, im.
w
*im.
h
*im.
c
);

558 
l
.
bü£s
[
i
] +
sum
*
å™s
;

561 
	}
}

563 
image
 *
	$gë_weights
(
c⁄vﬁuti⁄Æ_œyî
 
l
)

565 
image
 *
weights
 = 
	`ˇŒoc
(
l
.
n
, (image));

566 
i
;

567 
i
 = 0; i < 
l
.
n
; ++i){

568 
weights
[
i
] = 
	`c›y_image
(
	`gë_c⁄vﬁuti⁄Æ_weight
(
l
, i));

569 
	`n‹mÆize_image
(
weights
[
i
]);

577  
weights
;

578 
	}
}

580 
image
 *
	$visuÆize_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
l
, *
wödow
, 
image
 *
¥ev_weights
)

582 
image
 *
sögÀ_weights
 = 
	`gë_weights
(
l
);

583 
	`show_images
(
sögÀ_weights
, 
l
.
n
, 
wödow
);

585 
image
 
dñè
 = 
	`gë_c⁄vﬁuti⁄Æ_image
(
l
);

586 
image
 
dc
 = 
	`cﬁœp£_image_œyîs
(
dñè
, 1);

587 
buff
[256];

588 
	`•rötf
(
buff
, "%s: Ouçut", 
wödow
);

591 
	`‰ì_image
(
dc
);

592  
sögÀ_weights
;

593 
	}
}

	@src/convolutional_layer.h

1 #i‚de‡
CONVOLUTIONAL_LAYER_H


2 
	#CONVOLUTIONAL_LAYER_H


	)

4 
	~"cuda.h
"

5 
	~"image.h
"

6 
	~"a˘iv©i⁄s.h
"

7 
	~"œyî.h
"

8 
	~"√tw‹k.h
"

10 
œyî
 
	tc⁄vﬁuti⁄Æ_œyî
;

12 #ifde‡
GPU


13 
f‹w¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
√tw‹k
 
√t
);

14 
backw¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
√tw‹k
 
√t
);

15 
upd©e_c⁄vﬁuti⁄Æ_œyî_gpu
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
upd©e_¨gs
 
a
);

17 
push_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

18 
puŒ_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

20 
add_büs_gpu
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

21 
backw¨d_büs_gpu
(*
büs_upd©es
, *
dñè
, 
b©ch
, 
n
, 
size
);

22 
adam_upd©e_gpu
(*
w
, *
d
, *
m
, *
v
, 
B1
, 
B2
, 
ïs
, 
deˇy
, 
øã
, 
n
, 
b©ch
, 
t
);

23 #ifde‡
CUDNN


24 
cud¬_c⁄vﬁuti⁄Æ_£tup
(
œyî
 *
l
);

28 
c⁄vﬁuti⁄Æ_œyî
 
make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑ddög
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
bö¨y
, 
xn‹
, 
adam
);

29 
ªsize_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 *
œyî
, 
w
, 
h
);

30 
f‹w¨d_c⁄vﬁuti⁄Æ_œyî
(c⁄° 
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
√tw‹k
 
√t
);

31 
upd©e_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
upd©e_¨gs
 
a
);

32 
image
 *
visuÆize_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, *
wödow
, imagê*
¥ev_weights
);

33 
bö¨ize_weights
(*
weights
, 
n
, 
size
, *
bö¨y
);

34 
sw≠_bö¨y
(
c⁄vﬁuti⁄Æ_œyî
 *
l
);

35 
bö¨ize_weights2
(*
weights
, 
n
, 
size
, *
bö¨y
, *
sˇÀs
);

37 
backw¨d_c⁄vﬁuti⁄Æ_œyî
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
√tw‹k
 
√t
);

39 
add_büs
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

40 
backw¨d_büs
(*
büs_upd©es
, *
dñè
, 
b©ch
, 
n
, 
size
);

42 
image
 
gë_c⁄vﬁuti⁄Æ_image
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

43 
image
 
gë_c⁄vﬁuti⁄Æ_dñè
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

44 
image
 
gë_c⁄vﬁuti⁄Æ_weight
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
, 
i
);

46 
c⁄vﬁuti⁄Æ_out_height
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

47 
c⁄vﬁuti⁄Æ_out_width
(
c⁄vﬁuti⁄Æ_œyî
 
œyî
);

	@src/cost_layer.c

1 
	~"co°_œyî.h
"

2 
	~"utûs.h
"

3 
	~"cuda.h
"

4 
	~"bœs.h
"

5 
	~<m©h.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

10 
COST_TYPE
 
	$gë_co°_ty≥
(*
s
)

12 i‡(
	`°rcmp
(
s
, "£g")==0Ë 
SEG
;

13 i‡(
	`°rcmp
(
s
, "s£")==0Ë 
SSE
;

14 i‡(
	`°rcmp
(
s
, "masked")==0Ë 
MASKED
;

15 i‡(
	`°rcmp
(
s
, "smoŸh")==0Ë 
SMOOTH
;

16 i‡(
	`°rcmp
(
s
, "L1")==0Ë 
L1
;

17 
	`Ârötf
(
°dîr
, "Couldn'àföd co°Åy≥ %s, goög wôh SSE\n", 
s
);

18  
SSE
;

19 
	}
}

21 *
	$gë_co°_°rög
(
COST_TYPE
 
a
)

23 
a
){

24 
SEG
:

26 
SSE
:

28 
MASKED
:

30 
SMOOTH
:

32 
L1
:

36 
	}
}

38 
co°_œyî
 
	$make_co°_œyî
(
b©ch
, 
öputs
, 
COST_TYPE
 
co°_ty≥
, 
sˇÀ
)

40 
	`Ârötf
(
°dîr
, "co° %4d\n", 
öputs
);

41 
co°_œyî
 
l
 = {0};

42 
l
.
ty≥
 = 
COST
;

44 
l
.
sˇÀ
 = scale;

45 
l
.
b©ch
 = batch;

46 
l
.
öputs
 = inputs;

47 
l
.
ouçuts
 = 
öputs
;

48 
l
.
co°_ty≥
 = cost_type;

49 
l
.
dñè
 = 
	`ˇŒoc
(
öputs
*
b©ch
, ());

50 
l
.
ouçut
 = 
	`ˇŒoc
(
öputs
*
b©ch
, ());

51 
l
.
co°
 = 
	`ˇŒoc
(1, ());

53 
l
.
f‹w¨d
 = 
f‹w¨d_co°_œyî
;

54 
l
.
backw¨d
 = 
backw¨d_co°_œyî
;

55 #ifde‡
GPU


56 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_co°_œyî_gpu
;

57 
l
.
backw¨d_gpu
 = 
backw¨d_co°_œyî_gpu
;

59 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
öputs
*
b©ch
);

60 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
öputs
*
b©ch
);

62  
l
;

63 
	}
}

65 
	$ªsize_co°_œyî
(
co°_œyî
 *
l
, 
öputs
)

67 
l
->
öputs
 = inputs;

68 
l
->
ouçuts
 = 
öputs
;

69 
l
->
dñè
 = 
	`ªÆloc
÷->dñè, 
öputs
*l->
b©ch
*());

70 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut, 
öputs
*l->
b©ch
*());

71 #ifde‡
GPU


72 
	`cuda_‰ì
(
l
->
dñè_gpu
);

73 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

74 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
, 
öputs
*l->
b©ch
);

75 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
, 
öputs
*l->
b©ch
);

77 
	}
}

79 
	$f‹w¨d_co°_œyî
(
co°_œyî
 
l
, 
√tw‹k
 
√t
)

81 i‡(!
√t
.
åuth
) ;

82 if(
l
.
co°_ty≥
 =
MASKED
){

83 
i
;

84 
i
 = 0; i < 
l
.
b©ch
*l.
öputs
; ++i){

85 if(
√t
.
åuth
[
i
] =
SECRET_NUM
Ë√t.
öput
[i] = SECRET_NUM;

88 if(
l
.
co°_ty≥
 =
SMOOTH
){

89 
	`smoŸh_l1_˝u
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput
,Çë.
åuth
,Ü.
dñè
,Ü.
ouçut
);

90 }if(
l
.
co°_ty≥
 =
L1
){

91 
	`l1_˝u
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput
,Çë.
åuth
,Ü.
dñè
,Ü.
ouçut
);

93 
	`l2_˝u
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput
,Çë.
åuth
,Ü.
dñè
,Ü.
ouçut
);

95 
l
.
co°
[0] = 
	`sum_¨øy
÷.
ouçut
,Ü.
b©ch
*l.
öputs
);

96 
	}
}

98 
	$backw¨d_co°_œyî
(c⁄° 
co°_œyî
 
l
, 
√tw‹k
 
√t
)

100 
	`axpy_˝u
(
l
.
b©ch
*l.
öputs
,Ü.
sˇÀ
,Ü.
dñè
, 1, 
√t
.delta, 1);

101 
	}
}

103 #ifde‡
GPU


105 
	$puŒ_co°_œyî
(
co°_œyî
 
l
)

107 
	`cuda_puŒ_¨øy
(
l
.
dñè_gpu
,Ü.
dñè
,Ü.
b©ch
*l.
öputs
);

108 
	}
}

110 
	$push_co°_œyî
(
co°_œyî
 
l
)

112 
	`cuda_push_¨øy
(
l
.
dñè_gpu
,Ü.
dñè
,Ü.
b©ch
*l.
öputs
);

113 
	}
}

115 
	$Êﬂt_abs_com∑ª
 (c⁄° * 
a
, c⁄° * 
b
)

117 
Á
 = *(c⁄° *Ë
a
;

118 if(
Á
 < 0) fa = -fa;

119 
fb
 = *(c⁄° *Ë
b
;

120 if(
fb
 < 0) fb = -fb;

121  (
Á
 > 
fb
) - (fa < fb);

122 
	}
}

124 
	$f‹w¨d_co°_œyî_gpu
(
co°_œyî
 
l
, 
√tw‹k
 
√t
)

126 i‡(!
√t
.
åuth_gpu
) ;

127 if(
l
.
smoŸh
){

128 
	`sˇl_gpu
(
l
.
b©ch
*l.
öputs
, (1-l.
smoŸh
), 
√t
.
åuth_gpu
, 1);

129 
	`add_gpu
(
l
.
b©ch
*l.
öputs
,Ü.
smoŸh
 * 1./l.öputs, 
√t
.
åuth_gpu
, 1);

131 i‡(
l
.
co°_ty≥
 =
MASKED
) {

132 
	`mask_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
, 
SECRET_NUM
,Çë.
åuth_gpu
);

135 if(
l
.
co°_ty≥
 =
SMOOTH
){

136 
	`smoŸh_l1_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
,Çë.
åuth_gpu
,Ü.
dñè_gpu
,Ü.
ouçut_gpu
);

137 } i‡(
l
.
co°_ty≥
 =
L1
){

138 
	`l1_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
,Çë.
åuth_gpu
,Ü.
dñè_gpu
,Ü.
ouçut_gpu
);

140 
	`l2_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
,Çë.
åuth_gpu
,Ü.
dñè_gpu
,Ü.
ouçut_gpu
);

143 i‡(
l
.
co°_ty≥
 =
SEG
 &&Ü.
noobje˘_sˇÀ
 != 1) {

144 
	`sˇÀ_mask_gpu
(
l
.
b©ch
*l.
öputs
,Ü.
dñè_gpu
, 0, 
√t
.
åuth_gpu
,Ü.
noobje˘_sˇÀ
);

145 
	`sˇÀ_mask_gpu
(
l
.
b©ch
*l.
öputs
,Ü.
ouçut_gpu
, 0, 
√t
.
åuth_gpu
,Ü.
noobje˘_sˇÀ
);

148 if(
l
.
øtio
){

149 
	`cuda_puŒ_¨øy
(
l
.
dñè_gpu
,Ü.
dñè
,Ü.
b©ch
*l.
öputs
);

150 
	`qs‹t
(
l
.
dñè
,Ü.
b©ch
*l.
öputs
, (), 
Êﬂt_abs_com∑ª
);

151 
n
 = (1-
l
.
øtio
Ë*Ü.
b©ch
*l.
öputs
;

152 
thªsh
 = 
l
.
dñè
[
n
];

153 
thªsh
 = 0;

154 
	`¥ötf
("%f\n", 
thªsh
);

155 
	`suµ_gpu
(
l
.
b©ch
*l.
öputs
, 
thªsh
,Ü.
dñè_gpu
, 1);

158 if(
l
.
thªsh
){

159 
	`suµ_gpu
(
l
.
b©ch
*l.
öputs
,Ü.
thªsh
*1./l.öputs,Ü.
dñè_gpu
, 1);

162 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
b©ch
*l.
öputs
);

163 
l
.
co°
[0] = 
	`sum_¨øy
÷.
ouçut
,Ü.
b©ch
*l.
öputs
);

164 
	}
}

166 
	$backw¨d_co°_œyî_gpu
(c⁄° 
co°_œyî
 
l
, 
√tw‹k
 
√t
)

168 
	`axpy_gpu
(
l
.
b©ch
*l.
öputs
,Ü.
sˇÀ
,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

169 
	}
}

	@src/cost_layer.h

1 #i‚de‡
COST_LAYER_H


2 
	#COST_LAYER_H


	)

3 
	~"œyî.h
"

4 
	~"√tw‹k.h
"

6 
œyî
 
	tco°_œyî
;

8 
COST_TYPE
 
gë_co°_ty≥
(*
s
);

9 *
gë_co°_°rög
(
COST_TYPE
 
a
);

10 
co°_œyî
 
make_co°_œyî
(
b©ch
, 
öputs
, 
COST_TYPE
 
ty≥
, 
sˇÀ
);

11 
f‹w¨d_co°_œyî
(c⁄° 
co°_œyî
 
l
, 
√tw‹k
 
√t
);

12 
backw¨d_co°_œyî
(c⁄° 
co°_œyî
 
l
, 
√tw‹k
 
√t
);

13 
ªsize_co°_œyî
(
co°_œyî
 *
l
, 
öputs
);

15 #ifde‡
GPU


16 
f‹w¨d_co°_œyî_gpu
(
co°_œyî
 
l
, 
√tw‹k
 
√t
);

17 
backw¨d_co°_œyî_gpu
(c⁄° 
co°_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/crnn_layer.c

1 
	~"¸¬_œyî.h
"

2 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

3 
	~"utûs.h
"

4 
	~"cuda.h
"

5 
	~"bœs.h
"

6 
	~"gemm.h
"

8 
	~<m©h.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	$ö¸emít_œyî
(
œyî
 *
l
, 
°ïs
)

15 
num
 = 
l
->
ouçuts
*l->
b©ch
*
°ïs
;

16 
l
->
ouçut
 +
num
;

17 
l
->
dñè
 +
num
;

18 
l
->
x
 +
num
;

19 
l
->
x_n‹m
 +
num
;

21 #ifde‡
GPU


22 
l
->
ouçut_gpu
 +
num
;

23 
l
->
dñè_gpu
 +
num
;

24 
l
->
x_gpu
 +
num
;

25 
l
->
x_n‹m_gpu
 +
num
;

27 
	}
}

29 
œyî
 
	$make_¸¬_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
hiddí_fûãrs
, 
ouçut_fûãrs
, 
°ïs
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
)

31 
	`Ârötf
(
°dîr
, "CRNN Layî: %d x %d x %d image, %d fûãrs\n", 
h
,
w
,
c
,
ouçut_fûãrs
);

32 
b©ch
 = b©ch / 
°ïs
;

33 
œyî
 
l
 = {0};

34 
l
.
b©ch
 = batch;

35 
l
.
ty≥
 = 
CRNN
;

36 
l
.
°ïs
 = steps;

37 
l
.
h
 = h;

38 
l
.
w
 = w;

39 
l
.
c
 = c;

40 
l
.
out_h
 = 
h
;

41 
l
.
out_w
 = 
w
;

42 
l
.
out_c
 = 
ouçut_fûãrs
;

43 
l
.
öputs
 = 
h
*
w
*
c
;

44 
l
.
hiddí
 = 
h
 * 
w
 * 
hiddí_fûãrs
;

45 
l
.
ouçuts
 =Ü.
out_h
 *Ü.
out_w
 *Ü.
out_c
;

47 
l
.
°©e
 = 
	`ˇŒoc
÷.
hiddí
*
b©ch
*(
°ïs
+1), ());

49 
l
.
öput_œyî
 = 
	`mÆloc
((
œyî
));

50 
	`Ârötf
(
°dîr
, "\t\t");

51 *(
l
.
öput_œyî
Ë
	`make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
*
°ïs
, 
h
, 
w
, 
c
, 
hiddí_fûãrs
, 3, 1, 1, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 0, 0, 0);

52 
l
.
öput_œyî
->
b©ch
 = batch;

54 
l
.
£lf_œyî
 = 
	`mÆloc
((
œyî
));

55 
	`Ârötf
(
°dîr
, "\t\t");

56 *(
l
.
£lf_œyî
Ë
	`make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
*
°ïs
, 
h
, 
w
, 
hiddí_fûãrs
, hiddí_fûãrs, 3, 1, 1, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 0, 0, 0);

57 
l
.
£lf_œyî
->
b©ch
 = batch;

59 
l
.
ouçut_œyî
 = 
	`mÆloc
((
œyî
));

60 
	`Ârötf
(
°dîr
, "\t\t");

61 *(
l
.
ouçut_œyî
Ë
	`make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
*
°ïs
, 
h
, 
w
, 
hiddí_fûãrs
, 
ouçut_fûãrs
, 3, 1, 1, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 0, 0, 0);

62 
l
.
ouçut_œyî
->
b©ch
 = batch;

64 
l
.
ouçut
 =Ü.
ouçut_œyî
->output;

65 
l
.
dñè
 =Ü.
ouçut_œyî
->delta;

67 
l
.
f‹w¨d
 = 
f‹w¨d_¸¬_œyî
;

68 
l
.
backw¨d
 = 
backw¨d_¸¬_œyî
;

69 
l
.
upd©e
 = 
upd©e_¸¬_œyî
;

71 #ifde‡
GPU


72 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_¸¬_œyî_gpu
;

73 
l
.
backw¨d_gpu
 = 
backw¨d_¸¬_œyî_gpu
;

74 
l
.
upd©e_gpu
 = 
upd©e_¸¬_œyî_gpu
;

76 
l
.
°©e_gpu
 = 
	`cuda_make_¨øy
÷.
°©e
,Ü.
hiddí
*
b©ch
*(
°ïs
+1));

77 
l
.
ouçut_gpu
 =Ü.
ouçut_œyî
->output_gpu;

78 
l
.
dñè_gpu
 =Ü.
ouçut_œyî
->delta_gpu;

81  
l
;

82 
	}
}

84 
	$upd©e_¸¬_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

86 
	`upd©e_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
öput_œyî
), 
a
);

87 
	`upd©e_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
£lf_œyî
), 
a
);

88 
	`upd©e_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
ouçut_œyî
), 
a
);

89 
	}
}

91 
	$f‹w¨d_¸¬_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

93 
√tw‹k
 
s
 = 
√t
;

94 
s
.
åaö
 = 
√t
.train;

95 
i
;

96 
œyî
 
öput_œyî
 = *(
l
.input_layer);

97 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

98 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

100 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ouçut_œyî
.
dñè
, 1);

101 
	`fûl_˝u
(
l
.
hiddí
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
£lf_œyî
.
dñè
, 1);

102 
	`fûl_˝u
(
l
.
hiddí
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
öput_œyî
.
dñè
, 1);

103 if(
√t
.
åaö
Ë
	`fûl_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 0,Ü.
°©e
, 1);

105 
i
 = 0; i < 
l
.
°ïs
; ++i) {

106 
s
.
öput
 = 
√t
.input;

107 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî
(
öput_œyî
, 
s
);

109 
s
.
öput
 = 
l
.
°©e
;

110 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî
(
£lf_œyî
, 
s
);

112 *
ﬁd_°©e
 = 
l
.
°©e
;

113 if(
√t
.
åaö
Ë
l
.
°©e
 +l.
hiddí
*l.
b©ch
;

114 if(
l
.
sh‹tcut
){

115 
	`c›y_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 
ﬁd_°©e
, 1,Ü.
°©e
, 1);

117 
	`fûl_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 0,Ü.
°©e
, 1);

119 
	`axpy_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

120 
	`axpy_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

122 
s
.
öput
 = 
l
.
°©e
;

123 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî
(
ouçut_œyî
, 
s
);

125 
√t
.
öput
 +
l
.
öputs
*l.
b©ch
;

126 
	`ö¸emít_œyî
(&
öput_œyî
, 1);

127 
	`ö¸emít_œyî
(&
£lf_œyî
, 1);

128 
	`ö¸emít_œyî
(&
ouçut_œyî
, 1);

130 
	}
}

132 
	$backw¨d_¸¬_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

134 
√tw‹k
 
s
 = 
√t
;

135 
i
;

136 
œyî
 
öput_œyî
 = *(
l
.input_layer);

137 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

138 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

140 
	`ö¸emít_œyî
(&
öput_œyî
, 
l
.
°ïs
-1);

141 
	`ö¸emít_œyî
(&
£lf_œyî
, 
l
.
°ïs
-1);

142 
	`ö¸emít_œyî
(&
ouçut_œyî
, 
l
.
°ïs
-1);

144 
l
.
°©e
 +l.
hiddí
*l.
b©ch
*l.
°ïs
;

145 
i
 = 
l
.
°ïs
-1; i >= 0; --i) {

146 
	`c›y_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 
öput_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

147 
	`axpy_˝u
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

149 
s
.
öput
 = 
l
.
°©e
;

150 
s
.
dñè
 = 
£lf_œyî
.delta;

151 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî
(
ouçut_œyî
, 
s
);

153 
l
.
°©e
 -l.
hiddí
*l.
b©ch
;

163 
s
.
öput
 = 
l
.
°©e
;

164 
s
.
dñè
 = 
£lf_œyî
.dñè - 
l
.
hiddí
*l.
b©ch
;

165 i‡(
i
 =0Ë
s
.
dñè
 = 0;

166 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî
(
£lf_œyî
, 
s
);

168 
	`c›y_˝u
(
l
.
hiddí
*l.
b©ch
, 
£lf_œyî
.
dñè
, 1, 
öput_œyî
.delta, 1);

169 i‡(
i
 > 0 && 
l
.
sh‹tcut
Ë
	`axpy_˝u
÷.
hiddí
*l.
b©ch
, 1, 
£lf_œyî
.
dñè
, 1, self_layer.delta -Ü.hidden*l.batch, 1);

170 
s
.
öput
 = 
√t
.öpuà+ 
i
*
l
.
öputs
*l.
b©ch
;

171 if(
√t
.
dñè
Ë
s
.dñè =Çë.dñè + 
i
*
l
.
öputs
*l.
b©ch
;

172 
s
.
dñè
 = 0;

173 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî
(
öput_œyî
, 
s
);

175 
	`ö¸emít_œyî
(&
öput_œyî
, -1);

176 
	`ö¸emít_œyî
(&
£lf_œyî
, -1);

177 
	`ö¸emít_œyî
(&
ouçut_œyî
, -1);

179 
	}
}

181 #ifde‡
GPU


183 
	$puŒ_¸¬_œyî
(
œyî
 
l
)

185 
	`puŒ_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
öput_œyî
));

186 
	`puŒ_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
£lf_œyî
));

187 
	`puŒ_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
ouçut_œyî
));

188 
	}
}

190 
	$push_¸¬_œyî
(
œyî
 
l
)

192 
	`push_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
öput_œyî
));

193 
	`push_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
£lf_œyî
));

194 
	`push_c⁄vﬁuti⁄Æ_œyî
(*(
l
.
ouçut_œyî
));

195 
	}
}

197 
	$upd©e_¸¬_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

199 
	`upd©e_c⁄vﬁuti⁄Æ_œyî_gpu
(*(
l
.
öput_œyî
), 
a
);

200 
	`upd©e_c⁄vﬁuti⁄Æ_œyî_gpu
(*(
l
.
£lf_œyî
), 
a
);

201 
	`upd©e_c⁄vﬁuti⁄Æ_œyî_gpu
(*(
l
.
ouçut_œyî
), 
a
);

202 
	}
}

204 
	$f‹w¨d_¸¬_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

206 
√tw‹k
 
s
 = 
√t
;

207 
i
;

208 
œyî
 
öput_œyî
 = *(
l
.input_layer);

209 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

210 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

212 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ouçut_œyî
.
dñè_gpu
, 1);

213 
	`fûl_gpu
(
l
.
hiddí
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
£lf_œyî
.
dñè_gpu
, 1);

214 
	`fûl_gpu
(
l
.
hiddí
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
öput_œyî
.
dñè_gpu
, 1);

215 if(
√t
.
åaö
Ë
	`fûl_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

217 
i
 = 0; i < 
l
.
°ïs
; ++i) {

218 
s
.
öput_gpu
 = 
√t
.input_gpu;

219 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
öput_œyî
, 
s
);

221 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

222 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
£lf_œyî
, 
s
);

224 *
ﬁd_°©e
 = 
l
.
°©e_gpu
;

225 if(
√t
.
åaö
Ë
l
.
°©e_gpu
 +l.
hiddí
*l.
b©ch
;

226 if(
l
.
sh‹tcut
){

227 
	`c›y_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 
ﬁd_°©e
, 1,Ü.
°©e_gpu
, 1);

229 
	`fûl_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

231 
	`axpy_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

232 
	`axpy_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

234 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

235 
	`f‹w¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
ouçut_œyî
, 
s
);

237 
√t
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
;

238 
	`ö¸emít_œyî
(&
öput_œyî
, 1);

239 
	`ö¸emít_œyî
(&
£lf_œyî
, 1);

240 
	`ö¸emít_œyî
(&
ouçut_œyî
, 1);

242 
	}
}

244 
	$backw¨d_¸¬_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

246 
√tw‹k
 
s
 = 
√t
;

247 
s
.
åaö
 = 
√t
.train;

248 
i
;

249 
œyî
 
öput_œyî
 = *(
l
.input_layer);

250 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

251 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

252 
	`ö¸emít_œyî
(&
öput_œyî
, 
l
.
°ïs
 - 1);

253 
	`ö¸emít_œyî
(&
£lf_œyî
, 
l
.
°ïs
 - 1);

254 
	`ö¸emít_œyî
(&
ouçut_œyî
, 
l
.
°ïs
 - 1);

255 
l
.
°©e_gpu
 +l.
hiddí
*l.
b©ch
*l.
°ïs
;

256 
i
 = 
l
.
°ïs
-1; i >= 0; --i) {

257 
	`c›y_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 
öput_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

258 
	`axpy_gpu
(
l
.
hiddí
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

260 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

261 
s
.
dñè_gpu
 = 
£lf_œyî
.delta_gpu;

262 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
ouçut_œyî
, 
s
);

264 
l
.
°©e_gpu
 -l.
hiddí
*l.
b©ch
;

266 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

267 
s
.
dñè_gpu
 = 
£lf_œyî
.dñè_gpu - 
l
.
hiddí
*l.
b©ch
;

268 i‡(
i
 =0Ë
s
.
dñè_gpu
 = 0;

269 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
£lf_œyî
, 
s
);

271 
	`c›y_gpu
(
l
.
hiddí
*l.
b©ch
, 
£lf_œyî
.
dñè_gpu
, 1, 
öput_œyî
.delta_gpu, 1);

272 i‡(
i
 > 0 && 
l
.
sh‹tcut
Ë
	`axpy_gpu
÷.
hiddí
*l.
b©ch
, 1, 
£lf_œyî
.
dñè_gpu
, 1, self_layer.delta_gpu -Ü.hidden*l.batch, 1);

273 
s
.
öput_gpu
 = 
√t
.öput_gpu + 
i
*
l
.
öputs
*l.
b©ch
;

274 if(
√t
.
dñè_gpu
Ë
s
.dñè_gpu =Çë.dñè_gpu + 
i
*
l
.
öputs
*l.
b©ch
;

275 
s
.
dñè_gpu
 = 0;

276 
	`backw¨d_c⁄vﬁuti⁄Æ_œyî_gpu
(
öput_œyî
, 
s
);

278 
	`ö¸emít_œyî
(&
öput_œyî
, -1);

279 
	`ö¸emít_œyî
(&
£lf_œyî
, -1);

280 
	`ö¸emít_œyî
(&
ouçut_œyî
, -1);

282 
	}
}

	@src/crnn_layer.h

2 #i‚de‡
CRNN_LAYER_H


3 
	#CRNN_LAYER_H


	)

5 
	~"a˘iv©i⁄s.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

9 
œyî
 
make_¸¬_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
hiddí_fûãrs
, 
ouçut_fûãrs
, 
°ïs
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
);

11 
f‹w¨d_¸¬_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

12 
backw¨d_¸¬_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

13 
upd©e_¸¬_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

15 #ifde‡
GPU


16 
f‹w¨d_¸¬_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

17 
backw¨d_¸¬_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

18 
upd©e_¸¬_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

19 
push_¸¬_œyî
(
œyî
 
l
);

20 
puŒ_¸¬_œyî
(
œyî
 
l
);

	@src/crop_layer.c

1 
	~"¸›_œyî.h
"

2 
	~"cuda.h
"

3 
	~<°dio.h
>

5 
image
 
	$gë_¸›_image
(
¸›_œyî
 
l
)

7 
h
 = 
l
.
out_h
;

8 
w
 = 
l
.
out_w
;

9 
c
 = 
l
.
out_c
;

10  
	`Êﬂt_to_image
(
w
,
h
,
c
,
l
.
ouçut
);

11 
	}
}

13 
	$backw¨d_¸›_œyî
(c⁄° 
¸›_œyî
 
l
, 
√tw‹k
 
√t
){
	}
}

14 
	$backw¨d_¸›_œyî_gpu
(c⁄° 
¸›_œyî
 
l
, 
√tw‹k
 
√t
){
	}
}

16 
¸›_œyî
 
	$make_¸›_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
¸›_height
, 
¸›_width
, 
Êù
, 
™gÀ
, 
ßtuøti⁄
, 
exposuª
)

18 
	`Ârötf
(
°dîr
, "Cr› Layî: %d x %d -> %d x %d x %d image\n", 
h
,
w
,
¸›_height
,
¸›_width
,
c
);

19 
¸›_œyî
 
l
 = {0};

20 
l
.
ty≥
 = 
CROP
;

21 
l
.
b©ch
 = batch;

22 
l
.
h
 = h;

23 
l
.
w
 = w;

24 
l
.
c
 = c;

25 
l
.
sˇÀ
 = ()
¸›_height
 / 
h
;

26 
l
.
Êù
 = flip;

27 
l
.
™gÀ
 =ángle;

28 
l
.
ßtuøti⁄
 = saturation;

29 
l
.
exposuª
 =Éxposure;

30 
l
.
out_w
 = 
¸›_width
;

31 
l
.
out_h
 = 
¸›_height
;

32 
l
.
out_c
 = 
c
;

33 
l
.
öputs
 =Ü.
w
 *Ü.
h
 *Ü.
c
;

34 
l
.
ouçuts
 =Ü.
out_w
 *Ü.
out_h
 *Ü.
out_c
;

35 
l
.
ouçut
 = 
	`ˇŒoc
÷.
ouçuts
*
b©ch
, ());

36 
l
.
f‹w¨d
 = 
f‹w¨d_¸›_œyî
;

37 
l
.
backw¨d
 = 
backw¨d_¸›_œyî
;

39 #ifde‡
GPU


40 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_¸›_œyî_gpu
;

41 
l
.
backw¨d_gpu
 = 
backw¨d_¸›_œyî_gpu
;

42 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
ouçuts
*
b©ch
);

43 
l
.
ønd_gpu
 = 
	`cuda_make_¨øy
(0,Ü.
b©ch
*8);

45  
l
;

46 
	}
}

48 
	$ªsize_¸›_œyî
(
œyî
 *
l
, 
w
, 
h
)

50 
l
->
w
 = w;

51 
l
->
h
 = h;

53 
l
->
out_w
 =Ü->
sˇÀ
*
w
;

54 
l
->
out_h
 =Ü->
sˇÀ
*
h
;

56 
l
->
öputs
 =Ü->
w
 *Ü->
h
 *Ü->
c
;

57 
l
->
ouçuts
 =Ü->
out_h
 *Ü->
out_w
 *Ü->
out_c
;

59 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut,Ü->
b©ch
*l->
ouçuts
*());

60 #ifde‡
GPU


61 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

62 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
ouçuts
*l->
b©ch
);

64 
	}
}

67 
	$f‹w¨d_¸›_œyî
(c⁄° 
¸›_œyî
 
l
, 
√tw‹k
 
√t
)

69 
i
,
j
,
c
,
b
,
row
,
cﬁ
;

70 
ödex
;

71 
cou¡
 = 0;

72 
Êù
 = (
l
.Êù && 
	`ønd
()%2);

73 
dh
 = 
	`ønd
()%(
l
.
h
 -Ü.
out_h
 + 1);

74 
dw
 = 
	`ønd
()%(
l
.
w
 -Ü.
out_w
 + 1);

75 
sˇÀ
 = 2;

76 
å™s
 = -1;

77 if(
l
.
nﬂdju°
){

78 
sˇÀ
 = 1;

79 
å™s
 = 0;

81 if(!
√t
.
åaö
){

82 
Êù
 = 0;

83 
dh
 = (
l
.
h
 -Ü.
out_h
)/2;

84 
dw
 = (
l
.
w
 -Ü.
out_w
)/2;

86 
b
 = 0; b < 
l
.
b©ch
; ++b){

87 
c
 = 0; c < 
l
.c; ++c){

88 
i
 = 0; i < 
l
.
out_h
; ++i){

89 
j
 = 0; j < 
l
.
out_w
; ++j){

90 if(
Êù
){

91 
cﬁ
 = 
l
.
w
 - 
dw
 - 
j
 - 1;

93 
cﬁ
 = 
j
 + 
dw
;

95 
row
 = 
i
 + 
dh
;

96 
ödex
 = 
cﬁ
+
l
.
w
*(
row
+l.
h
*(
c
 +Ü.c*
b
));

97 
l
.
ouçut
[
cou¡
++] = 
√t
.
öput
[
ödex
]*
sˇÀ
 + 
å™s
;

102 
	}
}

	@src/crop_layer.h

1 #i‚de‡
CROP_LAYER_H


2 
	#CROP_LAYER_H


	)

4 
	~"image.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
	t¸›_œyî
;

10 
image
 
gë_¸›_image
(
¸›_œyî
 
l
);

11 
¸›_œyî
 
make_¸›_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
¸›_height
, 
¸›_width
, 
Êù
, 
™gÀ
, 
ßtuøti⁄
, 
exposuª
);

12 
f‹w¨d_¸›_œyî
(c⁄° 
¸›_œyî
 
l
, 
√tw‹k
 
√t
);

13 
ªsize_¸›_œyî
(
œyî
 *
l
, 
w
, 
h
);

15 #ifde‡
GPU


16 
f‹w¨d_¸›_œyî_gpu
(
¸›_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/cuda.c

1 
	ggpu_ödex
 = 0;

3 #ifde‡
GPU


5 
	~"cuda.h
"

6 
	~"utûs.h
"

7 
	~"bœs.h
"

8 
	~<as£π.h
>

9 
	~<°dlib.h
>

10 
	~<time.h
>

12 
	$cuda_£t_devi˚
(
n
)

14 
gpu_ödex
 = 
n
;

15 
cudaEº‹_t
 
°©us
 = 
	`cudaSëDevi˚
(
n
);

16 
	`check_îr‹
(
°©us
);

17 
	}
}

19 
	$cuda_gë_devi˚
()

21 
n
 = 0;

22 
cudaEº‹_t
 
°©us
 = 
	`cudaGëDevi˚
(&
n
);

23 
	`check_îr‹
(
°©us
);

24  
n
;

25 
	}
}

27 
	$check_îr‹
(
cudaEº‹_t
 
°©us
)

30 
cudaEº‹_t
 
°©us2
 = 
	`cudaGëLa°Eº‹
();

31 i‡(
°©us
 !
cudaSuc˚ss
)

33 c⁄° *
s
 = 
	`cudaGëEº‹Såög
(
°©us
);

34 
buf„r
[256];

35 
	`¥ötf
("CUDA Eº‹: %s\n", 
s
);

36 
	`as£π
(0);

37 
	`¢¥ötf
(
buf„r
, 256, "CUDA Eº‹: %s", 
s
);

38 
	`îr‹
(
buf„r
);

40 i‡(
°©us2
 !
cudaSuc˚ss
)

42 c⁄° *
s
 = 
	`cudaGëEº‹Såög
(
°©us
);

43 
buf„r
[256];

44 
	`¥ötf
("CUDA Eº‹ Pªv: %s\n", 
s
);

45 
	`as£π
(0);

46 
	`¢¥ötf
(
buf„r
, 256, "CUDA Eº‹ Pªv: %s", 
s
);

47 
	`îr‹
(
buf„r
);

49 
	}
}

51 
dim3
 
	$cuda_gridsize
(
size_t
 
n
){

52 
size_t
 
k
 = (
n
-1Ë/ 
BLOCK
 + 1;

53 
size_t
 
x
 = 
k
;

54 
size_t
 
y
 = 1;

55 if(
x
 > 65535){

56 
x
 = 
	`˚û
(
	`sqπ
(
k
));

57 
y
 = (
n
-1)/(
x
*
BLOCK
) + 1;

59 
dim3
 
d
 = {
x
, 
y
, 1};

61  
d
;

62 
	}
}

64 #ifde‡
CUDNN


65 
cud¬H™dÀ_t
 
	$cud¬_h™dÀ
()

67 
öô
[16] = {0};

68 
cud¬H™dÀ_t
 
h™dÀ
[16];

69 
i
 = 
	`cuda_gë_devi˚
();

70 if(!
öô
[
i
]) {

71 
	`cud¬Cª©e
(&
h™dÀ
[
i
]);

72 
öô
[
i
] = 1;

74  
h™dÀ
[
i
];

75 
	}
}

78 
cubœsH™dÀ_t
 
	$bœs_h™dÀ
()

80 
öô
[16] = {0};

81 
cubœsH™dÀ_t
 
h™dÀ
[16];

82 
i
 = 
	`cuda_gë_devi˚
();

83 if(!
öô
[
i
]) {

84 
	`cubœsCª©e
(&
h™dÀ
[
i
]);

85 
öô
[
i
] = 1;

87  
h™dÀ
[
i
];

88 
	}
}

90 *
	$cuda_make_¨øy
(*
x
, 
size_t
 
n
)

92 *
x_gpu
;

93 
size_t
 
size
 = ()*
n
;

94 
cudaEº‹_t
 
°©us
 = 
	`cudaMÆloc
((**)&
x_gpu
, 
size
);

95 
	`check_îr‹
(
°©us
);

96 if(
x
){

97 
°©us
 = 
	`cudaMem˝y
(
x_gpu
, 
x
, 
size
, 
cudaMem˝yHo°ToDevi˚
);

98 
	`check_îr‹
(
°©us
);

100 
	`fûl_gpu
(
n
, 0, 
x_gpu
, 1);

102 if(!
x_gpu
Ë
	`îr‹
("Cuda malloc failed\n");

103  
x_gpu
;

104 
	}
}

106 
	$cuda_øndom
(*
x_gpu
, 
size_t
 
n
)

108 
cuøndGíî©‹_t
 
gí
[16];

109 
öô
[16] = {0};

110 
i
 = 
	`cuda_gë_devi˚
();

111 if(!
öô
[
i
]){

112 
	`cuøndCª©eGíî©‹
(&
gí
[
i
], 
CURAND_RNG_PSEUDO_DEFAULT
);

113 
	`cuøndSëP£udoR™domGíî©‹Sìd
(
gí
[
i
], 
	`time
(0));

114 
öô
[
i
] = 1;

116 
	`cuøndGíî©eUnif‹m
(
gí
[
i
], 
x_gpu
, 
n
);

117 
	`check_îr‹
(
	`cudaPìkAtLa°Eº‹
());

118 
	}
}

120 
	$cuda_com∑ª
(*
x_gpu
, *
x
, 
size_t
 
n
, *
s
)

122 *
tmp
 = 
	`ˇŒoc
(
n
, ());

123 
	`cuda_puŒ_¨øy
(
x_gpu
, 
tmp
, 
n
);

126 
	`axpy_˝u
(
n
, -1, 
x
, 1, 
tmp
, 1);

127 
îr
 = 
	`dŸ_˝u
(
n
, 
tmp
, 1,Åmp, 1);

128 
	`¥ötf
("Eº‹ %s: %f\n", 
s
, 
	`sqπ
(
îr
/
n
));

129 
	`‰ì
(
tmp
);

130  
îr
;

131 
	}
}

133 *
	$cuda_make_öt_¨øy
(*
x
, 
size_t
 
n
)

135 *
x_gpu
;

136 
size_t
 
size
 = ()*
n
;

137 
cudaEº‹_t
 
°©us
 = 
	`cudaMÆloc
((**)&
x_gpu
, 
size
);

138 
	`check_îr‹
(
°©us
);

139 if(
x
){

140 
°©us
 = 
	`cudaMem˝y
(
x_gpu
, 
x
, 
size
, 
cudaMem˝yHo°ToDevi˚
);

141 
	`check_îr‹
(
°©us
);

143 if(!
x_gpu
Ë
	`îr‹
("Cuda malloc failed\n");

144  
x_gpu
;

145 
	}
}

147 
	$cuda_‰ì
(*
x_gpu
)

149 
cudaEº‹_t
 
°©us
 = 
	`cudaFªe
(
x_gpu
);

150 
	`check_îr‹
(
°©us
);

151 
	}
}

153 
	$cuda_push_¨øy
(*
x_gpu
, *
x
, 
size_t
 
n
)

155 
size_t
 
size
 = ()*
n
;

156 
cudaEº‹_t
 
°©us
 = 
	`cudaMem˝y
(
x_gpu
, 
x
, 
size
, 
cudaMem˝yHo°ToDevi˚
);

157 
	`check_îr‹
(
°©us
);

158 
	}
}

160 
	$cuda_puŒ_¨øy
(*
x_gpu
, *
x
, 
size_t
 
n
)

162 
size_t
 
size
 = ()*
n
;

163 
cudaEº‹_t
 
°©us
 = 
	`cudaMem˝y
(
x
, 
x_gpu
, 
size
, 
cudaMem˝yDevi˚ToHo°
);

164 
	`check_îr‹
(
°©us
);

165 
	}
}

167 
	$cuda_mag_¨øy
(*
x_gpu
, 
size_t
 
n
)

169 *
ãmp
 = 
	`ˇŒoc
(
n
, ());

170 
	`cuda_puŒ_¨øy
(
x_gpu
, 
ãmp
, 
n
);

171 
m
 = 
	`mag_¨øy
(
ãmp
, 
n
);

172 
	`‰ì
(
ãmp
);

173  
m
;

174 
	}
}

	@src/cuda.h

1 #i‚de‡
CUDA_H


2 
	#CUDA_H


	)

4 
	~"d¨k√t.h
"

6 #ifde‡
GPU


8 
check_îr‹
(
cudaEº‹_t
 
°©us
);

9 
cubœsH™dÀ_t
 
bœs_h™dÀ
();

10 *
cuda_make_öt_¨øy
(*
x
, 
size_t
 
n
);

11 
cuda_øndom
(*
x_gpu
, 
size_t
 
n
);

12 
cuda_com∑ª
(*
x_gpu
, *
x
, 
size_t
 
n
, *
s
);

13 
dim3
 
cuda_gridsize
(
size_t
 
n
);

15 #ifde‡
CUDNN


16 
cud¬H™dÀ_t
 
cud¬_h™dÀ
();

	@src/data.c

1 
	~"d©a.h
"

2 
	~"utûs.h
"

3 
	~"image.h
"

4 
	~"cuda.h
"

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
±hªad_muãx_t
 
	gmuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

12 
li°
 *
	$gë_∑ths
(*
fûíame
)

14 *
∑th
;

15 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

16 if(!
fûe
Ë
	`fûe_îr‹
(
fûíame
);

17 
li°
 *
löes
 = 
	`make_li°
();

18 (
∑th
=
	`fgël
(
fûe
))){

19 
	`li°_ö£π
(
löes
, 
∑th
);

21 
	`f˛o£
(
fûe
);

22  
löes
;

23 
	}
}

42 **
	$gë_øndom_∑ths
(**
∑ths
, 
n
, 
m
)

44 **
øndom_∑ths
 = 
	`ˇŒoc
(
n
, (*));

45 
i
;

46 
	`±hªad_muãx_lock
(&
muãx
);

47 
i
 = 0; i < 
n
; ++i){

48 
ödex
 = 
	`ønd
()%
m
;

49 
øndom_∑ths
[
i
] = 
∑ths
[
ödex
];

52 
	`±hªad_muãx_u∆ock
(&
muãx
);

53  
øndom_∑ths
;

54 
	}
}

56 **
	$föd_ª∂a˚_∑ths
(**
∑ths
, 
n
, *
föd
, *
ª∂a˚
)

58 **
ª∂a˚_∑ths
 = 
	`ˇŒoc
(
n
, (*));

59 
i
;

60 
i
 = 0; i < 
n
; ++i){

61 
ª∂a˚d
[4096];

62 
	`föd_ª∂a˚
(
∑ths
[
i
], 
föd
, 
ª∂a˚
, 
ª∂a˚d
);

63 
ª∂a˚_∑ths
[
i
] = 
	`c›y_°rög
(
ª∂a˚d
);

65  
ª∂a˚_∑ths
;

66 
	}
}

68 
m©rix
 
	$lﬂd_image_∑ths_gøy
(**
∑ths
, 
n
, 
w
, 
h
)

70 
i
;

71 
m©rix
 
X
;

72 
X
.
rows
 = 
n
;

73 
X
.
vÆs
 = 
	`ˇŒoc
(X.
rows
, (*));

74 
X
.
cﬁs
 = 0;

76 
i
 = 0; i < 
n
; ++i){

77 
image
 
im
 = 
	`lﬂd_image
(
∑ths
[
i
], 
w
, 
h
, 3);

79 
image
 
gøy
 = 
	`gøysˇÀ_image
(
im
);

80 
	`‰ì_image
(
im
);

81 
im
 = 
gøy
;

83 
X
.
vÆs
[
i
] = 
im
.
d©a
;

84 
X
.
cﬁs
 = 
im
.
h
*im.
w
*im.
c
;

86  
X
;

87 
	}
}

89 
m©rix
 
	$lﬂd_image_∑ths
(**
∑ths
, 
n
, 
w
, 
h
)

91 
i
;

92 
m©rix
 
X
;

93 
X
.
rows
 = 
n
;

94 
X
.
vÆs
 = 
	`ˇŒoc
(X.
rows
, (*));

95 
X
.
cﬁs
 = 0;

97 
i
 = 0; i < 
n
; ++i){

98 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 
w
, 
h
);

99 
X
.
vÆs
[
i
] = 
im
.
d©a
;

100 
X
.
cﬁs
 = 
im
.
h
*im.
w
*im.
c
;

102  
X
;

103 
	}
}

105 
m©rix
 
	$lﬂd_image_augmít_∑ths
(**
∑ths
, 
n
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
˚¡î
)

107 
i
;

108 
m©rix
 
X
;

109 
X
.
rows
 = 
n
;

110 
X
.
vÆs
 = 
	`ˇŒoc
(X.
rows
, (*));

111 
X
.
cﬁs
 = 0;

113 
i
 = 0; i < 
n
; ++i){

114 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

115 
image
 
¸›
;

116 if(
˚¡î
){

117 
¸›
 = 
	`˚¡î_¸›_image
(
im
, 
size
, size);

119 
¸›
 = 
	`øndom_augmít_image
(
im
, 
™gÀ
, 
a•e˘
, 
mö
, 
max
, 
size
, size);

121 
Êù
 = 
	`ønd
()%2;

122 i‡(
Êù
Ë
	`Êù_image
(
¸›
);

123 
	`øndom_di°‹t_image
(
¸›
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

130 
	`‰ì_image
(
im
);

131 
X
.
vÆs
[
i
] = 
¸›
.
d©a
;

132 
X
.
cﬁs
 = 
¸›
.
h
*¸›.
w
*¸›.
c
;

134  
X
;

135 
	}
}

138 
box_œbñ
 *
	$ªad_boxes
(*
fûíame
, *
n
)

140 
box_œbñ
 *
boxes
 = 
	`ˇŒoc
(1, (box_label));

141 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

142 if(!
fûe
Ë
	`fûe_îr‹
(
fûíame
);

143 
x
, 
y
, 
h
, 
w
;

144 
id
;

145 
cou¡
 = 0;

146 
	`fsˇnf
(
fûe
, "%d %‡%‡%‡%f", &
id
, &
x
, &
y
, &
w
, &
h
) == 5){

147 
boxes
 = 
	`ªÆloc
(boxes, (
cou¡
+1)*(
box_œbñ
));

148 
boxes
[
cou¡
].
id
 = id;

149 
boxes
[
cou¡
].
x
 = x;

150 
boxes
[
cou¡
].
y
 = y;

151 
boxes
[
cou¡
].
h
 = h;

152 
boxes
[
cou¡
].
w
 = w;

153 
boxes
[
cou¡
].
À·
 = 
x
 - 
w
/2;

154 
boxes
[
cou¡
].
right
 = 
x
 + 
w
/2;

155 
boxes
[
cou¡
].
t›
 = 
y
 - 
h
/2;

156 
boxes
[
cou¡
].
bŸtom
 = 
y
 + 
h
/2;

157 ++
cou¡
;

159 
	`f˛o£
(
fûe
);

160 *
n
 = 
cou¡
;

161  
boxes
;

162 
	}
}

164 
	$øndomize_boxes
(
box_œbñ
 *
b
, 
n
)

166 
i
;

167 
i
 = 0; i < 
n
; ++i){

168 
box_œbñ
 
sw≠
 = 
b
[
i
];

169 
ödex
 = 
	`ønd
()%
n
;

170 
b
[
i
] = b[
ödex
];

171 
b
[
ödex
] = 
sw≠
;

173 
	}
}

175 
	$c‹ª˘_boxes
(
box_œbñ
 *
boxes
, 
n
, 
dx
, 
dy
, 
sx
, 
sy
, 
Êù
)

177 
i
;

178 
i
 = 0; i < 
n
; ++i){

179 if(
boxes
[
i
].
x
 =0 && boxes[i].
y
 == 0) {

180 
boxes
[
i
].
x
 = 999999;

181 
boxes
[
i
].
y
 = 999999;

182 
boxes
[
i
].
w
 = 999999;

183 
boxes
[
i
].
h
 = 999999;

186 
boxes
[
i
].
À·
 = boxes[i].À· * 
sx
 - 
dx
;

187 
boxes
[
i
].
right
 = boxes[i].righà* 
sx
 - 
dx
;

188 
boxes
[
i
].
t›
 = boxes[i].t› * 
sy
 - 
dy
;

189 
boxes
[
i
].
bŸtom
 = boxes[i].bŸtom* 
sy
 - 
dy
;

191 if(
Êù
){

192 
sw≠
 = 
boxes
[
i
].
À·
;

193 
boxes
[
i
].
À·
 = 1. - boxes[i].
right
;

194 
boxes
[
i
].
right
 = 1. - 
sw≠
;

197 
boxes
[
i
].
À·
 = 
	`c⁄°øö
(0, 1, boxes[i].left);

198 
boxes
[
i
].
right
 = 
	`c⁄°øö
(0, 1, boxes[i].right);

199 
boxes
[
i
].
t›
 = 
	`c⁄°øö
(0, 1, boxes[i].top);

200 
boxes
[
i
].
bŸtom
 = 
	`c⁄°øö
(0, 1, boxes[i].bottom);

202 
boxes
[
i
].
x
 = (boxes[i].
À·
+boxes[i].
right
)/2;

203 
boxes
[
i
].
y
 = (boxes[i].
t›
+boxes[i].
bŸtom
)/2;

204 
boxes
[
i
].
w
 = (boxes[i].
right
 - boxes[i].
À·
);

205 
boxes
[
i
].
h
 = (boxes[i].
bŸtom
 - boxes[i].
t›
);

207 
boxes
[
i
].
w
 = 
	`c⁄°øö
(0, 1, boxes[i].w);

208 
boxes
[
i
].
h
 = 
	`c⁄°øö
(0, 1, boxes[i].h);

210 
	}
}

212 
	$fûl_åuth_swag
(*
∑th
, *
åuth
, 
˛as£s
, 
Êù
, 
dx
, 
dy
, 
sx
, 
sy
)

214 
œbñ∑th
[4096];

215 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

216 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

217 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

218 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPG", ".txt",Üabelpath);

219 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

221 
cou¡
 = 0;

222 
box_œbñ
 *
boxes
 = 
	`ªad_boxes
(
œbñ∑th
, &
cou¡
);

223 
	`øndomize_boxes
(
boxes
, 
cou¡
);

224 
	`c‹ª˘_boxes
(
boxes
, 
cou¡
, 
dx
, 
dy
, 
sx
, 
sy
, 
Êù
);

225 
x
,
y
,
w
,
h
;

226 
id
;

227 
i
;

229 
i
 = 0; i < 
cou¡
 && i < 30; ++i) {

230 
x
 = 
boxes
[
i
].x;

231 
y
 = 
boxes
[
i
].y;

232 
w
 = 
boxes
[
i
].w;

233 
h
 = 
boxes
[
i
].h;

234 
id
 = 
boxes
[
i
].id;

236 i‡(
w
 < .0 || 
h
 < .0) ;

238 
ödex
 = (4+
˛as£s
Ë* 
i
;

240 
åuth
[
ödex
++] = 
x
;

241 
åuth
[
ödex
++] = 
y
;

242 
åuth
[
ödex
++] = 
w
;

243 
åuth
[
ödex
++] = 
h
;

245 i‡(
id
 < 
˛as£s
Ë
åuth
[
ödex
+id] = 1;

247 
	`‰ì
(
boxes
);

248 
	}
}

250 
	$fûl_åuth_ªgi⁄
(*
∑th
, *
åuth
, 
˛as£s
, 
num_boxes
, 
Êù
, 
dx
, 
dy
, 
sx
, 
sy
)

252 
œbñ∑th
[4096];

253 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

254 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

256 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

257 
	`föd_ª∂a˚
(
œbñ∑th
, ".png", ".txt",Üabelpath);

258 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPG", ".txt",Üabelpath);

259 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

260 
cou¡
 = 0;

261 
box_œbñ
 *
boxes
 = 
	`ªad_boxes
(
œbñ∑th
, &
cou¡
);

262 
	`øndomize_boxes
(
boxes
, 
cou¡
);

263 
	`c‹ª˘_boxes
(
boxes
, 
cou¡
, 
dx
, 
dy
, 
sx
, 
sy
, 
Êù
);

264 
x
,
y
,
w
,
h
;

265 
id
;

266 
i
;

268 
i
 = 0; i < 
cou¡
; ++i) {

269 
x
 = 
boxes
[
i
].x;

270 
y
 = 
boxes
[
i
].y;

271 
w
 = 
boxes
[
i
].w;

272 
h
 = 
boxes
[
i
].h;

273 
id
 = 
boxes
[
i
].id;

275 i‡(
w
 < .005 || 
h
 < .005) ;

277 
cﬁ
 = ()(
x
*
num_boxes
);

278 
row
 = ()(
y
*
num_boxes
);

280 
x
 = x*
num_boxes
 - 
cﬁ
;

281 
y
 = y*
num_boxes
 - 
row
;

283 
ödex
 = (
cﬁ
+
row
*
num_boxes
)*(5+
˛as£s
);

284 i‡(
åuth
[
ödex
]) ;

285 
åuth
[
ödex
++] = 1;

287 i‡(
id
 < 
˛as£s
Ë
åuth
[
ödex
+id] = 1;

288 
ödex
 +
˛as£s
;

290 
åuth
[
ödex
++] = 
x
;

291 
åuth
[
ödex
++] = 
y
;

292 
åuth
[
ödex
++] = 
w
;

293 
åuth
[
ödex
++] = 
h
;

295 
	`‰ì
(
boxes
);

296 
	}
}

298 
	$fûl_åuth_dëe˘i⁄
(*
∑th
, 
num_boxes
, *
åuth
, 
˛as£s
, 
Êù
, 
dx
, 
dy
, 
sx
, 
sy
)

300 
œbñ∑th
[4096];

301 
	`föd_ª∂a˚
(
∑th
, "images", "œbñs", 
œbñ∑th
);

302 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "labels",Üabelpath);

304 
	`föd_ª∂a˚
(
œbñ∑th
, "raw", "labels",Üabelpath);

305 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

306 
	`föd_ª∂a˚
(
œbñ∑th
, ".png", ".txt",Üabelpath);

307 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPG", ".txt",Üabelpath);

308 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

309 
cou¡
 = 0;

310 
box_œbñ
 *
boxes
 = 
	`ªad_boxes
(
œbñ∑th
, &
cou¡
);

311 
	`øndomize_boxes
(
boxes
, 
cou¡
);

312 
	`c‹ª˘_boxes
(
boxes
, 
cou¡
, 
dx
, 
dy
, 
sx
, 
sy
, 
Êù
);

313 if(
cou¡
 > 
num_boxes
) count =Çum_boxes;

314 
x
,
y
,
w
,
h
;

315 
id
;

316 
i
;

318 
i
 = 0; i < 
cou¡
; ++i) {

319 
x
 = 
boxes
[
i
].x;

320 
y
 = 
boxes
[
i
].y;

321 
w
 = 
boxes
[
i
].w;

322 
h
 = 
boxes
[
i
].h;

323 
id
 = 
boxes
[
i
].id;

325 i‡((
w
 < .001 || 
h
 < .001)) ;

327 
åuth
[
i
*5+0] = 
x
;

328 
åuth
[
i
*5+1] = 
y
;

329 
åuth
[
i
*5+2] = 
w
;

330 
åuth
[
i
*5+3] = 
h
;

331 
åuth
[
i
*5+4] = 
id
;

333 
	`‰ì
(
boxes
);

334 
	}
}

336 
	#NUMCHARS
 37

	)

338 
	$¥öt_Àâîs
(*
¥ed
, 
n
)

340 
i
;

341 
i
 = 0; i < 
n
; ++i){

342 
ödex
 = 
	`max_ödex
(
¥ed
+
i
*
NUMCHARS
, NUMCHARS);

343 
	`¥ötf
("%c", 
	`öt_to_Æph™um
(
ödex
));

345 
	`¥ötf
("\n");

346 
	}
}

348 
	$fûl_åuth_ˇ±cha
(*
∑th
, 
n
, *
åuth
)

350 *
begö
 = 
	`°ºchr
(
∑th
, '/');

351 ++
begö
;

352 
i
;

353 
i
 = 0; i < 
	`°æí
(
begö
Ë&& i < 
n
 && begin[i] != '.'; ++i){

354 
ödex
 = 
	`Æph™um_to_öt
(
begö
[
i
]);

355 if(
ödex
 > 35Ë
	`¥ötf
("Bad %c\n", 
begö
[
i
]);

356 
åuth
[
i
*
NUMCHARS
+
ödex
] = 1;

358 ;
i
 < 
n
; ++i){

359 
åuth
[
i
*
NUMCHARS
 + NUMCHARS-1] = 1;

361 
	}
}

363 
d©a
 
	$lﬂd_d©a_ˇ±cha
(**
∑ths
, 
n
, 
m
, 
k
, 
w
, 
h
)

365 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

366 
d©a
 
d
 = {0};

367 
d
.
shÆlow
 = 0;

368 
d
.
X
 = 
	`lﬂd_image_∑ths
(
∑ths
, 
n
, 
w
, 
h
);

369 
d
.
y
 = 
	`make_m©rix
(
n
, 
k
*
NUMCHARS
);

370 
i
;

371 
i
 = 0; i < 
n
; ++i){

372 
	`fûl_åuth_ˇ±cha
(
∑ths
[
i
], 
k
, 
d
.
y
.
vÆs
[i]);

374 if(
m
Ë
	`‰ì
(
∑ths
);

375  
d
;

376 
	}
}

378 
d©a
 
	$lﬂd_d©a_ˇ±cha_ícode
(**
∑ths
, 
n
, 
m
, 
w
, 
h
)

380 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

381 
d©a
 
d
 = {0};

382 
d
.
shÆlow
 = 0;

383 
d
.
X
 = 
	`lﬂd_image_∑ths
(
∑ths
, 
n
, 
w
, 
h
);

384 
d
.
X
.
cﬁs
 = 17100;

385 
d
.
y
 = d.
X
;

386 if(
m
Ë
	`‰ì
(
∑ths
);

387  
d
;

388 
	}
}

390 
	$fûl_åuth
(*
∑th
, **
œbñs
, 
k
, *
åuth
)

392 
i
;

393 
	`mem£t
(
åuth
, 0, 
k
*());

394 
cou¡
 = 0;

395 
i
 = 0; i < 
k
; ++i){

396 if(
	`°r°r
(
∑th
, 
œbñs
[
i
])){

397 
åuth
[
i
] = 1;

398 ++
cou¡
;

401 if(
cou¡
 !1 && (
k
 !1 || cou¡ !0)Ë
	`¥ötf
("Toÿm™y o∏toÿ„wÜabñs: %d, %s\n", cou¡, 
∑th
);

402 
	}
}

404 
	$fûl_hõørchy
(*
åuth
, 
k
, 
åì
 *
hõørchy
)

406 
j
;

407 
j
 = 0; j < 
k
; ++j){

408 if(
åuth
[
j
]){

409 
∑ª¡
 = 
hõørchy
->∑ª¡[
j
];

410 
∑ª¡
 >= 0){

411 
åuth
[
∑ª¡
] = 1;

412 
∑ª¡
 = 
hõørchy
->parent[parent];

416 
i
;

417 
cou¡
 = 0;

418 
j
 = 0; j < 
hõørchy
->
groups
; ++j){

420 
mask
 = 1;

421 
i
 = 0; i < 
hõørchy
->
group_size
[
j
]; ++i){

422 if(
åuth
[
cou¡
 + 
i
]){

423 
mask
 = 0;

427 i‡(
mask
) {

428 
i
 = 0; i < 
hõørchy
->
group_size
[
j
]; ++i){

429 
åuth
[
cou¡
 + 
i
] = 
SECRET_NUM
;

432 
cou¡
 +
hõørchy
->
group_size
[
j
];

434 
	}
}

436 
m©rix
 
	$lﬂd_ªgªssi⁄_œbñs_∑ths
(**
∑ths
, 
n
)

438 
m©rix
 
y
 = 
	`make_m©rix
(
n
, 1);

439 
i
;

440 
i
 = 0; i < 
n
; ++i){

441 
œbñ∑th
[4096];

442 
	`föd_ª∂a˚
(
∑ths
[
i
], "images", "èrgës", 
œbñ∑th
);

443 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "targets",Üabelpath);

444 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

445 
	`föd_ª∂a˚
(
œbñ∑th
, ".png", ".txt",Üabelpath);

447 
FILE
 *
fûe
 = 
	`f›í
(
œbñ∑th
, "r");

448 
	`fsˇnf
(
fûe
, "%f", &(
y
.
vÆs
[
i
][0]));

449 
	`f˛o£
(
fûe
);

451  
y
;

452 
	}
}

454 
m©rix
 
	$lﬂd_œbñs_∑ths
(**
∑ths
, 
n
, **
œbñs
, 
k
, 
åì
 *
hõørchy
)

456 
m©rix
 
y
 = 
	`make_m©rix
(
n
, 
k
);

457 
i
;

458 
i
 = 0; i < 
n
 && 
œbñs
; ++i){

459 
	`fûl_åuth
(
∑ths
[
i
], 
œbñs
, 
k
, 
y
.
vÆs
[i]);

460 if(
hõørchy
){

461 
	`fûl_hõørchy
(
y
.
vÆs
[
i
], 
k
, 
hõørchy
);

464  
y
;

465 
	}
}

467 
m©rix
 
	$lﬂd_ègs_∑ths
(**
∑ths
, 
n
, 
k
)

469 
m©rix
 
y
 = 
	`make_m©rix
(
n
, 
k
);

470 
i
;

471 
cou¡
 = 0;

472 
i
 = 0; i < 
n
; ++i){

473 
œbñ
[4096];

474 
	`föd_ª∂a˚
(
∑ths
[
i
], "imgs", "œbñs", 
œbñ
);

475 
	`föd_ª∂a˚
(
œbñ
, "_iconl.jpeg", ".txt",Üabel);

476 
FILE
 *
fûe
 = 
	`f›í
(
œbñ
, "r");

477 if(!
fûe
){

478 
	`föd_ª∂a˚
(
œbñ
, "labels", "labels2",Üabel);

479 
fûe
 = 
	`f›í
(
œbñ
, "r");

480 if(!
fûe
) ;

482 ++
cou¡
;

483 
èg
;

484 
	`fsˇnf
(
fûe
, "%d", &
èg
) == 1){

485 if(
èg
 < 
k
){

486 
y
.
vÆs
[
i
][
èg
] = 1;

489 
	`f˛o£
(
fûe
);

491 
	`¥ötf
("%d/%d\n", 
cou¡
, 
n
);

492  
y
;

493 
	}
}

495 **
	$gë_œbñs
(*
fûíame
)

497 
li°
 *
∂i°
 = 
	`gë_∑ths
(
fûíame
);

498 **
œbñs
 = (**)
	`li°_to_¨øy
(
∂i°
);

499 
	`‰ì_li°
(
∂i°
);

500  
œbñs
;

501 
	}
}

503 
	$‰ì_d©a
(
d©a
 
d
)

505 if(!
d
.
shÆlow
){

506 
	`‰ì_m©rix
(
d
.
X
);

507 
	`‰ì_m©rix
(
d
.
y
);

509 
	`‰ì
(
d
.
X
.
vÆs
);

510 
	`‰ì
(
d
.
y
.
vÆs
);

512 
	}
}

514 
	$lﬂd_æe
(
image
 
im
, *
æe
, 
n
)

516 
cou¡
 = 0;

517 
cuº
 = 0;

518 
i
,
j
;

519 
i
 = 0; i < 
n
; ++i){

520 
j
 = 0; j < 
æe
[
i
]; ++j){

521 
im
.
d©a
[
cou¡
++] = 
cuº
;

523 
cuº
 = 1 - curr;

525 ; 
cou¡
 < 
im
.
h
*im.
w
*im.
c
; ++count){

526 
im
.
d©a
[
cou¡
] = 
cuº
;

528 
	}
}

530 
	$‹_image
(
image
 
§c
, imagê
de°
, 
c
)

532 
i
;

533 
i
 = 0; i < 
§c
.
w
*§c.
h
; ++i){

534 if(
§c
.
d©a
[
i
]Ë
de°
.d©a[de°.
w
*de°.
h
*
c
 + i] = 1;

536 
	}
}

538 
	$ex˛usive_image
(
image
 
§c
)

540 
k
, 
j
, 
i
;

541 
s
 = 
§c
.
w
*§c.
h
;

542 
k
 = 0; k < 
§c
.
c
-1; ++k){

543 
i
 = 0; i < 
s
; ++i){

544 i‡(
§c
.
d©a
[
k
*
s
 + 
i
]){

545 
j
 = 
k
+1; j < 
§c
.
c
; ++j){

546 
§c
.
d©a
[
j
*
s
 + 
i
] = 0;

551 
	}
}

553 
image
 
	$gë_£gmíèti⁄_image
(*
∑th
, 
w
, 
h
, 
˛as£s
)

555 
œbñ∑th
[4096];

556 
	`föd_ª∂a˚
(
∑th
, "images", "mask", 
œbñ∑th
);

557 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "mask",Üabelpath);

558 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

559 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPG", ".txt",Üabelpath);

560 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

561 
image
 
mask
 = 
	`make_image
(
w
, 
h
, 
˛as£s
);

562 
FILE
 *
fûe
 = 
	`f›í
(
œbñ∑th
, "r");

563 if(!
fûe
Ë
	`fûe_îr‹
(
œbñ∑th
);

564 
buff
[32788];

565 
id
;

566 
image
 
∑π
 = 
	`make_image
(
w
, 
h
, 1);

567 
	`fsˇnf
(
fûe
, "%d %s", &
id
, 
buff
) == 2){

568 
n
 = 0;

569 *
æe
 = 
	`ªad_öéi°
(
buff
, &
n
, 0);

570 
	`lﬂd_æe
(
∑π
, 
æe
, 
n
);

571 
	`‹_image
(
∑π
, 
mask
, 
id
);

572 
	`‰ì
(
æe
);

575 
	`f˛o£
(
fûe
);

576 
	`‰ì_image
(
∑π
);

577  
mask
;

578 
	}
}

580 
image
 
	$gë_£gmíèti⁄_image2
(*
∑th
, 
w
, 
h
, 
˛as£s
)

582 
œbñ∑th
[4096];

583 
	`föd_ª∂a˚
(
∑th
, "images", "mask", 
œbñ∑th
);

584 
	`föd_ª∂a˚
(
œbñ∑th
, "JPEGImages", "mask",Üabelpath);

585 
	`föd_ª∂a˚
(
œbñ∑th
, ".jpg", ".txt",Üabelpath);

586 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPG", ".txt",Üabelpath);

587 
	`föd_ª∂a˚
(
œbñ∑th
, ".JPEG", ".txt",Üabelpath);

588 
image
 
mask
 = 
	`make_image
(
w
, 
h
, 
˛as£s
+1);

589 
i
;

590 
i
 = 0; i < 
w
*
h
; ++i){

591 
mask
.
d©a
[
w
*
h
*
˛as£s
 + 
i
] = 1;

593 
FILE
 *
fûe
 = 
	`f›í
(
œbñ∑th
, "r");

594 if(!
fûe
Ë
	`fûe_îr‹
(
œbñ∑th
);

595 
buff
[32788];

596 
id
;

597 
image
 
∑π
 = 
	`make_image
(
w
, 
h
, 1);

598 
	`fsˇnf
(
fûe
, "%d %s", &
id
, 
buff
) == 2){

599 
n
 = 0;

600 *
æe
 = 
	`ªad_öéi°
(
buff
, &
n
, 0);

601 
	`lﬂd_æe
(
∑π
, 
æe
, 
n
);

602 
	`‹_image
(
∑π
, 
mask
, 
id
);

603 
i
 = 0; i < 
w
*
h
; ++i){

604 if(
∑π
.
d©a
[
i
]Ë
mask
.d©a[
w
*
h
*
˛as£s
 + i] = 0;

606 
	`‰ì
(
æe
);

609 
	`f˛o£
(
fûe
);

610 
	`‰ì_image
(
∑π
);

611  
mask
;

612 
	}
}

614 
d©a
 
	$lﬂd_d©a_£g
(
n
, **
∑ths
, 
m
, 
w
, 
h
, 
˛as£s
, 
mö
, 
max
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
div
)

616 **
øndom_∑ths
 = 
	`gë_øndom_∑ths
(
∑ths
, 
n
, 
m
);

617 
i
;

618 
d©a
 
d
 = {0};

619 
d
.
shÆlow
 = 0;

621 
d
.
X
.
rows
 = 
n
;

622 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

623 
d
.
X
.
cﬁs
 = 
h
*
w
*3;

626 
d
.
y
.
rows
 = 
n
;

627 
d
.
y
.
cﬁs
 = 
h
*
w
*
˛as£s
/
div
/div;

628 
d
.
y
.
vÆs
 = 
	`ˇŒoc
(d.
X
.
rows
, (*));

630 
i
 = 0; i < 
n
; ++i){

631 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
øndom_∑ths
[
i
], 0, 0);

632 
augmít_¨gs
 
a
 = 
	`øndom_augmít_¨gs
(
‹ig
, 
™gÀ
, 
a•e˘
, 
mö
, 
max
, 
w
, 
h
);

633 
image
 
sized
 = 
	`rŸ©e_¸›_image
(
‹ig
, 
a
.
ød
,á.
sˇÀ
,á.
w
,á.
h
,á.
dx
,á.
dy
,á.
a•e˘
);

635 
Êù
 = 
	`ønd
()%2;

636 if(
Êù
Ë
	`Êù_image
(
sized
);

637 
	`øndom_di°‹t_image
(
sized
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

638 
d
.
X
.
vÆs
[
i
] = 
sized
.
d©a
;

640 
image
 
mask
 = 
	`gë_£gmíèti⁄_image
(
øndom_∑ths
[
i
], 
‹ig
.
w
, orig.
h
, 
˛as£s
);

642 
image
 
sized_m
 = 
	`rŸ©e_¸›_image
(
mask
, 
a
.
ød
,á.
sˇÀ
/
div
,á.
w
/div,á.
h
/div,á.
dx
/div,á.
dy
/div,á.
a•e˘
);

644 if(
Êù
Ë
	`Êù_image
(
sized_m
);

645 
d
.
y
.
vÆs
[
i
] = 
sized_m
.
d©a
;

647 
	`‰ì_image
(
‹ig
);

648 
	`‰ì_image
(
mask
);

658 
	`‰ì
(
øndom_∑ths
);

659  
d
;

660 
	}
}

662 
d©a
 
	$lﬂd_d©a_i£g
(
n
, **
∑ths
, 
m
, 
w
, 
h
, 
˛as£s
, 
mö
, 
max
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
div
)

664 **
øndom_∑ths
 = 
	`gë_øndom_∑ths
(
∑ths
, 
n
, 
m
);

665 
i
;

666 
d©a
 
d
 = {0};

667 
d
.
shÆlow
 = 0;

669 
d
.
X
.
rows
 = 
n
;

670 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

671 
d
.
X
.
cﬁs
 = 
h
*
w
*3;

674 
d
.
y
.
rows
 = 
n
;

675 
d
.
y
.
cﬁs
 = 
h
*
w
*
˛as£s
/
div
/div;

676 
d
.
y
.
vÆs
 = 
	`ˇŒoc
(d.
X
.
rows
, (*));

678 
i
 = 0; i < 
n
; ++i){

679 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
øndom_∑ths
[
i
], 0, 0);

680 
augmít_¨gs
 
a
 = 
	`øndom_augmít_¨gs
(
‹ig
, 
™gÀ
, 
a•e˘
, 
mö
, 
max
, 
w
, 
h
);

681 
a
.
dx
 = 0;

682 
a
.
dy
 = 0;

683 
image
 
sized
 = 
	`rŸ©e_¸›_image
(
‹ig
, 
a
.
ød
,á.
sˇÀ
,á.
w
,á.
h
,á.
dx
,á.
dy
,á.
a•e˘
);

685 
Êù
 = 
	`ønd
()%2;

686 if(
Êù
Ë
	`Êù_image
(
sized
);

687 
	`øndom_di°‹t_image
(
sized
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

688 
d
.
X
.
vÆs
[
i
] = 
sized
.
d©a
;

690 
image
 
mask
 = 
	`gë_£gmíèti⁄_image
(
øndom_∑ths
[
i
], 
‹ig
.
w
, orig.
h
, 
˛as£s
);

692 
image
 
sized_m
 = 
	`rŸ©e_¸›_image
(
mask
, 
a
.
ød
,á.
sˇÀ
/
div
,á.
w
/div,á.
h
/div,á.
dx
,á.
dy
,á.
a•e˘
);

694 if(
Êù
Ë
	`Êù_image
(
sized_m
);

695 
d
.
y
.
vÆs
[
i
] = 
sized_m
.
d©a
;

697 
	`‰ì_image
(
‹ig
);

698 
	`‰ì_image
(
mask
);

708 
	`‰ì
(
øndom_∑ths
);

709  
d
;

710 
	}
}

712 
d©a
 
	$lﬂd_d©a_ªgi⁄
(
n
, **
∑ths
, 
m
, 
w
, 
h
, 
size
, 
˛as£s
, 
jôãr
, 
hue
, 
ßtuøti⁄
, 
exposuª
)

714 **
øndom_∑ths
 = 
	`gë_øndom_∑ths
(
∑ths
, 
n
, 
m
);

715 
i
;

716 
d©a
 
d
 = {0};

717 
d
.
shÆlow
 = 0;

719 
d
.
X
.
rows
 = 
n
;

720 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

721 
d
.
X
.
cﬁs
 = 
h
*
w
*3;

724 
k
 = 
size
*size*(5+
˛as£s
);

725 
d
.
y
 = 
	`make_m©rix
(
n
, 
k
);

726 
i
 = 0; i < 
n
; ++i){

727 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
øndom_∑ths
[
i
], 0, 0);

729 
oh
 = 
‹ig
.
h
;

730 
ow
 = 
‹ig
.
w
;

732 
dw
 = (
ow
*
jôãr
);

733 
dh
 = (
oh
*
jôãr
);

735 
∂e·
 = 
	`ønd_unif‹m
(-
dw
, dw);

736 
¥ight
 = 
	`ønd_unif‹m
(-
dw
, dw);

737 
±›
 = 
	`ønd_unif‹m
(-
dh
, dh);

738 
pbŸ
 = 
	`ønd_unif‹m
(-
dh
, dh);

740 
swidth
 = 
ow
 - 
∂e·
 - 
¥ight
;

741 
sheight
 = 
oh
 - 
±›
 - 
pbŸ
;

743 
sx
 = ()
swidth
 / 
ow
;

744 
sy
 = ()
sheight
 / 
oh
;

746 
Êù
 = 
	`ønd
()%2;

747 
image
 
¸›≥d
 = 
	`¸›_image
(
‹ig
, 
∂e·
, 
±›
, 
swidth
, 
sheight
);

749 
dx
 = (()
∂e·
/
ow
)/
sx
;

750 
dy
 = (()
±›
 /
oh
)/
sy
;

752 
image
 
sized
 = 
	`ªsize_image
(
¸›≥d
, 
w
, 
h
);

753 if(
Êù
Ë
	`Êù_image
(
sized
);

754 
	`øndom_di°‹t_image
(
sized
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

755 
d
.
X
.
vÆs
[
i
] = 
sized
.
d©a
;

757 
	`fûl_åuth_ªgi⁄
(
øndom_∑ths
[
i
], 
d
.
y
.
vÆs
[i], 
˛as£s
, 
size
, 
Êù
, 
dx
, 
dy
, 1./
sx
, 1./
sy
);

759 
	`‰ì_image
(
‹ig
);

760 
	`‰ì_image
(
¸›≥d
);

762 
	`‰ì
(
øndom_∑ths
);

763  
d
;

764 
	}
}

766 
d©a
 
	$lﬂd_d©a_com∑ª
(
n
, **
∑ths
, 
m
, 
˛as£s
, 
w
, 
h
)

768 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 2*
n
, m);

769 
i
,
j
;

770 
d©a
 
d
 = {0};

771 
d
.
shÆlow
 = 0;

773 
d
.
X
.
rows
 = 
n
;

774 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

775 
d
.
X
.
cﬁs
 = 
h
*
w
*6;

777 
k
 = 2*(
˛as£s
);

778 
d
.
y
 = 
	`make_m©rix
(
n
, 
k
);

779 
i
 = 0; i < 
n
; ++i){

780 
image
 
im1
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
*2], 
w
, 
h
);

781 
image
 
im2
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
*2+1], 
w
, 
h
);

783 
d
.
X
.
vÆs
[
i
] = 
	`ˇŒoc
(d.X.
cﬁs
, ());

784 
	`mem˝y
(
d
.
X
.
vÆs
[
i
], 
im1
.
d©a
, 
h
*
w
*3*());

785 
	`mem˝y
(
d
.
X
.
vÆs
[
i
] + 
h
*
w
*3, 
im2
.
d©a
, h*w*3*());

787 
id
;

788 
iou
;

790 
imœbñ1
[4096];

791 
imœbñ2
[4096];

792 
	`föd_ª∂a˚
(
∑ths
[
i
*2], "imgs", "œbñs", 
imœbñ1
);

793 
	`föd_ª∂a˚
(
imœbñ1
, "jpg", "txt", imlabel1);

794 
FILE
 *
Â1
 = 
	`f›í
(
imœbñ1
, "r");

796 
	`fsˇnf
(
Â1
, "%d %f", &
id
, &
iou
) == 2){

797 i‡(
d
.
y
.
vÆs
[
i
][2*
id
] < 
iou
) d.y.vals[i][2*id] = iou;

800 
	`föd_ª∂a˚
(
∑ths
[
i
*2+1], "imgs", "œbñs", 
imœbñ2
);

801 
	`föd_ª∂a˚
(
imœbñ2
, "jpg", "txt", imlabel2);

802 
FILE
 *
Â2
 = 
	`f›í
(
imœbñ2
, "r");

804 
	`fsˇnf
(
Â2
, "%d %f", &
id
, &
iou
) == 2){

805 i‡(
d
.
y
.
vÆs
[
i
][2*
id
 + 1] < 
iou
) d.y.vals[i][2*id + 1] = iou;

808 
j
 = 0; j < 
˛as£s
; ++j){

809 i‡(
d
.
y
.
vÆs
[
i
][2*
j
] > .5 && d.y.vals[i][2*j+1] < .5){

810 
d
.
y
.
vÆs
[
i
][2*
j
] = 1;

811 
d
.
y
.
vÆs
[
i
][2*
j
+1] = 0;

812 } i‡(
d
.
y
.
vÆs
[
i
][2*
j
] < .5 && d.y.vals[i][2*j+1] > .5){

813 
d
.
y
.
vÆs
[
i
][2*
j
] = 0;

814 
d
.
y
.
vÆs
[
i
][2*
j
+1] = 1;

816 
d
.
y
.
vÆs
[
i
][2*
j
] = 
SECRET_NUM
;

817 
d
.
y
.
vÆs
[
i
][2*
j
+1] = 
SECRET_NUM
;

820 
	`f˛o£
(
Â1
);

821 
	`f˛o£
(
Â2
);

823 
	`‰ì_image
(
im1
);

824 
	`‰ì_image
(
im2
);

826 if(
m
Ë
	`‰ì
(
∑ths
);

827  
d
;

828 
	}
}

830 
d©a
 
	$lﬂd_d©a_swag
(**
∑ths
, 
n
, 
˛as£s
, 
jôãr
)

832 
ödex
 = 
	`ønd
()%
n
;

833 *
øndom_∑th
 = 
∑ths
[
ödex
];

835 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
øndom_∑th
, 0, 0);

836 
h
 = 
‹ig
.h;

837 
w
 = 
‹ig
.w;

839 
d©a
 
d
 = {0};

840 
d
.
shÆlow
 = 0;

841 
d
.
w
 = w;

842 
d
.
h
 = h;

844 
d
.
X
.
rows
 = 1;

845 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

846 
d
.
X
.
cﬁs
 = 
h
*
w
*3;

848 
k
 = (4+
˛as£s
)*30;

849 
d
.
y
 = 
	`make_m©rix
(1, 
k
);

851 
dw
 = 
w
*
jôãr
;

852 
dh
 = 
h
*
jôãr
;

854 
∂e·
 = 
	`ønd_unif‹m
(-
dw
, dw);

855 
¥ight
 = 
	`ønd_unif‹m
(-
dw
, dw);

856 
±›
 = 
	`ønd_unif‹m
(-
dh
, dh);

857 
pbŸ
 = 
	`ønd_unif‹m
(-
dh
, dh);

859 
swidth
 = 
w
 - 
∂e·
 - 
¥ight
;

860 
sheight
 = 
h
 - 
±›
 - 
pbŸ
;

862 
sx
 = ()
swidth
 / 
w
;

863 
sy
 = ()
sheight
 / 
h
;

865 
Êù
 = 
	`ønd
()%2;

866 
image
 
¸›≥d
 = 
	`¸›_image
(
‹ig
, 
∂e·
, 
±›
, 
swidth
, 
sheight
);

868 
dx
 = (()
∂e·
/
w
)/
sx
;

869 
dy
 = (()
±›
 /
h
)/
sy
;

871 
image
 
sized
 = 
	`ªsize_image
(
¸›≥d
, 
w
, 
h
);

872 if(
Êù
Ë
	`Êù_image
(
sized
);

873 
d
.
X
.
vÆs
[0] = 
sized
.
d©a
;

875 
	`fûl_åuth_swag
(
øndom_∑th
, 
d
.
y
.
vÆs
[0], 
˛as£s
, 
Êù
, 
dx
, 
dy
, 1./
sx
, 1./
sy
);

877 
	`‰ì_image
(
‹ig
);

878 
	`‰ì_image
(
¸›≥d
);

880  
d
;

881 
	}
}

883 
d©a
 
	$lﬂd_d©a_dëe˘i⁄
(
n
, **
∑ths
, 
m
, 
w
, 
h
, 
boxes
, 
˛as£s
, 
jôãr
, 
hue
, 
ßtuøti⁄
, 
exposuª
)

885 **
øndom_∑ths
 = 
	`gë_øndom_∑ths
(
∑ths
, 
n
, 
m
);

886 
i
;

887 
d©a
 
d
 = {0};

888 
d
.
shÆlow
 = 0;

890 
d
.
X
.
rows
 = 
n
;

891 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(d.X.
rows
, (*));

892 
d
.
X
.
cﬁs
 = 
h
*
w
*3;

894 
d
.
y
 = 
	`make_m©rix
(
n
, 5*
boxes
);

895 
i
 = 0; i < 
n
; ++i){

896 
image
 
‹ig
 = 
	`lﬂd_image_cﬁ‹
(
øndom_∑ths
[
i
], 0, 0);

897 
image
 
sized
 = 
	`make_image
(
w
, 
h
, 
‹ig
.
c
);

898 
	`fûl_image
(
sized
, .5);

900 
dw
 = 
jôãr
 * 
‹ig
.
w
;

901 
dh
 = 
jôãr
 * 
‹ig
.
h
;

903 
√w_¨
 = (
‹ig
.
w
 + 
	`ønd_unif‹m
(-
dw
, dw)Ë/ (‹ig.
h
 +Ñ™d_unif‹m(-
dh
, dh));

904 
sˇÀ
 = 
	`ønd_unif‹m
(.25, 2);

906 
nw
, 
nh
;

908 if(
√w_¨
 < 1){

909 
nh
 = 
sˇÀ
 * 
h
;

910 
nw
 = 
nh
 * 
√w_¨
;

912 
nw
 = 
sˇÀ
 * 
w
;

913 
nh
 = 
nw
 / 
√w_¨
;

916 
dx
 = 
	`ønd_unif‹m
(0, 
w
 - 
nw
);

917 
dy
 = 
	`ønd_unif‹m
(0, 
h
 - 
nh
);

919 
	`∂a˚_image
(
‹ig
, 
nw
, 
nh
, 
dx
, 
dy
, 
sized
);

921 
	`øndom_di°‹t_image
(
sized
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

922 
Êù
 = 
	`ønd
()%2;

923 if(
Êù
Ë
	`Êù_image
(
sized
);

924 
d
.
X
.
vÆs
[
i
] = 
sized
.
d©a
;

927 
	`fûl_åuth_dëe˘i⁄
(
øndom_∑ths
[
i
], 
boxes
, 
d
.
y
.
vÆs
[i], 
˛as£s
, 
Êù
, -
dx
/
w
, -
dy
/
h
, 
nw
/w, 
nh
/h);

929 
	`‰ì_image
(
‹ig
);

931 
	`‰ì
(
øndom_∑ths
);

932  
d
;

933 
	}
}

935 *
	$lﬂd_thªad
(*
±r
)

938 
lﬂd_¨gs
 
a
 = *(lﬂd_¨gs*)
±r
;

939 if(
a
.
exposuª
 == 0)á.exposure = 1;

940 if(
a
.
ßtuøti⁄
 == 0)á.saturation = 1;

941 if(
a
.
a•e˘
 == 0)á.aspect = 1;

943 i‡(
a
.
ty≥
 =
OLD_CLASSIFICATION_DATA
){

944 *
a
.
d
 = 
	`lﬂd_d©a_ﬁd
◊.
∑ths
,á.
n
,á.
m
,á.
œbñs
,á.
˛as£s
,á.
w
,á.
h
);

945 } i‡(
a
.
ty≥
 =
REGRESSION_DATA
){

946 *
a
.
d
 = 
	`lﬂd_d©a_ªgªssi⁄
◊.
∑ths
,á.
n
,á.
m
,á.
mö
,á.
max
,á.
size
,á.
™gÀ
,á.
a•e˘
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
);

947 } i‡(
a
.
ty≥
 =
CLASSIFICATION_DATA
){

948 *
a
.
d
 = 
	`lﬂd_d©a_augmít
◊.
∑ths
,á.
n
,á.
m
,á.
œbñs
,á.
˛as£s
,á.
hõørchy
,á.
mö
,á.
max
,á.
size
,á.
™gÀ
,á.
a•e˘
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
,á.
˚¡î
);

949 } i‡(
a
.
ty≥
 =
SUPER_DATA
){

950 *
a
.
d
 = 
	`lﬂd_d©a_su≥r
◊.
∑ths
,á.
n
,á.
m
,á.
w
,á.
h
,á.
sˇÀ
);

951 } i‡(
a
.
ty≥
 =
WRITING_DATA
){

952 *
a
.
d
 = 
	`lﬂd_d©a_wrôög
◊.
∑ths
,á.
n
,á.
m
,á.
w
,á.
h
,á.
out_w
,á.
out_h
);

953 } i‡(
a
.
ty≥
 =
SEGMENTATION_DATA
){

954 *
a
.
d
 = 
	`lﬂd_d©a_£g
◊.
n
,á.
∑ths
,á.
m
,á.
w
,á.
h
,á.
˛as£s
,á.
mö
,á.
max
,á.
™gÀ
,á.
a•e˘
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
,á.
sˇÀ
);

955 } i‡(
a
.
ty≥
 =
REGION_DATA
){

956 *
a
.
d
 = 
	`lﬂd_d©a_ªgi⁄
◊.
n
,á.
∑ths
,á.
m
,á.
w
,á.
h
,á.
num_boxes
,á.
˛as£s
,á.
jôãr
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
);

957 } i‡(
a
.
ty≥
 =
DETECTION_DATA
){

958 *
a
.
d
 = 
	`lﬂd_d©a_dëe˘i⁄
◊.
n
,á.
∑ths
,á.
m
,á.
w
,á.
h
,á.
num_boxes
,á.
˛as£s
,á.
jôãr
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
);

959 } i‡(
a
.
ty≥
 =
SWAG_DATA
){

960 *
a
.
d
 = 
	`lﬂd_d©a_swag
◊.
∑ths
,á.
n
,á.
˛as£s
,á.
jôãr
);

961 } i‡(
a
.
ty≥
 =
COMPARE_DATA
){

962 *
a
.
d
 = 
	`lﬂd_d©a_com∑ª
◊.
n
,á.
∑ths
,á.
m
,á.
˛as£s
,á.
w
,á.
h
);

963 } i‡(
a
.
ty≥
 =
IMAGE_DATA
){

964 *(
a
.
im
Ë
	`lﬂd_image_cﬁ‹
◊.
∑th
, 0, 0);

965 *(
a
.
ªsized
Ë
	`ªsize_image
(*◊.
im
),á.
w
,á.
h
);

966 } i‡(
a
.
ty≥
 =
LETTERBOX_DATA
){

967 *(
a
.
im
Ë
	`lﬂd_image_cﬁ‹
◊.
∑th
, 0, 0);

968 *(
a
.
ªsized
Ë
	`Àâîbox_image
(*◊.
im
),á.
w
,á.
h
);

969 } i‡(
a
.
ty≥
 =
TAG_DATA
){

970 *
a
.
d
 = 
	`lﬂd_d©a_èg
◊.
∑ths
,á.
n
,á.
m
,á.
˛as£s
,á.
mö
,á.
max
,á.
size
,á.
™gÀ
,á.
a•e˘
,á.
hue
,á.
ßtuøti⁄
,á.
exposuª
);

972 
	`‰ì
(
±r
);

974 
	}
}

976 
±hªad_t
 
	$lﬂd_d©a_ö_thªad
(
lﬂd_¨gs
 
¨gs
)

978 
±hªad_t
 
thªad
;

979 
lﬂd_¨gs
 *
±r
 = 
	`ˇŒoc
(1, (load_args));

980 *
±r
 = 
¨gs
;

981 if(
	`±hªad_¸óã
(&
thªad
, 0, 
lﬂd_thªad
, 
±r
)Ë
	`îr‹
("Thread creation failed");

982  
thªad
;

983 
	}
}

985 *
	$lﬂd_thªads
(*
±r
)

987 
i
;

988 
lﬂd_¨gs
 
¨gs
 = *÷ﬂd_¨g†*)
±r
;

989 i‡(
¨gs
.
thªads
 == 0)árgs.threads = 1;

990 
d©a
 *
out
 = 
¨gs
.
d
;

991 
tŸÆ
 = 
¨gs
.
n
;

992 
	`‰ì
(
±r
);

993 
d©a
 *
buf„rs
 = 
	`ˇŒoc
(
¨gs
.
thªads
, (data));

994 
±hªad_t
 *
thªads
 = 
	`ˇŒoc
(
¨gs
.threads, (pthread_t));

995 
i
 = 0; i < 
¨gs
.
thªads
; ++i){

996 
¨gs
.
d
 = 
buf„rs
 + 
i
;

997 
¨gs
.
n
 = (
i
+1Ë* 
tŸÆ
/¨gs.
thªads
 - i *Åotal/args.threads;

998 
thªads
[
i
] = 
	`lﬂd_d©a_ö_thªad
(
¨gs
);

1000 
i
 = 0; i < 
¨gs
.
thªads
; ++i){

1001 
	`±hªad_joö
(
thªads
[
i
], 0);

1003 *
out
 = 
	`c⁄ˇt_d©as
(
buf„rs
, 
¨gs
.
thªads
);

1004 
out
->
shÆlow
 = 0;

1005 
i
 = 0; i < 
¨gs
.
thªads
; ++i){

1006 
buf„rs
[
i
].
shÆlow
 = 1;

1007 
	`‰ì_d©a
(
buf„rs
[
i
]);

1009 
	`‰ì
(
buf„rs
);

1010 
	`‰ì
(
thªads
);

1012 
	}
}

1014 
	$lﬂd_d©a_blockög
(
lﬂd_¨gs
 
¨gs
)

1016 
lﬂd_¨gs
 *
±r
 = 
	`ˇŒoc
(1, (load_args));

1017 *
±r
 = 
¨gs
;

1018 
	`lﬂd_thªad
(
±r
);

1019 
	}
}

1021 
±hªad_t
 
	$lﬂd_d©a
(
lﬂd_¨gs
 
¨gs
)

1023 
±hªad_t
 
thªad
;

1024 
lﬂd_¨gs
 *
±r
 = 
	`ˇŒoc
(1, (load_args));

1025 *
±r
 = 
¨gs
;

1026 if(
	`±hªad_¸óã
(&
thªad
, 0, 
lﬂd_thªads
, 
±r
)Ë
	`îr‹
("Thread creation failed");

1027  
thªad
;

1028 
	}
}

1030 
d©a
 
	$lﬂd_d©a_wrôög
(**
∑ths
, 
n
, 
m
, 
w
, 
h
, 
out_w
, 
out_h
)

1032 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1033 **
ª∂a˚_∑ths
 = 
	`föd_ª∂a˚_∑ths
(
∑ths
, 
n
, ".png", "-label.png");

1034 
d©a
 
d
 = {0};

1035 
d
.
shÆlow
 = 0;

1036 
d
.
X
 = 
	`lﬂd_image_∑ths
(
∑ths
, 
n
, 
w
, 
h
);

1037 
d
.
y
 = 
	`lﬂd_image_∑ths_gøy
(
ª∂a˚_∑ths
, 
n
, 
out_w
, 
out_h
);

1038 if(
m
Ë
	`‰ì
(
∑ths
);

1039 
i
;

1040 
i
 = 0; i < 
n
; ++iË
	`‰ì
(
ª∂a˚_∑ths
[i]);

1041 
	`‰ì
(
ª∂a˚_∑ths
);

1042  
d
;

1043 
	}
}

1045 
d©a
 
	$lﬂd_d©a_ﬁd
(**
∑ths
, 
n
, 
m
, **
œbñs
, 
k
, 
w
, 
h
)

1047 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1048 
d©a
 
d
 = {0};

1049 
d
.
shÆlow
 = 0;

1050 
d
.
X
 = 
	`lﬂd_image_∑ths
(
∑ths
, 
n
, 
w
, 
h
);

1051 
d
.
y
 = 
	`lﬂd_œbñs_∑ths
(
∑ths
, 
n
, 
œbñs
, 
k
, 0);

1052 if(
m
Ë
	`‰ì
(
∑ths
);

1053  
d
;

1054 
	}
}

1070 
d©a
 
	$lﬂd_d©a_su≥r
(**
∑ths
, 
n
, 
m
, 
w
, 
h
, 
sˇÀ
)

1072 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1073 
d©a
 
d
 = {0};

1074 
d
.
shÆlow
 = 0;

1076 
i
;

1077 
d
.
X
.
rows
 = 
n
;

1078 
d
.
X
.
vÆs
 = 
	`ˇŒoc
(
n
, (*));

1079 
d
.
X
.
cﬁs
 = 
w
*
h
*3;

1081 
d
.
y
.
rows
 = 
n
;

1082 
d
.
y
.
vÆs
 = 
	`ˇŒoc
(
n
, (*));

1083 
d
.
y
.
cﬁs
 = 
w
*
sˇÀ
 * 
h
*scale * 3;

1085 
i
 = 0; i < 
n
; ++i){

1086 
image
 
im
 = 
	`lﬂd_image_cﬁ‹
(
∑ths
[
i
], 0, 0);

1087 
image
 
¸›
 = 
	`øndom_¸›_image
(
im
, 
w
*
sˇÀ
, 
h
*scale);

1088 
Êù
 = 
	`ønd
()%2;

1089 i‡(
Êù
Ë
	`Êù_image
(
¸›
);

1090 
image
 
ªsize
 = 
	`ªsize_image
(
¸›
, 
w
, 
h
);

1091 
d
.
X
.
vÆs
[
i
] = 
ªsize
.
d©a
;

1092 
d
.
y
.
vÆs
[
i
] = 
¸›
.
d©a
;

1093 
	`‰ì_image
(
im
);

1096 if(
m
Ë
	`‰ì
(
∑ths
);

1097  
d
;

1098 
	}
}

1100 
d©a
 
	$lﬂd_d©a_ªgªssi⁄
(**
∑ths
, 
n
, 
m
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
)

1102 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1103 
d©a
 
d
 = {0};

1104 
d
.
shÆlow
 = 0;

1105 
d
.
X
 = 
	`lﬂd_image_augmít_∑ths
(
∑ths
, 
n
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 0);

1106 
d
.
y
 = 
	`lﬂd_ªgªssi⁄_œbñs_∑ths
(
∑ths
, 
n
);

1107 if(
m
Ë
	`‰ì
(
∑ths
);

1108  
d
;

1109 
	}
}

1111 
d©a
 
	$lﬂd_d©a_augmít
(**
∑ths
, 
n
, 
m
, **
œbñs
, 
k
, 
åì
 *
hõørchy
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
˚¡î
)

1113 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1114 
d©a
 
d
 = {0};

1115 
d
.
shÆlow
 = 0;

1116 
d
.
X
 = 
	`lﬂd_image_augmít_∑ths
(
∑ths
, 
n
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
˚¡î
);

1117 
d
.
y
 = 
	`lﬂd_œbñs_∑ths
(
∑ths
, 
n
, 
œbñs
, 
k
, 
hõørchy
);

1118 if(
m
Ë
	`‰ì
(
∑ths
);

1119  
d
;

1120 
	}
}

1122 
d©a
 
	$lﬂd_d©a_èg
(**
∑ths
, 
n
, 
m
, 
k
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
)

1124 if(
m
Ë
∑ths
 = 
	`gë_øndom_∑ths
’©hs, 
n
, m);

1125 
d©a
 
d
 = {0};

1126 
d
.
w
 = 
size
;

1127 
d
.
h
 = 
size
;

1128 
d
.
shÆlow
 = 0;

1129 
d
.
X
 = 
	`lﬂd_image_augmít_∑ths
(
∑ths
, 
n
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 0);

1130 
d
.
y
 = 
	`lﬂd_ègs_∑ths
(
∑ths
, 
n
, 
k
);

1131 if(
m
Ë
	`‰ì
(
∑ths
);

1132  
d
;

1133 
	}
}

1135 
m©rix
 
	$c⁄ˇt_m©rix
(
m©rix
 
m1
, m©rix 
m2
)

1137 
i
, 
cou¡
 = 0;

1138 
m©rix
 
m
;

1139 
m
.
cﬁs
 = 
m1
.cols;

1140 
m
.
rows
 = 
m1
.rows+
m2
.rows;

1141 
m
.
vÆs
 = 
	`ˇŒoc
(
m1
.
rows
 + 
m2
.rows, (*));

1142 
i
 = 0; i < 
m1
.
rows
; ++i){

1143 
m
.
vÆs
[
cou¡
++] = 
m1
.vÆs[
i
];

1145 
i
 = 0; i < 
m2
.
rows
; ++i){

1146 
m
.
vÆs
[
cou¡
++] = 
m2
.vÆs[
i
];

1148  
m
;

1149 
	}
}

1151 
d©a
 
	$c⁄ˇt_d©a
(
d©a
 
d1
, d©®
d2
)

1153 
d©a
 
d
 = {0};

1154 
d
.
shÆlow
 = 1;

1155 
d
.
X
 = 
	`c⁄ˇt_m©rix
(
d1
.X, 
d2
.X);

1156 
d
.
y
 = 
	`c⁄ˇt_m©rix
(
d1
.y, 
d2
.y);

1157  
d
;

1158 
	}
}

1160 
d©a
 
	$c⁄ˇt_d©as
(
d©a
 *
d
, 
n
)

1162 
i
;

1163 
d©a
 
out
 = {0};

1164 
i
 = 0; i < 
n
; ++i){

1165 
d©a
 
√w
 = 
	`c⁄ˇt_d©a
(
d
[
i
], 
out
);

1166 
	`‰ì_d©a
(
out
);

1167 
out
 = 
√w
;

1169  
out
;

1170 
	}
}

1172 
d©a
 
	$lﬂd_ˇãg‹iˇl_d©a_csv
(*
fûíame
, 
èrgë
, 
k
)

1174 
d©a
 
d
 = {0};

1175 
d
.
shÆlow
 = 0;

1176 
m©rix
 
X
 = 
	`csv_to_m©rix
(
fûíame
);

1177 *
åuth_1d
 = 
	`p›_cﬁumn
(&
X
, 
èrgë
);

1178 **
åuth
 = 
	`⁄e_hŸ_ícode
(
åuth_1d
, 
X
.
rows
, 
k
);

1179 
m©rix
 
y
;

1180 
y
.
rows
 = 
X
.rows;

1181 
y
.
cﬁs
 = 
k
;

1182 
y
.
vÆs
 = 
åuth
;

1183 
d
.
X
 = X;

1184 
d
.
y
 = y;

1185 
	`‰ì
(
åuth_1d
);

1186  
d
;

1187 
	}
}

1189 
d©a
 
	$lﬂd_ciÁr10_d©a
(*
fûíame
)

1191 
d©a
 
d
 = {0};

1192 
d
.
shÆlow
 = 0;

1193 
i
,
j
;

1194 
m©rix
 
X
 = 
	`make_m©rix
(10000, 3072);

1195 
m©rix
 
y
 = 
	`make_m©rix
(10000, 10);

1196 
d
.
X
 = X;

1197 
d
.
y
 = y;

1199 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

1200 if(!
Â
Ë
	`fûe_îr‹
(
fûíame
);

1201 
i
 = 0; i < 10000; ++i){

1202 
byãs
[3073];

1203 
	`‰ód
(
byãs
, 1, 3073, 
Â
);

1204 
˛ass
 = 
byãs
[0];

1205 
y
.
vÆs
[
i
][
˛ass
] = 1;

1206 
j
 = 0; j < 
X
.
cﬁs
; ++j){

1207 
X
.
vÆs
[
i
][
j
] = ()
byãs
[j+1];

1210 
	`sˇÀ_d©a_rows
(
d
, 1./255);

1212 
	`f˛o£
(
Â
);

1213  
d
;

1214 
	}
}

1216 
	$gë_øndom_b©ch
(
d©a
 
d
, 
n
, *
X
, *
y
)

1218 
j
;

1219 
j
 = 0; j < 
n
; ++j){

1220 
ödex
 = 
	`ønd
()%
d
.
X
.
rows
;

1221 
	`mem˝y
(
X
+
j
*
d
.X.
cﬁs
, d.X.
vÆs
[
ödex
], d.X.cols*());

1222 
	`mem˝y
(
y
+
j
*
d
.y.
cﬁs
, d.y.
vÆs
[
ödex
], d.y.cols*());

1224 
	}
}

1226 
	$gë_√xt_b©ch
(
d©a
 
d
, 
n
, 
off£t
, *
X
, *
y
)

1228 
j
;

1229 
j
 = 0; j < 
n
; ++j){

1230 
ödex
 = 
off£t
 + 
j
;

1231 
	`mem˝y
(
X
+
j
*
d
.X.
cﬁs
, d.X.
vÆs
[
ödex
], d.X.cols*());

1232 if(
y
Ë
	`mem˝y
(y+
j
*
d
.y.
cﬁs
, d.y.
vÆs
[
ödex
], d.y.cols*());

1234 
	}
}

1236 
	$smoŸh_d©a
(
d©a
 
d
)

1238 
i
, 
j
;

1239 
sˇÀ
 = 1. / 
d
.
y
.
cﬁs
;

1240 
ïs
 = .1;

1241 
i
 = 0; i < 
d
.
y
.
rows
; ++i){

1242 
j
 = 0; j < 
d
.
y
.
cﬁs
; ++j){

1243 
d
.
y
.
vÆs
[
i
][
j
] = 
ïs
 * 
sˇÀ
 + (1-eps) * d.y.vals[i][j];

1246 
	}
}

1248 
d©a
 
	$lﬂd_Æl_ciÁr10
()

1250 
d©a
 
d
 = {0};

1251 
d
.
shÆlow
 = 0;

1252 
i
,
j
,
b
;

1253 
m©rix
 
X
 = 
	`make_m©rix
(50000, 3072);

1254 
m©rix
 
y
 = 
	`make_m©rix
(50000, 10);

1255 
d
.
X
 = X;

1256 
d
.
y
 = y;

1259 
b
 = 0; b < 5; ++b){

1260 
buff
[256];

1261 
	`•rötf
(
buff
, "d©a/ciÁr/ciÁr-10-b©ches-bö/d©a_b©ch_%d.bö", 
b
+1);

1262 
FILE
 *
Â
 = 
	`f›í
(
buff
, "rb");

1263 if(!
Â
Ë
	`fûe_îr‹
(
buff
);

1264 
i
 = 0; i < 10000; ++i){

1265 
byãs
[3073];

1266 
	`‰ód
(
byãs
, 1, 3073, 
Â
);

1267 
˛ass
 = 
byãs
[0];

1268 
y
.
vÆs
[
i
+
b
*10000][
˛ass
] = 1;

1269 
j
 = 0; j < 
X
.
cﬁs
; ++j){

1270 
X
.
vÆs
[
i
+
b
*10000][
j
] = ()
byãs
[j+1];

1273 
	`f˛o£
(
Â
);

1276 
	`sˇÀ_d©a_rows
(
d
, 1./255);

1277 
	`smoŸh_d©a
(
d
);

1278  
d
;

1279 
	}
}

1281 
d©a
 
	$lﬂd_go
(*
fûíame
)

1283 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

1284 
m©rix
 
X
 = 
	`make_m©rix
(3363059, 361);

1285 
m©rix
 
y
 = 
	`make_m©rix
(3363059, 361);

1286 
row
, 
cﬁ
;

1288 if(!
Â
Ë
	`fûe_îr‹
(
fûíame
);

1289 *
œbñ
;

1290 
cou¡
 = 0;

1291 (
œbñ
 = 
	`fgël
(
Â
))){

1292 
i
;

1293 if(
cou¡
 =
X
.
rows
){

1294 
X
 = 
	`ªsize_m©rix
(X, 
cou¡
*2);

1295 
y
 = 
	`ªsize_m©rix
(y, 
cou¡
*2);

1297 
	`ssˇnf
(
œbñ
, "%d %d", &
row
, &
cﬁ
);

1298 *
bﬂrd
 = 
	`fgël
(
Â
);

1300 
ödex
 = 
row
*19 + 
cﬁ
;

1301 
y
.
vÆs
[
cou¡
][
ödex
] = 1;

1303 
i
 = 0; i < 19*19; ++i){

1304 
vÆ
 = 0;

1305 if(
bﬂrd
[
i
] ='1'Ë
vÆ
 = 1;

1306 if(
bﬂrd
[
i
] ='2'Ë
vÆ
 = -1;

1307 
X
.
vÆs
[
cou¡
][
i
] = 
vÆ
;

1309 ++
cou¡
;

1310 
	`‰ì
(
œbñ
);

1311 
	`‰ì
(
bﬂrd
);

1313 
X
 = 
	`ªsize_m©rix
(X, 
cou¡
);

1314 
y
 = 
	`ªsize_m©rix
(y, 
cou¡
);

1316 
d©a
 
d
 = {0};

1317 
d
.
shÆlow
 = 0;

1318 
d
.
X
 = X;

1319 
d
.
y
 = y;

1322 
	`f˛o£
(
Â
);

1324  
d
;

1325 
	}
}

1328 
	$øndomize_d©a
(
d©a
 
d
)

1330 
i
;

1331 
i
 = 
d
.
X
.
rows
-1; i > 0; --i){

1332 
ödex
 = 
	`ønd
()%
i
;

1333 *
sw≠
 = 
d
.
X
.
vÆs
[
ödex
];

1334 
d
.
X
.
vÆs
[
ödex
] = d.X.vÆs[
i
];

1335 
d
.
X
.
vÆs
[
i
] = 
sw≠
;

1337 
sw≠
 = 
d
.
y
.
vÆs
[
ödex
];

1338 
d
.
y
.
vÆs
[
ödex
] = d.y.vÆs[
i
];

1339 
d
.
y
.
vÆs
[
i
] = 
sw≠
;

1341 
	}
}

1343 
	$sˇÀ_d©a_rows
(
d©a
 
d
, 
s
)

1345 
i
;

1346 
i
 = 0; i < 
d
.
X
.
rows
; ++i){

1347 
	`sˇÀ_¨øy
(
d
.
X
.
vÆs
[
i
], d.X.
cﬁs
, 
s
);

1349 
	}
}

1351 
	$å™¶©e_d©a_rows
(
d©a
 
d
, 
s
)

1353 
i
;

1354 
i
 = 0; i < 
d
.
X
.
rows
; ++i){

1355 
	`å™¶©e_¨øy
(
d
.
X
.
vÆs
[
i
], d.X.
cﬁs
, 
s
);

1357 
	}
}

1359 
d©a
 
	$c›y_d©a
(
d©a
 
d
)

1361 
d©a
 
c
 = {0};

1362 
c
.
w
 = 
d
.w;

1363 
c
.
h
 = 
d
.h;

1364 
c
.
shÆlow
 = 0;

1365 
c
.
num_boxes
 = 
d
.num_boxes;

1366 
c
.
boxes
 = 
d
.boxes;

1367 
c
.
X
 = 
	`c›y_m©rix
(
d
.X);

1368 
c
.
y
 = 
	`c›y_m©rix
(
d
.y);

1369  
c
;

1370 
	}
}

1372 
	$n‹mÆize_d©a_rows
(
d©a
 
d
)

1374 
i
;

1375 
i
 = 0; i < 
d
.
X
.
rows
; ++i){

1376 
	`n‹mÆize_¨øy
(
d
.
X
.
vÆs
[
i
], d.X.
cﬁs
);

1378 
	}
}

1380 
d©a
 
	$gë_d©a_∑π
(
d©a
 
d
, 
∑π
, 
tŸÆ
)

1382 
d©a
 
p
 = {0};

1383 
p
.
shÆlow
 = 1;

1384 
p
.
X
.
rows
 = 
d
.X.row†* (
∑π
 + 1Ë/ 
tŸÆ
 - d.X.rows *Öart /Åotal;

1385 
p
.
y
.
rows
 = 
d
.y.row†* (
∑π
 + 1Ë/ 
tŸÆ
 - d.y.rows *Öart /Åotal;

1386 
p
.
X
.
cﬁs
 = 
d
.X.cols;

1387 
p
.
y
.
cﬁs
 = 
d
.y.cols;

1388 
p
.
X
.
vÆs
 = 
d
.X.vÆ†+ d.X.
rows
 * 
∑π
 / 
tŸÆ
;

1389 
p
.
y
.
vÆs
 = 
d
.y.vÆ†+ d.y.
rows
 * 
∑π
 / 
tŸÆ
;

1390  
p
;

1391 
	}
}

1393 
d©a
 
	$gë_øndom_d©a
(
d©a
 
d
, 
num
)

1395 
d©a
 
r
 = {0};

1396 
r
.
shÆlow
 = 1;

1398 
r
.
X
.
rows
 = 
num
;

1399 
r
.
y
.
rows
 = 
num
;

1401 
r
.
X
.
cﬁs
 = 
d
.X.cols;

1402 
r
.
y
.
cﬁs
 = 
d
.y.cols;

1404 
r
.
X
.
vÆs
 = 
	`ˇŒoc
(
num
, (*));

1405 
r
.
y
.
vÆs
 = 
	`ˇŒoc
(
num
, (*));

1407 
i
;

1408 
i
 = 0; i < 
num
; ++i){

1409 
ödex
 = 
	`ønd
()%
d
.
X
.
rows
;

1410 
r
.
X
.
vÆs
[
i
] = 
d
.X.vÆs[
ödex
];

1411 
r
.
y
.
vÆs
[
i
] = 
d
.y.vÆs[
ödex
];

1413  
r
;

1414 
	}
}

1416 
d©a
 *
	$•lô_d©a
(
d©a
 
d
, 
∑π
, 
tŸÆ
)

1418 
d©a
 *
•lô
 = 
	`ˇŒoc
(2, (data));

1419 
i
;

1420 
°¨t
 = 
∑π
*
d
.
X
.
rows
/
tŸÆ
;

1421 
íd
 = (
∑π
+1)*
d
.
X
.
rows
/
tŸÆ
;

1422 
d©a
 
åaö
;

1423 
d©a
 
ã°
;

1424 
åaö
.
shÆlow
 = 
ã°
.shallow = 1;

1426 
ã°
.
X
.
rows
 =Åe°.
y
.row†
íd
-
°¨t
;

1427 
åaö
.
X
.
rows
 =Åøö.
y
.row†
d
.X.row†- (
íd
-
°¨t
);

1428 
åaö
.
X
.
cﬁs
 = 
ã°
.X.cﬁ†
d
.X.cols;

1429 
åaö
.
y
.
cﬁs
 = 
ã°
.y.cﬁ†
d
.y.cols;

1431 
åaö
.
X
.
vÆs
 = 
	`ˇŒoc
—øö.X.
rows
, (*));

1432 
ã°
.
X
.
vÆs
 = 
	`ˇŒoc
—e°.X.
rows
, (*));

1433 
åaö
.
y
.
vÆs
 = 
	`ˇŒoc
—øö.y.
rows
, (*));

1434 
ã°
.
y
.
vÆs
 = 
	`ˇŒoc
—e°.y.
rows
, (*));

1436 
i
 = 0; i < 
°¨t
; ++i){

1437 
åaö
.
X
.
vÆs
[
i
] = 
d
.X.vals[i];

1438 
åaö
.
y
.
vÆs
[
i
] = 
d
.y.vals[i];

1440 
i
 = 
°¨t
; i < 
íd
; ++i){

1441 
ã°
.
X
.
vÆs
[
i
-
°¨t
] = 
d
.X.vals[i];

1442 
ã°
.
y
.
vÆs
[
i
-
°¨t
] = 
d
.y.vals[i];

1444 
i
 = 
íd
; i < 
d
.
X
.
rows
; ++i){

1445 
åaö
.
X
.
vÆs
[
i
-(
íd
-
°¨t
)] = 
d
.X.vals[i];

1446 
åaö
.
y
.
vÆs
[
i
-(
íd
-
°¨t
)] = 
d
.y.vals[i];

1448 
•lô
[0] = 
åaö
;

1449 
•lô
[1] = 
ã°
;

1450  
•lô
;

1451 
	}
}

	@src/data.h

1 #i‚de‡
DATA_H


2 
	#DATA_H


	)

3 
	~<±hªad.h
>

5 
	~"d¨k√t.h
"

6 
	~"m©rix.h
"

7 
	~"li°.h
"

8 
	~"image.h
"

9 
	~"åì.h
"

11 
ölöe
 
	$di°™˚_‰om_edge
(
x
, 
max
)

13 
dx
 = (
max
/2Ë- 
x
;

14 i‡(
dx
 < 0) dx = -dx;

15 
dx
 = (
max
/2) + 1 - dx;

16 
dx
 *= 2;

17 
di°
 = ()
dx
/
max
;

18 i‡(
di°
 > 1) dist = 1;

19  
di°
;

20 
	}
}

21 
lﬂd_d©a_blockög
(
lﬂd_¨gs
 
¨gs
);

24 
¥öt_Àâîs
(*
¥ed
, 
n
);

25 
d©a
 
lﬂd_d©a_ˇ±cha
(**
∑ths
, 
n
, 
m
, 
k
, 
w
, 
h
);

26 
d©a
 
lﬂd_d©a_ˇ±cha_ícode
(**
∑ths
, 
n
, 
m
, 
w
, 
h
);

27 
d©a
 
lﬂd_d©a_dëe˘i⁄
(
n
, **
∑ths
, 
m
, 
w
, 
h
, 
boxes
, 
˛as£s
, 
jôãr
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

28 
d©a
 
lﬂd_d©a_èg
(**
∑ths
, 
n
, 
m
, 
k
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

29 
m©rix
 
lﬂd_image_augmít_∑ths
(**
∑ths
, 
n
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
˚¡î
);

30 
d©a
 
lﬂd_d©a_su≥r
(**
∑ths
, 
n
, 
m
, 
w
, 
h
, 
sˇÀ
);

31 
d©a
 
lﬂd_d©a_augmít
(**
∑ths
, 
n
, 
m
, **
œbñs
, 
k
, 
åì
 *
hõørchy
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
, 
˚¡î
);

32 
d©a
 
lﬂd_d©a_ªgªssi⁄
(**
∑ths
, 
n
, 
m
, 
mö
, 
max
, 
size
, 
™gÀ
, 
a•e˘
, 
hue
, 
ßtuøti⁄
, 
exposuª
);

33 
d©a
 
lﬂd_go
(*
fûíame
);

36 
d©a
 
lﬂd_d©a_wrôög
(**
∑ths
, 
n
, 
m
, 
w
, 
h
, 
out_w
, 
out_h
);

38 
gë_øndom_b©ch
(
d©a
 
d
, 
n
, *
X
, *
y
);

39 
d©a
 
gë_d©a_∑π
(d©®
d
, 
∑π
, 
tŸÆ
);

40 
d©a
 
gë_øndom_d©a
(d©®
d
, 
num
);

41 
d©a
 
lﬂd_ˇãg‹iˇl_d©a_csv
(*
fûíame
, 
èrgë
, 
k
);

42 
n‹mÆize_d©a_rows
(
d©a
 
d
);

43 
sˇÀ_d©a_rows
(
d©a
 
d
, 
s
);

44 
å™¶©e_d©a_rows
(
d©a
 
d
, 
s
);

45 
øndomize_d©a
(
d©a
 
d
);

46 
d©a
 *
•lô_d©a
(d©®
d
, 
∑π
, 
tŸÆ
);

47 
d©a
 
c⁄ˇt_d©as
(d©®*
d
, 
n
);

48 
fûl_åuth
(*
∑th
, **
œbñs
, 
k
, *
åuth
);

	@src/debug.h

1 #i‚de‡
_SRC_DEBUG_H_


2 
	#_SRC_DEBUG_H_


	)

3 
	~<°dio.h
>

4 #ifde‡
DEBUG


5 
	#LOGD
(
fmt
 , ...) \

6 
	`¥ötf
("[DEBUG %†%†%d] " 
fmt
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

9 
	#LOGD
(...)

	)

13 #ifde‡
VERBOSE


14 
	#LOGV
(
fmt
 , ...) \

15 
	`¥ötf
("[INFO %†%†%d] " 
fmt
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

17 
	#LOGV
(...)

	)

21 
	#LOGE
(
fmt
 , ...) \

22 
	`¥ötf
("[ERROR %†%†%d] " 
fmt
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

	@src/deconvolutional_layer.c

1 
	~"dec⁄vﬁuti⁄Æ_œyî.h
"

2 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

3 
	~"b©chn‹m_œyî.h
"

4 
	~"utûs.h
"

5 
	~"im2cﬁ.h
"

6 
	~"cﬁ2im.h
"

7 
	~"bœs.h
"

8 
	~"gemm.h
"

10 
	~<°dio.h
>

11 
	~<time.h
>

14 
size_t
 
	$gë_w‹k•a˚_size
(
œyî
 
l
){

15  (
size_t
)
l
.
h
*l.
w
*l.
size
*l.size*l.
n
*();

16 
	}
}

19 
œyî
 
	$make_dec⁄vﬁuti⁄Æ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑ddög
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
)

21 
i
;

22 
œyî
 
l
 = {0};

23 
l
.
ty≥
 = 
DECONVOLUTIONAL
;

25 
l
.
h
 = h;

26 
l
.
w
 = w;

27 
l
.
c
 = c;

28 
l
.
n
 =Ç;

29 
l
.
b©ch
 = batch;

30 
l
.
°ride
 = stride;

31 
l
.
size
 = size;

33 
l
.
nweights
 = 
c
*
n
*
size
*size;

34 
l
.
nbü£s
 = 
n
;

36 
l
.
weights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

37 
l
.
weight_upd©es
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

39 
l
.
bü£s
 = 
	`ˇŒoc
(
n
, ());

40 
l
.
büs_upd©es
 = 
	`ˇŒoc
(
n
, ());

41 
sˇÀ
 = .02;

42 
i
 = 0; i < 
c
*
n
*
size
*size; ++iË
l
.
weights
[i] = 
sˇÀ
*
	`ønd_n‹mÆ
();

43 
i
 = 0; i < 
n
; ++i){

44 
l
.
bü£s
[
i
] = 0;

46 
l
.
∑d
 = 
∑ddög
;

48 
l
.
out_h
 = (l.
h
 - 1Ë*Ü.
°ride
 +Ü.
size
 - 2*l.
∑d
;

49 
l
.
out_w
 = (l.
w
 - 1Ë*Ü.
°ride
 +Ü.
size
 - 2*l.
∑d
;

50 
l
.
out_c
 = 
n
;

51 
l
.
ouçuts
 =Ü.
out_w
 *Ü.
out_h
 *Ü.
out_c
;

52 
l
.
öputs
 =Ü.
w
 *Ü.
h
 *Ü.
c
;

54 
l
.
ouçut
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

55 
l
.
dñè
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

57 
l
.
f‹w¨d
 = 
f‹w¨d_dec⁄vﬁuti⁄Æ_œyî
;

58 
l
.
backw¨d
 = 
backw¨d_dec⁄vﬁuti⁄Æ_œyî
;

59 
l
.
upd©e
 = 
upd©e_dec⁄vﬁuti⁄Æ_œyî
;

61 
l
.
b©ch_n‹mÆize
 = batch_normalize;

63 if(
b©ch_n‹mÆize
){

64 
l
.
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

65 
l
.
sˇÀ_upd©es
 = 
	`ˇŒoc
(
n
, ());

66 
i
 = 0; i < 
n
; ++i){

67 
l
.
sˇÀs
[
i
] = 1;

70 
l
.
món
 = 
	`ˇŒoc
(
n
, ());

71 
l
.
v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

73 
l
.
món_dñè
 = 
	`ˇŒoc
(
n
, ());

74 
l
.
v¨ün˚_dñè
 = 
	`ˇŒoc
(
n
, ());

76 
l
.
rﬁlög_món
 = 
	`ˇŒoc
(
n
, ());

77 
l
.
rﬁlög_v¨ün˚
 = 
	`ˇŒoc
(
n
, ());

78 
l
.
x
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

79 
l
.
x_n‹m
 = 
	`ˇŒoc
÷.
b©ch
*l.
ouçuts
, ());

81 if(
adam
){

82 
l
.
m
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

83 
l
.
v
 = 
	`ˇŒoc
(
c
*
n
*
size
*size, ());

84 
l
.
büs_m
 = 
	`ˇŒoc
(
n
, ());

85 
l
.
sˇÀ_m
 = 
	`ˇŒoc
(
n
, ());

86 
l
.
büs_v
 = 
	`ˇŒoc
(
n
, ());

87 
l
.
sˇÀ_v
 = 
	`ˇŒoc
(
n
, ());

90 #ifde‡
GPU


91 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_dec⁄vﬁuti⁄Æ_œyî_gpu
;

92 
l
.
backw¨d_gpu
 = 
backw¨d_dec⁄vﬁuti⁄Æ_œyî_gpu
;

93 
l
.
upd©e_gpu
 = 
upd©e_dec⁄vﬁuti⁄Æ_œyî_gpu
;

95 if(
gpu_ödex
 >= 0){

97 i‡(
adam
) {

98 
l
.
m_gpu
 = 
	`cuda_make_¨øy
÷.
m
, 
c
*
n
*
size
*size);

99 
l
.
v_gpu
 = 
	`cuda_make_¨øy
÷.
v
, 
c
*
n
*
size
*size);

100 
l
.
büs_m_gpu
 = 
	`cuda_make_¨øy
÷.
büs_m
, 
n
);

101 
l
.
büs_v_gpu
 = 
	`cuda_make_¨øy
÷.
büs_v
, 
n
);

102 
l
.
sˇÀ_m_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_m
, 
n
);

103 
l
.
sˇÀ_v_gpu
 = 
	`cuda_make_¨øy
÷.
sˇÀ_v
, 
n
);

105 
l
.
weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
c
*
n
*
size
*size);

106 
l
.
weight_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
weight_upd©es
, 
c
*
n
*
size
*size);

108 
l
.
bü£s_gpu
 = 
	`cuda_make_¨øy
÷.
bü£s
, 
n
);

109 
l
.
büs_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
büs_upd©es
, 
n
);

111 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
,Ü.
b©ch
*l.
out_h
*l.
out_w
*
n
);

112 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*l.
out_h
*l.
out_w
*
n
);

114 if(
b©ch_n‹mÆize
){

115 
l
.
món_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

116 
l
.
v¨ün˚_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

118 
l
.
rﬁlög_món_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

119 
l
.
rﬁlög_v¨ün˚_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

121 
l
.
món_dñè_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

122 
l
.
v¨ün˚_dñè_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

124 
l
.
sˇÀs_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

125 
l
.
sˇÀ_upd©es_gpu
 = 
	`cuda_make_¨øy
(0, 
n
);

127 
l
.
x_gpu
 = 
	`cuda_make_¨øy
(0,Ü.
b©ch
*l.
out_h
*l.
out_w
*
n
);

128 
l
.
x_n‹m_gpu
 = 
	`cuda_make_¨øy
(0,Ü.
b©ch
*l.
out_h
*l.
out_w
*
n
);

131 #ifde‡
CUDNN


132 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
d°Tís‹Desc
);

133 
	`cud¬Cª©eTís‹Des¸ùt‹
(&
l
.
n‹mTís‹Desc
);

134 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü.
b©ch
,Ü.
out_c
,Ü.
out_h
,Ü.
out_w
);

135 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü.
out_c
, 1, 1);

139 
l
.
a˘iv©i⁄
 =áctivation;

140 
l
.
w‹k•a˚_size
 = 
	`gë_w‹k•a˚_size
(l);

142 
	`Ârötf
(
°dîr
, "dec⁄v%5d %2d x%2d /%2d %4d x%4d x%4d -> %4d x%4d x%4d\n", 
n
, 
size
, size, 
°ride
, 
w
, 
h
, 
c
, 
l
.
out_w
,Ü.
out_h
,Ü.
out_c
);

144  
l
;

145 
	}
}

147 
	$dí‹mÆize_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
)

149 
i
, 
j
;

150 
i
 = 0; i < 
l
.
n
; ++i){

151 
sˇÀ
 = 
l
.
sˇÀs
[
i
]/
	`sqπ
÷.
rﬁlög_v¨ün˚
[i] + .00001);

152 
j
 = 0; j < 
l
.
c
*l.
size
*l.size; ++j){

153 
l
.
weights
[
i
*l.
c
*l.
size
*l.sizê+ 
j
] *
sˇÀ
;

155 
l
.
bü£s
[
i
] -l.
rﬁlög_món
[i] * 
sˇÀ
;

156 
l
.
sˇÀs
[
i
] = 1;

157 
l
.
rﬁlög_món
[
i
] = 0;

158 
l
.
rﬁlög_v¨ün˚
[
i
] = 1;

160 
	}
}

162 
	$ªsize_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 *
l
, 
h
, 
w
)

164 
l
->
h
 = h;

165 
l
->
w
 = w;

166 
l
->
out_h
 = (l->
h
 - 1Ë*Ü->
°ride
 +Ü->
size
 - 2*l->
∑d
;

167 
l
->
out_w
 = (l->
w
 - 1Ë*Ü->
°ride
 +Ü->
size
 - 2*l->
∑d
;

169 
l
->
ouçuts
 =Ü->
out_h
 *Ü->
out_w
 *Ü->
out_c
;

170 
l
->
öputs
 =Ü->
w
 *Ü->
h
 *Ü->
c
;

172 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut,Ü->
b©ch
*l->
ouçuts
*());

173 
l
->
dñè
 = 
	`ªÆloc
÷->dñè,Ü->
b©ch
*l->
ouçuts
*());

174 if(
l
->
b©ch_n‹mÆize
){

175 
l
->
x
 = 
	`ªÆloc
÷->x,Ü->
b©ch
*l->
ouçuts
*());

176 
l
->
x_n‹m
 = 
	`ªÆloc
÷->x_n‹m,Ü->
b©ch
*l->
ouçuts
*());

179 #ifde‡
GPU


180 
	`cuda_‰ì
(
l
->
dñè_gpu
);

181 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

183 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
,Ü->
b©ch
*l->
ouçuts
);

184 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

186 if(
l
->
b©ch_n‹mÆize
){

187 
	`cuda_‰ì
(
l
->
x_gpu
);

188 
	`cuda_‰ì
(
l
->
x_n‹m_gpu
);

190 
l
->
x_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

191 
l
->
x_n‹m_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

193 #ifde‡
CUDNN


194 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
,Ü->
b©ch
,Ü->
out_c
,Ü->
out_h
,Ü->
out_w
);

195 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü->
out_c
, 1, 1);

198 
l
->
w‹k•a˚_size
 = 
	`gë_w‹k•a˚_size
(*l);

199 
	}
}

201 
	$f‹w¨d_dec⁄vﬁuti⁄Æ_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

203 
i
;

205 
m
 = 
l
.
size
*l.size*l.
n
;

206 
n
 = 
l
.
h
*l.
w
;

207 
k
 = 
l
.
c
;

209 
	`fûl_˝u
(
l
.
ouçuts
*l.
b©ch
, 0,Ü.
ouçut
, 1);

211 
i
 = 0; i < 
l
.
b©ch
; ++i){

212 *
a
 = 
l
.
weights
;

213 *
b
 = 
√t
.
öput
 + 
i
*
l
.
c
*l.
h
*l.
w
;

214 *
c
 = 
√t
.
w‹k•a˚
;

216 
	`gemm_˝u
(1,0,
m
,
n
,
k
,1,
a
,m,
b
,n,0,
c
,n);

218 
	`cﬁ2im_˝u
(
√t
.
w‹k•a˚
, 
l
.
out_c
,Ü.
out_h
,Ü.
out_w
,Ü.
size
,Ü.
°ride
,Ü.
∑d
,Ü.
ouçut
+
i
*l.
ouçuts
);

220 i‡(
l
.
b©ch_n‹mÆize
) {

221 
	`f‹w¨d_b©chn‹m_œyî
(
l
, 
√t
);

223 
	`add_büs
(
l
.
ouçut
,Ü.
bü£s
,Ü.
b©ch
,Ü.
n
,Ü.
out_w
*l.
out_h
);

225 
	`a˘iv©e_¨øy
(
l
.
ouçut
,Ü.
b©ch
*l.
n
*l.
out_w
*l.
out_h
,Ü.
a˘iv©i⁄
);

226 
	}
}

228 
	$backw¨d_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

230 
i
;

232 
	`gødõ¡_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

234 if(
l
.
b©ch_n‹mÆize
){

235 
	`backw¨d_b©chn‹m_œyî
(
l
, 
√t
);

237 
	`backw¨d_büs
(
l
.
büs_upd©es
,Ü.
dñè
,Ü.
b©ch
,Ü.
n
,Ü.
out_w
*l.
out_h
);

242 
i
 = 0; i < 
l
.
b©ch
; ++i){

243 
m
 = 
l
.
c
;

244 
n
 = 
l
.
size
*l.size*l.n;

245 
k
 = 
l
.
h
*l.
w
;

247 *
a
 = 
√t
.
öput
 + 
i
*
m
*
k
;

248 *
b
 = 
√t
.
w‹k•a˚
;

249 *
c
 = 
l
.
weight_upd©es
;

251 
	`im2cﬁ_˝u
(
l
.
dñè
 + 
i
*l.
ouçuts
,Ü.
out_c
,Ü.
out_h
,Ü.
out_w
,

252 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
b
);

253 
	`gemm_˝u
(0,1,
m
,
n
,
k
,1,
a
,k,
b
,k,1,
c
,n);

255 if(
√t
.
dñè
){

256 
m
 = 
l
.
c
;

257 
n
 = 
l
.
h
*l.
w
;

258 
k
 = 
l
.
size
*l.size*l.
n
;

260 *
a
 = 
l
.
weights
;

261 *
b
 = 
√t
.
w‹k•a˚
;

262 *
c
 = 
√t
.
dñè
 + 
i
*
n
*
m
;

264 
	`gemm_˝u
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,n,1,
c
,n);

267 
	}
}

269 
	$upd©e_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

271 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

272 
momítum
 = 
a
.momentum;

273 
deˇy
 = 
a
.decay;

274 
b©ch
 = 
a
.batch;

276 
size
 = 
l
.size*l.size*l.
c
*l.
n
;

277 
	`axpy_˝u
(
l
.
n
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es
, 1,Ü.
bü£s
, 1);

278 
	`sˇl_˝u
(
l
.
n
, 
momítum
,Ü.
büs_upd©es
, 1);

280 if(
l
.
sˇÀs
){

281 
	`axpy_˝u
(
l
.
n
, 
À¨nög_øã
/
b©ch
,Ü.
sˇÀ_upd©es
, 1,Ü.
sˇÀs
, 1);

282 
	`sˇl_˝u
(
l
.
n
, 
momítum
,Ü.
sˇÀ_upd©es
, 1);

285 
	`axpy_˝u
(
size
, -
deˇy
*
b©ch
, 
l
.
weights
, 1,Ü.
weight_upd©es
, 1);

286 
	`axpy_˝u
(
size
, 
À¨nög_øã
/
b©ch
, 
l
.
weight_upd©es
, 1,Ü.
weights
, 1);

287 
	`sˇl_˝u
(
size
, 
momítum
, 
l
.
weight_upd©es
, 1);

288 
	}
}

	@src/deconvolutional_layer.h

1 #i‚de‡
DECONVOLUTIONAL_LAYER_H


2 
	#DECONVOLUTIONAL_LAYER_H


	)

4 
	~"cuda.h
"

5 
	~"image.h
"

6 
	~"a˘iv©i⁄s.h
"

7 
	~"œyî.h
"

8 
	~"√tw‹k.h
"

10 #ifde‡
GPU


11 
f‹w¨d_dec⁄vﬁuti⁄Æ_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

12 
backw¨d_dec⁄vﬁuti⁄Æ_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

13 
upd©e_dec⁄vﬁuti⁄Æ_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

14 
push_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
);

15 
puŒ_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
);

18 
œyî
 
make_dec⁄vﬁuti⁄Æ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑ddög
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

19 
ªsize_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 *
l
, 
h
, 
w
);

20 
f‹w¨d_dec⁄vﬁuti⁄Æ_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

21 
upd©e_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

22 
backw¨d_dec⁄vﬁuti⁄Æ_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

	@src/demo.c

1 
	~"√tw‹k.h
"

2 
	~"dëe˘i⁄_œyî.h
"

3 
	~"ªgi⁄_œyî.h
"

4 
	~"co°_œyî.h
"

5 
	~"utûs.h
"

6 
	~"∑r£r.h
"

7 
	~"box.h
"

8 
	~"image.h
"

9 
	~"demo.h
"

10 
	~<sys/time.h
>

12 
	#DEMO
 1

	)

16 
	#DISPLAY_RESULS


	)

18 
	#DEBUG


	)

19 
	#VERBOSE


	)

20 
	~"debug.h
"

24 
	mx
;

25 
	my
;

26 
	mw
;

27 
	mh
;

28 * 
	mpcCœssName
;

29 
	mfCuºítFømeTimeSèmp
;

30 
	mnVideoId
;

31 }
	ttA¬Info
;

33 (*
	tt‚Rai£A¬Cb
)(
	ttA¬Info
 
	t≠A¬Info
);

36 * 
pcCfg
;

37 * 
pcWeights
;

38 * 
pcFûeName
;

39 * 
pcD©aCfg
;

40 
fT¨gëFps
;

41 
fThªsh
;

42 
t‚Rai£A¬Cb
 
p‚Rai£A¬Cb
;

43 
nVideoId
;

44 }
	ttDëe˘‹Modñ
;

47 
tDëe˘‹Modñ
* 
pDëe˘‹Modñ
;

49 #ifde‡
OPENCV


51 **
demo_«mes
;

52 
image
 **
demo_Æphabë
;

53 
demo_˛as£s
;

55 **
¥obs
;

56 
box
 *
boxes
;

57 
√tw‹k
 
√t
;

58 
image
 
buff
 [3];

59 
image
 
buff_Àâî
[3];

60 
buff_ödex
 = 0;

61 
CvC≠tuª
 * 
ˇp
;

62 
I∂Image
 * 
ùl
;

63 
Âs
 = 0;

64 
demo_thªsh
 = 0;

65 
demo_hõr
 = .5;

66 
ru¬ög
 = 0;

68 
demo_dñay
 = 0;

69 
demo_‰ame
 = 3;

70 
demo_dëe˘i⁄s
 = 0;

71 **
¥edi˘i⁄s
;

72 
demo_ödex
 = 0;

73 
demo_d⁄e
 = 0;

74 *
œ°_avg2
;

75 *
œ°_avg
;

76 *
avg
;

77 
demo_time
;

80 
nT¨gëFps
 = 1;

81 
nCurFømeCou¡
 = 0;

82 
nFps
 = 0;

83 
nSkùFømesC¡
 = 0;

84 
bPro˚ssThisFøme
 = 0;

86 
	$gë_wÆl_time
()

88 
timevÆ
 
time
;

89 i‡(
	`gëtimeofday
(&
time
,
NULL
)){

92  ()
time
.
tv_£c
 + (Èime.
tv_u£c
 * .000001;

93 
	}
}

95 
	$evÆu©e_dëe˘i⁄s
(
image
 
im
, 
num
, 
thªsh
, 
box
 *
boxes
, **
¥obs
, **
«mes
, imagê**
Æphabë
, 
˛as£s
)

97 
i
;

98 
tA¬Info
 
™nInfo
;

100 
i
 = 0; i < 
num
; ++i){

101 
˛ass
 = 
	`max_ödex
(
¥obs
[
i
], 
˛as£s
);

102 
¥ob
 = 
¥obs
[
i
][
˛ass
];

103 if(
¥ob
 > 
thªsh
){

105 
width
 = 
im
.
h
 * .006;

108 
width
 = 
	`pow
(
¥ob
, 1./2.)*10+1;

109 
Æphabë
 = 0;

113 
	`LOGD
("%s: %.0f%%\n", 
«mes
[
˛ass
], 
¥ob
*100);

114 
off£t
 = 
˛ass
*123457 % 
˛as£s
;

115 
ªd
 = 
	`gë_cﬁ‹
(2,
off£t
,
˛as£s
);

116 
gªí
 = 
	`gë_cﬁ‹
(1,
off£t
,
˛as£s
);

117 
blue
 = 
	`gë_cﬁ‹
(0,
off£t
,
˛as£s
);

118 
rgb
[3];

122 
rgb
[0] = 
ªd
;

123 
rgb
[1] = 
gªí
;

124 
rgb
[2] = 
blue
;

125 
box
 
b
 = 
boxes
[
i
];

127 
w
, 
h
;

128 
w
 = 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_WIDTH
);

129 
h
 = 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_HEIGHT
);

130 
À·
 = (
b
.
x
-b.
w
/2.)*w;

131 
right
 = (
b
.
x
+b.
w
/2.)*w;

132 
t›
 = (
b
.
y
-b.
h
/2.)*h;

133 
bŸ
 = (
b
.
y
+b.
h
/2.)*h;

135 if(
À·
 < 0)Üeft = 0;

136 if(
right
 > 
im
.
w
-1)Ñight = im.w-1;

137 if(
t›
 < 0)Åop = 0;

138 if(
bŸ
 > 
im
.
h
-1) bot = im.h-1;

140 #ifde‡
DISPLAY_RESULS


141 
	`døw_box_width
(
im
, 
À·
, 
t›
, 
right
, 
bŸ
, 
width
, 
ªd
, 
gªí
, 
blue
);

142 i‡(
Æphabë
) {

143 
image
 
œbñ
 = 
	`gë_œbñ
(
Æphabë
, 
«mes
[
˛ass
], (
im
.
h
*.03)/10);

144 
	`døw_œbñ
(
im
, 
t›
 + 
width
, 
À·
, 
œbñ
, 
rgb
);

145 
	`‰ì_image
(
œbñ
);

148 
	`LOGV
("box x:%‡y:%‡w:%‡h:%f;Ü:%dÑ:%dÅ:%d b:%d\n", 
b
.
x
, b.
y
, b.
w
, b.
h
, 
À·
, 
right
, 
t›
, 
bŸ
);

149 
™nInfo
.
x
 = ()(
À·
);

150 
	`LOGV
("box x:%f\n", 
™nInfo
.
x
);

151 
™nInfo
.
y
 = ()(
t›
);

152 
™nInfo
.
w
 = ()(
right
 - 
À·
);

153 
™nInfo
.
h
 = ()(
bŸ
 - 
t›
);

154 
™nInfo
.
pcCœssName
 = 
	`mÆloc
(
	`°æí
(
«mes
[
˛ass
]) + 1);

155 
	`°r˝y
(
™nInfo
.
pcCœssName
, 
«mes
[
˛ass
]);

156 
™nInfo
.
fCuºítFømeTimeSèmp
 = 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_POS_MSEC
);

157 
™nInfo
.
nVideoId
 = 
pDëe˘‹Modñ
->nVideoId;

158 
	`LOGD
("hello..");

159 
	`LOGV
("annInfo x=%d y=%d w=%d h=%dÖcClassName=%s\n",

160 
™nInfo
.
x
,á¬Info.
y
,á¬Info.
w
,á¬Info.
h
,á¬Info.
pcCœssName
);

161 
pDëe˘‹Modñ
->
	`p‚Rai£A¬Cb
(
™nInfo
);

164 
	}
}

166 *
	$dëe˘_ö_thªad
(*
±r
)

168 
ru¬ög
 = 1;

169 
nms
 = .4;

171 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

172 *
X
 = 
buff_Àâî
[(
buff_ödex
+2)%3].
d©a
;

173 *
¥edi˘i⁄
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

175 
	`mem˝y
(
¥edi˘i⁄s
[
demo_ödex
], 
¥edi˘i⁄
, 
l
.
ouçuts
*());

176 
	`món_¨øys
(
¥edi˘i⁄s
, 
demo_‰ame
, 
l
.
ouçuts
, 
avg
);

177 
l
.
ouçut
 = 
œ°_avg2
;

178 if(
demo_dñay
 =0Ë
l
.
ouçut
 = 
avg
;

179 if(
l
.
ty≥
 =
DETECTION
){

180 
	`LOGD
("DETECTION!\n\n\n\n");

181 
	`gë_dëe˘i⁄_boxes
(
l
, 1, 1, 
demo_thªsh
, 
¥obs
, 
boxes
, 0);

182 } i‡(
l
.
ty≥
 =
REGION
){

183 
	`LOGD
("REGION! buf[0].w=%d h=%dÇet.w=%d h=%d\n\n\n\n",

184 
buff
[0].
w
,

185 
buff
[0].
h
,

186 
√t
.
w
,

187 
√t
.
h


189 
	`gë_ªgi⁄_boxes
(
l
, 
buff
[0].
w
, buff[0].
h
, 
√t
.w,Çë.h, 
demo_thªsh
, 
¥obs
, 
boxes
, 0, 0, 
demo_hõr
, 1);

191 
	`îr‹
("LastÜayer mustÖroduce detections\n");

193 i‡(
nms
 > 0Ë
	`do_nms_obj
(
boxes
, 
¥obs
, 
l
.
w
*l.
h
*l.
n
,Ü.
˛as£s
,Çms);

195 
	`LOGD
("\033[2J");

196 
	`LOGD
("\033[1;1H");

197 
	`LOGD
("\nFPS:%.1f\n",
Âs
);

198 
	`LOGD
("Objects:\n\n");

199 
image
 
di•œy
 = 
buff
[(
buff_ödex
+2) % 3];

200 
	`LOGD
("Døw dëe˘i⁄†demo_dëe˘i⁄s=%d demo_˛as£s=%d demo_thªsh=%f\n", 
demo_dëe˘i⁄s
, 
demo_˛as£s
, 
demo_thªsh
);

201 #ifde‡
DISPLAY_RESULS


202 
	`døw_dëe˘i⁄s
(
di•œy
, 
demo_dëe˘i⁄s
, 
demo_thªsh
, 
boxes
, 
¥obs
, 
demo_«mes
, 
demo_Æphabë
, 
demo_˛as£s
);

204 
	`evÆu©e_dëe˘i⁄s
(
di•œy
, 
demo_dëe˘i⁄s
, 
demo_thªsh
, 
boxes
, 
¥obs
, 
demo_«mes
, 
demo_Æphabë
, 
demo_˛as£s
);

206 
demo_ödex
 = (demo_ödex + 1)%
demo_‰ame
;

207 
	`LOGD
("demo_ödex=%d; demo_‰ame=%d\n", 
demo_ödex
, 
demo_‰ame
);

208 
ru¬ög
 = 0;

210 
	}
}

212 *
	$„tch_ö_thªad
(*
±r
)

214 
°©us
 = 
	`fûl_image_‰om_°ªam
(
ˇp
, 
buff
[
buff_ödex
]);

215 
	`Àâîbox_image_öto
(
buff
[
buff_ödex
], 
√t
.
w
,Çë.
h
, 
buff_Àâî
[buff_index]);

216 if(
°©us
 =0Ë
demo_d⁄e
 = 1;

218 
	}
}

220 *
	$di•œy_ö_thªad
(*
±r
)

222 
	`show_image_cv
(
buff
[(
buff_ödex
 + 1)%3], "Demo", 
ùl
);

223 
c
 = 
	`cvWaôKey
(1);

224 i‡(
c
 != -1) c = c%256;

225 i‡(
c
 == 10){

226 if(
demo_dñay
 == 0) demo_delay = 60;

227 if(
demo_dñay
 == 5) demo_delay = 0;

228 if(
demo_dñay
 == 60) demo_delay = 5;

229 
demo_dñay
 = 0;

230 } i‡(
c
 == 27) {

231 
demo_d⁄e
 = 1;

233 } i‡(
c
 == 82) {

234 
demo_thªsh
 += .02;

235 } i‡(
c
 == 84) {

236 
demo_thªsh
 -= .02;

237 if(
demo_thªsh
 <= .02) demo_thresh = .02;

238 } i‡(
c
 == 83) {

239 
demo_hõr
 += .02;

240 } i‡(
c
 == 81) {

241 
demo_hõr
 -= .02;

242 if(
demo_hõr
 <= .0) demo_hier = .0;

245 
	}
}

247 *
	$di•œy_lo›
(*
±r
)

250 
	`di•œy_ö_thªad
(0);

252 
	}
}

254 *
	$dëe˘_lo›
(*
±r
)

257 
	`dëe˘_ö_thªad
(0);

259 
	}
}

261 
	$demo
(*
cfgfûe
, *
weightfûe
, 
thªsh
, 
ˇm_ödex
, c⁄° *
fûíame
, **
«mes
, 
˛as£s
, 
dñay
, *
¥efix
, 
avg_‰ames
, 
hõr
, 
w
, 
h
, 
‰ames
, 
fuŒs¸ìn
)

263 
ªs
 = 0;

265 
demo_dñay
 = 
dñay
;

266 
demo_‰ame
 = 
avg_‰ames
;

267 
¥edi˘i⁄s
 = 
	`ˇŒoc
(
demo_‰ame
, (*));

268 
image
 **
Æphabë
 = 
NULL
;

269 #ifde‡
DISPLAY_RESULS


270 
Æphabë
 = 
	`lﬂd_Æphabë
();

272 
demo_«mes
 = 
«mes
;

273 
demo_Æphabë
 = 
Æphabë
;

274 
demo_˛as£s
 = 
˛as£s
;

275 
demo_thªsh
 = 
thªsh
;

276 
demo_hõr
 = 
hõr
;

277 
	`LOGD
("Demo\n");

278 
	`LOGD
("˛as£s=%d dñay=%dávg_‰ames=%d hõr=%‡w=%d h=%d fømes=%d fuŒs¸ìn=%d\n", 
˛as£s
, 
dñay
, 
avg_‰ames
, 
hõr
, 
w
, 
h
, 
‰ames
, 
fuŒs¸ìn
);

279 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfgfûe
);

280 if(
weightfûe
){

281 
	`lﬂd_weights
(&
√t
, 
weightfûe
);

283 
	`£t_b©ch_√tw‹k
(&
√t
, 1);

284 
±hªad_t
 
dëe˘_thªad
;

285 
±hªad_t
 
„tch_thªad
;

287 
	`§™d
(2222222);

290 if(
fûíame
){

291 
	`LOGD
("videÿfûe: %s\n", 
fûíame
);

292 
ˇp
 = 
	`cvC≠tuªFromFûe
(
fûíame
);

294 
ˇp
 = 
	`cvC≠tuªFromCAM
(
ˇm_ödex
);

296 if(
w
){

297 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_WIDTH
, 
w
);

299 if(
h
){

300 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_HEIGHT
, 
h
);

302 if(
‰ames
){

303 
	`cvSëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FPS
, 
‰ames
);

307 if(!
ˇp
Ë
	`îr‹
("Couldn't connectÅo webcam.\n");

309 
œyî
 
l
 = 
√t
.
œyîs
[√t.
n
-1];

310 
demo_dëe˘i⁄s
 = 
l
.
n
*l.
w
*l.
h
;

311 
j
;

313 
avg
 = (*Ë
	`ˇŒoc
(
l
.
ouçuts
, ());

314 
œ°_avg
 = (*Ë
	`ˇŒoc
(
l
.
ouçuts
, ());

315 
œ°_avg2
 = (*Ë
	`ˇŒoc
(
l
.
ouçuts
, ());

316 
j
 = 0; j < 
demo_‰ame
; ++jË
¥edi˘i⁄s
[j] = (*Ë
	`ˇŒoc
(
l
.
ouçuts
, ());

318 
boxes
 = (
box
 *)
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (box));

319 
¥obs
 = (**)
	`ˇŒoc
(
l
.
w
*l.
h
*l.
n
, (*));

320 
j
 = 0; j < 
l
.
w
*l.
h
*l.
n
; ++jË
¥obs
[j] = (*)
	`ˇŒoc
÷.
˛as£s
+1, ());

322 
buff
[0] = 
	`gë_image_‰om_°ªam
(
ˇp
);

323 
buff
[1] = 
	`c›y_image
(buff[0]);

324 
buff
[2] = 
	`c›y_image
(buff[0]);

325 
buff_Àâî
[0] = 
	`Àâîbox_image
(
buff
[0], 
√t
.
w
,Çë.
h
);

326 
buff_Àâî
[1] = 
	`Àâîbox_image
(
buff
[0], 
√t
.
w
,Çë.
h
);

327 
buff_Àâî
[2] = 
	`Àâîbox_image
(
buff
[0], 
√t
.
w
,Çë.
h
);

328 
ùl
 = 
	`cvCª©eImage
(
	`cvSize
(
buff
[0].
w
,buff[0].
h
), 
IPL_DEPTH_8U
, buff[0].
c
);

330 
cou¡
 = 0;

331 if(!
¥efix
){

332 
	`cvNamedWödow
("Demo", 
CV_WINDOW_NORMAL
);

333 if(
fuŒs¸ìn
){

334 
	`cvSëWödowPr›îty
("Demo", 
CV_WND_PROP_FULLSCREEN
, 
CV_WINDOW_FULLSCREEN
);

336 
	`cvMoveWödow
("Demo", 0, 0);

337 
	`cvResizeWödow
("Demo", 1352, 1013);

341 
demo_time
 = 
	`gë_wÆl_time
();

343 
nFps
 = ()
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FPS
);

345 
nSkùFømesC¡
 = ()(
nFps
 / 
nT¨gëFps
);

349 !
demo_d⁄e
){

350 
	`LOGD
("demo_d⁄e=%d cou¡=%dÖªfix=%†nSkùFømesC¡=%d\n", 
demo_d⁄e
, 
cou¡
, 
¥efix
, 
nSkùFømesC¡
);

351 
	`LOGD
("capÖrop; w=%f h=%f frame_count=%f FPS=%f POS_MS=%fÖos_count=%f\n",

352 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_WIDTH
),

353 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_HEIGHT
),

354 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FRAME_COUNT
),

355 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_FPS
),

356 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_POS_MSEC
),

357 
	`cvGëC≠tuªPr›îty
(
ˇp
, 
CV_CAP_PROP_POS_FRAMES
));

358 #ifde‡
ENABLE_VIDEO_FILE_READ_AT_TAR_FPS


359 
bPro˚ssThisFøme
 = (
nCurFømeCou¡
 && !“CurFømeCou¡ % 
nSkùFømesC¡
));

360 if(
bPro˚ssThisFøme
)

365 
buff_ödex
 = (buff_index + 1) %3;

366 if(
	`±hªad_¸óã
(&
„tch_thªad
, 0, 
„tch_ö_thªad
, 0)Ë
	`îr‹
("Thread creation failed");

367 if(
	`±hªad_¸óã
(&
dëe˘_thªad
, 0, 
dëe˘_ö_thªad
, 0)Ë
	`îr‹
("Thread creation failed");

368 if(!
¥efix
){

369 if(
cou¡
 % (
demo_dñay
+1) == 0){

370 
Âs
 = 1./(
	`gë_wÆl_time
(Ë- 
demo_time
);

371 
demo_time
 = 
	`gë_wÆl_time
();

372 *
sw≠
 = 
œ°_avg
;

373 
œ°_avg
 = 
œ°_avg2
;

374 
œ°_avg2
 = 
sw≠
;

375 
	`mem˝y
(
œ°_avg
, 
avg
, 
l
.
ouçuts
*());

377 #ifde‡
DISPLAY_RESULS


378 
	`di•œy_ö_thªad
(0);

381 
«me
[256];

383 
	`ßve_image
(
buff
[(
buff_ödex
 + 1)%3], 
«me
);

385 
	`±hªad_joö
(
„tch_thªad
, 0);

386 
	`±hªad_joö
(
dëe˘_thªad
, 0);

387 ++
cou¡
;

391 
	`cvGøbFøme
(
ˇp
);

393 
nCurFømeCou¡
++;

395 
	}
}

397 
	$demo
(*
cfgfûe
, *
weightfûe
, 
thªsh
, 
ˇm_ödex
, c⁄° *
fûíame
, **
«mes
, 
˛as£s
, 
dñay
, *
¥efix
, 
avg
, 
hõr
, 
w
, 
h
, 
‰ames
, 
fuŒs¸ìn
)

399 
	`fLOGD
(
°dîr
, "DemoÇeeds OpenCV for webcam images.\n");

400 
	}
}

403 
	$run_dëe˘‹_modñ
(
tDëe˘‹Modñ
* 
≠Dëe˘‹Modñ
)

406 *
¥efix
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-prefix", 0);

407 
thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-thresh", .24);

408 
hõr_thªsh
 = 
	`föd_Êﬂt_¨g
(
¨gc
, 
¨gv
, "-hier", .5);

409 
ˇm_ödex
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-c", 0);

410 
‰ame_skù
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-s", 0);

411 
avg
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-avg", 3);

412 if(
¨gc
 < 4){

413 
	`fLOGD
(
°dîr
, "ußge: %†%†[åaö/ã°/vÆid] [cfg] [weight†(›ti⁄Æ)]\n", 
¨gv
[0],árgv[1]);

416 *
gpu_li°
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-gpus", 0);

417 *
outfûe
 = 
	`föd_ch¨_¨g
(
¨gc
, 
¨gv
, "-out", 0);

418 *
gpus
 = 0;

419 
gpu
 = 0;

420 
ngpus
 = 0;

421 if(
gpu_li°
){

422 
	`LOGD
("%s\n", 
gpu_li°
);

423 
Àn
 = 
	`°æí
(
gpu_li°
);

424 
ngpus
 = 1;

425 
i
;

426 
i
 = 0; i < 
Àn
; ++i){

427 i‡(
gpu_li°
[
i
] =','Ë++
ngpus
;

429 
gpus
 = 
	`ˇŒoc
(
ngpus
, ());

430 
i
 = 0; i < 
ngpus
; ++i){

431 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

432 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

435 
gpu
 = 
gpu_ödex
;

436 
gpus
 = &
gpu
;

437 
ngpus
 = 1;

440 
˛ór
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-clear");

441 
fuŒs¸ìn
 = 
	`föd_¨g
(
¨gc
, 
¨gv
, "-fullscreen");

442 
width
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-w", 0);

443 
height
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-h", 0);

444 
Âs
 = 
	`föd_öt_¨g
(
¨gc
, 
¨gv
, "-fps", 0);

446 *
d©acfg
 = 
¨gv
[3];

447 *
cfg
 = 
¨gv
[4];

448 *
weights
 = (
¨gc
 > 5Ë? 
¨gv
[5] : 0;

449 *
fûíame
 = (
¨gc
 > 6Ë? 
¨gv
[6]: 0;

450 if(0==
	`°rcmp
(
¨gv
[2], "ã°")Ë
	`ã°_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
fûíame
, 
thªsh
, 
hõr_thªsh
, 
outfûe
, 
fuŒs¸ìn
);

451 if(0==
	`°rcmp
(
¨gv
[2], "åaö")Ë
	`åaö_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
gpus
, 
ngpus
, 
˛ór
);

452 if(0==
	`°rcmp
(
¨gv
[2], "vÆid")Ë
	`vÆid©e_dëe˘‹
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

453 if(0==
	`°rcmp
(
¨gv
[2], "vÆid2")Ë
	`vÆid©e_dëe˘‹_Êù
(
d©acfg
, 
cfg
, 
weights
, 
outfûe
);

454 if(0==
	`°rcmp
(
¨gv
[2], "ªˇŒ")Ë
	`vÆid©e_dëe˘‹_ªˇŒ
(
cfg
, 
weights
);

455 if(0==
	`°rcmp
(
¨gv
[2], "demo")) {

456 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
d©acfg
);

457 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 20);

458 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

459 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

460 
	`demo
(
cfg
, 
weights
, 
thªsh
, 
ˇm_ödex
, 
fûíame
, 
«mes
, 
˛as£s
, 
‰ame_skù
, 
¥efix
, 
avg
, 
hõr_thªsh
, 
width
, 
height
, 
Âs
, 
fuŒs¸ìn
);

464 
	`LOGD
("ö %p\n", 
≠Dëe˘‹Modñ
);

465 
	`LOGD
("demÿ°¨à%s\n", 
≠Dëe˘‹Modñ
->
pcD©aCfg
);

466 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
≠Dëe˘‹Modñ
->
pcD©aCfg
);

467 
	`LOGD
("h1\n");

468 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", "data/names.list");

469 
	`LOGD
("«me_li°=%s\n", 
«me_li°
);

470 **
«mes
 = 
	`gë_œbñs
(
«me_li°
);

471 
	`LOGD
("h1\n");

472 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 20);

473 
	`LOGD
("h1\n");

474 
pDëe˘‹Modñ
 = 
≠Dëe˘‹Modñ
;

475 
	`LOGD
("Dëe˘‹ Modñ cb i†%p\n", 
pDëe˘‹Modñ
->
p‚Rai£A¬Cb
);

476 
	`demo
(
≠Dëe˘‹Modñ
->
pcCfg
,ápDëe˘‹Modñ->
pcWeights
, 0.24 ,

477 0 , 
≠Dëe˘‹Modñ
->
pcFûeName
, 
«mes
, 
˛as£s
, 0 ,

478 
NULL
, 3, 0.5, 0 , 0 , 0 , 0

485 
	}
}

	@src/demo.h

1 #i‚de‡
DEMO_H


2 
	#DEMO_H


	)

4 
	~"image.h
"

	@src/detection_layer.c

1 
	~"dëe˘i⁄_œyî.h
"

2 
	~"a˘iv©i⁄s.h
"

3 
	~"so·max_œyî.h
"

4 
	~"bœs.h
"

5 
	~"box.h
"

6 
	~"cuda.h
"

7 
	~"utûs.h
"

9 
	~<°dio.h
>

10 
	~<as£π.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

14 
dëe˘i⁄_œyî
 
	$make_dëe˘i⁄_œyî
(
b©ch
, 
öputs
, 
n
, 
side
, 
˛as£s
, 
co‹ds
, 
ªsc‹e
)

16 
dëe˘i⁄_œyî
 
l
 = {0};

17 
l
.
ty≥
 = 
DETECTION
;

19 
l
.
n
 =Ç;

20 
l
.
b©ch
 = batch;

21 
l
.
öputs
 = inputs;

22 
l
.
˛as£s
 = classes;

23 
l
.
co‹ds
 = coords;

24 
l
.
ªsc‹e
 =Ñescore;

25 
l
.
side
 = side;

26 
l
.
w
 = 
side
;

27 
l
.
h
 = 
side
;

28 
	`as£π
(
side
*side*((1 + 
l
.
co‹ds
)*l.
n
 +Ü.
˛as£s
Ë=
öputs
);

29 
l
.
co°
 = 
	`ˇŒoc
(1, ());

30 
l
.
ouçuts
 =Ü.
öputs
;

31 
l
.
åuths
 =Ü.
side
*l.side*(1+l.
co‹ds
+l.
˛as£s
);

32 
l
.
ouçut
 = 
	`ˇŒoc
(
b©ch
*l.
ouçuts
, ());

33 
l
.
dñè
 = 
	`ˇŒoc
(
b©ch
*l.
ouçuts
, ());

35 
l
.
f‹w¨d
 = 
f‹w¨d_dëe˘i⁄_œyî
;

36 
l
.
backw¨d
 = 
backw¨d_dëe˘i⁄_œyî
;

37 #ifde‡
GPU


38 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_dëe˘i⁄_œyî_gpu
;

39 
l
.
backw¨d_gpu
 = 
backw¨d_dëe˘i⁄_œyî_gpu
;

40 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
b©ch
*l.
ouçuts
);

41 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
b©ch
*l.
ouçuts
);

44 
	`Ârötf
(
°dîr
, "Detection Layer\n");

45 
	`§™d
(0);

47  
l
;

48 
	}
}

50 
	$f‹w¨d_dëe˘i⁄_œyî
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
)

52 
loˇti⁄s
 = 
l
.
side
*l.side;

53 
i
,
j
;

54 
	`mem˝y
(
l
.
ouçut
, 
√t
.
öput
,Ü.
ouçuts
*l.
b©ch
*());

56 
b
;

57 i‡(
l
.
so·max
){

58 
b
 = 0; b < 
l
.
b©ch
; ++b){

59 
ödex
 = 
b
*
l
.
öputs
;

60 
i
 = 0; i < 
loˇti⁄s
; ++i) {

61 
off£t
 = 
i
*
l
.
˛as£s
;

62 
	`so·max
(
l
.
ouçut
 + 
ödex
 + 
off£t
,Ü.
˛as£s
, 1, 1,

63 
l
.
ouçut
 + 
ödex
 + 
off£t
);

67 if(
√t
.
åaö
){

68 
avg_iou
 = 0;

69 
avg_ˇt
 = 0;

70 
avg_Ælˇt
 = 0;

71 
avg_obj
 = 0;

72 
avg_™yobj
 = 0;

73 
cou¡
 = 0;

74 *(
l
.
co°
) = 0;

75 
size
 = 
l
.
öputs
 *Ü.
b©ch
;

76 
	`mem£t
(
l
.
dñè
, 0, 
size
 * ());

77 
b
 = 0; b < 
l
.
b©ch
; ++b){

78 
ödex
 = 
b
*
l
.
öputs
;

79 
i
 = 0; i < 
loˇti⁄s
; ++i) {

80 
åuth_ödex
 = (
b
*
loˇti⁄s
 + 
i
)*(1+
l
.
co‹ds
+l.
˛as£s
);

81 
is_obj
 = 
√t
.
åuth
[
åuth_ödex
];

82 
j
 = 0; j < 
l
.
n
; ++j) {

83 
p_ödex
 = 
ödex
 + 
loˇti⁄s
*
l
.
˛as£s
 + 
i
*l.
n
 + 
j
;

84 
l
.
dñè
[
p_ödex
] =Ü.
noobje˘_sˇÀ
*(0 -Ü.
ouçut
[p_index]);

85 *(
l
.
co°
Ë+l.
noobje˘_sˇÀ
*
	`pow
÷.
ouçut
[
p_ödex
], 2);

86 
avg_™yobj
 +
l
.
ouçut
[
p_ödex
];

89 
be°_ödex
 = -1;

90 
be°_iou
 = 0;

91 
be°_rm£
 = 20;

93 i‡(!
is_obj
){

97 
˛ass_ödex
 = 
ödex
 + 
i
*
l
.
˛as£s
;

98 
j
 = 0; j < 
l
.
˛as£s
; ++j) {

99 
l
.
dñè
[
˛ass_ödex
+
j
] =Ü.
˛ass_sˇÀ
 * (
√t
.
åuth
[
åuth_ödex
+1+j] -Ü.
ouçut
[class_index+j]);

100 *(
l
.
co°
Ë+l.
˛ass_sˇÀ
 * 
	`pow
(
√t
.
åuth
[
åuth_ödex
+1+
j
] -Ü.
ouçut
[
˛ass_ödex
+j], 2);

101 if(
√t
.
åuth
[
åuth_ödex
 + 1 + 
j
]Ë
avg_ˇt
 +
l
.
ouçut
[
˛ass_ödex
+j];

102 
avg_Ælˇt
 +
l
.
ouçut
[
˛ass_ödex
+
j
];

105 
box
 
åuth
 = 
	`Êﬂt_to_box
(
√t
.åuth + 
åuth_ödex
 + 1 + 
l
.
˛as£s
, 1);

106 
åuth
.
x
 /
l
.
side
;

107 
åuth
.
y
 /
l
.
side
;

109 
j
 = 0; j < 
l
.
n
; ++j){

110 
box_ödex
 = 
ödex
 + 
loˇti⁄s
*(
l
.
˛as£s
 +Ü.
n
Ë+ (
i
*l.¿+ 
j
Ë*Ü.
co‹ds
;

111 
box
 
out
 = 
	`Êﬂt_to_box
(
l
.
ouçut
 + 
box_ödex
, 1);

112 
out
.
x
 /
l
.
side
;

113 
out
.
y
 /
l
.
side
;

115 i‡(
l
.
sqπ
){

116 
out
.
w
 = out.w*out.w;

117 
out
.
h
 = out.h*out.h;

120 
iou
 = 
	`box_iou
(
out
, 
åuth
);

122 
rm£
 = 
	`box_rm£
(
out
, 
åuth
);

123 if(
be°_iou
 > 0 || 
iou
 > 0){

124 if(
iou
 > 
be°_iou
){

125 
be°_iou
 = 
iou
;

126 
be°_ödex
 = 
j
;

129 if(
rm£
 < 
be°_rm£
){

130 
be°_rm£
 = 
rm£
;

131 
be°_ödex
 = 
j
;

136 if(
l
.
f‹˚d
){

137 if(
åuth
.
w
*åuth.
h
 < .1){

138 
be°_ödex
 = 1;

140 
be°_ödex
 = 0;

143 if(
l
.
øndom
 && *(
√t
.
£í
) < 64000){

144 
be°_ödex
 = 
	`ønd
()%
l
.
n
;

147 
box_ödex
 = 
ödex
 + 
loˇti⁄s
*(
l
.
˛as£s
 +Ü.
n
Ë+ (
i
*l.¿+ 
be°_ödex
Ë*Ü.
co‹ds
;

148 
tbox_ödex
 = 
åuth_ödex
 + 1 + 
l
.
˛as£s
;

150 
box
 
out
 = 
	`Êﬂt_to_box
(
l
.
ouçut
 + 
box_ödex
, 1);

151 
out
.
x
 /
l
.
side
;

152 
out
.
y
 /
l
.
side
;

153 i‡(
l
.
sqπ
) {

154 
out
.
w
 = out.w*out.w;

155 
out
.
h
 = out.h*out.h;

157 
iou
 = 
	`box_iou
(
out
, 
åuth
);

160 
p_ödex
 = 
ödex
 + 
loˇti⁄s
*
l
.
˛as£s
 + 
i
*l.
n
 + 
be°_ödex
;

161 *(
l
.
co°
Ë-l.
noobje˘_sˇÀ
 * 
	`pow
÷.
ouçut
[
p_ödex
], 2);

162 *(
l
.
co°
Ë+l.
obje˘_sˇÀ
 * 
	`pow
(1-l.
ouçut
[
p_ödex
], 2);

163 
avg_obj
 +
l
.
ouçut
[
p_ödex
];

164 
l
.
dñè
[
p_ödex
] =Ü.
obje˘_sˇÀ
 * (1.-l.
ouçut
[p_index]);

166 if(
l
.
ªsc‹e
){

167 
l
.
dñè
[
p_ödex
] =Ü.
obje˘_sˇÀ
 * (
iou
 -Ü.
ouçut
[p_index]);

170 
l
.
dñè
[
box_ödex
+0] =Ü.
co‹d_sˇÀ
*(
√t
.
åuth
[
tbox_ödex
 + 0] -Ü.
ouçut
[box_index + 0]);

171 
l
.
dñè
[
box_ödex
+1] =Ü.
co‹d_sˇÀ
*(
√t
.
åuth
[
tbox_ödex
 + 1] -Ü.
ouçut
[box_index + 1]);

172 
l
.
dñè
[
box_ödex
+2] =Ü.
co‹d_sˇÀ
*(
√t
.
åuth
[
tbox_ödex
 + 2] -Ü.
ouçut
[box_index + 2]);

173 
l
.
dñè
[
box_ödex
+3] =Ü.
co‹d_sˇÀ
*(
√t
.
åuth
[
tbox_ödex
 + 3] -Ü.
ouçut
[box_index + 3]);

174 if(
l
.
sqπ
){

175 
l
.
dñè
[
box_ödex
+2] =Ü.
co‹d_sˇÀ
*(
	`sqπ
(
√t
.
åuth
[
tbox_ödex
 + 2]Ë-Ü.
ouçut
[box_index + 2]);

176 
l
.
dñè
[
box_ödex
+3] =Ü.
co‹d_sˇÀ
*(
	`sqπ
(
√t
.
åuth
[
tbox_ödex
 + 3]Ë-Ü.
ouçut
[box_index + 3]);

179 *(
l
.
co°
Ë+
	`pow
(1-
iou
, 2);

180 
avg_iou
 +
iou
;

181 ++
cou¡
;

186 *
co°s
 = 
	`ˇŒoc
(
l
.
b©ch
*
loˇti⁄s
*l.
n
, ());

187 
b
 = 0; b < 
l
.
b©ch
; ++b) {

188 
ödex
 = 
b
*
l
.
öputs
;

189 
i
 = 0; i < 
loˇti⁄s
; ++i) {

190 
j
 = 0; j < 
l
.
n
; ++j) {

191 
p_ödex
 = 
ödex
 + 
loˇti⁄s
*
l
.
˛as£s
 + 
i
*l.
n
 + 
j
;

192 
co°s
[
b
*
loˇti⁄s
*
l
.
n
 + 
i
*l.¿+ 
j
] =Ü.
dñè
[
p_ödex
]*l.delta[p_index];

196 
ödexes
[100];

197 
	`t›_k
(
co°s
, 
l
.
b©ch
*
loˇti⁄s
*l.
n
, 100, 
ödexes
);

198 
cutoff
 = 
co°s
[
ödexes
[99]];

199 
b
 = 0; b < 
l
.
b©ch
; ++b) {

200 
ödex
 = 
b
*
l
.
öputs
;

201 
i
 = 0; i < 
loˇti⁄s
; ++i) {

202 
j
 = 0; j < 
l
.
n
; ++j) {

203 
p_ödex
 = 
ödex
 + 
loˇti⁄s
*
l
.
˛as£s
 + 
i
*l.
n
 + 
j
;

204 i‡(
l
.
dñè
[
p_ödex
]*l.dñè[p_ödex] < 
cutoff
)Ü.delta[p_index] = 0;

208 
	`‰ì
(
co°s
);

212 *(
l
.
co°
Ë
	`pow
(
	`mag_¨øy
÷.
dñè
,Ü.
ouçuts
 *Ü.
b©ch
), 2);

215 
	`¥ötf
("Dëe˘i⁄ Avg IOU: %f, Po†C©: %f, AŒ C©: %f, Po†Obj: %f, Any Obj: %f, cou¡: %d\n", 
avg_iou
/
cou¡
, 
avg_ˇt
/cou¡, 
avg_Ælˇt
/(cou¡*
l
.
˛as£s
), 
avg_obj
/cou¡, 
avg_™yobj
/÷.
b©ch
*
loˇti⁄s
*l.
n
), count);

218 
	}
}

220 
	$backw¨d_dëe˘i⁄_œyî
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
)

222 
	`axpy_˝u
(
l
.
b©ch
*l.
öputs
, 1,Ü.
dñè
, 1, 
√t
.delta, 1);

223 
	}
}

225 
	$gë_dëe˘i⁄_boxes
(
œyî
 
l
, 
w
, 
h
, 
thªsh
, **
¥obs
, 
box
 *
boxes
, 
⁄ly_obje˘√ss
)

227 
i
,
j
,
n
;

228 *
¥edi˘i⁄s
 = 
l
.
ouçut
;

230 
i
 = 0; i < 
l
.
side
*l.side; ++i){

231 
row
 = 
i
 / 
l
.
side
;

232 
cﬁ
 = 
i
 % 
l
.
side
;

233 
n
 = 0;Ç < 
l
.n; ++n){

234 
ödex
 = 
i
*
l
.
n
 +Ç;

235 
p_ödex
 = 
l
.
side
*l.side*l.
˛as£s
 + 
i
*l.
n
 +Ç;

236 
sˇÀ
 = 
¥edi˘i⁄s
[
p_ödex
];

237 
box_ödex
 = 
l
.
side
*l.side*÷.
˛as£s
 +Ü.
n
Ë+ (
i
*l.n +Ç)*4;

238 
boxes
[
ödex
].
x
 = (
¥edi˘i⁄s
[
box_ödex
 + 0] + 
cﬁ
Ë/ 
l
.
side
 * 
w
;

239 
boxes
[
ödex
].
y
 = (
¥edi˘i⁄s
[
box_ödex
 + 1] + 
row
Ë/ 
l
.
side
 * 
h
;

240 
boxes
[
ödex
].
w
 = 
	`pow
(
¥edi˘i⁄s
[
box_ödex
 + 2], (
l
.
sqπ
?2:1)) * w;

241 
boxes
[
ödex
].
h
 = 
	`pow
(
¥edi˘i⁄s
[
box_ödex
 + 3], (
l
.
sqπ
?2:1)) * h;

242 
j
 = 0; j < 
l
.
˛as£s
; ++j){

243 
˛ass_ödex
 = 
i
*
l
.
˛as£s
;

244 
¥ob
 = 
sˇÀ
*
¥edi˘i⁄s
[
˛ass_ödex
+
j
];

245 
¥obs
[
ödex
][
j
] = (
¥ob
 > 
thªsh
) ?Örob : 0;

247 if(
⁄ly_obje˘√ss
){

248 
¥obs
[
ödex
][0] = 
sˇÀ
;

252 
	}
}

254 #ifde‡
GPU


256 
	$f‹w¨d_dëe˘i⁄_œyî_gpu
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
)

258 if(!
√t
.
åaö
){

259 
	`c›y_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
, 1,Ü.
ouçut_gpu
, 1);

266 
	`f‹w¨d_dëe˘i⁄_œyî
(
l
, 
√t
);

267 
	`cuda_push_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
b©ch
*l.
ouçuts
);

268 
	`cuda_push_¨øy
(
l
.
dñè_gpu
,Ü.
dñè
,Ü.
b©ch
*l.
öputs
);

269 
	}
}

271 
	$backw¨d_dëe˘i⁄_œyî_gpu
(
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
)

273 
	`axpy_gpu
(
l
.
b©ch
*l.
öputs
, 1,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

275 
	}
}

	@src/detection_layer.h

1 #i‚de‡
DETECTION_LAYER_H


2 
	#DETECTION_LAYER_H


	)

4 
	~"œyî.h
"

5 
	~"√tw‹k.h
"

7 
œyî
 
	tdëe˘i⁄_œyî
;

9 
dëe˘i⁄_œyî
 
make_dëe˘i⁄_œyî
(
b©ch
, 
öputs
, 
n
, 
size
, 
˛as£s
, 
co‹ds
, 
ªsc‹e
);

10 
f‹w¨d_dëe˘i⁄_œyî
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
);

11 
backw¨d_dëe˘i⁄_œyî
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
);

13 #ifde‡
GPU


14 
f‹w¨d_dëe˘i⁄_œyî_gpu
(c⁄° 
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_dëe˘i⁄_œyî_gpu
(
dëe˘i⁄_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/dropout_layer.c

1 
	~"dr›out_œyî.h
"

2 
	~"utûs.h
"

3 
	~"cuda.h
"

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
dr›out_œyî
 
	$make_dr›out_œyî
(
b©ch
, 
öputs
, 
¥obabûôy
)

9 
dr›out_œyî
 
l
 = {0};

10 
l
.
ty≥
 = 
DROPOUT
;

11 
l
.
¥obabûôy
 =Örobability;

12 
l
.
öputs
 = inputs;

13 
l
.
ouçuts
 = 
öputs
;

14 
l
.
b©ch
 = batch;

15 
l
.
ønd
 = 
	`ˇŒoc
(
öputs
*
b©ch
, ());

16 
l
.
sˇÀ
 = 1./(1.-
¥obabûôy
);

17 
l
.
f‹w¨d
 = 
f‹w¨d_dr›out_œyî
;

18 
l
.
backw¨d
 = 
backw¨d_dr›out_œyî
;

19 #ifde‡
GPU


20 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_dr›out_œyî_gpu
;

21 
l
.
backw¨d_gpu
 = 
backw¨d_dr›out_œyî_gpu
;

22 
l
.
ønd_gpu
 = 
	`cuda_make_¨øy
÷.
ønd
, 
öputs
*
b©ch
);

24 
	`Ârötf
(
°dîr
, "dr›ouàÖ = %.2‡ %4d -> %4d\n", 
¥obabûôy
, 
öputs
, inputs);

25  
l
;

26 
	}
}

28 
	$ªsize_dr›out_œyî
(
dr›out_œyî
 *
l
, 
öputs
)

30 
l
->
ønd
 = 
	`ªÆloc
÷->ønd,Ü->
öputs
*l->
b©ch
*());

31 #ifde‡
GPU


32 
	`cuda_‰ì
(
l
->
ønd_gpu
);

34 
l
->
ønd_gpu
 = 
	`cuda_make_¨øy
÷->
ønd
, 
öputs
*l->
b©ch
);

36 
	}
}

38 
	$f‹w¨d_dr›out_œyî
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
)

40 
i
;

41 i‡(!
√t
.
åaö
) ;

42 
i
 = 0; i < 
l
.
b©ch
 *Ü.
öputs
; ++i){

43 
r
 = 
	`ønd_unif‹m
(0, 1);

44 
l
.
ønd
[
i
] = 
r
;

45 if(
r
 < 
l
.
¥obabûôy
Ë
√t
.
öput
[
i
] = 0;

46 
√t
.
öput
[
i
] *
l
.
sˇÀ
;

48 
	}
}

50 
	$backw¨d_dr›out_œyî
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
)

52 
i
;

53 if(!
√t
.
dñè
) ;

54 
i
 = 0; i < 
l
.
b©ch
 *Ü.
öputs
; ++i){

55 
r
 = 
l
.
ønd
[
i
];

56 if(
r
 < 
l
.
¥obabûôy
Ë
√t
.
dñè
[
i
] = 0;

57 
√t
.
dñè
[
i
] *
l
.
sˇÀ
;

59 
	}
}

	@src/dropout_layer.h

1 #i‚de‡
DROPOUT_LAYER_H


2 
	#DROPOUT_LAYER_H


	)

4 
	~"œyî.h
"

5 
	~"√tw‹k.h
"

7 
œyî
 
	tdr›out_œyî
;

9 
dr›out_œyî
 
make_dr›out_œyî
(
b©ch
, 
öputs
, 
¥obabûôy
);

11 
f‹w¨d_dr›out_œyî
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
);

12 
backw¨d_dr›out_œyî
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
);

13 
ªsize_dr›out_œyî
(
dr›out_œyî
 *
l
, 
öputs
);

15 #ifde‡
GPU


16 
f‹w¨d_dr›out_œyî_gpu
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
);

17 
backw¨d_dr›out_œyî_gpu
(
dr›out_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/gemm.c

1 
	~"gemm.h
"

2 
	~"utûs.h
"

3 
	~"cuda.h
"

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<m©h.h
>

8 
	$gemm_bö
(
M
, 
N
, 
K
, 
ALPHA
,

9 *
A
, 
lda
,

10 *
B
, 
ldb
,

11 *
C
, 
ldc
)

13 
i
,
j
,
k
;

14 
i
 = 0; i < 
M
; ++i){

15 
k
 = 0; k < 
K
; ++k){

16 
A_PART
 = 
A
[
i
*
lda
+
k
];

17 if(
A_PART
){

18 
j
 = 0; j < 
N
; ++j){

19 
C
[
i
*
ldc
+
j
] +
B
[
k
*
ldb
+j];

22 
j
 = 0; j < 
N
; ++j){

23 
C
[
i
*
ldc
+
j
] -
B
[
k
*
ldb
+j];

28 
	}
}

30 *
	$øndom_m©rix
(
rows
, 
cﬁs
)

32 
i
;

33 *
m
 = 
	`ˇŒoc
(
rows
*
cﬁs
, ());

34 
i
 = 0; i < 
rows
*
cﬁs
; ++i){

35 
m
[
i
] = ()
	`ønd
()/
RAND_MAX
;

37  
m
;

38 
	}
}

40 
	$time_øndom_m©rix
(
TA
, 
TB
, 
m
, 
k
, 
n
)

42 *
a
;

43 if(!
TA
Ë
a
 = 
	`øndom_m©rix
(
m
,
k
);

44 
a
 = 
	`øndom_m©rix
(
k
,
m
);

45 
lda
 = (!
TA
)?
k
:
m
;

46 *
b
;

47 if(!
TB
Ë
b
 = 
	`øndom_m©rix
(
k
,
n
);

48 
b
 = 
	`øndom_m©rix
(
n
,
k
);

49 
ldb
 = (!
TB
)?
n
:
k
;

51 *
c
 = 
	`øndom_m©rix
(
m
,
n
);

52 
i
;

53 
˛ock_t
 
°¨t
 = 
	`˛ock
(), 
íd
;

54 
i
 = 0; i<10; ++i){

55 
	`gemm_˝u
(
TA
,
TB
,
m
,
n
,
k
,1,
a
,
lda
,
b
,
ldb
,1,
c
,n);

57 
íd
 = 
	`˛ock
();

58 
	`¥ötf
("M©rix Mu…ùliˇti⁄ %dx%d * %dx%d, TA=%d, TB=%d: %l‡ms\n",
m
,
k
,k,
n
, 
TA
, 
TB
, ()(
íd
-
°¨t
)/
CLOCKS_PER_SEC
);

59 
	`‰ì
(
a
);

60 
	`‰ì
(
b
);

61 
	`‰ì
(
c
);

62 
	}
}

65 
	$gemm
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

66 *
A
, 
lda
,

67 *
B
, 
ldb
,

68 
BETA
,

69 *
C
, 
ldc
)

71 
	`gemm_˝u
–
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,
A
,
lda
, 
B
, 
ldb
,
BETA
,
C
,
ldc
);

72 
	}
}

74 
	$gemm_¬
(
M
, 
N
, 
K
, 
ALPHA
,

75 *
A
, 
lda
,

76 *
B
, 
ldb
,

77 *
C
, 
ldc
)

79 
i
,
j
,
k
;

80 
i
 = 0; i < 
M
; ++i){

81 
k
 = 0; k < 
K
; ++k){

82 
A_PART
 = 
ALPHA
*
A
[
i
*
lda
+
k
];

83 
j
 = 0; j < 
N
; ++j){

84 
C
[
i
*
ldc
+
j
] +
A_PART
*
B
[
k
*
ldb
+j];

88 
	}
}

90 
	$gemm_¡
(
M
, 
N
, 
K
, 
ALPHA
,

91 *
A
, 
lda
,

92 *
B
, 
ldb
,

93 *
C
, 
ldc
)

95 
i
,
j
,
k
;

96 
i
 = 0; i < 
M
; ++i){

97 
j
 = 0; j < 
N
; ++j){

98 
sum
 = 0;

99 
k
 = 0; k < 
K
; ++k){

100 
sum
 +
ALPHA
*
A
[
i
*
lda
+
k
]*
B
[
j
*
ldb
 + k];

102 
C
[
i
*
ldc
+
j
] +
sum
;

105 
	}
}

107 
	$gemm_ä
(
M
, 
N
, 
K
, 
ALPHA
,

108 *
A
, 
lda
,

109 *
B
, 
ldb
,

110 *
C
, 
ldc
)

112 
i
,
j
,
k
;

113 
i
 = 0; i < 
M
; ++i){

114 
k
 = 0; k < 
K
; ++k){

115 
A_PART
 = 
ALPHA
*
A
[
k
*
lda
+
i
];

116 
j
 = 0; j < 
N
; ++j){

117 
C
[
i
*
ldc
+
j
] +
A_PART
*
B
[
k
*
ldb
+j];

121 
	}
}

123 
	$gemm_â
(
M
, 
N
, 
K
, 
ALPHA
,

124 *
A
, 
lda
,

125 *
B
, 
ldb
,

126 *
C
, 
ldc
)

128 
i
,
j
,
k
;

129 
i
 = 0; i < 
M
; ++i){

130 
j
 = 0; j < 
N
; ++j){

131 
sum
 = 0;

132 
k
 = 0; k < 
K
; ++k){

133 
sum
 +
ALPHA
*
A
[
i
+
k
*
lda
]*
B
[k+
j
*
ldb
];

135 
C
[
i
*
ldc
+
j
] +
sum
;

138 
	}
}

141 
	$gemm_˝u
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

142 *
A
, 
lda
,

143 *
B
, 
ldb
,

144 
BETA
,

145 *
C
, 
ldc
)

148 
i
, 
j
;

149 
i
 = 0; i < 
M
; ++i){

150 
j
 = 0; j < 
N
; ++j){

151 
C
[
i
*
ldc
 + 
j
] *
BETA
;

154 if(!
TA
 && !
TB
)

155 
	`gemm_¬
(
M
, 
N
, 
K
, 
ALPHA
,
A
,
lda
, 
B
, 
ldb
,
C
,
ldc
);

156 if(
TA
 && !
TB
)

157 
	`gemm_ä
(
M
, 
N
, 
K
, 
ALPHA
,
A
,
lda
, 
B
, 
ldb
,
C
,
ldc
);

158 if(!
TA
 && 
TB
)

159 
	`gemm_¡
(
M
, 
N
, 
K
, 
ALPHA
,
A
,
lda
, 
B
, 
ldb
,
C
,
ldc
);

161 
	`gemm_â
(
M
, 
N
, 
K
, 
ALPHA
,
A
,
lda
, 
B
, 
ldb
,
C
,
ldc
);

162 
	}
}

164 #ifde‡
GPU


166 
	~<m©h.h
>

168 
	$gemm_gpu
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

169 *
A_gpu
, 
lda
,

170 *
B_gpu
, 
ldb
,

171 
BETA
,

172 *
C_gpu
, 
ldc
)

174 
cubœsH™dÀ_t
 
h™dÀ
 = 
	`bœs_h™dÀ
();

175 
cudaEº‹_t
 
°©us
 = 
	`cubœsSgemm
(
h™dÀ
, (
TB
 ? 
CUBLAS_OP_T
 : 
CUBLAS_OP_N
),

176 (
TA
 ? 
CUBLAS_OP_T
 : 
CUBLAS_OP_N
), 
N
, 
M
, 
K
, &
ALPHA
, 
B_gpu
, 
ldb
, 
A_gpu
, 
lda
, &
BETA
, 
C_gpu
, 
ldc
);

177 
	`check_îr‹
(
°©us
);

178 
	}
}

180 
	~<°dio.h
>

181 
	~<°dlib.h
>

182 
	~<°rög.h
>

183 
	~<time.h
>

185 
	$time_gpu_øndom_m©rix
(
TA
, 
TB
, 
m
, 
k
, 
n
)

187 *
a
;

188 if(!
TA
Ë
a
 = 
	`øndom_m©rix
(
m
,
k
);

189 
a
 = 
	`øndom_m©rix
(
k
,
m
);

190 
lda
 = (!
TA
)?
k
:
m
;

191 *
b
;

192 if(!
TB
Ë
b
 = 
	`øndom_m©rix
(
k
,
n
);

193 
b
 = 
	`øndom_m©rix
(
n
,
k
);

194 
ldb
 = (!
TB
)?
n
:
k
;

196 *
c
 = 
	`øndom_m©rix
(
m
,
n
);

197 
i
;

198 
˛ock_t
 
°¨t
 = 
	`˛ock
(), 
íd
;

199 
i
 = 0; i<32; ++i){

200 
	`gemm_gpu
(
TA
,
TB
,
m
,
n
,
k
,1,
a
,
lda
,
b
,
ldb
,1,
c
,n);

202 
íd
 = 
	`˛ock
();

203 
	`¥ötf
("M©rix Mu…ùliˇti⁄ %dx%d * %dx%d, TA=%d, TB=%d: %l‡s\n",
m
,
k
,k,
n
, 
TA
, 
TB
, ()(
íd
-
°¨t
)/
CLOCKS_PER_SEC
);

204 
	`‰ì
(
a
);

205 
	`‰ì
(
b
);

206 
	`‰ì
(
c
);

207 
	}
}

209 
	$time_gpu
(
TA
, 
TB
, 
m
, 
k
, 
n
)

211 
ôî
 = 10;

212 *
a
 = 
	`øndom_m©rix
(
m
,
k
);

213 *
b
 = 
	`øndom_m©rix
(
k
,
n
);

215 
lda
 = (!
TA
)?
k
:
m
;

216 
ldb
 = (!
TB
)?
n
:
k
;

218 *
c
 = 
	`øndom_m©rix
(
m
,
n
);

220 *
a_˛
 = 
	`cuda_make_¨øy
(
a
, 
m
*
k
);

221 *
b_˛
 = 
	`cuda_make_¨øy
(
b
, 
k
*
n
);

222 *
c_˛
 = 
	`cuda_make_¨øy
(
c
, 
m
*
n
);

224 
i
;

225 
˛ock_t
 
°¨t
 = 
	`˛ock
(), 
íd
;

226 
i
 = 0; i<
ôî
; ++i){

227 
	`gemm_gpu
(
TA
,
TB
,
m
,
n
,
k
,1,
a_˛
,
lda
,
b_˛
,
ldb
,1,
c_˛
,n);

228 
	`cudaThªadSynchr⁄ize
();

230 
Ê›
 = (()
m
)*
n
*(2.*
k
 + 2.)*
ôî
;

231 
gÊ›
 = 
Ê›
/
	`pow
(10., 9);

232 
íd
 = 
	`˛ock
();

233 
£c⁄ds
 = 
	`£c
(
íd
-
°¨t
);

234 
	`¥ötf
("M©rix Mu…ùliˇti⁄ %dx%d * %dx%d, TA=%d, TB=%d: %l‡s, %l‡GFLOPS\n",
m
,
k
,k,
n
, 
TA
, 
TB
, 
£c⁄ds
, 
gÊ›
/seconds);

235 
	`cuda_‰ì
(
a_˛
);

236 
	`cuda_‰ì
(
b_˛
);

237 
	`cuda_‰ì
(
c_˛
);

238 
	`‰ì
(
a
);

239 
	`‰ì
(
b
);

240 
	`‰ì
(
c
);

241 
	}
}

244 
	$ã°_gpu_accuøcy
(
TA
, 
TB
, 
m
, 
k
, 
n
)

246 
	`§™d
(0);

247 *
a
;

248 if(!
TA
Ë
a
 = 
	`øndom_m©rix
(
m
,
k
);

249 
a
 = 
	`øndom_m©rix
(
k
,
m
);

250 
lda
 = (!
TA
)?
k
:
m
;

251 *
b
;

252 if(!
TB
Ë
b
 = 
	`øndom_m©rix
(
k
,
n
);

253 
b
 = 
	`øndom_m©rix
(
n
,
k
);

254 
ldb
 = (!
TB
)?
n
:
k
;

256 *
c
 = 
	`øndom_m©rix
(
m
,
n
);

257 *
c_gpu
 = 
	`øndom_m©rix
(
m
,
n
);

258 
	`mem£t
(
c
, 0, 
m
*
n
*());

259 
	`mem£t
(
c_gpu
, 0, 
m
*
n
*());

260 
i
;

262 
	`gemm_gpu
(
TA
,
TB
,
m
,
n
,
k
,1,
a
,
lda
,
b
,
ldb
,1,
c_gpu
,n);

266 
	`gemm_˝u
(
TA
,
TB
,
m
,
n
,
k
,1,
a
,
lda
,
b
,
ldb
,1,
c
,n);

269 
s£
 = 0;

270 
i
 = 0; i < 
m
*
n
; ++i) {

272 
s£
 +
	`pow
(
c
[
i
]-
c_gpu
[i], 2);

274 
	`¥ötf
("M©rix Mu…ùliˇti⁄ %dx%d * %dx%d, TA=%d, TB=%d: %g SSE\n",
m
,
k
,k,
n
, 
TA
, 
TB
, 
s£
/(m*n));

275 
	`‰ì
(
a
);

276 
	`‰ì
(
b
);

277 
	`‰ì
(
c
);

278 
	`‰ì
(
c_gpu
);

279 
	}
}

281 
	$ã°_gpu_bœs
()

308 
	`time_gpu
(0,0,64,75,12544);

309 
	`time_gpu
(0,0,64,75,12544);

310 
	`time_gpu
(0,0,64,75,12544);

311 
	`time_gpu
(0,0,64,576,12544);

312 
	`time_gpu
(0,0,256,2304,784);

313 
	`time_gpu
(1,1,2304,256,784);

314 
	`time_gpu
(0,0,512,4608,196);

315 
	`time_gpu
(1,1,4608,512,196);

318 
	}
}

	@src/gemm.h

1 #i‚de‡
GEMM_H


2 
	#GEMM_H


	)

4 
gemm_bö
(
M
, 
N
, 
K
, 
ALPHA
,

5 *
A
, 
lda
,

6 *
B
, 
ldb
,

7 *
C
, 
ldc
);

9 
gemm
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

10 *
A
, 
lda
,

11 *
B
, 
ldb
,

12 
BETA
,

13 *
C
, 
ldc
);

15 
gemm_˝u
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

16 *
A
, 
lda
,

17 *
B
, 
ldb
,

18 
BETA
,

19 *
C
, 
ldc
);

21 #ifde‡
GPU


22 
gemm_gpu
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

23 *
A_gpu
, 
lda
,

24 *
B_gpu
, 
ldb
,

25 
BETA
,

26 *
C_gpu
, 
ldc
);

28 
gemm_gpu
(
TA
, 
TB
, 
M
, 
N
, 
K
, 
ALPHA
,

29 *
A
, 
lda
,

30 *
B
, 
ldb
,

31 
BETA
,

32 *
C
, 
ldc
);

	@src/gru_layer.c

1 
	~"gru_œyî.h
"

2 
	~"c⁄√˘ed_œyî.h
"

3 
	~"utûs.h
"

4 
	~"cuda.h
"

5 
	~"bœs.h
"

6 
	~"gemm.h
"

8 
	~<m©h.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	$ö¸emít_œyî
(
œyî
 *
l
, 
°ïs
)

15 
num
 = 
l
->
ouçuts
*l->
b©ch
*
°ïs
;

16 
l
->
ouçut
 +
num
;

17 
l
->
dñè
 +
num
;

18 
l
->
x
 +
num
;

19 
l
->
x_n‹m
 +
num
;

21 #ifde‡
GPU


22 
l
->
ouçut_gpu
 +
num
;

23 
l
->
dñè_gpu
 +
num
;

24 
l
->
x_gpu
 +
num
;

25 
l
->
x_n‹m_gpu
 +
num
;

27 
	}
}

29 
œyî
 
	$make_gru_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
b©ch_n‹mÆize
, 
adam
)

31 
	`Ârötf
(
°dîr
, "GRU Layî: %d i≈uts, %d ouçuts\n", 
öputs
, 
ouçuts
);

32 
b©ch
 = b©ch / 
°ïs
;

33 
œyî
 
l
 = {0};

34 
l
.
b©ch
 = batch;

35 
l
.
ty≥
 = 
GRU
;

36 
l
.
°ïs
 = steps;

37 
l
.
öputs
 = inputs;

39 
l
.
uz
 = 
	`mÆloc
((
œyî
));

40 
	`Ârötf
(
°dîr
, "\t\t");

41 *(
l
.
uz
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

42 
l
.
uz
->
b©ch
 = batch;

44 
l
.
wz
 = 
	`mÆloc
((
œyî
));

45 
	`Ârötf
(
°dîr
, "\t\t");

46 *(
l
.
wz
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

47 
l
.
wz
->
b©ch
 = batch;

49 
l
.
ur
 = 
	`mÆloc
((
œyî
));

50 
	`Ârötf
(
°dîr
, "\t\t");

51 *(
l
.
ur
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

52 
l
.
ur
->
b©ch
 = batch;

54 
l
.
wr
 = 
	`mÆloc
((
œyî
));

55 
	`Ârötf
(
°dîr
, "\t\t");

56 *(
l
.
wr
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

57 
l
.
wr
->
b©ch
 = batch;

61 
l
.
uh
 = 
	`mÆloc
((
œyî
));

62 
	`Ârötf
(
°dîr
, "\t\t");

63 *(
l
.
uh
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

64 
l
.
uh
->
b©ch
 = batch;

66 
l
.
wh
 = 
	`mÆloc
((
œyî
));

67 
	`Ârötf
(
°dîr
, "\t\t");

68 *(
l
.
wh
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

69 
l
.
wh
->
b©ch
 = batch;

71 
l
.
b©ch_n‹mÆize
 = batch_normalize;

74 
l
.
ouçuts
 = outputs;

75 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
*
°ïs
, ());

76 
l
.
dñè
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
*
°ïs
, ());

77 
l
.
°©e
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

78 
l
.
¥ev_°©e
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

79 
l
.
f‹gŸ_°©e
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

80 
l
.
f‹gŸ_dñè
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

82 
l
.
r_˝u
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

83 
l
.
z_˝u
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

84 
l
.
h_˝u
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

86 
l
.
f‹w¨d
 = 
f‹w¨d_gru_œyî
;

87 
l
.
backw¨d
 = 
backw¨d_gru_œyî
;

88 
l
.
upd©e
 = 
upd©e_gru_œyî
;

90 #ifde‡
GPU


91 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_gru_œyî_gpu
;

92 
l
.
backw¨d_gpu
 = 
backw¨d_gru_œyî_gpu
;

93 
l
.
upd©e_gpu
 = 
upd©e_gru_œyî_gpu
;

95 
l
.
f‹gŸ_°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

96 
l
.
f‹gŸ_dñè_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

97 
l
.
¥ev_°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

98 
l
.
°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

99 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
*
°ïs
);

100 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
*
°ïs
);

101 
l
.
r_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

102 
l
.
z_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

103 
l
.
h_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

105 #ifde‡
CUDNN


106 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
uz
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.uz->
out_c
,Ü.uz->
out_h
,Ü.uz->
out_w
);

107 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
uh
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.uh->
out_c
,Ü.uh->
out_h
,Ü.uh->
out_w
);

108 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
ur
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.ur->
out_c
,Ü.ur->
out_h
,Ü.ur->
out_w
);

109 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wz
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wz->
out_c
,Ü.wz->
out_h
,Ü.wz->
out_w
);

110 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wh
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wh->
out_c
,Ü.wh->
out_h
,Ü.wh->
out_w
);

111 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wr
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wr->
out_c
,Ü.wr->
out_h
,Ü.wr->
out_w
);

115  
l
;

116 
	}
}

118 
	$upd©e_gru_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

120 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
ur
), 
a
);

121 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
uz
), 
a
);

122 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
uh
), 
a
);

123 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wr
), 
a
);

124 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wz
), 
a
);

125 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wh
), 
a
);

126 
	}
}

128 
	$f‹w¨d_gru_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

130 
√tw‹k
 
s
 = 
√t
;

131 
s
.
åaö
 = 
√t
.train;

132 
i
;

133 
œyî
 
uz
 = *(
l
.uz);

134 
œyî
 
ur
 = *(
l
.ur);

135 
œyî
 
uh
 = *(
l
.uh);

137 
œyî
 
wz
 = *(
l
.wz);

138 
œyî
 
wr
 = *(
l
.wr);

139 
œyî
 
wh
 = *(
l
.wh);

141 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uz
.
dñè
, 1);

142 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ur
.
dñè
, 1);

143 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uh
.
dñè
, 1);

145 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wz
.
dñè
, 1);

146 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wr
.
dñè
, 1);

147 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wh
.
dñè
, 1);

148 if(
√t
.
åaö
) {

149 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0,Ü.
dñè
, 1);

150 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e
, 1,Ü.
¥ev_°©e
, 1);

153 
i
 = 0; i < 
l
.
°ïs
; ++i) {

154 
s
.
öput
 = 
l
.
°©e
;

155 
	`f‹w¨d_c⁄√˘ed_œyî
(
wz
, 
s
);

156 
	`f‹w¨d_c⁄√˘ed_œyî
(
wr
, 
s
);

158 
s
.
öput
 = 
√t
.input;

159 
	`f‹w¨d_c⁄√˘ed_œyî
(
uz
, 
s
);

160 
	`f‹w¨d_c⁄√˘ed_œyî
(
ur
, 
s
);

161 
	`f‹w¨d_c⁄√˘ed_œyî
(
uh
, 
s
);

164 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
uz
.
ouçut
, 1,Ü.
z_˝u
, 1);

165 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
wz
.
ouçut
, 1,Ü.
z_˝u
, 1);

167 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
ur
.
ouçut
, 1,Ü.
r_˝u
, 1);

168 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
wr
.
ouçut
, 1,Ü.
r_˝u
, 1);

170 
	`a˘iv©e_¨øy
(
l
.
z_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

171 
	`a˘iv©e_¨øy
(
l
.
r_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

173 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e
, 1,Ü.
f‹gŸ_°©e
, 1);

174 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
r_˝u
, 1,Ü.
f‹gŸ_°©e
, 1);

176 
s
.
öput
 = 
l
.
f‹gŸ_°©e
;

177 
	`f‹w¨d_c⁄√˘ed_œyî
(
wh
, 
s
);

179 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
uh
.
ouçut
, 1,Ü.
h_˝u
, 1);

180 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
wh
.
ouçut
, 1,Ü.
h_˝u
, 1);

182 if(
l
.
ènh
){

183 
	`a˘iv©e_¨øy
(
l
.
h_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

185 
	`a˘iv©e_¨øy
(
l
.
h_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

188 
	`weighãd_sum_˝u
(
l
.
°©e
,Ü.
h_˝u
,Ü.
z_˝u
,Ü.
ouçuts
*l.
b©ch
,Ü.
ouçut
);

190 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut
, 1,Ü.
°©e
, 1);

192 
√t
.
öput
 +
l
.
öputs
*l.
b©ch
;

193 
l
.
ouçut
 +l.
ouçuts
*l.
b©ch
;

194 
	`ö¸emít_œyî
(&
uz
, 1);

195 
	`ö¸emít_œyî
(&
ur
, 1);

196 
	`ö¸emít_œyî
(&
uh
, 1);

198 
	`ö¸emít_œyî
(&
wz
, 1);

199 
	`ö¸emít_œyî
(&
wr
, 1);

200 
	`ö¸emít_œyî
(&
wh
, 1);

202 
	}
}

204 
	$backw¨d_gru_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

206 
	}
}

208 #ifde‡
GPU


210 
	$puŒ_gru_œyî
(
œyî
 
l
)

212 
	}
}

214 
	$push_gru_œyî
(
œyî
 
l
)

216 
	}
}

218 
	$upd©e_gru_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

220 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
ur
), 
a
);

221 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
uz
), 
a
);

222 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
uh
), 
a
);

223 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wr
), 
a
);

224 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wz
), 
a
);

225 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wh
), 
a
);

226 
	}
}

228 
	$f‹w¨d_gru_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

230 
√tw‹k
 
s
 = {0};

231 
s
.
åaö
 = 
√t
.train;

232 
i
;

233 
œyî
 
uz
 = *(
l
.uz);

234 
œyî
 
ur
 = *(
l
.ur);

235 
œyî
 
uh
 = *(
l
.uh);

237 
œyî
 
wz
 = *(
l
.wz);

238 
œyî
 
wr
 = *(
l
.wr);

239 
œyî
 
wh
 = *(
l
.wh);

241 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uz
.
dñè_gpu
, 1);

242 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ur
.
dñè_gpu
, 1);

243 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uh
.
dñè_gpu
, 1);

245 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wz
.
dñè_gpu
, 1);

246 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wr
.
dñè_gpu
, 1);

247 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wh
.
dñè_gpu
, 1);

248 if(
√t
.
åaö
) {

249 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0,Ü.
dñè_gpu
, 1);

250 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e_gpu
, 1,Ü.
¥ev_°©e_gpu
, 1);

253 
i
 = 0; i < 
l
.
°ïs
; ++i) {

254 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

255 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wz
, 
s
);

256 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wr
, 
s
);

258 
s
.
öput_gpu
 = 
√t
.input_gpu;

259 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
uz
, 
s
);

260 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
ur
, 
s
);

261 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
uh
, 
s
);

263 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uz
.
ouçut_gpu
, 1,Ü.
z_gpu
, 1);

264 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wz
.
ouçut_gpu
, 1,Ü.
z_gpu
, 1);

266 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
ur
.
ouçut_gpu
, 1,Ü.
r_gpu
, 1);

267 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wr
.
ouçut_gpu
, 1,Ü.
r_gpu
, 1);

269 
	`a˘iv©e_¨øy_gpu
(
l
.
z_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

270 
	`a˘iv©e_¨øy_gpu
(
l
.
r_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

272 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e_gpu
, 1,Ü.
f‹gŸ_°©e_gpu
, 1);

273 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
r_gpu
, 1,Ü.
f‹gŸ_°©e_gpu
, 1);

275 
s
.
öput_gpu
 = 
l
.
f‹gŸ_°©e_gpu
;

276 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wh
, 
s
);

278 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uh
.
ouçut_gpu
, 1,Ü.
h_gpu
, 1);

279 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wh
.
ouçut_gpu
, 1,Ü.
h_gpu
, 1);

281 if(
l
.
ènh
){

282 
	`a˘iv©e_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

284 
	`a˘iv©e_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

287 
	`weighãd_sum_gpu
(
l
.
°©e_gpu
,Ü.
h_gpu
,Ü.
z_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
);

288 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

290 
√t
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
;

291 
l
.
ouçut_gpu
 +l.
ouçuts
*l.
b©ch
;

292 
	`ö¸emít_œyî
(&
uz
, 1);

293 
	`ö¸emít_œyî
(&
ur
, 1);

294 
	`ö¸emít_œyî
(&
uh
, 1);

296 
	`ö¸emít_œyî
(&
wz
, 1);

297 
	`ö¸emít_œyî
(&
wr
, 1);

298 
	`ö¸emít_œyî
(&
wh
, 1);

300 
	}
}

302 
	$backw¨d_gru_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

304 
√tw‹k
 
s
 = {0};

305 
s
.
åaö
 = 
√t
.train;

306 
i
;

307 
œyî
 
uz
 = *(
l
.uz);

308 
œyî
 
ur
 = *(
l
.ur);

309 
œyî
 
uh
 = *(
l
.uh);

311 
œyî
 
wz
 = *(
l
.wz);

312 
œyî
 
wr
 = *(
l
.wr);

313 
œyî
 
wh
 = *(
l
.wh);

315 
	`ö¸emít_œyî
(&
uz
, 
l
.
°ïs
 - 1);

316 
	`ö¸emít_œyî
(&
ur
, 
l
.
°ïs
 - 1);

317 
	`ö¸emít_œyî
(&
uh
, 
l
.
°ïs
 - 1);

319 
	`ö¸emít_œyî
(&
wz
, 
l
.
°ïs
 - 1);

320 
	`ö¸emít_œyî
(&
wr
, 
l
.
°ïs
 - 1);

321 
	`ö¸emít_œyî
(&
wh
, 
l
.
°ïs
 - 1);

323 
√t
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
*÷.
°ïs
-1);

324 if(
√t
.
dñè_gpu
Ë√t.dñè_gpu +
l
.
öputs
*l.
b©ch
*÷.
°ïs
-1);

325 
l
.
ouçut_gpu
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
-1);

326 
l
.
dñè_gpu
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
-1);

327 *
íd_°©e
 = 
l
.
ouçut_gpu
;

328 
i
 = 
l
.
°ïs
-1; i >= 0; --i) {

329 if(
i
 !0Ë
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
 -Ü.ouçuts*l.b©ch, 1,Ü.
°©e_gpu
, 1);

330 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
¥ev_°©e_gpu
, 1,Ü.
°©e_gpu
, 1);

331 *
¥ev_dñè_gpu
 = (
i
 =0Ë? 0 : 
l
.
dñè_gpu
 -Ü.
ouçuts
*l.
b©ch
;

333 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uz
.
ouçut_gpu
, 1,Ü.
z_gpu
, 1);

334 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wz
.
ouçut_gpu
, 1,Ü.
z_gpu
, 1);

336 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
ur
.
ouçut_gpu
, 1,Ü.
r_gpu
, 1);

337 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wr
.
ouçut_gpu
, 1,Ü.
r_gpu
, 1);

339 
	`a˘iv©e_¨øy_gpu
(
l
.
z_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

340 
	`a˘iv©e_¨øy_gpu
(
l
.
r_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

342 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uh
.
ouçut_gpu
, 1,Ü.
h_gpu
, 1);

343 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
wh
.
ouçut_gpu
, 1,Ü.
h_gpu
, 1);

345 if(
l
.
ènh
){

346 
	`a˘iv©e_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

348 
	`a˘iv©e_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

351 
	`weighãd_dñè_gpu
(
l
.
°©e_gpu
,Ü.
h_gpu
,Ü.
z_gpu
, 
¥ev_dñè_gpu
, 
uh
.
dñè_gpu
, 
uz
.dñè_gpu,Ü.
ouçuts
*l.
b©ch
,Ü.delta_gpu);

353 if(
l
.
ènh
){

354 
	`gødõ¡_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
, 
uh
.
dñè_gpu
);

356 
	`gødõ¡_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
, 
uh
.
dñè_gpu
);

359 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uh
.
dñè_gpu
, 1, 
wh
.delta_gpu, 1);

361 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e_gpu
, 1,Ü.
f‹gŸ_°©e_gpu
, 1);

362 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
r_gpu
, 1,Ü.
f‹gŸ_°©e_gpu
, 1);

363 
	`fûl_gpu
(
l
.
ouçuts
*l.
b©ch
, 0,Ü.
f‹gŸ_dñè_gpu
, 1);

365 
s
.
öput_gpu
 = 
l
.
f‹gŸ_°©e_gpu
;

366 
s
.
dñè_gpu
 = 
l
.
f‹gŸ_dñè_gpu
;

368 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wh
, 
s
);

369 if(
¥ev_dñè_gpu
Ë
	`mu…_add_öto_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
f‹gŸ_dñè_gpu
,Ü.
r_gpu
,Örev_delta_gpu);

370 
	`mu…_add_öto_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
f‹gŸ_dñè_gpu
,Ü.
°©e_gpu
, 
ur
.
dñè_gpu
);

372 
	`gødõ¡_¨øy_gpu
(
l
.
r_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
, 
ur
.
dñè_gpu
);

373 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
ur
.
dñè_gpu
, 1, 
wr
.delta_gpu, 1);

375 
	`gødõ¡_¨øy_gpu
(
l
.
z_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
, 
uz
.
dñè_gpu
);

376 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
uz
.
dñè_gpu
, 1, 
wz
.delta_gpu, 1);

378 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

379 
s
.
dñè_gpu
 = 
¥ev_dñè_gpu
;

381 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wr
, 
s
);

382 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wz
, 
s
);

384 
s
.
öput_gpu
 = 
√t
.input_gpu;

385 
s
.
dñè_gpu
 = 
√t
.delta_gpu;

387 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
uh
, 
s
);

388 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
ur
, 
s
);

389 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
uz
, 
s
);

392 
√t
.
öput_gpu
 -
l
.
öputs
*l.
b©ch
;

393 if(
√t
.
dñè_gpu
Ë√t.dñè_gpu -
l
.
öputs
*l.
b©ch
;

394 
l
.
ouçut_gpu
 -l.
ouçuts
*l.
b©ch
;

395 
l
.
dñè_gpu
 -l.
ouçuts
*l.
b©ch
;

396 
	`ö¸emít_œyî
(&
uz
, -1);

397 
	`ö¸emít_œyî
(&
ur
, -1);

398 
	`ö¸emít_œyî
(&
uh
, -1);

400 
	`ö¸emít_œyî
(&
wz
, -1);

401 
	`ö¸emít_œyî
(&
wr
, -1);

402 
	`ö¸emít_œyî
(&
wh
, -1);

404 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
íd_°©e
, 1,Ü.
°©e_gpu
, 1);

405 
	}
}

	@src/gru_layer.h

2 #i‚de‡
GRU_LAYER_H


3 
	#GRU_LAYER_H


	)

5 
	~"a˘iv©i⁄s.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

9 
œyî
 
make_gru_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
b©ch_n‹mÆize
, 
adam
);

11 
f‹w¨d_gru_œyî
(
œyî
 
l
, 
√tw‹k
 
°©e
);

12 
backw¨d_gru_œyî
(
œyî
 
l
, 
√tw‹k
 
°©e
);

13 
upd©e_gru_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

15 #ifde‡
GPU


16 
f‹w¨d_gru_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
°©e
);

17 
backw¨d_gru_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
°©e
);

18 
upd©e_gru_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

19 
push_gru_œyî
(
œyî
 
l
);

20 
puŒ_gru_œyî
(
œyî
 
l
);

	@src/im2col.c

1 
	~"im2cﬁ.h
"

2 
	~<°dio.h
>

3 
	$im2cﬁ_gë_pixñ
(*
im
, 
height
, 
width
, 
ch™√ls
,

4 
row
, 
cﬁ
, 
ch™√l
, 
∑d
)

6 
row
 -
∑d
;

7 
cﬁ
 -
∑d
;

9 i‡(
row
 < 0 || 
cﬁ
 < 0 ||

10 
row
 >
height
 || 
cﬁ
 >
width
)  0;

11  
im
[
cﬁ
 + 
width
*(
row
 + 
height
*
ch™√l
)];

12 
	}
}

16 
	$im2cﬁ_˝u
(* 
d©a_im
,

17 
ch™√ls
, 
height
, 
width
,

18 
ksize
, 
°ride
, 
∑d
, * 
d©a_cﬁ
)

20 
c
,
h
,
w
;

21 
height_cﬁ
 = (
height
 + 2*
∑d
 - 
ksize
Ë/ 
°ride
 + 1;

22 
width_cﬁ
 = (
width
 + 2*
∑d
 - 
ksize
Ë/ 
°ride
 + 1;

24 
ch™√ls_cﬁ
 = 
ch™√ls
 * 
ksize
 * ksize;

25 
c
 = 0; c < 
ch™√ls_cﬁ
; ++c) {

26 
w_off£t
 = 
c
 % 
ksize
;

27 
h_off£t
 = (
c
 / 
ksize
) % ksize;

28 
c_im
 = 
c
 / 
ksize
 / ksize;

29 
h
 = 0; h < 
height_cﬁ
; ++h) {

30 
w
 = 0; w < 
width_cﬁ
; ++w) {

31 
im_row
 = 
h_off£t
 + 
h
 * 
°ride
;

32 
im_cﬁ
 = 
w_off£t
 + 
w
 * 
°ride
;

33 
cﬁ_ödex
 = (
c
 * 
height_cﬁ
 + 
h
Ë* 
width_cﬁ
 + 
w
;

34 
d©a_cﬁ
[
cﬁ_ödex
] = 
	`im2cﬁ_gë_pixñ
(
d©a_im
, 
height
, 
width
, 
ch™√ls
,

35 
im_row
, 
im_cﬁ
, 
c_im
, 
∑d
);

39 
	}
}

	@src/im2col.h

1 #i‚de‡
IM2COL_H


2 
	#IM2COL_H


	)

4 
im2cﬁ_˝u
(* 
d©a_im
,

5 
ch™√ls
, 
height
, 
width
,

6 
ksize
, 
°ride
, 
∑d
, * 
d©a_cﬁ
);

8 #ifde‡
GPU


10 
im2cﬁ_gpu
(*
im
,

11 
ch™√ls
, 
height
, 
width
,

12 
ksize
, 
°ride
, 
∑d
,*
d©a_cﬁ
);

	@src/image.c

1 
	~"image.h
"

2 
	~"utûs.h
"

3 
	~"bœs.h
"

4 
	~"cuda.h
"

5 
	~<°dio.h
>

6 
	~<m©h.h
>

8 
	#STB_IMAGE_IMPLEMENTATION


	)

9 
	~"°b_image.h
"

10 
	#STB_IMAGE_WRITE_IMPLEMENTATION


	)

11 
	~"°b_image_wrôe.h
"

13 
	gwödows
 = 0;

15 
	gcﬁ‹s
[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };

17 
	$gë_cﬁ‹
(
c
, 
x
, 
max
)

19 
øtio
 = (()
x
/
max
)*5;

20 
i
 = 
	`Êo‹
(
øtio
);

21 
j
 = 
	`˚û
(
øtio
);

22 
øtio
 -
i
;

23 
r
 = (1-
øtio
Ë* 
cﬁ‹s
[
i
][
c
] +Ñ©io*cﬁ‹s[
j
][c];

25  
r
;

26 
	}
}

28 
image
 
	$mask_to_rgb
(
image
 
mask
)

30 
n
 = 
mask
.
c
;

31 
image
 
im
 = 
	`make_image
(
mask
.
w
, mask.
h
, 3);

32 
i
, 
j
;

33 
j
 = 0; j < 
n
; ++j){

34 
off£t
 = 
j
*123457 % 
n
;

35 
ªd
 = 
	`gë_cﬁ‹
(2,
off£t
,
n
);

36 
gªí
 = 
	`gë_cﬁ‹
(1,
off£t
,
n
);

37 
blue
 = 
	`gë_cﬁ‹
(0,
off£t
,
n
);

38 
i
 = 0; i < 
im
.
w
*im.
h
; ++i){

39 
im
.
d©a
[
i
 + 0*im.
w
*im.
h
] +
mask
.d©a[
j
*im.h*im.w + i]*
ªd
;

40 
im
.
d©a
[
i
 + 1*im.
w
*im.
h
] +
mask
.d©a[
j
*im.h*im.w + i]*
gªí
;

41 
im
.
d©a
[
i
 + 2*im.
w
*im.
h
] +
mask
.d©a[
j
*im.h*im.w + i]*
blue
;

44  
im
;

45 
	}
}

47 
	$composôe_image
(
image
 
sour˚
, imagê
de°
, 
dx
, 
dy
)

49 
x
,
y
,
k
;

50 
k
 = 0; k < 
sour˚
.
c
; ++k){

51 
y
 = 0; y < 
sour˚
.
h
; ++y){

52 
x
 = 0; x < 
sour˚
.
w
; ++x){

53 
vÆ
 = 
	`gë_pixñ
(
sour˚
, 
x
, 
y
, 
k
);

54 
vÆ2
 = 
	`gë_pixñ_exãnd
(
de°
, 
dx
+
x
, 
dy
+
y
, 
k
);

55 
	`£t_pixñ
(
de°
, 
dx
+
x
, 
dy
+
y
, 
k
, 
vÆ
 * 
vÆ2
);

59 
	}
}

61 
image
 
	$b‹dî_image
(
image
 
a
, 
b‹dî
)

63 
image
 
b
 = 
	`make_image
(
a
.
w
 + 2*
b‹dî
,á.
h
 + 2*b‹dî,á.
c
);

64 
x
,
y
,
k
;

65 
k
 = 0; k < 
b
.
c
; ++k){

66 
y
 = 0; y < 
b
.
h
; ++y){

67 
x
 = 0; x < 
b
.
w
; ++x){

68 
vÆ
 = 
	`gë_pixñ_exãnd
(
a
, 
x
 - 
b‹dî
, 
y
 - b‹dî, 
k
);

69 if(
x
 - 
b‹dî
 < 0 || x - b‹dî >
a
.
w
 || 
y
 - b‹dî < 0 || y - b‹dî >a.
h
Ë
vÆ
 = 1;

70 
	`£t_pixñ
(
b
, 
x
, 
y
, 
k
, 
vÆ
);

74  
b
;

75 
	}
}

77 
image
 
	$tûe_images
(
image
 
a
, imagê
b
, 
dx
)

79 if(
a
.
w
 =0Ë 
	`c›y_image
(
b
);

80 
image
 
c
 = 
	`make_image
(
a
.
w
 + 
b
.w + 
dx
, (a.
h
 > b.h) ?á.h : b.h, (a.c > b.c) ?á.c : b.c);

81 
	`fûl_˝u
(
c
.
w
*c.
h
*c.c, 1, c.
d©a
, 1);

82 
	`embed_image
(
a
, 
c
, 0, 0);

83 
	`composôe_image
(
b
, 
c
, 
a
.
w
 + 
dx
, 0);

84  
c
;

85 
	}
}

87 
image
 
	$gë_œbñ
(
image
 **
ch¨a˘îs
, *
°rög
, 
size
)

89 if(
size
 > 7) size = 7;

90 
image
 
œbñ
 = 
	`make_em±y_image
(0,0,0);

91 *
°rög
){

92 
image
 
l
 = 
ch¨a˘îs
[
size
][()*
°rög
];

93 
image
 
n
 = 
	`tûe_images
(
œbñ
, 
l
, -
size
 - 1 + (size+1)/2);

94 
	`‰ì_image
(
œbñ
);

95 
œbñ
 = 
n
;

96 ++
°rög
;

98 
image
 
b
 = 
	`b‹dî_image
(
œbñ
,Üabñ.
h
*.25);

99 
	`‰ì_image
(
œbñ
);

100  
b
;

101 
	}
}

103 
	$døw_œbñ
(
image
 
a
, 
r
, 
c
, imagê
œbñ
, c⁄° *
rgb
)

105 
w
 = 
œbñ
.w;

106 
h
 = 
œbñ
.h;

107 i‡(
r
 - 
h
 >= 0)Ñ =Ñ - h;

109 
i
, 
j
, 
k
;

110 
j
 = 0; j < 
h
 && j + 
r
 < 
a
.h; ++j){

111 
i
 = 0; i < 
w
 && i + 
c
 < 
a
.w; ++i){

112 
k
 = 0; k < 
œbñ
.
c
; ++k){

113 
vÆ
 = 
	`gë_pixñ
(
œbñ
, 
i
, 
j
, 
k
);

114 
	`£t_pixñ
(
a
, 
i
+
c
, 
j
+
r
, 
k
, 
rgb
[k] * 
vÆ
);

118 
	}
}

120 
	$døw_box
(
image
 
a
, 
x1
, 
y1
, 
x2
, 
y2
, 
r
, 
g
, 
b
)

123 
i
;

124 if(
x1
 < 0) x1 = 0;

125 if(
x1
 >
a
.
w
) x1 =á.w-1;

126 if(
x2
 < 0) x2 = 0;

127 if(
x2
 >
a
.
w
) x2 =á.w-1;

129 if(
y1
 < 0) y1 = 0;

130 if(
y1
 >
a
.
h
) y1 =á.h-1;

131 if(
y2
 < 0) y2 = 0;

132 if(
y2
 >
a
.
h
) y2 =á.h-1;

134 
i
 = 
x1
; i <
x2
; ++i){

135 
a
.
d©a
[
i
 + 
y1
*a.
w
 + 0*a.w*a.
h
] = 
r
;

136 
a
.
d©a
[
i
 + 
y2
*a.
w
 + 0*a.w*a.
h
] = 
r
;

138 
a
.
d©a
[
i
 + 
y1
*a.
w
 + 1*a.w*a.
h
] = 
g
;

139 
a
.
d©a
[
i
 + 
y2
*a.
w
 + 1*a.w*a.
h
] = 
g
;

141 
a
.
d©a
[
i
 + 
y1
*a.
w
 + 2*a.w*a.
h
] = 
b
;

142 
a
.
d©a
[
i
 + 
y2
*a.
w
 + 2*a.w*a.
h
] = 
b
;

144 
i
 = 
y1
; i <
y2
; ++i){

145 
a
.
d©a
[
x1
 + 
i
*a.
w
 + 0*a.w*a.
h
] = 
r
;

146 
a
.
d©a
[
x2
 + 
i
*a.
w
 + 0*a.w*a.
h
] = 
r
;

148 
a
.
d©a
[
x1
 + 
i
*a.
w
 + 1*a.w*a.
h
] = 
g
;

149 
a
.
d©a
[
x2
 + 
i
*a.
w
 + 1*a.w*a.
h
] = 
g
;

151 
a
.
d©a
[
x1
 + 
i
*a.
w
 + 2*a.w*a.
h
] = 
b
;

152 
a
.
d©a
[
x2
 + 
i
*a.
w
 + 2*a.w*a.
h
] = 
b
;

154 
	}
}

156 
	$døw_box_width
(
image
 
a
, 
x1
, 
y1
, 
x2
, 
y2
, 
w
, 
r
, 
g
, 
b
)

158 
i
;

159 
i
 = 0; i < 
w
; ++i){

160 
	`døw_box
(
a
, 
x1
+
i
, 
y1
+i, 
x2
-i, 
y2
-i, 
r
, 
g
, 
b
);

162 
	}
}

164 
	$døw_bbox
(
image
 
a
, 
box
 
bbox
, 
w
, 
r
, 
g
, 
b
)

166 
À·
 = (
bbox
.
x
-bbox.
w
/2)*
a
.w;

167 
right
 = (
bbox
.
x
+bbox.
w
/2)*
a
.w;

168 
t›
 = (
bbox
.
y
-bbox.
h
/2)*
a
.h;

169 
bŸ
 = (
bbox
.
y
+bbox.
h
/2)*
a
.h;

171 
i
;

172 
i
 = 0; i < 
w
; ++i){

173 
	`døw_box
(
a
, 
À·
+
i
, 
t›
+i, 
right
-i, 
bŸ
-i, 
r
, 
g
, 
b
);

175 
	}
}

177 
image
 **
	$lﬂd_Æphabë
()

179 
i
, 
j
;

180 c⁄° 
nsize
 = 8;

181 
image
 **
Æphabës
 = 
	`ˇŒoc
(
nsize
, (image));

182 
j
 = 0; j < 
nsize
; ++j){

183 
Æphabës
[
j
] = 
	`ˇŒoc
(128, (
image
));

184 
i
 = 32; i < 127; ++i){

185 
buff
[256];

186 
	`•rötf
(
buff
, "d©a/œbñs/%d_%d.≤g", 
i
, 
j
);

187 
Æphabës
[
j
][
i
] = 
	`lﬂd_image_cﬁ‹
(
buff
, 0, 0);

190  
Æphabës
;

191 
	}
}

193 
	$døw_dëe˘i⁄s
(
image
 
im
, 
num
, 
thªsh
, 
box
 *
boxes
, **
¥obs
, **
«mes
, imagê**
Æphabë
, 
˛as£s
)

195 
i
;

197 
i
 = 0; i < 
num
; ++i){

198 
˛ass
 = 
	`max_ödex
(
¥obs
[
i
], 
˛as£s
);

199 
¥ob
 = 
¥obs
[
i
][
˛ass
];

200 if(
¥ob
 > 
thªsh
){

202 
width
 = 
im
.
h
 * .006;

205 
width
 = 
	`pow
(
¥ob
, 1./2.)*10+1;

206 
Æphabë
 = 0;

210 
	`¥ötf
("%s: %.0f%%\n", 
«mes
[
˛ass
], 
¥ob
*100);

211 
off£t
 = 
˛ass
*123457 % 
˛as£s
;

212 
ªd
 = 
	`gë_cﬁ‹
(2,
off£t
,
˛as£s
);

213 
gªí
 = 
	`gë_cﬁ‹
(1,
off£t
,
˛as£s
);

214 
blue
 = 
	`gë_cﬁ‹
(0,
off£t
,
˛as£s
);

215 
rgb
[3];

219 
rgb
[0] = 
ªd
;

220 
rgb
[1] = 
gªí
;

221 
rgb
[2] = 
blue
;

222 
box
 
b
 = 
boxes
[
i
];

224 
À·
 = (
b
.
x
-b.
w
/2.)*
im
.w;

225 
right
 = (
b
.
x
+b.
w
/2.)*
im
.w;

226 
t›
 = (
b
.
y
-b.
h
/2.)*
im
.h;

227 
bŸ
 = (
b
.
y
+b.
h
/2.)*
im
.h;

229 if(
À·
 < 0)Üeft = 0;

230 if(
right
 > 
im
.
w
-1)Ñight = im.w-1;

231 if(
t›
 < 0)Åop = 0;

232 if(
bŸ
 > 
im
.
h
-1) bot = im.h-1;

234 
	`døw_box_width
(
im
, 
À·
, 
t›
, 
right
, 
bŸ
, 
width
, 
ªd
, 
gªí
, 
blue
);

235 i‡(
Æphabë
) {

236 
image
 
œbñ
 = 
	`gë_œbñ
(
Æphabë
, 
«mes
[
˛ass
], (
im
.
h
*.03)/10);

237 
	`døw_œbñ
(
im
, 
t›
 + 
width
, 
À·
, 
œbñ
, 
rgb
);

238 
	`‰ì_image
(
œbñ
);

242 
	}
}

244 
	$å™•o£_image
(
image
 
im
)

246 
	`as£π
(
im
.
w
 =im.
h
);

247 
n
, 
m
;

248 
c
;

249 
c
 = 0; c < 
im
.c; ++c){

250 
n
 = 0;Ç < 
im
.
w
-1; ++n){

251 
m
 = 
n
 + 1; m < 
im
.
w
; ++m){

252 
sw≠
 = 
im
.
d©a
[
m
 + im.
w
*(
n
 + im.
h
*
c
)];

253 
im
.
d©a
[
m
 + im.
w
*(
n
 + im.
h
*
c
)] = im.data[n + im.w*(m + im.h*c)];

254 
im
.
d©a
[
n
 + im.
w
*(
m
 + im.
h
*
c
)] = 
sw≠
;

258 
	}
}

260 
	$rŸ©e_image_cw
(
image
 
im
, 
times
)

262 
	`as£π
(
im
.
w
 =im.
h
);

263 
times
 = (times + 400) % 4;

264 
i
, 
x
, 
y
, 
c
;

265 
n
 = 
im
.
w
;

266 
i
 = 0; i < 
times
; ++i){

267 
c
 = 0; c < 
im
.c; ++c){

268 
x
 = 0; x < 
n
/2; ++x){

269 
y
 = 0; y < (
n
-1)/2 + 1; ++y){

270 
ãmp
 = 
im
.
d©a
[
y
 + im.
w
*(
x
 + im.
h
*
c
)];

271 
im
.
d©a
[
y
 + im.
w
*(
x
 + im.
h
*
c
)] = im.d©a[
n
-1-x + im.w*(y + im.h*c)];

272 
im
.
d©a
[
n
-1-
x
 + im.
w
*(
y
 + im.
h
*
c
)] = im.data[n-1-y + im.w*(n-1-x + im.h*c)];

273 
im
.
d©a
[
n
-1-
y
 + im.
w
*“-1-
x
 + im.
h
*
c
)] = im.data[x + im.w*(n-1-y + im.h*c)];

274 
im
.
d©a
[
x
 + im.
w
*(
n
-1-
y
 + im.
h
*
c
)] = 
ãmp
;

279 
	}
}

281 
	$Êù_image
(
image
 
a
)

283 
i
,
j
,
k
;

284 
k
 = 0; k < 
a
.
c
; ++k){

285 
i
 = 0; i < 
a
.
h
; ++i){

286 
j
 = 0; j < 
a
.
w
/2; ++j){

287 
ödex
 = 
j
 + 
a
.
w
*(
i
 +á.
h
*(
k
));

288 
Êù
 = (
a
.
w
 - 
j
 - 1Ë+á.w*(
i
 +á.
h
*(
k
));

289 
sw≠
 = 
a
.
d©a
[
Êù
];

290 
a
.
d©a
[
Êù
] =á.d©a[
ödex
];

291 
a
.
d©a
[
ödex
] = 
sw≠
;

295 
	}
}

297 
image
 
	$image_di°™˚
(
image
 
a
, imagê
b
)

299 
i
,
j
;

300 
image
 
di°
 = 
	`make_image
(
a
.
w
,á.
h
, 1);

301 
i
 = 0; i < 
a
.
c
; ++i){

302 
j
 = 0; j < 
a
.
h
*a.
w
; ++j){

303 
di°
.
d©a
[
j
] +
	`pow
(
a
.d©a[
i
*a.
h
*a.
w
+j]-
b
.data[i*a.h*a.w+j],2);

306 
j
 = 0; j < 
a
.
h
*a.
w
; ++j){

307 
di°
.
d©a
[
j
] = 
	`sqπ
(dist.data[j]);

309  
di°
;

310 
	}
}

312 
	$gho°_image
(
image
 
sour˚
, imagê
de°
, 
dx
, 
dy
)

314 
x
,
y
,
k
;

315 
max_di°
 = 
	`sqπ
((-
sour˚
.
w
/2. + .5)*(-source.w/2. + .5));

316 
k
 = 0; k < 
sour˚
.
c
; ++k){

317 
y
 = 0; y < 
sour˚
.
h
; ++y){

318 
x
 = 0; x < 
sour˚
.
w
; ++x){

319 
di°
 = 
	`sqπ
((
x
 - 
sour˚
.
w
/2. + .5)*(x - sour˚.w/2. + .5Ë+ (
y
 - sour˚.
h
/2. + .5)*(y - source.h/2. + .5));

320 
Æpha
 = (1 - 
di°
/
max_di°
);

321 if(
Æpha
 < 0)álpha = 0;

322 
v1
 = 
	`gë_pixñ
(
sour˚
, 
x
,
y
,
k
);

323 
v2
 = 
	`gë_pixñ
(
de°
, 
dx
+
x
,
dy
+
y
,
k
);

324 
vÆ
 = 
Æpha
*
v1
 + (1-Æpha)*
v2
;

325 
	`£t_pixñ
(
de°
, 
dx
+
x
, 
dy
+
y
, 
k
, 
vÆ
);

329 
	}
}

331 
	$embed_image
(
image
 
sour˚
, imagê
de°
, 
dx
, 
dy
)

333 
x
,
y
,
k
;

334 
k
 = 0; k < 
sour˚
.
c
; ++k){

335 
y
 = 0; y < 
sour˚
.
h
; ++y){

336 
x
 = 0; x < 
sour˚
.
w
; ++x){

337 
vÆ
 = 
	`gë_pixñ
(
sour˚
, 
x
,
y
,
k
);

338 
	`£t_pixñ
(
de°
, 
dx
+
x
, 
dy
+
y
, 
k
, 
vÆ
);

342 
	}
}

344 
image
 
	$cﬁœp£_image_œyîs
(
image
 
sour˚
, 
b‹dî
)

346 
h
 = 
sour˚
.h;

347 
h
 = (h+
b‹dî
)*
sour˚
.
c
 - border;

348 
image
 
de°
 = 
	`make_image
(
sour˚
.
w
, 
h
, 1);

349 
i
;

350 
i
 = 0; i < 
sour˚
.
c
; ++i){

351 
image
 
œyî
 = 
	`gë_image_œyî
(
sour˚
, 
i
);

352 
h_off£t
 = 
i
*(
sour˚
.
h
+
b‹dî
);

353 
	`embed_image
(
œyî
, 
de°
, 0, 
h_off£t
);

354 
	`‰ì_image
(
œyî
);

356  
de°
;

357 
	}
}

359 
	$c⁄°øö_image
(
image
 
im
)

361 
i
;

362 
i
 = 0; i < 
im
.
w
*im.
h
*im.
c
; ++i){

363 if(
im
.
d©a
[
i
] < 0) im.data[i] = 0;

364 if(
im
.
d©a
[
i
] > 1) im.data[i] = 1;

366 
	}
}

368 
	$n‹mÆize_image
(
image
 
p
)

370 
i
;

371 
mö
 = 9999999;

372 
max
 = -999999;

374 
i
 = 0; i < 
p
.
h
*p.
w
*p.
c
; ++i){

375 
v
 = 
p
.
d©a
[
i
];

376 if(
v
 < 
mö
) min = v;

377 if(
v
 > 
max
) max = v;

379 if(
max
 - 
mö
 < .000000001){

380 
mö
 = 0;

381 
max
 = 1;

383 
i
 = 0; i < 
p
.
c
*p.
w
*p.
h
; ++i){

384 
p
.
d©a
[
i
] = (p.d©a[i] - 
mö
)/(
max
-min);

386 
	}
}

388 
	$n‹mÆize_image2
(
image
 
p
)

390 *
mö
 = 
	`ˇŒoc
(
p
.
c
, ());

391 *
max
 = 
	`ˇŒoc
(
p
.
c
, ());

392 
i
,
j
;

393 
i
 = 0; i < 
p
.
c
; ++iË
mö
[i] = 
max
[i] =Ö.
d©a
[i*p.
h
*p.
w
];

395 
j
 = 0; j < 
p
.
c
; ++j){

396 
i
 = 0; i < 
p
.
h
*p.
w
; ++i){

397 
v
 = 
p
.
d©a
[
i
+
j
*p.
h
*p.
w
];

398 if(
v
 < 
mö
[
j
]) min[j] = v;

399 if(
v
 > 
max
[
j
]) max[j] = v;

402 
i
 = 0; i < 
p
.
c
; ++i){

403 if(
max
[
i
] - 
mö
[i] < .000000001){

404 
mö
[
i
] = 0;

405 
max
[
i
] = 1;

408 
j
 = 0; j < 
p
.
c
; ++j){

409 
i
 = 0; i < 
p
.
w
*p.
h
; ++i){

410 
p
.
d©a
[
i
+
j
*p.
h
*p.
w
] = (p.d©a[i+j*p.h*p.w] - 
mö
[j])/(
max
[j]-min[j]);

413 
	`‰ì
(
mö
);

414 
	`‰ì
(
max
);

415 
	}
}

417 
	$c›y_image_öto
(
image
 
§c
, imagê
de°
)

419 
	`mem˝y
(
de°
.
d©a
, 
§c
.d©a, src.
h
*§c.
w
*§c.
c
*());

420 
	}
}

422 
image
 
	$c›y_image
(
image
 
p
)

424 
image
 
c›y
 = 
p
;

425 
c›y
.
d©a
 = 
	`ˇŒoc
(
p
.
h
*p.
w
*p.
c
, ());

426 
	`mem˝y
(
c›y
.
d©a
, 
p
.d©a,Ö.
h
*p.
w
*p.
c
*());

427  
c›y
;

428 
	}
}

430 
	$rgbgr_image
(
image
 
im
)

432 
i
;

433 
i
 = 0; i < 
im
.
w
*im.
h
; ++i){

434 
sw≠
 = 
im
.
d©a
[
i
];

435 
im
.
d©a
[
i
] = im.d©a[i+im.
w
*im.
h
*2];

436 
im
.
d©a
[
i
+im.
w
*im.
h
*2] = 
sw≠
;

438 
	}
}

440 #ifde‡
OPENCV


441 
	$show_image_cv
(
image
 
p
, c⁄° *
«me
, 
I∂Image
 *
di•
)

443 
x
,
y
,
k
;

444 if(
p
.
c
 =3Ë
	`rgbgr_image
(p);

447 
buff
[256];

449 
	`•rötf
(
buff
, "%s", 
«me
);

451 
°ï
 = 
di•
->
widthSãp
;

452 
	`cvNamedWödow
(
buff
, 
CV_WINDOW_NORMAL
);

454 ++
wödows
;

455 
y
 = 0; y < 
p
.
h
; ++y){

456 
x
 = 0; x < 
p
.
w
; ++x){

457 
k
0; k < 
p
.
c
; ++k){

458 
di•
->
imageD©a
[
y
*
°ï
 + 
x
*
p
.
c
 + 
k
] = ()(
	`gë_pixñ
(p,x,y,k)*255);

463 
w
 = 448;

464 
h
 = 
w
*
p
.h/p.w;

465 if(
h
 > 1000){

466 
h
 = 1000;

467 
w
 = 
h
*
p
.w/p.h;

469 
I∂Image
 *
buf„r
 = 
di•
;

470 
di•
 = 
	`cvCª©eImage
(
	`cvSize
(
w
, 
h
), 
buf„r
->
dïth
, buf„r->
nCh™√ls
);

471 
	`cvResize
(
buf„r
, 
di•
, 
CV_INTER_LINEAR
);

472 
	`cvRñó£Image
(&
buf„r
);

474 
	`cvShowImage
(
buff
, 
di•
);

475 
	}
}

478 
	$show_image
(
image
 
p
, c⁄° *
«me
)

480 #ifde‡
OPENCV


481 
I∂Image
 *
di•
 = 
	`cvCª©eImage
(
	`cvSize
(
p
.
w
,p.
h
), 
IPL_DEPTH_8U
,Ö.
c
);

482 
image
 
c›y
 = 
	`c›y_image
(
p
);

483 
	`c⁄°øö_image
(
c›y
);

484 
	`show_image_cv
(
c›y
, 
«me
, 
di•
);

485 
	`‰ì_image
(
c›y
);

486 
	`cvRñó£Image
(&
di•
);

488 
	`Ârötf
(
°dîr
, "NŸ compûed wôh O≥nCV, savögÅÿ%s.≤g in°ód\n", 
«me
);

489 
	`ßve_image
(
p
, 
«me
);

491 
	}
}

493 #ifde‡
OPENCV


495 
	$ùl_öto_image
(
I∂Image
* 
§c
, 
image
 
im
)

497 *
d©a
 = (*)
§c
->
imageD©a
;

498 
h
 = 
§c
->
height
;

499 
w
 = 
§c
->
width
;

500 
c
 = 
§c
->
nCh™√ls
;

501 
°ï
 = 
§c
->
widthSãp
;

502 
i
, 
j
, 
k
;

504 
i
 = 0; i < 
h
; ++i){

505 
k
0; k < 
c
; ++k){

506 
j
 = 0; j < 
w
; ++j){

507 
im
.
d©a
[
k
*
w
*
h
 + 
i
*w + 
j
] = d©a[i*
°ï
 + j*
c
 + k]/255.;

511 
	}
}

513 
image
 
	$ùl_to_image
(
I∂Image
* 
§c
)

515 
h
 = 
§c
->
height
;

516 
w
 = 
§c
->
width
;

517 
c
 = 
§c
->
nCh™√ls
;

518 
image
 
out
 = 
	`make_image
(
w
, 
h
, 
c
);

519 
	`ùl_öto_image
(
§c
, 
out
);

520  
out
;

521 
	}
}

523 
image
 
	$lﬂd_image_cv
(*
fûíame
, 
ch™√ls
)

525 
I∂Image
* 
§c
 = 0;

526 
Êag
 = -1;

527 i‡(
ch™√ls
 =0Ë
Êag
 = -1;

528 i‡(
ch™√ls
 =1Ë
Êag
 = 0;

529 i‡(
ch™√ls
 =3Ë
Êag
 = 1;

531 
	`Ârötf
(
°dîr
, "O≥nCV c™'àf‹˚Üﬂd wôh %d ch™√ls\n", 
ch™√ls
);

534 if–(
§c
 = 
	`cvLﬂdImage
(
fûíame
, 
Êag
)) == 0 )

536 
	`Ârötf
(
°dîr
, "C™nŸÜﬂd imagê\"%s\"\n", 
fûíame
);

537 
buff
[256];

538 
	`•rötf
(
buff
, "echÿ%†>> bad.li°", 
fûíame
);

539 
	`sy°em
(
buff
);

540  
	`make_image
(10,10,3);

543 
image
 
out
 = 
	`ùl_to_image
(
§c
);

544 
	`cvRñó£Image
(&
§c
);

545 
	`rgbgr_image
(
out
);

546  
out
;

547 
	}
}

549 
	$Êush_°ªam_buf„r
(
CvC≠tuª
 *
ˇp
, 
n
)

551 
i
;

552 
i
 = 0; i < 
n
; ++i) {

553 
	`cvQuîyFøme
(
ˇp
);

555 
	}
}

557 
image
 
	$gë_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
)

559 
I∂Image
* 
§c
 = 
	`cvQuîyFøme
(
ˇp
);

560 i‡(!
§c
Ë 
	`make_em±y_image
(0,0,0);

561 
image
 
im
 = 
	`ùl_to_image
(
§c
);

562 
	`rgbgr_image
(
im
);

563  
im
;

564 
	}
}

566 
	$fûl_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
, 
image
 
im
)

568 
I∂Image
* 
§c
 = 
	`cvQuîyFøme
(
ˇp
);

569 i‡(!
§c
)  0;

570 
	`ùl_öto_image
(
§c
, 
im
);

571 
	`rgbgr_image
(
im
);

573 
	}
}

575 
	$ßve_image_jpg
(
image
 
p
, c⁄° *
«me
)

577 
image
 
c›y
 = 
	`c›y_image
(
p
);

578 if(
p
.
c
 =3Ë
	`rgbgr_image
(
c›y
);

579 
x
,
y
,
k
;

581 
buff
[256];

582 
	`•rötf
(
buff
, "%s.jpg", 
«me
);

584 
I∂Image
 *
di•
 = 
	`cvCª©eImage
(
	`cvSize
(
p
.
w
,p.
h
), 
IPL_DEPTH_8U
,Ö.
c
);

585 
°ï
 = 
di•
->
widthSãp
;

586 
y
 = 0; y < 
p
.
h
; ++y){

587 
x
 = 0; x < 
p
.
w
; ++x){

588 
k
0; k < 
p
.
c
; ++k){

589 
di•
->
imageD©a
[
y
*
°ï
 + 
x
*
p
.
c
 + 
k
] = ()(
	`gë_pixñ
(
c›y
,x,y,k)*255);

593 
	`cvSaveImage
(
buff
, 
di•
,0);

594 
	`cvRñó£Image
(&
di•
);

595 
	`‰ì_image
(
c›y
);

596 
	}
}

599 
	$ßve_image_≤g
(
image
 
im
, c⁄° *
«me
)

601 
buff
[256];

603 
	`•rötf
(
buff
, "%s.≤g", 
«me
);

604 *
d©a
 = 
	`ˇŒoc
(
im
.
w
*im.
h
*im.
c
, ());

605 
i
,
k
;

606 
k
 = 0; k < 
im
.
c
; ++k){

607 
i
 = 0; i < 
im
.
w
*im.
h
; ++i){

608 
d©a
[
i
*
im
.
c
+
k
] = (Ë(255*im.d©a[ò+ k*im.
w
*im.
h
]);

611 
suc˚ss
 = 
	`°bi_wrôe_≤g
(
buff
, 
im
.
w
, im.
h
, im.
c
, 
d©a
, im.w*im.c);

612 
	`‰ì
(
d©a
);

613 if(!
suc˚ss
Ë
	`Ârötf
(
°dîr
, "FaûedÅÿwrôêimagê%s\n", 
buff
);

614 
	}
}

616 
	$ßve_image
(
image
 
im
, c⁄° *
«me
)

618 #ifde‡
OPENCV


619 
	`ßve_image_jpg
(
im
, 
«me
);

621 
	`ßve_image_≤g
(
im
, 
«me
);

623 
	}
}

626 
	$show_image_œyîs
(
image
 
p
, *
«me
)

628 
i
;

629 
buff
[256];

630 
i
 = 0; i < 
p
.
c
; ++i){

631 
	`•rötf
(
buff
, "%†- Layî %d", 
«me
, 
i
);

632 
image
 
œyî
 = 
	`gë_image_œyî
(
p
, 
i
);

633 
	`show_image
(
œyî
, 
buff
);

634 
	`‰ì_image
(
œyî
);

636 
	}
}

638 
	$show_image_cﬁœp£d
(
image
 
p
, *
«me
)

640 
image
 
c
 = 
	`cﬁœp£_image_œyîs
(
p
, 1);

641 
	`show_image
(
c
, 
«me
);

642 
	`‰ì_image
(
c
);

643 
	}
}

645 
image
 
	$make_em±y_image
(
w
, 
h
, 
c
)

647 
image
 
out
;

648 
out
.
d©a
 = 0;

649 
out
.
h
 = h;

650 
out
.
w
 = w;

651 
out
.
c
 = c;

652  
out
;

653 
	}
}

655 
image
 
	$make_image
(
w
, 
h
, 
c
)

657 
image
 
out
 = 
	`make_em±y_image
(
w
,
h
,
c
);

658 
out
.
d©a
 = 
	`ˇŒoc
(
h
*
w
*
c
, ());

659  
out
;

660 
	}
}

662 
image
 
	$make_øndom_image
(
w
, 
h
, 
c
)

664 
image
 
out
 = 
	`make_em±y_image
(
w
,
h
,
c
);

665 
out
.
d©a
 = 
	`ˇŒoc
(
h
*
w
*
c
, ());

666 
i
;

667 
i
 = 0; i < 
w
*
h
*
c
; ++i){

668 
out
.
d©a
[
i
] = (
	`ønd_n‹mÆ
() * .25) + .5;

670  
out
;

671 
	}
}

673 
image
 
	$Êﬂt_to_image
(
w
, 
h
, 
c
, *
d©a
)

675 
image
 
out
 = 
	`make_em±y_image
(
w
,
h
,
c
);

676 
out
.
d©a
 = data;

677  
out
;

678 
	}
}

680 
	$∂a˚_image
(
image
 
im
, 
w
, 
h
, 
dx
, 
dy
, imagê
ˇnvas
)

682 
x
, 
y
, 
c
;

683 
c
 = 0; c < 
im
.c; ++c){

684 
y
 = 0; y < 
h
; ++y){

685 
x
 = 0; x < 
w
; ++x){

686 
rx
 = (()
x
 / 
w
Ë* 
im
.w;

687 
ry
 = (()
y
 / 
h
Ë* 
im
.h;

688 
vÆ
 = 
	`bûöór_öãΩﬁ©e
(
im
, 
rx
, 
ry
, 
c
);

689 
	`£t_pixñ
(
ˇnvas
, 
x
 + 
dx
, 
y
 + 
dy
, 
c
, 
vÆ
);

693 
	}
}

695 
image
 
	$˚¡î_¸›_image
(
image
 
im
, 
w
, 
h
)

697 
m
 = (
im
.
w
 < im.
h
) ? im.w : im.h;

698 
image
 
c
 = 
	`¸›_image
(
im
, (im.
w
 - 
m
Ë/ 2, (im.
h
 - m)/2, m, m);

699 
image
 
r
 = 
	`ªsize_image
(
c
, 
w
, 
h
);

700 
	`‰ì_image
(
c
);

701  
r
;

702 
	}
}

704 
image
 
	$rŸ©e_¸›_image
(
image
 
im
, 
ød
, 
s
, 
w
, 
h
, 
dx
, 
dy
, 
a•e˘
)

706 
x
, 
y
, 
c
;

707 
cx
 = 
im
.
w
/2.;

708 
cy
 = 
im
.
h
/2.;

709 
image
 
rŸ
 = 
	`make_image
(
w
, 
h
, 
im
.
c
);

710 
c
 = 0; c < 
im
.c; ++c){

711 
y
 = 0; y < 
h
; ++y){

712 
x
 = 0; x < 
w
; ++x){

713 
rx
 = 
	`cos
(
ød
)*((
x
 - 
w
/2.)/
s
*
a•e˘
 + 
dx
/s*a•e˘Ë- 
	`sö
‘ad)*((
y
 - 
h
/2.)/†+ 
dy
/sË+ 
cx
;

714 
ry
 = 
	`sö
(
ød
)*((
x
 - 
w
/2.)/
s
*
a•e˘
 + 
dx
/s*a•e˘Ë+ 
	`cos
‘ad)*((
y
 - 
h
/2.)/†+ 
dy
/sË+ 
cy
;

715 
vÆ
 = 
	`bûöór_öãΩﬁ©e
(
im
, 
rx
, 
ry
, 
c
);

716 
	`£t_pixñ
(
rŸ
, 
x
, 
y
, 
c
, 
vÆ
);

720  
rŸ
;

721 
	}
}

723 
image
 
	$rŸ©e_image
(
image
 
im
, 
ød
)

725 
x
, 
y
, 
c
;

726 
cx
 = 
im
.
w
/2.;

727 
cy
 = 
im
.
h
/2.;

728 
image
 
rŸ
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

729 
c
 = 0; c < 
im
.c; ++c){

730 
y
 = 0; y < 
im
.
h
; ++y){

731 
x
 = 0; x < 
im
.
w
; ++x){

732 
rx
 = 
	`cos
(
ød
)*(
x
-
cx
Ë- 
	`sö
‘ad)*(
y
-
cy
) + cx;

733 
ry
 = 
	`sö
(
ød
)*(
x
-
cx
Ë+ 
	`cos
‘ad)*(
y
-
cy
) + cy;

734 
vÆ
 = 
	`bûöór_öãΩﬁ©e
(
im
, 
rx
, 
ry
, 
c
);

735 
	`£t_pixñ
(
rŸ
, 
x
, 
y
, 
c
, 
vÆ
);

739  
rŸ
;

740 
	}
}

742 
	$fûl_image
(
image
 
m
, 
s
)

744 
i
;

745 
i
 = 0; i < 
m
.
h
*m.
w
*m.
c
; ++iËm.
d©a
[i] = 
s
;

746 
	}
}

748 
	$å™¶©e_image
(
image
 
m
, 
s
)

750 
i
;

751 
i
 = 0; i < 
m
.
h
*m.
w
*m.
c
; ++iËm.
d©a
[i] +
s
;

752 
	}
}

754 
	$sˇÀ_image
(
image
 
m
, 
s
)

756 
i
;

757 
i
 = 0; i < 
m
.
h
*m.
w
*m.
c
; ++iËm.
d©a
[i] *
s
;

758 
	}
}

760 
image
 
	$¸›_image
(
image
 
im
, 
dx
, 
dy
, 
w
, 
h
)

762 
image
 
¸›≥d
 = 
	`make_image
(
w
, 
h
, 
im
.
c
);

763 
i
, 
j
, 
k
;

764 
k
 = 0; k < 
im
.
c
; ++k){

765 
j
 = 0; j < 
h
; ++j){

766 
i
 = 0; i < 
w
; ++i){

767 
r
 = 
j
 + 
dy
;

768 
c
 = 
i
 + 
dx
;

769 
vÆ
 = 0;

770 
r
 = 
	`c⁄°øö_öt
‘, 0, 
im
.
h
-1);

771 
c
 = 
	`c⁄°øö_öt
(c, 0, 
im
.
w
-1);

772 
vÆ
 = 
	`gë_pixñ
(
im
, 
c
, 
r
, 
k
);

773 
	`£t_pixñ
(
¸›≥d
, 
i
, 
j
, 
k
, 
vÆ
);

777  
¸›≥d
;

778 
	}
}

780 
	$be°_3d_shi·_r
(
image
 
a
, imagê
b
, 
mö
, 
max
)

782 if(
mö
 =
max
)  min;

783 
mid
 = 
	`Êo‹
((
mö
 + 
max
) / 2.);

784 
image
 
c1
 = 
	`¸›_image
(
b
, 0, 
mid
, b.
w
, b.
h
);

785 
image
 
c2
 = 
	`¸›_image
(
b
, 0, 
mid
+1, b.
w
, b.
h
);

786 
d1
 = 
	`di°_¨øy
(
c1
.
d©a
, 
a
.d©a,á.
w
*a.
h
*a.
c
, 10);

787 
d2
 = 
	`di°_¨øy
(
c2
.
d©a
, 
a
.d©a,á.
w
*a.
h
*a.
c
, 10);

788 
	`‰ì_image
(
c1
);

789 
	`‰ì_image
(
c2
);

790 if(
d1
 < 
d2
Ë 
	`be°_3d_shi·_r
(
a
, 
b
, 
mö
, 
mid
);

791  
	`be°_3d_shi·_r
(
a
, 
b
, 
mid
+1, 
max
);

792 
	}
}

794 
	$be°_3d_shi·
(
image
 
a
, imagê
b
, 
mö
, 
max
)

796 
i
;

797 
be°
 = 0;

798 
be°_di°™˚
 = 
FLT_MAX
;

799 
i
 = 
mö
; i <
max
; i += 2){

800 
image
 
c
 = 
	`¸›_image
(
b
, 0, 
i
, b.
w
, b.
h
);

801 
d
 = 
	`di°_¨øy
(
c
.
d©a
, 
a
.d©a,á.
w
*a.
h
*a.c, 100);

802 if(
d
 < 
be°_di°™˚
){

803 
be°_di°™˚
 = 
d
;

804 
be°
 = 
i
;

806 
	`¥ötf
("%d %f\n", 
i
, 
d
);

807 
	`‰ì_image
(
c
);

809  
be°
;

810 
	}
}

812 
	$composôe_3d
(*
f1
, *
f2
, *
out
, 
dñè
)

814 if(!
out
) out = "out";

815 
image
 
a
 = 
	`lﬂd_image
(
f1
, 0,0,0);

816 
image
 
b
 = 
	`lﬂd_image
(
f2
, 0,0,0);

817 
shi·
 = 
	`be°_3d_shi·_r
(
a
, 
b
, -a.
h
/100,á.h/100);

819 
image
 
c1
 = 
	`¸›_image
(
b
, 10, 
shi·
, b.
w
, b.
h
);

820 
d1
 = 
	`di°_¨øy
(
c1
.
d©a
, 
a
.d©a,á.
w
*a.
h
*a.
c
, 100);

821 
image
 
c2
 = 
	`¸›_image
(
b
, -10, 
shi·
, b.
w
, b.
h
);

822 
d2
 = 
	`di°_¨øy
(
c2
.
d©a
, 
a
.d©a,á.
w
*a.
h
*a.
c
, 100);

824 if(
d2
 < 
d1
 && 0){

825 
image
 
sw≠
 = 
a
;

826 
a
 = 
b
;

827 
b
 = 
sw≠
;

828 
shi·
 = -shift;

829 
	`¥ötf
("sw≠≥d, %d\n", 
shi·
);

832 
	`¥ötf
("%d\n", 
shi·
);

835 
image
 
c
 = 
	`¸›_image
(
b
, 
dñè
, 
shi·
, 
a
.
w
,á.
h
);

836 
i
;

837 
i
 = 0; i < 
c
.
w
*c.
h
; ++i){

838 
c
.
d©a
[
i
] = 
a
.data[i];

840 #ifde‡
OPENCV


841 
	`ßve_image_jpg
(
c
, 
out
);

843 
	`ßve_image
(
c
, 
out
);

845 
	}
}

847 
	$Àâîbox_image_öto
(
image
 
im
, 
w
, 
h
, imagê
boxed
)

849 
√w_w
 = 
im
.
w
;

850 
√w_h
 = 
im
.
h
;

851 i‡((()
w
/
im
.wË< (()
h
/im.h)) {

852 
√w_w
 = 
w
;

853 
√w_h
 = (
im
.
h
 * 
w
)/im.w;

855 
√w_h
 = 
h
;

856 
√w_w
 = (
im
.
w
 * 
h
)/im.h;

858 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
√w_w
, 
√w_h
);

859 
	`embed_image
(
ªsized
, 
boxed
, (
w
-
√w_w
)/2, (
h
-
√w_h
)/2);

860 
	`‰ì_image
(
ªsized
);

861 
	}
}

863 
image
 
	$Àâîbox_image
(
image
 
im
, 
w
, 
h
)

865 
√w_w
 = 
im
.
w
;

866 
√w_h
 = 
im
.
h
;

867 i‡((()
w
/
im
.wË< (()
h
/im.h)) {

868 
√w_w
 = 
w
;

869 
√w_h
 = (
im
.
h
 * 
w
)/im.w;

871 
√w_h
 = 
h
;

872 
√w_w
 = (
im
.
w
 * 
h
)/im.h;

874 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
√w_w
, 
√w_h
);

875 
image
 
boxed
 = 
	`make_image
(
w
, 
h
, 
im
.
c
);

876 
	`fûl_image
(
boxed
, .5);

879 
	`embed_image
(
ªsized
, 
boxed
, (
w
-
√w_w
)/2, (
h
-
√w_h
)/2);

880 
	`‰ì_image
(
ªsized
);

881  
boxed
;

882 
	}
}

884 
image
 
	$ªsize_max
(
image
 
im
, 
max
)

886 
w
 = 
im
.w;

887 
h
 = 
im
.h;

888 if(
w
 > 
h
){

889 
h
 = (h * 
max
Ë/ 
w
;

890 
w
 = 
max
;

892 
w
 = (w * 
max
Ë/ 
h
;

893 
h
 = 
max
;

895 if(
w
 =
im
.w && 
h
 == im.h)  im;

896 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
w
, 
h
);

897  
ªsized
;

898 
	}
}

900 
image
 
	$ªsize_mö
(
image
 
im
, 
mö
)

902 
w
 = 
im
.w;

903 
h
 = 
im
.h;

904 if(
w
 < 
h
){

905 
h
 = (h * 
mö
Ë/ 
w
;

906 
w
 = 
mö
;

908 
w
 = (w * 
mö
Ë/ 
h
;

909 
h
 = 
mö
;

911 if(
w
 =
im
.w && 
h
 == im.h)  im;

912 
image
 
ªsized
 = 
	`ªsize_image
(
im
, 
w
, 
h
);

913  
ªsized
;

914 
	}
}

916 
image
 
	$øndom_¸›_image
(
image
 
im
, 
w
, 
h
)

918 
dx
 = 
	`ønd_öt
(0, 
im
.
w
 - w);

919 
dy
 = 
	`ønd_öt
(0, 
im
.
h
 - h);

920 
image
 
¸›
 = 
	`¸›_image
(
im
, 
dx
, 
dy
, 
w
, 
h
);

921  
¸›
;

922 
	}
}

924 
augmít_¨gs
 
	$øndom_augmít_¨gs
(
image
 
im
, 
™gÀ
, 
a•e˘
, 
low
, 
high
, 
w
, 
h
)

926 
augmít_¨gs
 
a
 = {0};

927 
a•e˘
 = 
	`ønd_sˇÀ
(aspect);

928 
r
 = 
	`ønd_öt
(
low
, 
high
);

929 
mö
 = (
im
.
h
 < im.
w
*
a•e˘
) ? im.h : im.w*aspect;

930 
sˇÀ
 = ()
r
 / 
mö
;

932 
ød
 = 
	`ønd_unif‹m
(-
™gÀ
,ángÀË* 
TWO_PI
 / 360.;

934 
dx
 = (
im
.
w
*
sˇÀ
/
a•e˘
 - w) / 2.;

935 
dy
 = (
im
.
h
*
sˇÀ
 - 
w
) / 2.;

936 if(
dx
 < 0) dx = 0;

937 if(
dy
 < 0) dy = 0;

938 
dx
 = 
	`ønd_unif‹m
(-dx, dx);

939 
dy
 = 
	`ønd_unif‹m
(-dy, dy);

941 
a
.
ød
 =Ñad;

942 
a
.
sˇÀ
 = scale;

943 
a
.
w
 = w;

944 
a
.
h
 = h;

945 
a
.
dx
 = dx;

946 
a
.
dy
 = dy;

947 
a
.
a•e˘
 =áspect;

948  
a
;

949 
	}
}

951 
image
 
	$øndom_augmít_image
(
image
 
im
, 
™gÀ
, 
a•e˘
, 
low
, 
high
, 
w
, 
h
)

953 
augmít_¨gs
 
a
 = 
	`øndom_augmít_¨gs
(
im
, 
™gÀ
, 
a•e˘
, 
low
, 
high
, 
w
, 
h
);

954 
image
 
¸›
 = 
	`rŸ©e_¸›_image
(
im
, 
a
.
ød
,á.
sˇÀ
,á.
w
,á.
h
,á.
dx
,á.
dy
,á.
a•e˘
);

955  
¸›
;

956 
	}
}

958 
	$thªe_way_max
(
a
, 
b
, 
c
)

960  (
a
 > 
b
Ë? ( (®> 
c
) ?á : c) : ( (b > c) ? b : c) ;

961 
	}
}

963 
	$thªe_way_mö
(
a
, 
b
, 
c
)

965  (
a
 < 
b
Ë? ( (®< 
c
) ?á : c) : ( (b < c) ? b : c) ;

966 
	}
}

968 
	$yuv_to_rgb
(
image
 
im
)

970 
	`as£π
(
im
.
c
 == 3);

971 
i
, 
j
;

972 
r
, 
g
, 
b
;

973 
y
, 
u
, 
v
;

974 
j
 = 0; j < 
im
.
h
; ++j){

975 
i
 = 0; i < 
im
.
w
; ++i){

976 
y
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 0);

977 
u
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 1);

978 
v
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 2);

980 
r
 = 
y
 + 1.13983*
v
;

981 
g
 = 
y
 + -.39465*
u
 + -.58060*
v
;

982 
b
 = 
y
 + 2.03211*
u
;

984 
	`£t_pixñ
(
im
, 
i
, 
j
, 0, 
r
);

985 
	`£t_pixñ
(
im
, 
i
, 
j
, 1, 
g
);

986 
	`£t_pixñ
(
im
, 
i
, 
j
, 2, 
b
);

989 
	}
}

991 
	$rgb_to_yuv
(
image
 
im
)

993 
	`as£π
(
im
.
c
 == 3);

994 
i
, 
j
;

995 
r
, 
g
, 
b
;

996 
y
, 
u
, 
v
;

997 
j
 = 0; j < 
im
.
h
; ++j){

998 
i
 = 0; i < 
im
.
w
; ++i){

999 
r
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 0);

1000 
g
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 1);

1001 
b
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 2);

1003 
y
 = .299*
r
 + .587*
g
 + .114*
b
;

1004 
u
 = -.14713*
r
 + -.28886*
g
 + .436*
b
;

1005 
v
 = .615*
r
 + -.51499*
g
 + -.10001*
b
;

1007 
	`£t_pixñ
(
im
, 
i
, 
j
, 0, 
y
);

1008 
	`£t_pixñ
(
im
, 
i
, 
j
, 1, 
u
);

1009 
	`£t_pixñ
(
im
, 
i
, 
j
, 2, 
v
);

1012 
	}
}

1015 
	$rgb_to_hsv
(
image
 
im
)

1017 
	`as£π
(
im
.
c
 == 3);

1018 
i
, 
j
;

1019 
r
, 
g
, 
b
;

1020 
h
, 
s
, 
v
;

1021 
j
 = 0; j < 
im
.
h
; ++j){

1022 
i
 = 0; i < 
im
.
w
; ++i){

1023 
r
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 0);

1024 
g
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 1);

1025 
b
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 2);

1026 
max
 = 
	`thªe_way_max
(
r
,
g
,
b
);

1027 
mö
 = 
	`thªe_way_mö
(
r
,
g
,
b
);

1028 
dñè
 = 
max
 - 
mö
;

1029 
v
 = 
max
;

1030 if(
max
 == 0){

1031 
s
 = 0;

1032 
h
 = 0;

1034 
s
 = 
dñè
/
max
;

1035 if(
r
 =
max
){

1036 
h
 = (
g
 - 
b
Ë/ 
dñè
;

1037 } i‡(
g
 =
max
) {

1038 
h
 = 2 + (
b
 - 
r
Ë/ 
dñè
;

1040 
h
 = 4 + (
r
 - 
g
Ë/ 
dñè
;

1042 i‡(
h
 < 0) h += 6;

1043 
h
 = h/6.;

1045 
	`£t_pixñ
(
im
, 
i
, 
j
, 0, 
h
);

1046 
	`£t_pixñ
(
im
, 
i
, 
j
, 1, 
s
);

1047 
	`£t_pixñ
(
im
, 
i
, 
j
, 2, 
v
);

1050 
	}
}

1052 
	$hsv_to_rgb
(
image
 
im
)

1054 
	`as£π
(
im
.
c
 == 3);

1055 
i
, 
j
;

1056 
r
, 
g
, 
b
;

1057 
h
, 
s
, 
v
;

1058 
f
, 
p
, 
q
, 
t
;

1059 
j
 = 0; j < 
im
.
h
; ++j){

1060 
i
 = 0; i < 
im
.
w
; ++i){

1061 
h
 = 6 * 
	`gë_pixñ
(
im
, 
i
 , 
j
, 0);

1062 
s
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 1);

1063 
v
 = 
	`gë_pixñ
(
im
, 
i
 , 
j
, 2);

1064 i‡(
s
 == 0) {

1065 
r
 = 
g
 = 
b
 = 
v
;

1067 
ödex
 = 
	`Êo‹
(
h
);

1068 
f
 = 
h
 - 
ödex
;

1069 
p
 = 
v
*(1-
s
);

1070 
q
 = 
v
*(1-
s
*
f
);

1071 
t
 = 
v
*(1-
s
*(1-
f
));

1072 if(
ödex
 == 0){

1073 
r
 = 
v
; 
g
 = 
t
; 
b
 = 
p
;

1074 } if(
ödex
 == 1){

1075 
r
 = 
q
; 
g
 = 
v
; 
b
 = 
p
;

1076 } if(
ödex
 == 2){

1077 
r
 = 
p
; 
g
 = 
v
; 
b
 = 
t
;

1078 } if(
ödex
 == 3){

1079 
r
 = 
p
; 
g
 = 
q
; 
b
 = 
v
;

1080 } if(
ödex
 == 4){

1081 
r
 = 
t
; 
g
 = 
p
; 
b
 = 
v
;

1083 
r
 = 
v
; 
g
 = 
p
; 
b
 = 
q
;

1086 
	`£t_pixñ
(
im
, 
i
, 
j
, 0, 
r
);

1087 
	`£t_pixñ
(
im
, 
i
, 
j
, 1, 
g
);

1088 
	`£t_pixñ
(
im
, 
i
, 
j
, 2, 
b
);

1091 
	}
}

1093 
	$gøysˇÀ_image_3c
(
image
 
im
)

1095 
	`as£π
(
im
.
c
 == 3);

1096 
i
, 
j
, 
k
;

1097 
sˇÀ
[] = {0.299, 0.587, 0.114};

1098 
j
 = 0; j < 
im
.
h
; ++j){

1099 
i
 = 0; i < 
im
.
w
; ++i){

1100 
vÆ
 = 0;

1101 
k
 = 0; k < 3; ++k){

1102 
vÆ
 +
sˇÀ
[
k
]*
	`gë_pixñ
(
im
, 
i
, 
j
, k);

1104 
im
.
d©a
[0*im.
h
*im.
w
 + im.w*
j
 + 
i
] = 
vÆ
;

1105 
im
.
d©a
[1*im.
h
*im.
w
 + im.w*
j
 + 
i
] = 
vÆ
;

1106 
im
.
d©a
[2*im.
h
*im.
w
 + im.w*
j
 + 
i
] = 
vÆ
;

1109 
	}
}

1111 
image
 
	$gøysˇÀ_image
(
image
 
im
)

1113 
	`as£π
(
im
.
c
 == 3);

1114 
i
, 
j
, 
k
;

1115 
image
 
gøy
 = 
	`make_image
(
im
.
w
, im.
h
, 1);

1116 
sˇÀ
[] = {0.299, 0.587, 0.114};

1117 
k
 = 0; k < 
im
.
c
; ++k){

1118 
j
 = 0; j < 
im
.
h
; ++j){

1119 
i
 = 0; i < 
im
.
w
; ++i){

1120 
gøy
.
d©a
[
i
+
im
.
w
*
j
] +
sˇÀ
[
k
]*
	`gë_pixñ
(im, i, j, k);

1124  
gøy
;

1125 
	}
}

1127 
image
 
	$thªshﬁd_image
(
image
 
im
, 
thªsh
)

1129 
i
;

1130 
image
 
t
 = 
	`make_image
(
im
.
w
, im.
h
, im.
c
);

1131 
i
 = 0; i < 
im
.
w
*im.
h
*im.
c
; ++i){

1132 
t
.
d©a
[
i
] = 
im
.d©a[i]>
thªsh
 ? 1 : 0;

1134  
t
;

1135 
	}
}

1137 
image
 
	$bÀnd_image
(
image
 
f‹e
, imagê
back
, 
Æpha
)

1139 
	`as£π
(
f‹e
.
w
 =
back
.w && f‹e.
h
 =back.h && f‹e.
c
 == back.c);

1140 
image
 
bÀnd
 = 
	`make_image
(
f‹e
.
w
, f‹e.
h
, f‹e.
c
);

1141 
i
, 
j
, 
k
;

1142 
k
 = 0; k < 
f‹e
.
c
; ++k){

1143 
j
 = 0; j < 
f‹e
.
h
; ++j){

1144 
i
 = 0; i < 
f‹e
.
w
; ++i){

1145 
vÆ
 = 
Æpha
 * 
	`gë_pixñ
(
f‹e
, 
i
, 
j
, 
k
) +

1146 (1 - 
Æpha
)* 
	`gë_pixñ
(
back
, 
i
, 
j
, 
k
);

1147 
	`£t_pixñ
(
bÀnd
, 
i
, 
j
, 
k
, 
vÆ
);

1151  
bÀnd
;

1152 
	}
}

1154 
	$sˇÀ_image_ch™√l
(
image
 
im
, 
c
, 
v
)

1156 
i
, 
j
;

1157 
j
 = 0; j < 
im
.
h
; ++j){

1158 
i
 = 0; i < 
im
.
w
; ++i){

1159 
pix
 = 
	`gë_pixñ
(
im
, 
i
, 
j
, 
c
);

1160 
pix
 =Öix*
v
;

1161 
	`£t_pixñ
(
im
, 
i
, 
j
, 
c
, 
pix
);

1164 
	}
}

1166 
	$å™¶©e_image_ch™√l
(
image
 
im
, 
c
, 
v
)

1168 
i
, 
j
;

1169 
j
 = 0; j < 
im
.
h
; ++j){

1170 
i
 = 0; i < 
im
.
w
; ++i){

1171 
pix
 = 
	`gë_pixñ
(
im
, 
i
, 
j
, 
c
);

1172 
pix
 =Öix+
v
;

1173 
	`£t_pixñ
(
im
, 
i
, 
j
, 
c
, 
pix
);

1176 
	}
}

1178 
image
 
	$bö¨ize_image
(
image
 
im
)

1180 
image
 
c
 = 
	`c›y_image
(
im
);

1181 
i
;

1182 
i
 = 0; i < 
im
.
w
 * im.
h
 * im.
c
; ++i){

1183 if(
c
.
d©a
[
i
] > .5) c.data[i] = 1;

1184 
c
.
d©a
[
i
] = 0;

1186  
c
;

1187 
	}
}

1189 
	$ßtuøã_image
(
image
 
im
, 
ßt
)

1191 
	`rgb_to_hsv
(
im
);

1192 
	`sˇÀ_image_ch™√l
(
im
, 1, 
ßt
);

1193 
	`hsv_to_rgb
(
im
);

1194 
	`c⁄°øö_image
(
im
);

1195 
	}
}

1197 
	$hue_image
(
image
 
im
, 
hue
)

1199 
	`rgb_to_hsv
(
im
);

1200 
i
;

1201 
i
 = 0; i < 
im
.
w
*im.
h
; ++i){

1202 
im
.
d©a
[
i
] = im.d©a[i] + 
hue
;

1203 i‡(
im
.
d©a
[
i
] > 1) im.data[i] -= 1;

1204 i‡(
im
.
d©a
[
i
] < 0) im.data[i] += 1;

1206 
	`hsv_to_rgb
(
im
);

1207 
	`c⁄°øö_image
(
im
);

1208 
	}
}

1210 
	$exposuª_image
(
image
 
im
, 
ßt
)

1212 
	`rgb_to_hsv
(
im
);

1213 
	`sˇÀ_image_ch™√l
(
im
, 2, 
ßt
);

1214 
	`hsv_to_rgb
(
im
);

1215 
	`c⁄°øö_image
(
im
);

1216 
	}
}

1218 
	$di°‹t_image
(
image
 
im
, 
hue
, 
ßt
, 
vÆ
)

1220 
	`rgb_to_hsv
(
im
);

1221 
	`sˇÀ_image_ch™√l
(
im
, 1, 
ßt
);

1222 
	`sˇÀ_image_ch™√l
(
im
, 2, 
vÆ
);

1223 
i
;

1224 
i
 = 0; i < 
im
.
w
*im.
h
; ++i){

1225 
im
.
d©a
[
i
] = im.d©a[i] + 
hue
;

1226 i‡(
im
.
d©a
[
i
] > 1) im.data[i] -= 1;

1227 i‡(
im
.
d©a
[
i
] < 0) im.data[i] += 1;

1229 
	`hsv_to_rgb
(
im
);

1230 
	`c⁄°øö_image
(
im
);

1231 
	}
}

1233 
	$øndom_di°‹t_image
(
image
 
im
, 
hue
, 
ßtuøti⁄
, 
exposuª
)

1235 
dhue
 = 
	`ønd_unif‹m
(-
hue
, hue);

1236 
dßt
 = 
	`ønd_sˇÀ
(
ßtuøti⁄
);

1237 
dexp
 = 
	`ønd_sˇÀ
(
exposuª
);

1238 
	`di°‹t_image
(
im
, 
dhue
, 
dßt
, 
dexp
);

1239 
	}
}

1241 
	$ßtuøã_exposuª_image
(
image
 
im
, 
ßt
, 
exposuª
)

1243 
	`rgb_to_hsv
(
im
);

1244 
	`sˇÀ_image_ch™√l
(
im
, 1, 
ßt
);

1245 
	`sˇÀ_image_ch™√l
(
im
, 2, 
exposuª
);

1246 
	`hsv_to_rgb
(
im
);

1247 
	`c⁄°øö_image
(
im
);

1248 
	}
}

1250 
	$bûöór_öãΩﬁ©e
(
image
 
im
, 
x
, 
y
, 
c
)

1252 
ix
 = (Ë
	`Êo‹f
(
x
);

1253 
iy
 = (Ë
	`Êo‹f
(
y
);

1255 
dx
 = 
x
 - 
ix
;

1256 
dy
 = 
y
 - 
iy
;

1258 
vÆ
 = (1-
dy
Ë* (1-
dx
Ë* 
	`gë_pixñ_exãnd
(
im
, 
ix
, 
iy
, 
c
) +

1259 
dy
 * (1-
dx
Ë* 
	`gë_pixñ_exãnd
(
im
, 
ix
, 
iy
+1, 
c
) +

1260 (1-
dy
Ë* 
dx
 * 
	`gë_pixñ_exãnd
(
im
, 
ix
+1, 
iy
, 
c
) +

1261 
dy
 * 
dx
 * 
	`gë_pixñ_exãnd
(
im
, 
ix
+1, 
iy
+1, 
c
);

1262  
vÆ
;

1263 
	}
}

1265 
image
 
	$ªsize_image
(
image
 
im
, 
w
, 
h
)

1267 
image
 
ªsized
 = 
	`make_image
(
w
, 
h
, 
im
.
c
);

1268 
image
 
∑π
 = 
	`make_image
(
w
, 
im
.
h
, im.
c
);

1269 
r
, 
c
, 
k
;

1270 
w_sˇÀ
 = ()(
im
.
w
 - 1) / (w - 1);

1271 
h_sˇÀ
 = ()(
im
.
h
 - 1) / (h - 1);

1272 
k
 = 0; k < 
im
.
c
; ++k){

1273 
r
 = 0;Ñ < 
im
.
h
; ++r){

1274 
c
 = 0; c < 
w
; ++c){

1275 
vÆ
 = 0;

1276 if(
c
 =
w
-1 || 
im
.w == 1){

1277 
vÆ
 = 
	`gë_pixñ
(
im
, im.
w
-1, 
r
, 
k
);

1279 
sx
 = 
c
*
w_sˇÀ
;

1280 
ix
 = (Ë
sx
;

1281 
dx
 = 
sx
 - 
ix
;

1282 
vÆ
 = (1 - 
dx
Ë* 
	`gë_pixñ
(
im
, 
ix
, 
r
, 
k
) + dx * get_pixel(im, ix+1,Ñ, k);

1284 
	`£t_pixñ
(
∑π
, 
c
, 
r
, 
k
, 
vÆ
);

1288 
k
 = 0; k < 
im
.
c
; ++k){

1289 
r
 = 0;Ñ < 
h
; ++r){

1290 
sy
 = 
r
*
h_sˇÀ
;

1291 
iy
 = (Ë
sy
;

1292 
dy
 = 
sy
 - 
iy
;

1293 
c
 = 0; c < 
w
; ++c){

1294 
vÆ
 = (1-
dy
Ë* 
	`gë_pixñ
(
∑π
, 
c
, 
iy
, 
k
);

1295 
	`£t_pixñ
(
ªsized
, 
c
, 
r
, 
k
, 
vÆ
);

1297 if(
r
 =
h
-1 || 
im
.h == 1) ;

1298 
c
 = 0; c < 
w
; ++c){

1299 
vÆ
 = 
dy
 * 
	`gë_pixñ
(
∑π
, 
c
, 
iy
+1, 
k
);

1300 
	`add_pixñ
(
ªsized
, 
c
, 
r
, 
k
, 
vÆ
);

1305 
	`‰ì_image
(
∑π
);

1306  
ªsized
;

1307 
	}
}

1310 
	$ã°_ªsize
(*
fûíame
)

1312 
image
 
im
 = 
	`lﬂd_image
(
fûíame
, 0,0, 3);

1313 
mag
 = 
	`mag_¨øy
(
im
.
d©a
, im.
w
*im.
h
*im.
c
);

1314 
	`¥ötf
("L2 N‹m: %f\n", 
mag
);

1315 
image
 
gøy
 = 
	`gøysˇÀ_image
(
im
);

1317 
image
 
c1
 = 
	`c›y_image
(
im
);

1318 
image
 
c2
 = 
	`c›y_image
(
im
);

1319 
image
 
c3
 = 
	`c›y_image
(
im
);

1320 
image
 
c4
 = 
	`c›y_image
(
im
);

1321 
	`di°‹t_image
(
c1
, .1, 1.5, 1.5);

1322 
	`di°‹t_image
(
c2
, -.1, .66666, .66666);

1323 
	`di°‹t_image
(
c3
, .1, 1.5, .66666);

1324 
	`di°‹t_image
(
c4
, .1, .66666, 1.5);

1327 
	`show_image
(
im
, "Original");

1328 
	`show_image
(
gøy
, "Gray");

1329 
	`show_image
(
c1
, "C1");

1330 
	`show_image
(
c2
, "C2");

1331 
	`show_image
(
c3
, "C3");

1332 
	`show_image
(
c4
, "C4");

1333 #ifde‡
OPENCV


1335 
image
 
aug
 = 
	`øndom_augmít_image
(
im
, 0, .75, 320, 448, 320, 320);

1336 
	`show_image
(
aug
, "aug");

1337 
	`‰ì_image
(
aug
);

1340 
exposuª
 = 1.15;

1341 
ßtuøti⁄
 = 1.15;

1342 
hue
 = .05;

1344 
image
 
c
 = 
	`c›y_image
(
im
);

1346 
dexp
 = 
	`ønd_sˇÀ
(
exposuª
);

1347 
dßt
 = 
	`ønd_sˇÀ
(
ßtuøti⁄
);

1348 
dhue
 = 
	`ønd_unif‹m
(-
hue
, hue);

1350 
	`di°‹t_image
(
c
, 
dhue
, 
dßt
, 
dexp
);

1351 
	`show_image
(
c
, "rand");

1352 
	`¥ötf
("%‡%‡%f\n", 
dhue
, 
dßt
, 
dexp
);

1353 
	`‰ì_image
(
c
);

1354 
	`cvWaôKey
(0);

1357 
	}
}

1360 
image
 
	$lﬂd_image_°b
(*
fûíame
, 
ch™√ls
)

1362 
w
, 
h
, 
c
;

1363 *
d©a
 = 
	`°bi_lﬂd
(
fûíame
, &
w
, &
h
, &
c
, 
ch™√ls
);

1364 i‡(!
d©a
) {

1365 
	`Ârötf
(
°dîr
, "C™nŸÜﬂd imagê\"%s\"\nSTB Rós⁄: %s\n", 
fûíame
, 
	`°bi_Áûuª_ªas⁄
());

1366 
	`exô
(0);

1368 if(
ch™√ls
Ë
c
 = channels;

1369 
i
,
j
,
k
;

1370 
image
 
im
 = 
	`make_image
(
w
, 
h
, 
c
);

1371 
k
 = 0; k < 
c
; ++k){

1372 
j
 = 0; j < 
h
; ++j){

1373 
i
 = 0; i < 
w
; ++i){

1374 
d°_ödex
 = 
i
 + 
w
*
j
 + w*
h
*
k
;

1375 
§c_ödex
 = 
k
 + 
c
*
i
 + c*
w
*
j
;

1376 
im
.
d©a
[
d°_ödex
] = ()d©a[
§c_ödex
]/255.;

1380 
	`‰ì
(
d©a
);

1381  
im
;

1382 
	}
}

1384 
image
 
	$lﬂd_image
(*
fûíame
, 
w
, 
h
, 
c
)

1386 #ifde‡
OPENCV


1387 
image
 
out
 = 
	`lﬂd_image_cv
(
fûíame
, 
c
);

1389 
image
 
out
 = 
	`lﬂd_image_°b
(
fûíame
, 
c
);

1392 if((
h
 && 
w
Ë&& (h !
out
.h || w != out.w)){

1393 
image
 
ªsized
 = 
	`ªsize_image
(
out
, 
w
, 
h
);

1394 
	`‰ì_image
(
out
);

1395 
out
 = 
ªsized
;

1397  
out
;

1398 
	}
}

1400 
image
 
	$lﬂd_image_cﬁ‹
(*
fûíame
, 
w
, 
h
)

1402  
	`lﬂd_image
(
fûíame
, 
w
, 
h
, 3);

1403 
	}
}

1405 
image
 
	$gë_image_œyî
(
image
 
m
, 
l
)

1407 
image
 
out
 = 
	`make_image
(
m
.
w
, m.
h
, 1);

1408 
i
;

1409 
i
 = 0; i < 
m
.
h
*m.
w
; ++i){

1410 
out
.
d©a
[
i
] = 
m
.d©a[i+
l
*m.
h
*m.
w
];

1412  
out
;

1413 
	}
}

1415 
	$gë_pixñ
(
image
 
m
, 
x
, 
y
, 
c
)

1417 
	`as£π
(
x
 < 
m
.
w
 && 
y
 < m.
h
 && 
c
 < m.c);

1418  
m
.
d©a
[
c
*m.
h
*m.
w
 + 
y
*m.w + 
x
];

1419 
	}
}

1420 
	$gë_pixñ_exãnd
(
image
 
m
, 
x
, 
y
, 
c
)

1422 if(
x
 < 0) x = 0;

1423 if(
x
 >
m
.
w
) x = m.w-1;

1424 if(
y
 < 0) y = 0;

1425 if(
y
 >
m
.
h
) y = m.h-1;

1426 if(
c
 < 0 || c >
m
.c)  0;

1427  
	`gë_pixñ
(
m
, 
x
, 
y
, 
c
);

1428 
	}
}

1429 
	$£t_pixñ
(
image
 
m
, 
x
, 
y
, 
c
, 
vÆ
)

1431 i‡(
x
 < 0 || 
y
 < 0 || 
c
 < 0 || x >
m
.
w
 || y >m.
h
 || c >= m.c) ;

1432 
	`as£π
(
x
 < 
m
.
w
 && 
y
 < m.
h
 && 
c
 < m.c);

1433 
m
.
d©a
[
c
*m.
h
*m.
w
 + 
y
*m.w + 
x
] = 
vÆ
;

1434 
	}
}

1435 
	$add_pixñ
(
image
 
m
, 
x
, 
y
, 
c
, 
vÆ
)

1437 
	`as£π
(
x
 < 
m
.
w
 && 
y
 < m.
h
 && 
c
 < m.c);

1438 
m
.
d©a
[
c
*m.
h
*m.
w
 + 
y
*m.w + 
x
] +
vÆ
;

1439 
	}
}

1441 
	$¥öt_image
(
image
 
m
)

1443 
i
, 
j
, 
k
;

1444 
i
 =0 ; i < 
m
.
c
; ++i){

1445 
j
 =0 ; j < 
m
.
h
; ++j){

1446 
k
 = 0; k < 
m
.
w
; ++k){

1447 
	`¥ötf
("%.2lf, ", 
m
.
d©a
[
i
*m.
h
*m.
w
 + 
j
*m.w + 
k
]);

1448 if(
k
 > 30) ;

1450 
	`¥ötf
("\n");

1451 if(
j
 > 30) ;

1453 
	`¥ötf
("\n");

1455 
	`¥ötf
("\n");

1456 
	}
}

1458 
image
 
	$cﬁœp£_images_vît
(
image
 *
ims
, 
n
)

1460 
cﬁ‹
 = 1;

1461 
b‹dî
 = 1;

1462 
h
,
w
,
c
;

1463 
w
 = 
ims
[0].w;

1464 
h
 = (
ims
[0].h + 
b‹dî
Ë* 
n
 - border;

1465 
c
 = 
ims
[0].c;

1466 if(
c
 !3 || !
cﬁ‹
){

1467 
w
 = (w+
b‹dî
)*
c
 - border;

1468 
c
 = 1;

1471 
image
 
fûãrs
 = 
	`make_image
(
w
, 
h
, 
c
);

1472 
i
,
j
;

1473 
i
 = 0; i < 
n
; ++i){

1474 
h_off£t
 = 
i
*(
ims
[0].
h
+
b‹dî
);

1475 
image
 
c›y
 = 
	`c›y_image
(
ims
[
i
]);

1477 if(
c
 =3 && 
cﬁ‹
){

1478 
	`embed_image
(
c›y
, 
fûãrs
, 0, 
h_off£t
);

1481 
j
 = 0; j < 
c›y
.
c
; ++j){

1482 
w_off£t
 = 
j
*(
ims
[0].
w
+
b‹dî
);

1483 
image
 
œyî
 = 
	`gë_image_œyî
(
c›y
, 
j
);

1484 
	`embed_image
(
œyî
, 
fûãrs
, 
w_off£t
, 
h_off£t
);

1485 
	`‰ì_image
(
œyî
);

1488 
	`‰ì_image
(
c›y
);

1490  
fûãrs
;

1491 
	}
}

1493 
image
 
	$cﬁœp£_images_h‹z
(
image
 *
ims
, 
n
)

1495 
cﬁ‹
 = 1;

1496 
b‹dî
 = 1;

1497 
h
,
w
,
c
;

1498 
size
 = 
ims
[0].
h
;

1499 
h
 = 
size
;

1500 
w
 = (
ims
[0].w + 
b‹dî
Ë* 
n
 - border;

1501 
c
 = 
ims
[0].c;

1502 if(
c
 !3 || !
cﬁ‹
){

1503 
h
 = (h+
b‹dî
)*
c
 - border;

1504 
c
 = 1;

1507 
image
 
fûãrs
 = 
	`make_image
(
w
, 
h
, 
c
);

1508 
i
,
j
;

1509 
i
 = 0; i < 
n
; ++i){

1510 
w_off£t
 = 
i
*(
size
+
b‹dî
);

1511 
image
 
c›y
 = 
	`c›y_image
(
ims
[
i
]);

1513 if(
c
 =3 && 
cﬁ‹
){

1514 
	`embed_image
(
c›y
, 
fûãrs
, 
w_off£t
, 0);

1517 
j
 = 0; j < 
c›y
.
c
; ++j){

1518 
h_off£t
 = 
j
*(
size
+
b‹dî
);

1519 
image
 
œyî
 = 
	`gë_image_œyî
(
c›y
, 
j
);

1520 
	`embed_image
(
œyî
, 
fûãrs
, 
w_off£t
, 
h_off£t
);

1521 
	`‰ì_image
(
œyî
);

1524 
	`‰ì_image
(
c›y
);

1526  
fûãrs
;

1527 
	}
}

1529 
	$show_image_n‹mÆized
(
image
 
im
, c⁄° *
«me
)

1531 
image
 
c
 = 
	`c›y_image
(
im
);

1532 
	`n‹mÆize_image
(
c
);

1533 
	`show_image
(
c
, 
«me
);

1534 
	`‰ì_image
(
c
);

1535 
	}
}

1537 
	$show_images
(
image
 *
ims
, 
n
, *
wödow
)

1539 
image
 
m
 = 
	`cﬁœp£_images_vît
(
ims
, 
n
);

1549 
	`n‹mÆize_image
(
m
);

1550 
	`ßve_image
(
m
, 
wödow
);

1551 
	`show_image
(
m
, 
wödow
);

1552 
	`‰ì_image
(
m
);

1553 
	}
}

1555 
	$‰ì_image
(
image
 
m
)

1557 if(
m
.
d©a
){

1558 
	`‰ì
(
m
.
d©a
);

1560 
	}
}

	@src/image.h

1 #i‚de‡
IMAGE_H


2 
	#IMAGE_H


	)

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<Êﬂt.h
>

7 
	~<°rög.h
>

8 
	~<m©h.h
>

9 
	~"box.h
"

10 
	~"d¨k√t.h
"

12 #i‚de‡
__˝lu•lus


13 #ifde‡
OPENCV


14 
fûl_image_‰om_°ªam
(
CvC≠tuª
 *
ˇp
, 
image
 
im
);

15 
image
 
ùl_to_image
(
I∂Image
* 
§c
);

16 
ùl_öto_image
(
I∂Image
* 
§c
, 
image
 
im
);

17 
Êush_°ªam_buf„r
(
CvC≠tuª
 *
ˇp
, 
n
);

18 
show_image_cv
(
image
 
p
, c⁄° *
«me
, 
I∂Image
 *
di•
);

22 
gë_cﬁ‹
(
c
, 
x
, 
max
);

23 
døw_box
(
image
 
a
, 
x1
, 
y1
, 
x2
, 
y2
, 
r
, 
g
, 
b
);

24 
døw_bbox
(
image
 
a
, 
box
 
bbox
, 
w
, 
r
, 
g
, 
b
);

25 
døw_œbñ
(
image
 
a
, 
r
, 
c
, imagê
œbñ
, c⁄° *
rgb
);

26 
wrôe_œbñ
(
image
 
a
, 
r
, 
c
, imagê*
ch¨a˘îs
, *
°rög
, *
rgb
);

27 
image
 
image_di°™˚
(imagê
a
, imagê
b
);

28 
sˇÀ_image
(
image
 
m
, 
s
);

29 
image
 
rŸ©e_¸›_image
(imagê
im
, 
ød
, 
s
, 
w
, 
h
, 
dx
, 
dy
, 
a•e˘
);

30 
image
 
˚¡î_¸›_image
(imagê
im
, 
w
, 
h
);

31 
image
 
øndom_¸›_image
(imagê
im
, 
w
, 
h
);

32 
image
 
øndom_augmít_image
(imagê
im
, 
™gÀ
, 
a•e˘
, 
low
, 
high
, 
w
, 
h
);

33 
augmít_¨gs
 
øndom_augmít_¨gs
(
image
 
im
, 
™gÀ
, 
a•e˘
, 
low
, 
high
, 
w
, 
h
);

34 
Àâîbox_image_öto
(
image
 
im
, 
w
, 
h
, imagê
boxed
);

35 
image
 
ªsize_max
(imagê
im
, 
max
);

36 
å™¶©e_image
(
image
 
m
, 
s
);

37 
embed_image
(
image
 
sour˚
, imagê
de°
, 
dx
, 
dy
);

38 
∂a˚_image
(
image
 
im
, 
w
, 
h
, 
dx
, 
dy
, imagê
ˇnvas
);

39 
ßtuøã_image
(
image
 
im
, 
ßt
);

40 
exposuª_image
(
image
 
im
, 
ßt
);

41 
di°‹t_image
(
image
 
im
, 
hue
, 
ßt
, 
vÆ
);

42 
ßtuøã_exposuª_image
(
image
 
im
, 
ßt
, 
exposuª
);

43 
rgb_to_hsv
(
image
 
im
);

44 
hsv_to_rgb
(
image
 
im
);

45 
yuv_to_rgb
(
image
 
im
);

46 
rgb_to_yuv
(
image
 
im
);

49 
image
 
cﬁœp£_image_œyîs
(imagê
sour˚
, 
b‹dî
);

50 
image
 
cﬁœp£_images_h‹z
(imagê*
ims
, 
n
);

51 
image
 
cﬁœp£_images_vît
(imagê*
ims
, 
n
);

53 
show_image_n‹mÆized
(
image
 
im
, c⁄° *
«me
);

54 
show_images
(
image
 *
ims
, 
n
, *
wödow
);

55 
show_image_œyîs
(
image
 
p
, *
«me
);

56 
show_image_cﬁœp£d
(
image
 
p
, *
«me
);

58 
¥öt_image
(
image
 
m
);

60 
image
 
make_em±y_image
(
w
, 
h
, 
c
);

61 
c›y_image_öto
(
image
 
§c
, imagê
de°
);

63 
gë_pixñ
(
image
 
m
, 
x
, 
y
, 
c
);

64 
gë_pixñ_exãnd
(
image
 
m
, 
x
, 
y
, 
c
);

65 
£t_pixñ
(
image
 
m
, 
x
, 
y
, 
c
, 
vÆ
);

66 
add_pixñ
(
image
 
m
, 
x
, 
y
, 
c
, 
vÆ
);

67 
bûöór_öãΩﬁ©e
(
image
 
im
, 
x
, 
y
, 
c
);

69 
image
 
gë_image_œyî
(imagê
m
, 
l
);

70 
image
 
gë_œbñ
(imagê**
ch¨a˘îs
, *
°rög
, 
size
);

	@src/layer.c

1 
	~"œyî.h
"

2 
	~"cuda.h
"

4 
	~<°dlib.h
>

6 
	$‰ì_œyî
(
œyî
 
l
)

8 if(
l
.
ty≥
 =
DROPOUT
){

9 if(
l
.
ønd
Ë
	`‰ì
(l.rand);

10 #ifde‡
GPU


11 if(
l
.
ønd_gpu
Ë
	`cuda_‰ì
(l.rand_gpu);

15 if(
l
.
cweights
Ë
	`‰ì
(l.cweights);

16 if(
l
.
ödexes
Ë
	`‰ì
(l.indexes);

17 if(
l
.
öput_œyîs
Ë
	`‰ì
(l.input_layers);

18 if(
l
.
öput_sizes
Ë
	`‰ì
(l.input_sizes);

19 if(
l
.
m≠
Ë
	`‰ì
(l.map);

20 if(
l
.
ønd
Ë
	`‰ì
(l.rand);

21 if(
l
.
co°
Ë
	`‰ì
(l.cost);

22 if(
l
.
°©e
Ë
	`‰ì
(l.state);

23 if(
l
.
¥ev_°©e
Ë
	`‰ì
(l.prev_state);

24 if(
l
.
f‹gŸ_°©e
Ë
	`‰ì
(l.forgot_state);

25 if(
l
.
f‹gŸ_dñè
Ë
	`‰ì
(l.forgot_delta);

26 if(
l
.
°©e_dñè
Ë
	`‰ì
(l.state_delta);

27 if(
l
.
c⁄ˇt
Ë
	`‰ì
(l.concat);

28 if(
l
.
c⁄ˇt_dñè
Ë
	`‰ì
(l.concat_delta);

29 if(
l
.
bö¨y_weights
Ë
	`‰ì
(l.binary_weights);

30 if(
l
.
bü£s
Ë
	`‰ì
(l.biases);

31 if(
l
.
büs_upd©es
Ë
	`‰ì
(l.bias_updates);

32 if(
l
.
sˇÀs
Ë
	`‰ì
(l.scales);

33 if(
l
.
sˇÀ_upd©es
Ë
	`‰ì
(l.scale_updates);

34 if(
l
.
weights
Ë
	`‰ì
(l.weights);

35 if(
l
.
weight_upd©es
Ë
	`‰ì
(l.weight_updates);

36 if(
l
.
dñè
Ë
	`‰ì
(l.delta);

37 if(
l
.
ouçut
Ë
	`‰ì
(l.output);

38 if(
l
.
squ¨ed
Ë
	`‰ì
(l.squared);

39 if(
l
.
n‹ms
Ë
	`‰ì
(l.norms);

40 if(
l
.
•©ül_món
Ë
	`‰ì
(l.spatial_mean);

41 if(
l
.
món
Ë
	`‰ì
(l.mean);

42 if(
l
.
v¨ün˚
Ë
	`‰ì
(l.variance);

43 if(
l
.
món_dñè
Ë
	`‰ì
(l.mean_delta);

44 if(
l
.
v¨ün˚_dñè
Ë
	`‰ì
(l.variance_delta);

45 if(
l
.
rﬁlög_món
Ë
	`‰ì
(l.rolling_mean);

46 if(
l
.
rﬁlög_v¨ün˚
Ë
	`‰ì
(l.rolling_variance);

47 if(
l
.
x
Ë
	`‰ì
(l.x);

48 if(
l
.
x_n‹m
Ë
	`‰ì
(l.x_norm);

49 if(
l
.
m
Ë
	`‰ì
(l.m);

50 if(
l
.
v
Ë
	`‰ì
(l.v);

51 if(
l
.
z_˝u
Ë
	`‰ì
(l.z_cpu);

52 if(
l
.
r_˝u
Ë
	`‰ì
(l.r_cpu);

53 if(
l
.
h_˝u
Ë
	`‰ì
(l.h_cpu);

54 if(
l
.
bö¨y_öput
Ë
	`‰ì
(l.binary_input);

56 #ifde‡
GPU


57 if(
l
.
ödexes_gpu
Ë
	`cuda_‰ì
((*)l.indexes_gpu);

59 if(
l
.
z_gpu
Ë
	`cuda_‰ì
(l.z_gpu);

60 if(
l
.
r_gpu
Ë
	`cuda_‰ì
(l.r_gpu);

61 if(
l
.
h_gpu
Ë
	`cuda_‰ì
(l.h_gpu);

62 if(
l
.
m_gpu
Ë
	`cuda_‰ì
(l.m_gpu);

63 if(
l
.
v_gpu
Ë
	`cuda_‰ì
(l.v_gpu);

64 if(
l
.
¥ev_°©e_gpu
Ë
	`cuda_‰ì
(l.prev_state_gpu);

65 if(
l
.
f‹gŸ_°©e_gpu
Ë
	`cuda_‰ì
(l.forgot_state_gpu);

66 if(
l
.
f‹gŸ_dñè_gpu
Ë
	`cuda_‰ì
(l.forgot_delta_gpu);

67 if(
l
.
°©e_gpu
Ë
	`cuda_‰ì
(l.state_gpu);

68 if(
l
.
°©e_dñè_gpu
Ë
	`cuda_‰ì
(l.state_delta_gpu);

69 if(
l
.
g©e_gpu
Ë
	`cuda_‰ì
(l.gate_gpu);

70 if(
l
.
g©e_dñè_gpu
Ë
	`cuda_‰ì
(l.gate_delta_gpu);

71 if(
l
.
ßve_gpu
Ë
	`cuda_‰ì
(l.save_gpu);

72 if(
l
.
ßve_dñè_gpu
Ë
	`cuda_‰ì
(l.save_delta_gpu);

73 if(
l
.
c⁄ˇt_gpu
Ë
	`cuda_‰ì
(l.concat_gpu);

74 if(
l
.
c⁄ˇt_dñè_gpu
Ë
	`cuda_‰ì
(l.concat_delta_gpu);

75 if(
l
.
bö¨y_öput_gpu
Ë
	`cuda_‰ì
(l.binary_input_gpu);

76 if(
l
.
bö¨y_weights_gpu
Ë
	`cuda_‰ì
(l.binary_weights_gpu);

77 if(
l
.
món_gpu
Ë
	`cuda_‰ì
(l.mean_gpu);

78 if(
l
.
v¨ün˚_gpu
Ë
	`cuda_‰ì
(l.variance_gpu);

79 if(
l
.
rﬁlög_món_gpu
Ë
	`cuda_‰ì
(l.rolling_mean_gpu);

80 if(
l
.
rﬁlög_v¨ün˚_gpu
Ë
	`cuda_‰ì
(l.rolling_variance_gpu);

81 if(
l
.
v¨ün˚_dñè_gpu
Ë
	`cuda_‰ì
(l.variance_delta_gpu);

82 if(
l
.
món_dñè_gpu
Ë
	`cuda_‰ì
(l.mean_delta_gpu);

83 if(
l
.
x_gpu
Ë
	`cuda_‰ì
(l.x_gpu);

84 if(
l
.
x_n‹m_gpu
Ë
	`cuda_‰ì
(l.x_norm_gpu);

85 if(
l
.
weights_gpu
Ë
	`cuda_‰ì
(l.weights_gpu);

86 if(
l
.
weight_upd©es_gpu
Ë
	`cuda_‰ì
(l.weight_updates_gpu);

87 if(
l
.
bü£s_gpu
Ë
	`cuda_‰ì
(l.biases_gpu);

88 if(
l
.
büs_upd©es_gpu
Ë
	`cuda_‰ì
(l.bias_updates_gpu);

89 if(
l
.
sˇÀs_gpu
Ë
	`cuda_‰ì
(l.scales_gpu);

90 if(
l
.
sˇÀ_upd©es_gpu
Ë
	`cuda_‰ì
(l.scale_updates_gpu);

91 if(
l
.
ouçut_gpu
Ë
	`cuda_‰ì
(l.output_gpu);

92 if(
l
.
dñè_gpu
Ë
	`cuda_‰ì
(l.delta_gpu);

93 if(
l
.
ønd_gpu
Ë
	`cuda_‰ì
(l.rand_gpu);

94 if(
l
.
squ¨ed_gpu
Ë
	`cuda_‰ì
(l.squared_gpu);

95 if(
l
.
n‹ms_gpu
Ë
	`cuda_‰ì
(l.norms_gpu);

97 
	}
}

	@src/layer.h

1 
	~"d¨k√t.h
"

	@src/list.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~"li°.h
"

5 
li°
 *
	$make_li°
()

7 
li°
 *
l
 = 
	`mÆloc
((list));

8 
l
->
size
 = 0;

9 
l
->
‰⁄t
 = 0;

10 
l
->
back
 = 0;

11  
l
;

12 
	}
}

28 *
	$li°_p›
(
li°
 *
l
){

29 if(!
l
->
back
)  0;

30 
node
 *
b
 = 
l
->
back
;

31 *
vÆ
 = 
b
->val;

32 
l
->
back
 = 
b
->
¥ev
;

33 if(
l
->
back
Ël->back->
√xt
 = 0;

34 
	`‰ì
(
b
);

35 --
l
->
size
;

37  
vÆ
;

38 
	}
}

40 
	$li°_ö£π
(
li°
 *
l
, *
vÆ
)

42 
node
 *
√w
 = 
	`mÆloc
((node));

43 
√w
->
vÆ
 = val;

44 
√w
->
√xt
 = 0;

46 if(!
l
->
back
){

47 
l
->
‰⁄t
 = 
√w
;

48 
√w
->
¥ev
 = 0;

50 
l
->
back
->
√xt
 = 
√w
;

51 
√w
->
¥ev
 = 
l
->
back
;

53 
l
->
back
 = 
√w
;

54 ++
l
->
size
;

55 
	}
}

57 
	$‰ì_node
(
node
 *
n
)

59 
node
 *
√xt
;

60 
n
) {

61 
√xt
 = 
n
->next;

62 
	`‰ì
(
n
);

63 
n
 = 
√xt
;

65 
	}
}

67 
	$‰ì_li°
(
li°
 *
l
)

69 
	`‰ì_node
(
l
->
‰⁄t
);

70 
	`‰ì
(
l
);

71 
	}
}

73 
	$‰ì_li°_c⁄ã¡s
(
li°
 *
l
)

75 
node
 *
n
 = 
l
->
‰⁄t
;

76 
n
){

77 
	`‰ì
(
n
->
vÆ
);

78 
n
 =Ç->
√xt
;

80 
	}
}

82 **
	$li°_to_¨øy
(
li°
 *
l
)

84 **
a
 = 
	`ˇŒoc
(
l
->
size
, (*));

85 
cou¡
 = 0;

86 
node
 *
n
 = 
l
->
‰⁄t
;

87 
n
){

88 
a
[
cou¡
++] = 
n
->
vÆ
;

89 
n
 =Ç->
√xt
;

91  
a
;

92 
	}
}

	@src/list.h

1 #i‚de‡
LIST_H


2 
	#LIST_H


	)

3 
	~"d¨k√t.h
"

5 
li°
 *
make_li°
();

6 
li°_föd
(
li°
 *
l
, *
vÆ
);

8 
li°_ö£π
(
li°
 *, *);

11 
‰ì_li°_c⁄ã¡s
(
li°
 *
l
);

	@src/local_layer.c

1 
	~"loˇl_œyî.h
"

2 
	~"utûs.h
"

3 
	~"im2cﬁ.h
"

4 
	~"cﬁ2im.h
"

5 
	~"bœs.h
"

6 
	~"gemm.h
"

7 
	~<°dio.h
>

8 
	~<time.h
>

10 
	$loˇl_out_height
(
loˇl_œyî
 
l
)

12 
h
 = 
l
.h;

13 i‡(!
l
.
∑d
Ë
h
 -l.
size
;

14 
h
 -= 1;

15  
h
/
l
.
°ride
 + 1;

16 
	}
}

18 
	$loˇl_out_width
(
loˇl_œyî
 
l
)

20 
w
 = 
l
.w;

21 i‡(!
l
.
∑d
Ë
w
 -l.
size
;

22 
w
 -= 1;

23  
w
/
l
.
°ride
 + 1;

24 
	}
}

26 
loˇl_œyî
 
	$make_loˇl_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑d
, 
ACTIVATION
 
a˘iv©i⁄
)

28 
i
;

29 
loˇl_œyî
 
l
 = {0};

30 
l
.
ty≥
 = 
LOCAL
;

32 
l
.
h
 = h;

33 
l
.
w
 = w;

34 
l
.
c
 = c;

35 
l
.
n
 =Ç;

36 
l
.
b©ch
 = batch;

37 
l
.
°ride
 = stride;

38 
l
.
size
 = size;

39 
l
.
∑d
 =Öad;

41 
out_h
 = 
	`loˇl_out_height
(
l
);

42 
out_w
 = 
	`loˇl_out_width
(
l
);

43 
loˇti⁄s
 = 
out_h
*
out_w
;

44 
l
.
out_h
 = out_h;

45 
l
.
out_w
 = out_w;

46 
l
.
out_c
 = 
n
;

47 
l
.
ouçuts
 =Ü.
out_h
 *Ü.
out_w
 *Ü.
out_c
;

48 
l
.
öputs
 =Ü.
w
 *Ü.
h
 *Ü.
c
;

50 
l
.
weights
 = 
	`ˇŒoc
(
c
*
n
*
size
*size*
loˇti⁄s
, ());

51 
l
.
weight_upd©es
 = 
	`ˇŒoc
(
c
*
n
*
size
*size*
loˇti⁄s
, ());

53 
l
.
bü£s
 = 
	`ˇŒoc
÷.
ouçuts
, ());

54 
l
.
büs_upd©es
 = 
	`ˇŒoc
÷.
ouçuts
, ());

57 
sˇÀ
 = 
	`sqπ
(2./(
size
*size*
c
));

58 
i
 = 0; i < 
c
*
n
*
size
*size; ++iË
l
.
weights
[i] = 
sˇÀ
*
	`ønd_unif‹m
(-1,1);

60 
l
.
ouçut
 = 
	`ˇŒoc
÷.
b©ch
*
out_h
 * 
out_w
 * 
n
, ());

61 
l
.
dñè
 = 
	`ˇŒoc
÷.
b©ch
*
out_h
 * 
out_w
 * 
n
, ());

63 
l
.
w‹k•a˚_size
 = 
out_h
*
out_w
*
size
*size*
c
;

65 
l
.
f‹w¨d
 = 
f‹w¨d_loˇl_œyî
;

66 
l
.
backw¨d
 = 
backw¨d_loˇl_œyî
;

67 
l
.
upd©e
 = 
upd©e_loˇl_œyî
;

69 #ifde‡
GPU


70 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_loˇl_œyî_gpu
;

71 
l
.
backw¨d_gpu
 = 
backw¨d_loˇl_œyî_gpu
;

72 
l
.
upd©e_gpu
 = 
upd©e_loˇl_œyî_gpu
;

74 
l
.
weights_gpu
 = 
	`cuda_make_¨øy
÷.
weights
, 
c
*
n
*
size
*size*
loˇti⁄s
);

75 
l
.
weight_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
weight_upd©es
, 
c
*
n
*
size
*size*
loˇti⁄s
);

77 
l
.
bü£s_gpu
 = 
	`cuda_make_¨øy
÷.
bü£s
,Ü.
ouçuts
);

78 
l
.
büs_upd©es_gpu
 = 
	`cuda_make_¨øy
÷.
büs_upd©es
,Ü.
ouçuts
);

80 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

81 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
b©ch
*
out_h
*
out_w
*
n
);

84 
l
.
a˘iv©i⁄
 =áctivation;

86 
	`Ârötf
(
°dîr
, "Loˇ»Layî: %d x %d x %d image, %d fûãr†-> %d x %d x %d image\n", 
h
,
w
,
c
,
n
, 
out_h
, 
out_w
,Ç);

88  
l
;

89 
	}
}

91 
	$f‹w¨d_loˇl_œyî
(c⁄° 
loˇl_œyî
 
l
, 
√tw‹k
 
√t
)

93 
out_h
 = 
	`loˇl_out_height
(
l
);

94 
out_w
 = 
	`loˇl_out_width
(
l
);

95 
i
, 
j
;

96 
loˇti⁄s
 = 
out_h
 * 
out_w
;

98 
i
 = 0; i < 
l
.
b©ch
; ++i){

99 
	`c›y_˝u
(
l
.
ouçuts
,Ü.
bü£s
, 1,Ü.
ouçut
 + 
i
*l.outputs, 1);

102 
i
 = 0; i < 
l
.
b©ch
; ++i){

103 *
öput
 = 
√t
.öpuà+ 
i
*
l
.
w
*l.
h
*l.
c
;

104 
	`im2cﬁ_˝u
(
öput
, 
l
.
c
,Ü.
h
,Ü.
w
,

105 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
√t
.
w‹k•a˚
);

106 *
ouçut
 = 
l
.ouçuà+ 
i
*l.
ouçuts
;

107 
j
 = 0; j < 
loˇti⁄s
; ++j){

108 *
a
 = 
l
.
weights
 + 
j
*l.
size
*l.size*l.
c
*l.
n
;

109 *
b
 = 
√t
.
w‹k•a˚
 + 
j
;

110 *
c
 = 
ouçut
 + 
j
;

112 
m
 = 
l
.
n
;

113 
n
 = 1;

114 
k
 = 
l
.
size
*l.size*l.
c
;

116 
	`gemm
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,
loˇti⁄s
,1,
c
,locations);

119 
	`a˘iv©e_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

120 
	}
}

122 
	$backw¨d_loˇl_œyî
(
loˇl_œyî
 
l
, 
√tw‹k
 
√t
)

124 
i
, 
j
;

125 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

127 
	`gødõ¡_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

129 
i
 = 0; i < 
l
.
b©ch
; ++i){

130 
	`axpy_˝u
(
l
.
ouçuts
, 1,Ü.
dñè
 + 
i
*l.ouçuts, 1,Ü.
büs_upd©es
, 1);

133 
i
 = 0; i < 
l
.
b©ch
; ++i){

134 *
öput
 = 
√t
.öpuà+ 
i
*
l
.
w
*l.
h
*l.
c
;

135 
	`im2cﬁ_˝u
(
öput
, 
l
.
c
,Ü.
h
,Ü.
w
,

136 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
√t
.
w‹k•a˚
);

138 
j
 = 0; j < 
loˇti⁄s
; ++j){

139 *
a
 = 
l
.
dñè
 + 
i
*l.
ouçuts
 + 
j
;

140 *
b
 = 
√t
.
w‹k•a˚
 + 
j
;

141 *
c
 = 
l
.
weight_upd©es
 + 
j
*l.
size
*l.size*l.c*l.
n
;

142 
m
 = 
l
.
n
;

143 
n
 = 
l
.
size
*l.size*l.
c
;

144 
k
 = 1;

146 
	`gemm
(0,1,
m
,
n
,
k
,1,
a
,
loˇti⁄s
,
b
,loˇti⁄s,1,
c
,n);

149 if(
√t
.
dñè
){

150 
j
 = 0; j < 
loˇti⁄s
; ++j){

151 *
a
 = 
l
.
weights
 + 
j
*l.
size
*l.size*l.
c
*l.
n
;

152 *
b
 = 
l
.
dñè
 + 
i
*l.
ouçuts
 + 
j
;

153 *
c
 = 
√t
.
w‹k•a˚
 + 
j
;

155 
m
 = 
l
.
size
*l.size*l.
c
;

156 
n
 = 1;

157 
k
 = 
l
.
n
;

159 
	`gemm
(1,0,
m
,
n
,
k
,1,
a
,m,
b
,
loˇti⁄s
,0,
c
,locations);

162 
	`cﬁ2im_˝u
(
√t
.
w‹k•a˚
, 
l
.
c
,Ü.
h
,Ü.
w
,Ü.
size
,Ü.
°ride
,Ü.
∑d
,Çë.
dñè
+
i
*l.c*l.h*l.w);

165 
	}
}

167 
	$upd©e_loˇl_œyî
(
loˇl_œyî
 
l
, 
upd©e_¨gs
 
a
)

169 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

170 
momítum
 = 
a
.momentum;

171 
deˇy
 = 
a
.decay;

172 
b©ch
 = 
a
.batch;

174 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

175 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

176 
	`axpy_˝u
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es
, 1,Ü.
bü£s
, 1);

177 
	`sˇl_˝u
(
l
.
ouçuts
, 
momítum
,Ü.
büs_upd©es
, 1);

179 
	`axpy_˝u
(
size
, -
deˇy
*
b©ch
, 
l
.
weights
, 1,Ü.
weight_upd©es
, 1);

180 
	`axpy_˝u
(
size
, 
À¨nög_øã
/
b©ch
, 
l
.
weight_upd©es
, 1,Ü.
weights
, 1);

181 
	`sˇl_˝u
(
size
, 
momítum
, 
l
.
weight_upd©es
, 1);

182 
	}
}

184 #ifde‡
GPU


186 
	$f‹w¨d_loˇl_œyî_gpu
(c⁄° 
loˇl_œyî
 
l
, 
√tw‹k
 
√t
)

188 
out_h
 = 
	`loˇl_out_height
(
l
);

189 
out_w
 = 
	`loˇl_out_width
(
l
);

190 
i
, 
j
;

191 
loˇti⁄s
 = 
out_h
 * 
out_w
;

193 
i
 = 0; i < 
l
.
b©ch
; ++i){

194 
	`c›y_gpu
(
l
.
ouçuts
,Ü.
bü£s_gpu
, 1,Ü.
ouçut_gpu
 + 
i
*l.outputs, 1);

197 
i
 = 0; i < 
l
.
b©ch
; ++i){

198 *
öput
 = 
√t
.
öput_gpu
 + 
i
*
l
.
w
*l.
h
*l.
c
;

199 
	`im2cﬁ_gpu
(
öput
, 
l
.
c
,Ü.
h
,Ü.
w
,

200 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
√t
.
w‹k•a˚
);

201 *
ouçut
 = 
l
.
ouçut_gpu
 + 
i
*l.
ouçuts
;

202 
j
 = 0; j < 
loˇti⁄s
; ++j){

203 *
a
 = 
l
.
weights_gpu
 + 
j
*l.
size
*l.size*l.
c
*l.
n
;

204 *
b
 = 
√t
.
w‹k•a˚
 + 
j
;

205 *
c
 = 
ouçut
 + 
j
;

207 
m
 = 
l
.
n
;

208 
n
 = 1;

209 
k
 = 
l
.
size
*l.size*l.
c
;

211 
	`gemm_gpu
(0,0,
m
,
n
,
k
,1,
a
,k,
b
,
loˇti⁄s
,1,
c
,locations);

214 
	`a˘iv©e_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

215 
	}
}

217 
	$backw¨d_loˇl_œyî_gpu
(
loˇl_œyî
 
l
, 
√tw‹k
 
√t
)

219 
i
, 
j
;

220 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

222 
	`gødõ¡_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè_gpu
);

223 
i
 = 0; i < 
l
.
b©ch
; ++i){

224 
	`axpy_gpu
(
l
.
ouçuts
, 1,Ü.
dñè_gpu
 + 
i
*l.ouçuts, 1,Ü.
büs_upd©es_gpu
, 1);

227 
i
 = 0; i < 
l
.
b©ch
; ++i){

228 *
öput
 = 
√t
.
öput_gpu
 + 
i
*
l
.
w
*l.
h
*l.
c
;

229 
	`im2cﬁ_gpu
(
öput
, 
l
.
c
,Ü.
h
,Ü.
w
,

230 
l
.
size
,Ü.
°ride
,Ü.
∑d
, 
√t
.
w‹k•a˚
);

232 
j
 = 0; j < 
loˇti⁄s
; ++j){

233 *
a
 = 
l
.
dñè_gpu
 + 
i
*l.
ouçuts
 + 
j
;

234 *
b
 = 
√t
.
w‹k•a˚
 + 
j
;

235 *
c
 = 
l
.
weight_upd©es_gpu
 + 
j
*l.
size
*l.size*l.c*l.
n
;

236 
m
 = 
l
.
n
;

237 
n
 = 
l
.
size
*l.size*l.
c
;

238 
k
 = 1;

240 
	`gemm_gpu
(0,1,
m
,
n
,
k
,1,
a
,
loˇti⁄s
,
b
,loˇti⁄s,1,
c
,n);

243 if(
√t
.
dñè_gpu
){

244 
j
 = 0; j < 
loˇti⁄s
; ++j){

245 *
a
 = 
l
.
weights_gpu
 + 
j
*l.
size
*l.size*l.
c
*l.
n
;

246 *
b
 = 
l
.
dñè_gpu
 + 
i
*l.
ouçuts
 + 
j
;

247 *
c
 = 
√t
.
w‹k•a˚
 + 
j
;

249 
m
 = 
l
.
size
*l.size*l.
c
;

250 
n
 = 1;

251 
k
 = 
l
.
n
;

253 
	`gemm_gpu
(1,0,
m
,
n
,
k
,1,
a
,m,
b
,
loˇti⁄s
,0,
c
,locations);

256 
	`cﬁ2im_gpu
(
√t
.
w‹k•a˚
, 
l
.
c
,Ü.
h
,Ü.
w
,Ü.
size
,Ü.
°ride
,Ü.
∑d
,Çë.
dñè_gpu
+
i
*l.c*l.h*l.w);

259 
	}
}

261 
	$upd©e_loˇl_œyî_gpu
(
loˇl_œyî
 
l
, 
upd©e_¨gs
 
a
)

263 
À¨nög_øã
 = 
a
.À¨nög_øã*
l
.
À¨nög_øã_sˇÀ
;

264 
momítum
 = 
a
.momentum;

265 
deˇy
 = 
a
.decay;

266 
b©ch
 = 
a
.batch;

268 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

269 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

270 
	`axpy_gpu
(
l
.
ouçuts
, 
À¨nög_øã
/
b©ch
,Ü.
büs_upd©es_gpu
, 1,Ü.
bü£s_gpu
, 1);

271 
	`sˇl_gpu
(
l
.
ouçuts
, 
momítum
,Ü.
büs_upd©es_gpu
, 1);

273 
	`axpy_gpu
(
size
, -
deˇy
*
b©ch
, 
l
.
weights_gpu
, 1,Ü.
weight_upd©es_gpu
, 1);

274 
	`axpy_gpu
(
size
, 
À¨nög_øã
/
b©ch
, 
l
.
weight_upd©es_gpu
, 1,Ü.
weights_gpu
, 1);

275 
	`sˇl_gpu
(
size
, 
momítum
, 
l
.
weight_upd©es_gpu
, 1);

276 
	}
}

278 
	$puŒ_loˇl_œyî
(
loˇl_œyî
 
l
)

280 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

281 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

282 
	`cuda_puŒ_¨øy
(
l
.
weights_gpu
,Ü.
weights
, 
size
);

283 
	`cuda_puŒ_¨øy
(
l
.
bü£s_gpu
,Ü.
bü£s
,Ü.
ouçuts
);

284 
	}
}

286 
	$push_loˇl_œyî
(
loˇl_œyî
 
l
)

288 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

289 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

290 
	`cuda_push_¨øy
(
l
.
weights_gpu
,Ü.
weights
, 
size
);

291 
	`cuda_push_¨øy
(
l
.
bü£s_gpu
,Ü.
bü£s
,Ü.
ouçuts
);

292 
	}
}

	@src/local_layer.h

1 #i‚de‡
LOCAL_LAYER_H


2 
	#LOCAL_LAYER_H


	)

4 
	~"cuda.h
"

5 
	~"image.h
"

6 
	~"a˘iv©i⁄s.h
"

7 
	~"œyî.h
"

8 
	~"√tw‹k.h
"

10 
œyî
 
	tloˇl_œyî
;

12 #ifde‡
GPU


13 
f‹w¨d_loˇl_œyî_gpu
(
loˇl_œyî
 
œyî
, 
√tw‹k
 
√t
);

14 
backw¨d_loˇl_œyî_gpu
(
loˇl_œyî
 
œyî
, 
√tw‹k
 
√t
);

15 
upd©e_loˇl_œyî_gpu
(
loˇl_œyî
 
œyî
, 
upd©e_¨gs
 
a
);

17 
push_loˇl_œyî
(
loˇl_œyî
 
œyî
);

18 
puŒ_loˇl_œyî
(
loˇl_œyî
 
œyî
);

21 
loˇl_œyî
 
make_loˇl_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
n
, 
size
, 
°ride
, 
∑d
, 
ACTIVATION
 
a˘iv©i⁄
);

23 
f‹w¨d_loˇl_œyî
(c⁄° 
loˇl_œyî
 
œyî
, 
√tw‹k
 
√t
);

24 
backw¨d_loˇl_œyî
(
loˇl_œyî
 
œyî
, 
√tw‹k
 
√t
);

25 
upd©e_loˇl_œyî
(
loˇl_œyî
 
œyî
, 
upd©e_¨gs
 
a
);

27 
büs_ouçut
(*
ouçut
, *
bü£s
, 
b©ch
, 
n
, 
size
);

28 
backw¨d_büs
(*
büs_upd©es
, *
dñè
, 
b©ch
, 
n
, 
size
);

	@src/lstm_layer.c

1 
	~"l°m_œyî.h
"

2 
	~"c⁄√˘ed_œyî.h
"

3 
	~"utûs.h
"

4 
	~"cuda.h
"

5 
	~"bœs.h
"

6 
	~"gemm.h
"

8 
	~<m©h.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	$ö¸emít_œyî
(
œyî
 *
l
, 
°ïs
)

15 
num
 = 
l
->
ouçuts
*l->
b©ch
*
°ïs
;

16 
l
->
ouçut
 +
num
;

17 
l
->
dñè
 +
num
;

18 
l
->
x
 +
num
;

19 
l
->
x_n‹m
 +
num
;

21 #ifde‡
GPU


22 
l
->
ouçut_gpu
 +
num
;

23 
l
->
dñè_gpu
 +
num
;

24 
l
->
x_gpu
 +
num
;

25 
l
->
x_n‹m_gpu
 +
num
;

27 
	}
}

29 
œyî
 
	$make_l°m_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
b©ch_n‹mÆize
, 
adam
)

31 
	`Ârötf
(
°dîr
, "LSTM Layî: %d i≈uts, %d ouçuts\n", 
öputs
, 
ouçuts
);

32 
b©ch
 = b©ch / 
°ïs
;

33 
œyî
 
l
 = { 0 };

34 
l
.
b©ch
 = batch;

35 
l
.
ty≥
 = 
LSTM
;

36 
l
.
°ïs
 = steps;

37 
l
.
öputs
 = inputs;

39 
l
.
uf
 = 
	`mÆloc
((
œyî
));

40 
	`Ârötf
(
°dîr
, "\t\t");

41 *(
l
.
uf
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

42 
l
.
uf
->
b©ch
 = batch;

44 
l
.
ui
 = 
	`mÆloc
((
œyî
));

45 
	`Ârötf
(
°dîr
, "\t\t");

46 *(
l
.
ui
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

47 
l
.
ui
->
b©ch
 = batch;

49 
l
.
ug
 = 
	`mÆloc
((
œyî
));

50 
	`Ârötf
(
°dîr
, "\t\t");

51 *(
l
.
ug
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

52 
l
.
ug
->
b©ch
 = batch;

54 
l
.
uo
 = 
	`mÆloc
((
œyî
));

55 
	`Ârötf
(
°dîr
, "\t\t");

56 *(
l
.
uo
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

57 
l
.
uo
->
b©ch
 = batch;

59 
l
.
wf
 = 
	`mÆloc
((
œyî
));

60 
	`Ârötf
(
°dîr
, "\t\t");

61 *(
l
.
wf
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

62 
l
.
wf
->
b©ch
 = batch;

64 
l
.
wi
 = 
	`mÆloc
((
œyî
));

65 
	`Ârötf
(
°dîr
, "\t\t");

66 *(
l
.
wi
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

67 
l
.
wi
->
b©ch
 = batch;

69 
l
.
wg
 = 
	`mÆloc
((
œyî
));

70 
	`Ârötf
(
°dîr
, "\t\t");

71 *(
l
.
wg
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

72 
l
.
wg
->
b©ch
 = batch;

74 
l
.
wo
 = 
	`mÆloc
((
œyî
));

75 
	`Ârötf
(
°dîr
, "\t\t");

76 *(
l
.
wo
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
LINEAR
, 
b©ch_n‹mÆize
, 
adam
);

77 
l
.
wo
->
b©ch
 = batch;

79 
l
.
b©ch_n‹mÆize
 = batch_normalize;

80 
l
.
ouçuts
 = outputs;

82 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
*
°ïs
, ());

83 
l
.
°©e
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

85 
l
.
f‹w¨d
 = 
f‹w¨d_l°m_œyî
;

86 
l
.
upd©e
 = 
upd©e_l°m_œyî
;

88 
l
.
¥ev_°©e_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

89 
l
.
¥ev_˚Œ_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

90 
l
.
˚Œ_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
*
°ïs
, ());

92 
l
.
f_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

93 
l
.
i_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

94 
l
.
g_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

95 
l
.
o_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

96 
l
.
c_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

97 
l
.
h_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

98 
l
.
ãmp_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

99 
l
.
ãmp2_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

100 
l
.
ãmp3_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

101 
l
.
dc_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

102 
l
.
dh_˝u
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

104 #ifde‡
GPU


105 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_l°m_œyî_gpu
;

106 
l
.
backw¨d_gpu
 = 
backw¨d_l°m_œyî_gpu
;

107 
l
.
upd©e_gpu
 = 
upd©e_l°m_œyî_gpu
;

109 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
*
°ïs
);

110 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*l.
ouçuts
*
°ïs
);

112 
l
.
¥ev_°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

113 
l
.
¥ev_˚Œ_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

114 
l
.
˚Œ_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
*
°ïs
);

116 
l
.
f_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

117 
l
.
i_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

118 
l
.
g_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

119 
l
.
o_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

120 
l
.
c_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

121 
l
.
h_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

122 
l
.
ãmp_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

123 
l
.
ãmp2_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

124 
l
.
ãmp3_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

125 
l
.
dc_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

126 
l
.
dh_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

127 #ifde‡
CUDNN


128 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wf
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wf->
out_c
,Ü.wf->
out_h
,Ü.wf->
out_w
);

129 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wi
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wi->
out_c
,Ü.wi->
out_h
,Ü.wi->
out_w
);

130 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wg
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wg->
out_c
,Ü.wg->
out_h
,Ü.wg->
out_w
);

131 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
wo
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.wo->
out_c
,Ü.wo->
out_h
,Ü.wo->
out_w
);

133 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
uf
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.uf->
out_c
,Ü.uf->
out_h
,Ü.uf->
out_w
);

134 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
ui
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.ui->
out_c
,Ü.ui->
out_h
,Ü.ui->
out_w
);

135 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
ug
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.ug->
out_c
,Ü.ug->
out_h
,Ü.ug->
out_w
);

136 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
uo
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.uo->
out_c
,Ü.uo->
out_h
,Ü.uo->
out_w
);

141  
l
;

142 
	}
}

144 
	$upd©e_l°m_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

146 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wf
), 
a
);

147 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wi
), 
a
);

148 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wg
), 
a
);

149 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
wo
), 
a
);

150 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
uf
), 
a
);

151 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
ui
), 
a
);

152 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
ug
), 
a
);

153 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
uo
), 
a
);

154 
	}
}

156 
	$f‹w¨d_l°m_œyî
(
œyî
 
l
, 
√tw‹k
 
°©e
)

158 
√tw‹k
 
s
 = { 0 };

159 
s
.
åaö
 = 
°©e
.train;

160 
i
;

161 
œyî
 
wf
 = *(
l
.wf);

162 
œyî
 
wi
 = *(
l
.wi);

163 
œyî
 
wg
 = *(
l
.wg);

164 
œyî
 
wo
 = *(
l
.wo);

166 
œyî
 
uf
 = *(
l
.uf);

167 
œyî
 
ui
 = *(
l
.ui);

168 
œyî
 
ug
 = *(
l
.ug);

169 
œyî
 
uo
 = *(
l
.uo);

171 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wf
.
dñè
, 1);

172 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wi
.
dñè
, 1);

173 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wg
.
dñè
, 1);

174 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wo
.
dñè
, 1);

176 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uf
.
dñè
, 1);

177 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ui
.
dñè
, 1);

178 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ug
.
dñè
, 1);

179 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uo
.
dñè
, 1);

180 i‡(
°©e
.
åaö
) {

181 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0,Ü.
dñè
, 1);

184 
i
 = 0; i < 
l
.
°ïs
; ++i) {

185 
s
.
öput
 = 
l
.
h_˝u
;

186 
	`f‹w¨d_c⁄√˘ed_œyî
(
wf
, 
s
);

187 
	`f‹w¨d_c⁄√˘ed_œyî
(
wi
, 
s
);

188 
	`f‹w¨d_c⁄√˘ed_œyî
(
wg
, 
s
);

189 
	`f‹w¨d_c⁄√˘ed_œyî
(
wo
, 
s
);

191 
s
.
öput
 = 
°©e
.input;

192 
	`f‹w¨d_c⁄√˘ed_œyî
(
uf
, 
s
);

193 
	`f‹w¨d_c⁄√˘ed_œyî
(
ui
, 
s
);

194 
	`f‹w¨d_c⁄√˘ed_œyî
(
ug
, 
s
);

195 
	`f‹w¨d_c⁄√˘ed_œyî
(
uo
, 
s
);

197 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wf
.
ouçut
, 1,Ü.
f_˝u
, 1);

198 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
uf
.
ouçut
, 1,Ü.
f_˝u
, 1);

200 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wi
.
ouçut
, 1,Ü.
i_˝u
, 1);

201 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
ui
.
ouçut
, 1,Ü.
i_˝u
, 1);

203 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wg
.
ouçut
, 1,Ü.
g_˝u
, 1);

204 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
ug
.
ouçut
, 1,Ü.
g_˝u
, 1);

206 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wo
.
ouçut
, 1,Ü.
o_˝u
, 1);

207 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
uo
.
ouçut
, 1,Ü.
o_˝u
, 1);

209 
	`a˘iv©e_¨øy
(
l
.
f_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

210 
	`a˘iv©e_¨øy
(
l
.
i_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

211 
	`a˘iv©e_¨øy
(
l
.
g_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

212 
	`a˘iv©e_¨øy
(
l
.
o_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

214 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
i_˝u
, 1,Ü.
ãmp_˝u
, 1);

215 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
g_˝u
, 1,Ü.
ãmp_˝u
, 1);

216 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
f_˝u
, 1,Ü.
c_˝u
, 1);

217 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
ãmp_˝u
, 1,Ü.
c_˝u
, 1);

219 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_˝u
, 1,Ü.
h_˝u
, 1);

220 
	`a˘iv©e_¨øy
(
l
.
h_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

221 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
o_˝u
, 1,Ü.
h_˝u
, 1);

223 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_˝u
, 1,Ü.
˚Œ_˝u
, 1);

224 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
h_˝u
, 1,Ü.
ouçut
, 1);

226 
°©e
.
öput
 +
l
.
öputs
*l.
b©ch
;

227 
l
.
ouçut
 +l.
ouçuts
*l.
b©ch
;

228 
l
.
˚Œ_˝u
 +l.
ouçuts
*l.
b©ch
;

230 
	`ö¸emít_œyî
(&
wf
, 1);

231 
	`ö¸emít_œyî
(&
wi
, 1);

232 
	`ö¸emít_œyî
(&
wg
, 1);

233 
	`ö¸emít_œyî
(&
wo
, 1);

235 
	`ö¸emít_œyî
(&
uf
, 1);

236 
	`ö¸emít_œyî
(&
ui
, 1);

237 
	`ö¸emít_œyî
(&
ug
, 1);

238 
	`ö¸emít_œyî
(&
uo
, 1);

240 
	}
}

242 
	$backw¨d_l°m_œyî
(
œyî
 
l
, 
√tw‹k
 
°©e
)

244 
√tw‹k
 
s
 = { 0 };

245 
s
.
åaö
 = 
°©e
.train;

246 
i
;

247 
œyî
 
wf
 = *(
l
.wf);

248 
œyî
 
wi
 = *(
l
.wi);

249 
œyî
 
wg
 = *(
l
.wg);

250 
œyî
 
wo
 = *(
l
.wo);

252 
œyî
 
uf
 = *(
l
.uf);

253 
œyî
 
ui
 = *(
l
.ui);

254 
œyî
 
ug
 = *(
l
.ug);

255 
œyî
 
uo
 = *(
l
.uo);

257 
	`ö¸emít_œyî
(&
wf
, 
l
.
°ïs
 - 1);

258 
	`ö¸emít_œyî
(&
wi
, 
l
.
°ïs
 - 1);

259 
	`ö¸emít_œyî
(&
wg
, 
l
.
°ïs
 - 1);

260 
	`ö¸emít_œyî
(&
wo
, 
l
.
°ïs
 - 1);

262 
	`ö¸emít_œyî
(&
uf
, 
l
.
°ïs
 - 1);

263 
	`ö¸emít_œyî
(&
ui
, 
l
.
°ïs
 - 1);

264 
	`ö¸emít_œyî
(&
ug
, 
l
.
°ïs
 - 1);

265 
	`ö¸emít_œyî
(&
uo
, 
l
.
°ïs
 - 1);

267 
°©e
.
öput
 +
l
.
öputs
*l.
b©ch
*÷.
°ïs
 - 1);

268 i‡(
°©e
.
dñè
Ë°©e.dñè +
l
.
öputs
*l.
b©ch
*÷.
°ïs
 - 1);

270 
l
.
ouçut
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

271 
l
.
˚Œ_˝u
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

272 
l
.
dñè
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

274 
i
 = 
l
.
°ïs
 - 1; i >= 0; --i) {

275 i‡(
i
 !0Ë
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
˚Œ_˝u
 -Ü.ouçuts*l.b©ch, 1,Ü.
¥ev_˚Œ_˝u
, 1);

276 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
˚Œ_˝u
, 1,Ü.
c_˝u
, 1);

277 i‡(
i
 !0Ë
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut
 -Ü.ouçuts*l.b©ch, 1,Ü.
¥ev_°©e_˝u
, 1);

278 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut
, 1,Ü.
h_˝u
, 1);

280 
l
.
dh_˝u
 = (
i
 =0Ë? 0 :Ü.
dñè
 -Ü.
ouçuts
*l.
b©ch
;

282 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wf
.
ouçut
, 1,Ü.
f_˝u
, 1);

283 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
uf
.
ouçut
, 1,Ü.
f_˝u
, 1);

285 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wi
.
ouçut
, 1,Ü.
i_˝u
, 1);

286 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
ui
.
ouçut
, 1,Ü.
i_˝u
, 1);

288 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wg
.
ouçut
, 1,Ü.
g_˝u
, 1);

289 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
ug
.
ouçut
, 1,Ü.
g_˝u
, 1);

291 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
wo
.
ouçut
, 1,Ü.
o_˝u
, 1);

292 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1, 
uo
.
ouçut
, 1,Ü.
o_˝u
, 1);

294 
	`a˘iv©e_¨øy
(
l
.
f_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

295 
	`a˘iv©e_¨øy
(
l
.
i_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

296 
	`a˘iv©e_¨øy
(
l
.
g_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

297 
	`a˘iv©e_¨øy
(
l
.
o_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

299 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
dñè
, 1,Ü.
ãmp3_˝u
, 1);

301 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_˝u
, 1,Ü.
ãmp_˝u
, 1);

302 
	`a˘iv©e_¨øy
(
l
.
ãmp_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

304 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp3_˝u
, 1,Ü.
ãmp2_˝u
, 1);

305 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
o_˝u
, 1,Ü.
ãmp2_˝u
, 1);

307 
	`gødõ¡_¨øy
(
l
.
ãmp_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
,Ü.
ãmp2_˝u
);

308 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
dc_˝u
, 1,Ü.
ãmp2_˝u
, 1);

310 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_˝u
, 1,Ü.
ãmp_˝u
, 1);

311 
	`a˘iv©e_¨øy
(
l
.
ãmp_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

312 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp3_˝u
, 1,Ü.
ãmp_˝u
, 1);

313 
	`gødõ¡_¨øy
(
l
.
o_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_˝u
);

314 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
wo
.
dñè
, 1);

315 
s
.
öput
 = 
l
.
¥ev_°©e_˝u
;

316 
s
.
dñè
 = 
l
.
dh_˝u
;

317 
	`backw¨d_c⁄√˘ed_œyî
(
wo
, 
s
);

319 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
uo
.
dñè
, 1);

320 
s
.
öput
 = 
°©e
.input;

321 
s
.
dñè
 = 
°©e
.delta;

322 
	`backw¨d_c⁄√˘ed_œyî
(
uo
, 
s
);

324 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_˝u
, 1,Ü.
ãmp_˝u
, 1);

325 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
i_˝u
, 1,Ü.
ãmp_˝u
, 1);

326 
	`gødõ¡_¨øy
(
l
.
g_˝u
,Ü.
ouçuts
*l.
b©ch
, 
TANH
,Ü.
ãmp_˝u
);

327 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
wg
.
dñè
, 1);

328 
s
.
öput
 = 
l
.
¥ev_°©e_˝u
;

329 
s
.
dñè
 = 
l
.
dh_˝u
;

330 
	`backw¨d_c⁄√˘ed_œyî
(
wg
, 
s
);

332 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
ug
.
dñè
, 1);

333 
s
.
öput
 = 
°©e
.input;

334 
s
.
dñè
 = 
°©e
.delta;

335 
	`backw¨d_c⁄√˘ed_œyî
(
ug
, 
s
);

337 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_˝u
, 1,Ü.
ãmp_˝u
, 1);

338 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
g_˝u
, 1,Ü.
ãmp_˝u
, 1);

339 
	`gødõ¡_¨øy
(
l
.
i_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_˝u
);

340 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
wi
.
dñè
, 1);

341 
s
.
öput
 = 
l
.
¥ev_°©e_˝u
;

342 
s
.
dñè
 = 
l
.
dh_˝u
;

343 
	`backw¨d_c⁄√˘ed_œyî
(
wi
, 
s
);

345 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
ui
.
dñè
, 1);

346 
s
.
öput
 = 
°©e
.input;

347 
s
.
dñè
 = 
°©e
.delta;

348 
	`backw¨d_c⁄√˘ed_œyî
(
ui
, 
s
);

350 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_˝u
, 1,Ü.
ãmp_˝u
, 1);

351 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
¥ev_˚Œ_˝u
, 1,Ü.
ãmp_˝u
, 1);

352 
	`gødõ¡_¨øy
(
l
.
f_˝u
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_˝u
);

353 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
wf
.
dñè
, 1);

354 
s
.
öput
 = 
l
.
¥ev_°©e_˝u
;

355 
s
.
dñè
 = 
l
.
dh_˝u
;

356 
	`backw¨d_c⁄√˘ed_œyî
(
wf
, 
s
);

358 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1, 
uf
.
dñè
, 1);

359 
s
.
öput
 = 
°©e
.input;

360 
s
.
dñè
 = 
°©e
.delta;

361 
	`backw¨d_c⁄√˘ed_œyî
(
uf
, 
s
);

363 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_˝u
, 1,Ü.
ãmp_˝u
, 1);

364 
	`mul_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
f_˝u
, 1,Ü.
ãmp_˝u
, 1);

365 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_˝u
, 1,Ü.
dc_˝u
, 1);

367 
°©e
.
öput
 -
l
.
öputs
*l.
b©ch
;

368 i‡(
°©e
.
dñè
Ë°©e.dñè -
l
.
öputs
*l.
b©ch
;

369 
l
.
ouçut
 -l.
ouçuts
*l.
b©ch
;

370 
l
.
˚Œ_˝u
 -l.
ouçuts
*l.
b©ch
;

371 
l
.
dñè
 -l.
ouçuts
*l.
b©ch
;

373 
	`ö¸emít_œyî
(&
wf
, -1);

374 
	`ö¸emít_œyî
(&
wi
, -1);

375 
	`ö¸emít_œyî
(&
wg
, -1);

376 
	`ö¸emít_œyî
(&
wo
, -1);

378 
	`ö¸emít_œyî
(&
uf
, -1);

379 
	`ö¸emít_œyî
(&
ui
, -1);

380 
	`ö¸emít_œyî
(&
ug
, -1);

381 
	`ö¸emít_œyî
(&
uo
, -1);

383 
	}
}

385 #ifde‡
GPU


386 
	$upd©e_l°m_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

388 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wf
), 
a
);

389 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wi
), 
a
);

390 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wg
), 
a
);

391 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
wo
), 
a
);

392 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
uf
), 
a
);

393 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
ui
), 
a
);

394 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
ug
), 
a
);

395 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
uo
), 
a
);

396 
	}
}

398 
	$f‹w¨d_l°m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
°©e
)

400 
√tw‹k
 
s
 = { 0 };

401 
s
.
åaö
 = 
°©e
.train;

402 
i
;

403 
œyî
 
wf
 = *(
l
.wf);

404 
œyî
 
wi
 = *(
l
.wi);

405 
œyî
 
wg
 = *(
l
.wg);

406 
œyî
 
wo
 = *(
l
.wo);

408 
œyî
 
uf
 = *(
l
.uf);

409 
œyî
 
ui
 = *(
l
.ui);

410 
œyî
 
ug
 = *(
l
.ug);

411 
œyî
 
uo
 = *(
l
.uo);

413 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wf
.
dñè_gpu
, 1);

414 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wi
.
dñè_gpu
, 1);

415 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wg
.
dñè_gpu
, 1);

416 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
wo
.
dñè_gpu
, 1);

418 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uf
.
dñè_gpu
, 1);

419 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ui
.
dñè_gpu
, 1);

420 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ug
.
dñè_gpu
, 1);

421 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
uo
.
dñè_gpu
, 1);

422 i‡(
°©e
.
åaö
) {

423 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0,Ü.
dñè_gpu
, 1);

426 
i
 = 0; i < 
l
.
°ïs
; ++i) {

427 
s
.
öput_gpu
 = 
l
.
h_gpu
;

428 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wf
, 
s
);

429 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wi
, 
s
);

430 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wg
, 
s
);

431 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
wo
, 
s
);

433 
s
.
öput_gpu
 = 
°©e
.input_gpu;

434 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
uf
, 
s
);

435 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
ui
, 
s
);

436 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
ug
, 
s
);

437 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
uo
, 
s
);

439 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wf
.
ouçut_gpu
, 1,Ü.
f_gpu
, 1);

440 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
uf
.
ouçut_gpu
, 1,Ü.
f_gpu
, 1);

442 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wi
.
ouçut_gpu
, 1,Ü.
i_gpu
, 1);

443 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
ui
.
ouçut_gpu
, 1,Ü.
i_gpu
, 1);

445 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wg
.
ouçut_gpu
, 1,Ü.
g_gpu
, 1);

446 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
ug
.
ouçut_gpu
, 1,Ü.
g_gpu
, 1);

448 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wo
.
ouçut_gpu
, 1,Ü.
o_gpu
, 1);

449 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
uo
.
ouçut_gpu
, 1,Ü.
o_gpu
, 1);

451 
	`a˘iv©e_¨øy_gpu
(
l
.
f_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

452 
	`a˘iv©e_¨øy_gpu
(
l
.
i_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

453 
	`a˘iv©e_¨øy_gpu
(
l
.
g_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

454 
	`a˘iv©e_¨øy_gpu
(
l
.
o_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

456 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
i_gpu
, 1,Ü.
ãmp_gpu
, 1);

457 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
g_gpu
, 1,Ü.
ãmp_gpu
, 1);

458 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
f_gpu
, 1,Ü.
c_gpu
, 1);

459 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
ãmp_gpu
, 1,Ü.
c_gpu
, 1);

461 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_gpu
, 1,Ü.
h_gpu
, 1);

462 
	`a˘iv©e_¨øy_gpu
(
l
.
h_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

463 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
o_gpu
, 1,Ü.
h_gpu
, 1);

465 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_gpu
, 1,Ü.
˚Œ_gpu
, 1);

466 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
h_gpu
, 1,Ü.
ouçut_gpu
, 1);

468 
°©e
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
;

469 
l
.
ouçut_gpu
 +l.
ouçuts
*l.
b©ch
;

470 
l
.
˚Œ_gpu
 +l.
ouçuts
*l.
b©ch
;

472 
	`ö¸emít_œyî
(&
wf
, 1);

473 
	`ö¸emít_œyî
(&
wi
, 1);

474 
	`ö¸emít_œyî
(&
wg
, 1);

475 
	`ö¸emít_œyî
(&
wo
, 1);

477 
	`ö¸emít_œyî
(&
uf
, 1);

478 
	`ö¸emít_œyî
(&
ui
, 1);

479 
	`ö¸emít_œyî
(&
ug
, 1);

480 
	`ö¸emít_œyî
(&
uo
, 1);

482 
	}
}

484 
	$backw¨d_l°m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
°©e
)

486 
√tw‹k
 
s
 = { 0 };

487 
s
.
åaö
 = 
°©e
.train;

488 
i
;

489 
œyî
 
wf
 = *(
l
.wf);

490 
œyî
 
wi
 = *(
l
.wi);

491 
œyî
 
wg
 = *(
l
.wg);

492 
œyî
 
wo
 = *(
l
.wo);

494 
œyî
 
uf
 = *(
l
.uf);

495 
œyî
 
ui
 = *(
l
.ui);

496 
œyî
 
ug
 = *(
l
.ug);

497 
œyî
 
uo
 = *(
l
.uo);

499 
	`ö¸emít_œyî
(&
wf
, 
l
.
°ïs
 - 1);

500 
	`ö¸emít_œyî
(&
wi
, 
l
.
°ïs
 - 1);

501 
	`ö¸emít_œyî
(&
wg
, 
l
.
°ïs
 - 1);

502 
	`ö¸emít_œyî
(&
wo
, 
l
.
°ïs
 - 1);

504 
	`ö¸emít_œyî
(&
uf
, 
l
.
°ïs
 - 1);

505 
	`ö¸emít_œyî
(&
ui
, 
l
.
°ïs
 - 1);

506 
	`ö¸emít_œyî
(&
ug
, 
l
.
°ïs
 - 1);

507 
	`ö¸emít_œyî
(&
uo
, 
l
.
°ïs
 - 1);

509 
°©e
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
*÷.
°ïs
 - 1);

510 i‡(
°©e
.
dñè_gpu
Ë°©e.dñè_gpu +
l
.
öputs
*l.
b©ch
*÷.
°ïs
 - 1);

512 
l
.
ouçut_gpu
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

513 
l
.
˚Œ_gpu
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

514 
l
.
dñè_gpu
 +l.
ouçuts
*l.
b©ch
*÷.
°ïs
 - 1);

516 
i
 = 
l
.
°ïs
 - 1; i >= 0; --i) {

517 i‡(
i
 !0Ë
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
˚Œ_gpu
 -Ü.ouçuts*l.b©ch, 1,Ü.
¥ev_˚Œ_gpu
, 1);

518 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
˚Œ_gpu
, 1,Ü.
c_gpu
, 1);

519 i‡(
i
 !0Ë
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
 -Ü.ouçuts*l.b©ch, 1,Ü.
¥ev_°©e_gpu
, 1);

520 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ouçut_gpu
, 1,Ü.
h_gpu
, 1);

522 
l
.
dh_gpu
 = (
i
 =0Ë? 0 :Ü.
dñè_gpu
 -Ü.
ouçuts
*l.
b©ch
;

524 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wf
.
ouçut_gpu
, 1,Ü.
f_gpu
, 1);

525 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
uf
.
ouçut_gpu
, 1,Ü.
f_gpu
, 1);

527 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wi
.
ouçut_gpu
, 1,Ü.
i_gpu
, 1);

528 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
ui
.
ouçut_gpu
, 1,Ü.
i_gpu
, 1);

530 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wg
.
ouçut_gpu
, 1,Ü.
g_gpu
, 1);

531 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
ug
.
ouçut_gpu
, 1,Ü.
g_gpu
, 1);

533 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
wo
.
ouçut_gpu
, 1,Ü.
o_gpu
, 1);

534 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1, 
uo
.
ouçut_gpu
, 1,Ü.
o_gpu
, 1);

536 
	`a˘iv©e_¨øy_gpu
(
l
.
f_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

537 
	`a˘iv©e_¨øy_gpu
(
l
.
i_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

538 
	`a˘iv©e_¨øy_gpu
(
l
.
g_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

539 
	`a˘iv©e_¨øy_gpu
(
l
.
o_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
);

541 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
dñè_gpu
, 1,Ü.
ãmp3_gpu
, 1);

543 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_gpu
, 1,Ü.
ãmp_gpu
, 1);

544 
	`a˘iv©e_¨øy_gpu
(
l
.
ãmp_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

546 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp3_gpu
, 1,Ü.
ãmp2_gpu
, 1);

547 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
o_gpu
, 1,Ü.
ãmp2_gpu
, 1);

549 
	`gødõ¡_¨øy_gpu
(
l
.
ãmp_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
,Ü.
ãmp2_gpu
);

550 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
dc_gpu
, 1,Ü.
ãmp2_gpu
, 1);

552 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
c_gpu
, 1,Ü.
ãmp_gpu
, 1);

553 
	`a˘iv©e_¨øy_gpu
(
l
.
ãmp_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
);

554 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp3_gpu
, 1,Ü.
ãmp_gpu
, 1);

555 
	`gødõ¡_¨øy_gpu
(
l
.
o_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_gpu
);

556 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
wo
.
dñè_gpu
, 1);

557 
s
.
öput_gpu
 = 
l
.
¥ev_°©e_gpu
;

558 
s
.
dñè_gpu
 = 
l
.
dh_gpu
;

559 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wo
, 
s
);

561 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
uo
.
dñè_gpu
, 1);

562 
s
.
öput_gpu
 = 
°©e
.input_gpu;

563 
s
.
dñè_gpu
 = 
°©e
.delta_gpu;

564 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
uo
, 
s
);

566 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_gpu
, 1,Ü.
ãmp_gpu
, 1);

567 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
i_gpu
, 1,Ü.
ãmp_gpu
, 1);

568 
	`gødõ¡_¨øy_gpu
(
l
.
g_gpu
,Ü.
ouçuts
*l.
b©ch
, 
TANH
,Ü.
ãmp_gpu
);

569 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
wg
.
dñè_gpu
, 1);

570 
s
.
öput_gpu
 = 
l
.
¥ev_°©e_gpu
;

571 
s
.
dñè_gpu
 = 
l
.
dh_gpu
;

572 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wg
, 
s
);

574 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
ug
.
dñè_gpu
, 1);

575 
s
.
öput_gpu
 = 
°©e
.input_gpu;

576 
s
.
dñè_gpu
 = 
°©e
.delta_gpu;

577 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
ug
, 
s
);

579 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_gpu
, 1,Ü.
ãmp_gpu
, 1);

580 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
g_gpu
, 1,Ü.
ãmp_gpu
, 1);

581 
	`gødõ¡_¨øy_gpu
(
l
.
i_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_gpu
);

582 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
wi
.
dñè_gpu
, 1);

583 
s
.
öput_gpu
 = 
l
.
¥ev_°©e_gpu
;

584 
s
.
dñè_gpu
 = 
l
.
dh_gpu
;

585 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wi
, 
s
);

587 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
ui
.
dñè_gpu
, 1);

588 
s
.
öput_gpu
 = 
°©e
.input_gpu;

589 
s
.
dñè_gpu
 = 
°©e
.delta_gpu;

590 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
ui
, 
s
);

592 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_gpu
, 1,Ü.
ãmp_gpu
, 1);

593 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
¥ev_˚Œ_gpu
, 1,Ü.
ãmp_gpu
, 1);

594 
	`gødõ¡_¨øy_gpu
(
l
.
f_gpu
,Ü.
ouçuts
*l.
b©ch
, 
LOGISTIC
,Ü.
ãmp_gpu
);

595 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
wf
.
dñè_gpu
, 1);

596 
s
.
öput_gpu
 = 
l
.
¥ev_°©e_gpu
;

597 
s
.
dñè_gpu
 = 
l
.
dh_gpu
;

598 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
wf
, 
s
);

600 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1, 
uf
.
dñè_gpu
, 1);

601 
s
.
öput_gpu
 = 
°©e
.input_gpu;

602 
s
.
dñè_gpu
 = 
°©e
.delta_gpu;

603 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
uf
, 
s
);

605 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp2_gpu
, 1,Ü.
ãmp_gpu
, 1);

606 
	`mul_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
f_gpu
, 1,Ü.
ãmp_gpu
, 1);

607 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
ãmp_gpu
, 1,Ü.
dc_gpu
, 1);

609 
°©e
.
öput_gpu
 -
l
.
öputs
*l.
b©ch
;

610 i‡(
°©e
.
dñè_gpu
Ë°©e.dñè_gpu -
l
.
öputs
*l.
b©ch
;

611 
l
.
ouçut_gpu
 -l.
ouçuts
*l.
b©ch
;

612 
l
.
˚Œ_gpu
 -l.
ouçuts
*l.
b©ch
;

613 
l
.
dñè_gpu
 -l.
ouçuts
*l.
b©ch
;

615 
	`ö¸emít_œyî
(&
wf
, -1);

616 
	`ö¸emít_œyî
(&
wi
, -1);

617 
	`ö¸emít_œyî
(&
wg
, -1);

618 
	`ö¸emít_œyî
(&
wo
, -1);

620 
	`ö¸emít_œyî
(&
uf
, -1);

621 
	`ö¸emít_œyî
(&
ui
, -1);

622 
	`ö¸emít_œyî
(&
ug
, -1);

623 
	`ö¸emít_œyî
(&
uo
, -1);

625 
	}
}

	@src/lstm_layer.h

1 #i‚de‡
LSTM_LAYER_H


2 
	#LSTM_LAYER_H


	)

4 
	~"a˘iv©i⁄s.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

7 
	#USET


	)

9 
œyî
 
make_l°m_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
b©ch_n‹mÆize
, 
adam
);

11 
f‹w¨d_l°m_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

12 
upd©e_l°m_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

14 #ifde‡
GPU


15 
f‹w¨d_l°m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

16 
backw¨d_l°m_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

17 
upd©e_l°m_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

	@src/matrix.c

1 
	~"m©rix.h
"

2 
	~"utûs.h
"

3 
	~"bœs.h
"

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<m©h.h
>

10 
	$‰ì_m©rix
(
m©rix
 
m
)

12 
i
;

13 
i
 = 0; i < 
m
.
rows
; ++iË
	`‰ì
(m.
vÆs
[i]);

14 
	`‰ì
(
m
.
vÆs
);

15 
	}
}

17 
	$m©rix_t›k_accuøcy
(
m©rix
 
åuth
, m©rix 
guess
, 
k
)

19 *
ödexes
 = 
	`ˇŒoc
(
k
, ());

20 
n
 = 
åuth
.
cﬁs
;

21 
i
,
j
;

22 
c‹ª˘
 = 0;

23 
i
 = 0; i < 
åuth
.
rows
; ++i){

24 
	`t›_k
(
guess
.
vÆs
[
i
], 
n
, 
k
, 
ödexes
);

25 
j
 = 0; j < 
k
; ++j){

26 
˛ass
 = 
ödexes
[
j
];

27 if(
åuth
.
vÆs
[
i
][
˛ass
]){

28 ++
c‹ª˘
;

33 
	`‰ì
(
ödexes
);

34  ()
c‹ª˘
/
åuth
.
rows
;

35 
	}
}

37 
	$sˇÀ_m©rix
(
m©rix
 
m
, 
sˇÀ
)

39 
i
,
j
;

40 
i
 = 0; i < 
m
.
rows
; ++i){

41 
j
 = 0; j < 
m
.
cﬁs
; ++j){

42 
m
.
vÆs
[
i
][
j
] *
sˇÀ
;

45 
	}
}

47 
m©rix
 
	$ªsize_m©rix
(
m©rix
 
m
, 
size
)

49 
i
;

50 i‡(
m
.
rows
 =
size
)  m;

51 i‡(
m
.
rows
 < 
size
) {

52 
m
.
vÆs
 = 
	`ªÆloc
(m.vÆs, 
size
*(*));

53 
i
 = 
m
.
rows
; i < 
size
; ++i) {

54 
m
.
vÆs
[
i
] = 
	`ˇŒoc
(m.
cﬁs
, ());

56 } i‡(
m
.
rows
 > 
size
) {

57 
i
 = 
size
; i < 
m
.
rows
; ++i) {

58 
	`‰ì
(
m
.
vÆs
[
i
]);

60 
m
.
vÆs
 = 
	`ªÆloc
(m.vÆs, 
size
*(*));

62 
m
.
rows
 = 
size
;

63  
m
;

64 
	}
}

66 
	$m©rix_add_m©rix
(
m©rix
 
‰om
, m©rix 
to
)

68 
	`as£π
(
‰om
.
rows
 =
to
.row†&& from.
cﬁs
 ==Åo.cols);

69 
i
,
j
;

70 
i
 = 0; i < 
‰om
.
rows
; ++i){

71 
j
 = 0; j < 
‰om
.
cﬁs
; ++j){

72 
to
.
vÆs
[
i
][
j
] +
‰om
.vals[i][j];

75 
	}
}

77 
m©rix
 
	$c›y_m©rix
(
m©rix
 
m
)

79 
m©rix
 
c
 = {0};

80 
c
.
rows
 = 
m
.rows;

81 
c
.
cﬁs
 = 
m
.cols;

82 
c
.
vÆs
 = 
	`ˇŒoc
(c.
rows
, (*));

83 
i
;

84 
i
 = 0; i < 
c
.
rows
; ++i){

85 
c
.
vÆs
[
i
] = 
	`ˇŒoc
(c.
cﬁs
, ());

86 
	`c›y_˝u
(
c
.
cﬁs
, 
m
.
vÆs
[
i
], 1, c.vals[i], 1);

88  
c
;

89 
	}
}

91 
m©rix
 
	$make_m©rix
(
rows
, 
cﬁs
)

93 
i
;

94 
m©rix
 
m
;

95 
m
.
rows
 =Ñows;

96 
m
.
cﬁs
 = cols;

97 
m
.
vÆs
 = 
	`ˇŒoc
(m.
rows
, (*));

98 
i
 = 0; i < 
m
.
rows
; ++i){

99 
m
.
vÆs
[
i
] = 
	`ˇŒoc
(m.
cﬁs
, ());

101  
m
;

102 
	}
}

104 
m©rix
 
	$hﬁd_out_m©rix
(
m©rix
 *
m
, 
n
)

106 
i
;

107 
m©rix
 
h
;

108 
h
.
rows
 = 
n
;

109 
h
.
cﬁs
 = 
m
->cols;

110 
h
.
vÆs
 = 
	`ˇŒoc
(h.
rows
, (*));

111 
i
 = 0; i < 
n
; ++i){

112 
ödex
 = 
	`ønd
()%
m
->
rows
;

113 
h
.
vÆs
[
i
] = 
m
->vÆs[
ödex
];

114 
m
->
vÆs
[
ödex
] = m->vÆs[--(m->
rows
)];

116  
h
;

117 
	}
}

119 *
	$p›_cﬁumn
(
m©rix
 *
m
, 
c
)

121 *
cﬁ
 = 
	`ˇŒoc
(
m
->
rows
, ());

122 
i
, 
j
;

123 
i
 = 0; i < 
m
->
rows
; ++i){

124 
cﬁ
[
i
] = 
m
->
vÆs
[i][
c
];

125 
j
 = 
c
; j < 
m
->
cﬁs
-1; ++j){

126 
m
->
vÆs
[
i
][
j
] = m->vals[i][j+1];

129 --
m
->
cﬁs
;

130  
cﬁ
;

131 
	}
}

133 
m©rix
 
	$csv_to_m©rix
(*
fûíame
)

135 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

136 if(!
Â
Ë
	`fûe_îr‹
(
fûíame
);

138 
m©rix
 
m
;

139 
m
.
cﬁs
 = -1;

141 *
löe
;

143 
n
 = 0;

144 
size
 = 1024;

145 
m
.
vÆs
 = 
	`ˇŒoc
(
size
, (*));

146 (
löe
 = 
	`fgël
(
Â
))){

147 if(
m
.
cﬁs
 =-1Ëm.cﬁ†
	`cou¡_fõlds
(
löe
);

148 if(
n
 =
size
){

149 
size
 *= 2;

150 
m
.
vÆs
 = 
	`ªÆloc
(m.vÆs, 
size
*(*));

152 
m
.
vÆs
[
n
] = 
	`∑r£_fõlds
(
löe
, m.
cﬁs
);

153 
	`‰ì
(
löe
);

154 ++
n
;

156 
m
.
vÆs
 = 
	`ªÆloc
(m.vÆs, 
n
*(*));

157 
m
.
rows
 = 
n
;

158  
m
;

159 
	}
}

161 
	$m©rix_to_csv
(
m©rix
 
m
)

163 
i
, 
j
;

165 
i
 = 0; i < 
m
.
rows
; ++i){

166 
j
 = 0; j < 
m
.
cﬁs
; ++j){

167 if(
j
 > 0Ë
	`¥ötf
(",");

168 
	`¥ötf
("%.17g", 
m
.
vÆs
[
i
][
j
]);

170 
	`¥ötf
("\n");

172 
	}
}

174 
	$¥öt_m©rix
(
m©rix
 
m
)

176 
i
, 
j
;

177 
	`¥ötf
("%d X %d M©rix:\n",
m
.
rows
, m.
cﬁs
);

178 
	`¥ötf
(" __");

179 
j
 = 0; j < 16*
m
.
cﬁs
-1; ++jË
	`¥ötf
(" ");

180 
	`¥ötf
("__ \n");

182 
	`¥ötf
("| ");

183 
j
 = 0; j < 16*
m
.
cﬁs
-1; ++jË
	`¥ötf
(" ");

184 
	`¥ötf
(" |\n");

186 
i
 = 0; i < 
m
.
rows
; ++i){

187 
	`¥ötf
("| ");

188 
j
 = 0; j < 
m
.
cﬁs
; ++j){

189 
	`¥ötf
("%15.7‡", 
m
.
vÆs
[
i
][
j
]);

191 
	`¥ötf
(" |\n");

193 
	`¥ötf
("|__");

194 
j
 = 0; j < 16*
m
.
cﬁs
-1; ++jË
	`¥ötf
(" ");

195 
	`¥ötf
("__|\n");

196 
	}
}

	@src/matrix.h

1 #i‚de‡
MATRIX_H


2 
	#MATRIX_H


	)

3 
	~"d¨k√t.h
"

5 
m©rix
 
c›y_m©rix
(m©rix 
m
);

6 
¥öt_m©rix
(
m©rix
 
m
);

8 
m©rix
 
hﬁd_out_m©rix
(m©rix *
m
, 
n
);

9 
m©rix
 
ªsize_m©rix
(m©rix 
m
, 
size
);

11 *
p›_cﬁumn
(
m©rix
 *
m
, 
c
);

	@src/maxpool_layer.c

1 
	~"maxpoﬁ_œyî.h
"

2 
	~"cuda.h
"

3 
	~<°dio.h
>

5 
image
 
	$gë_maxpoﬁ_image
(
maxpoﬁ_œyî
 
l
)

7 
h
 = 
l
.
out_h
;

8 
w
 = 
l
.
out_w
;

9 
c
 = 
l
.c;

10  
	`Êﬂt_to_image
(
w
,
h
,
c
,
l
.
ouçut
);

11 
	}
}

13 
image
 
	$gë_maxpoﬁ_dñè
(
maxpoﬁ_œyî
 
l
)

15 
h
 = 
l
.
out_h
;

16 
w
 = 
l
.
out_w
;

17 
c
 = 
l
.c;

18  
	`Êﬂt_to_image
(
w
,
h
,
c
,
l
.
dñè
);

19 
	}
}

21 
maxpoﬁ_œyî
 
	$make_maxpoﬁ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
size
, 
°ride
, 
∑ddög
)

23 
maxpoﬁ_œyî
 
l
 = {0};

24 
l
.
ty≥
 = 
MAXPOOL
;

25 
l
.
b©ch
 = batch;

26 
l
.
h
 = h;

27 
l
.
w
 = w;

28 
l
.
c
 = c;

29 
l
.
∑d
 = 
∑ddög
;

30 
l
.
out_w
 = (
w
 + 2*
∑ddög
)/
°ride
;

31 
l
.
out_h
 = (
h
 + 2*
∑ddög
)/
°ride
;

32 
l
.
out_c
 = 
c
;

33 
l
.
ouçuts
 =Ü.
out_h
 *Ü.
out_w
 *Ü.
out_c
;

34 
l
.
öputs
 = 
h
*
w
*
c
;

35 
l
.
size
 = size;

36 
l
.
°ride
 = stride;

37 
ouçut_size
 = 
l
.
out_h
 *Ü.
out_w
 *Ü.
out_c
 * 
b©ch
;

38 
l
.
ödexes
 = 
	`ˇŒoc
(
ouçut_size
, ());

39 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçut_size
, ());

40 
l
.
dñè
 = 
	`ˇŒoc
(
ouçut_size
, ());

41 
l
.
f‹w¨d
 = 
f‹w¨d_maxpoﬁ_œyî
;

42 
l
.
backw¨d
 = 
backw¨d_maxpoﬁ_œyî
;

43 #ifde‡
GPU


44 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_maxpoﬁ_œyî_gpu
;

45 
l
.
backw¨d_gpu
 = 
backw¨d_maxpoﬁ_œyî_gpu
;

46 
l
.
ödexes_gpu
 = 
	`cuda_make_öt_¨øy
(0, 
ouçut_size
);

47 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
ouçut_size
);

48 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
ouçut_size
);

50 
	`Ârötf
(
°dîr
, "max %d x %d / %d %4d x%4d x%4d -> %4d x%4d x%4d\n", 
size
, size, 
°ride
, 
w
, 
h
, 
c
, 
l
.
out_w
,Ü.
out_h
,Ü.
out_c
);

51  
l
;

52 
	}
}

54 
	$ªsize_maxpoﬁ_œyî
(
maxpoﬁ_œyî
 *
l
, 
w
, 
h
)

56 
l
->
h
 = h;

57 
l
->
w
 = w;

58 
l
->
öputs
 = 
h
*
w
*l->
c
;

60 
l
->
out_w
 = (
w
 + 2*l->
∑d
)/l->
°ride
;

61 
l
->
out_h
 = (
h
 + 2*l->
∑d
)/l->
°ride
;

62 
l
->
ouçuts
 =Ü->
out_w
 *Ü->
out_h
 *Ü->
c
;

63 
ouçut_size
 = 
l
->
ouçuts
 *Ü->
b©ch
;

65 
l
->
ödexes
 = 
	`ªÆloc
÷->ödexes, 
ouçut_size
 * ());

66 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut, 
ouçut_size
 * ());

67 
l
->
dñè
 = 
	`ªÆloc
÷->dñè, 
ouçut_size
 * ());

69 #ifde‡
GPU


70 
	`cuda_‰ì
((*)
l
->
ödexes_gpu
);

71 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

72 
	`cuda_‰ì
(
l
->
dñè_gpu
);

73 
l
->
ödexes_gpu
 = 
	`cuda_make_öt_¨øy
(0, 
ouçut_size
);

74 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
, 
ouçut_size
);

75 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
, 
ouçut_size
);

77 
	}
}

79 
	$f‹w¨d_maxpoﬁ_œyî
(c⁄° 
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
)

81 
b
,
i
,
j
,
k
,
m
,
n
;

82 
w_off£t
 = -
l
.
∑d
;

83 
h_off£t
 = -
l
.
∑d
;

85 
h
 = 
l
.
out_h
;

86 
w
 = 
l
.
out_w
;

87 
c
 = 
l
.c;

89 
b
 = 0; b < 
l
.
b©ch
; ++b){

90 
k
 = 0; k < 
c
; ++k){

91 
i
 = 0; i < 
h
; ++i){

92 
j
 = 0; j < 
w
; ++j){

93 
out_ödex
 = 
j
 + 
w
*(
i
 + 
h
*(
k
 + 
c
*
b
));

94 
max
 = -
FLT_MAX
;

95 
max_i
 = -1;

96 
n
 = 0;Ç < 
l
.
size
; ++n){

97 
m
 = 0; m < 
l
.
size
; ++m){

98 
cur_h
 = 
h_off£t
 + 
i
*
l
.
°ride
 + 
n
;

99 
cur_w
 = 
w_off£t
 + 
j
*
l
.
°ride
 + 
m
;

100 
ödex
 = 
cur_w
 + 
l
.
w
*(
cur_h
 +Ü.
h
*(
k
 + 
b
*l.
c
));

101 
vÆid
 = (
cur_h
 >0 && cur_h < 
l
.
h
 &&

102 
cur_w
 >0 && cur_w < 
l
.
w
);

103 
vÆ
 = (
vÆid
 !0Ë? 
√t
.
öput
[
ödex
] : -
FLT_MAX
;

104 
max_i
 = (
vÆ
 > 
max
Ë? 
ödex
 : max_i;

105 
max
 = (
vÆ
 > max) ? val : max;

108 
l
.
ouçut
[
out_ödex
] = 
max
;

109 
l
.
ödexes
[
out_ödex
] = 
max_i
;

114 
	}
}

116 
	$backw¨d_maxpoﬁ_œyî
(c⁄° 
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
)

118 
i
;

119 
h
 = 
l
.
out_h
;

120 
w
 = 
l
.
out_w
;

121 
c
 = 
l
.c;

122 
i
 = 0; i < 
h
*
w
*
c
*
l
.
b©ch
; ++i){

123 
ödex
 = 
l
.
ödexes
[
i
];

124 
√t
.
dñè
[
ödex
] +
l
.dñè[
i
];

126 
	}
}

	@src/maxpool_layer.h

1 #i‚de‡
MAXPOOL_LAYER_H


2 
	#MAXPOOL_LAYER_H


	)

4 
	~"image.h
"

5 
	~"cuda.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

9 
œyî
 
	tmaxpoﬁ_œyî
;

11 
image
 
gë_maxpoﬁ_image
(
maxpoﬁ_œyî
 
l
);

12 
maxpoﬁ_œyî
 
make_maxpoﬁ_œyî
(
b©ch
, 
h
, 
w
, 
c
, 
size
, 
°ride
, 
∑ddög
);

13 
ªsize_maxpoﬁ_œyî
(
maxpoﬁ_œyî
 *
l
, 
w
, 
h
);

14 
f‹w¨d_maxpoﬁ_œyî
(c⁄° 
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_maxpoﬁ_œyî
(c⁄° 
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

17 #ifde‡
GPU


18 
f‹w¨d_maxpoﬁ_œyî_gpu
(
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

19 
backw¨d_maxpoﬁ_œyî_gpu
(
maxpoﬁ_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/network.c

1 
	~<°dio.h
>

2 
	~<time.h
>

3 
	~<as£π.h
>

4 
	~"√tw‹k.h
"

5 
	~"image.h
"

6 
	~"d©a.h
"

7 
	~"utûs.h
"

8 
	~"bœs.h
"

10 
	~"¸›_œyî.h
"

11 
	~"c⁄√˘ed_œyî.h
"

12 
	~"gru_œyî.h
"

13 
	~"∫n_œyî.h
"

14 
	~"¸¬_œyî.h
"

15 
	~"loˇl_œyî.h
"

16 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

17 
	~"a˘iv©i⁄_œyî.h
"

18 
	~"dëe˘i⁄_œyî.h
"

19 
	~"ªgi⁄_œyî.h
"

20 
	~"n‹mÆiz©i⁄_œyî.h
"

21 
	~"b©chn‹m_œyî.h
"

22 
	~"maxpoﬁ_œyî.h
"

23 
	~"ª‹g_œyî.h
"

24 
	~"avgpoﬁ_œyî.h
"

25 
	~"co°_œyî.h
"

26 
	~"so·max_œyî.h
"

27 
	~"dr›out_œyî.h
"

28 
	~"rouã_œyî.h
"

29 
	~"sh‹tcut_œyî.h
"

30 
	~"∑r£r.h
"

31 
	~"d©a.h
"

33 
lﬂd_¨gs
 
	$gë_ba£_¨gs
(
√tw‹k
 
√t
)

35 
lﬂd_¨gs
 
¨gs
 = {0};

36 
¨gs
.
w
 = 
√t
.w;

37 
¨gs
.
h
 = 
√t
.h;

38 
¨gs
.
size
 = 
√t
.
w
;

40 
¨gs
.
mö
 = 
√t
.
mö_¸›
;

41 
¨gs
.
max
 = 
√t
.
max_¸›
;

42 
¨gs
.
™gÀ
 = 
√t
.angle;

43 
¨gs
.
a•e˘
 = 
√t
.aspect;

44 
¨gs
.
exposuª
 = 
√t
.exposure;

45 
¨gs
.
˚¡î
 = 
√t
.center;

46 
¨gs
.
ßtuøti⁄
 = 
√t
.saturation;

47 
¨gs
.
hue
 = 
√t
.hue;

48  
¨gs
;

49 
	}
}

51 
√tw‹k
 
	$lﬂd_√tw‹k
(*
cfg
, *
weights
, 
˛ór
)

53 
√tw‹k
 
√t
 = 
	`∑r£_√tw‹k_cfg
(
cfg
);

54 if(
weights
 && weights[0] != 0){

55 
	`lﬂd_weights
(&
√t
, 
weights
);

57 if(
˛ór
Ë*
√t
.
£í
 = 0;

58  
√t
;

59 
	}
}

61 
√tw‹k
 *
	$lﬂd_√tw‹k_p
(*
cfg
, *
weights
, 
˛ór
)

63 
√tw‹k
 *
√t
 = 
	`ˇŒoc
(1, (network));

64 *
√t
 = 
	`lﬂd_√tw‹k
(
cfg
, 
weights
, 
˛ór
);

65  
√t
;

66 
	}
}

68 
size_t
 
	$gë_cuºít_b©ch
(
√tw‹k
 
√t
)

70 
size_t
 
b©ch_num
 = (*
√t
.
£í
)/“ë.
b©ch
*√t.
subdivisi⁄s
);

71  
b©ch_num
;

72 
	}
}

74 
	$ª£t_momítum
(
√tw‹k
 
√t
)

76 i‡(
√t
.
momítum
 == 0) ;

77 
√t
.
À¨nög_øã
 = 0;

78 
√t
.
momítum
 = 0;

79 
√t
.
deˇy
 = 0;

80 #ifde‡
GPU


83 
	}
}

85 
	$gë_cuºít_øã
(
√tw‹k
 
√t
)

87 
size_t
 
b©ch_num
 = 
	`gë_cuºít_b©ch
(
√t
);

88 
i
;

89 
øã
;

90 i‡(
b©ch_num
 < 
√t
.
bu∫_ö
ËÇë.
À¨nög_øã
 * 
	`pow
(()b©ch_num /Çë.bu∫_ö,Çë.
powî
);

91 
√t
.
pﬁicy
) {

92 
CONSTANT
:

93  
√t
.
À¨nög_øã
;

94 
STEP
:

95  
√t
.
À¨nög_øã
 * 
	`pow
“ë.
sˇÀ
, 
b©ch_num
/√t.
°ï
);

96 
STEPS
:

97 
øã
 = 
√t
.
À¨nög_øã
;

98 
i
 = 0; i < 
√t
.
num_°ïs
; ++i){

99 if(
√t
.
°ïs
[
i
] > 
b©ch_num
Ë 
øã
;

100 
øã
 *
√t
.
sˇÀs
[
i
];

103  
øã
;

104 
EXP
:

105  
√t
.
À¨nög_øã
 * 
	`pow
“ë.
gamma
, 
b©ch_num
);

106 
POLY
:

107  
√t
.
À¨nög_øã
 * 
	`pow
(1 - ()
b©ch_num
 /Çë.
max_b©ches
,Çë.
powî
);

108 
RANDOM
:

109  
√t
.
À¨nög_øã
 * 
	`pow
(
	`ønd_unif‹m
(0,1),Çë.
powî
);

110 
SIG
:

111  
√t
.
À¨nög_øã
 * (1./(1.+
	`exp
“ë.
gamma
*(
b©ch_num
 -Çë.
°ï
))));

113 
	`Ârötf
(
°dîr
, "Policy is weird!\n");

114  
√t
.
À¨nög_øã
;

116 
	}
}

118 *
	$gë_œyî_°rög
(
LAYER_TYPE
 
a
)

120 
a
){

121 
CONVOLUTIONAL
:

123 
ACTIVE
:

125 
LOCAL
:

127 
DECONVOLUTIONAL
:

129 
CONNECTED
:

131 
RNN
:

133 
GRU
:

135 
LSTM
:

137 
CRNN
:

139 
MAXPOOL
:

141 
REORG
:

143 
AVGPOOL
:

145 
SOFTMAX
:

147 
DETECTION
:

149 
REGION
:

151 
DROPOUT
:

153 
CROP
:

155 
COST
:

157 
ROUTE
:

159 
SHORTCUT
:

161 
NORMALIZATION
:

163 
BATCHNORM
:

169 
	}
}

171 
√tw‹k
 
	$make_√tw‹k
(
n
)

173 
√tw‹k
 
√t
 = {0};

174 
√t
.
n
 =Ç;

175 
√t
.
œyîs
 = 
	`ˇŒoc
“ë.
n
, (
œyî
));

176 
√t
.
£í
 = 
	`ˇŒoc
(1, ());

177 
√t
.
t
 = 
	`ˇŒoc
(1, ());

178 
√t
.
co°
 = 
	`ˇŒoc
(1, ());

179  
√t
;

180 
	}
}

182 
	$f‹w¨d_√tw‹k
(
√tw‹k
 
√t
)

184 
i
;

185 
i
 = 0; i < 
√t
.
n
; ++i){

186 
√t
.
ödex
 = 
i
;

187 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

188 if(
l
.
dñè
){

189 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
dñè
, 1);

191 
l
.
	`f‹w¨d
÷, 
√t
);

192 
√t
.
öput
 = 
l
.
ouçut
;

193 if(
l
.
åuth
) {

194 
√t
.
åuth
 = 
l
.
ouçut
;

197 
	`ˇlc_√tw‹k_co°
(
√t
);

198 
	}
}

200 
	$upd©e_√tw‹k
(
√tw‹k
 
√t
)

202 
i
;

203 
upd©e_¨gs
 
a
 = {0};

204 
a
.
b©ch
 = 
√t
.b©ch*√t.
subdivisi⁄s
;

205 
a
.
À¨nög_øã
 = 
	`gë_cuºít_øã
(
√t
);

206 
a
.
momítum
 = 
√t
.momentum;

207 
a
.
deˇy
 = 
√t
.decay;

208 
a
.
adam
 = 
√t
.adam;

209 
a
.
B1
 = 
√t
.B1;

210 
a
.
B2
 = 
√t
.B2;

211 
a
.
ïs
 = 
√t
.eps;

212 ++*
√t
.
t
;

213 
a
.
t
 = *
√t
.t;

215 
i
 = 0; i < 
√t
.
n
; ++i){

216 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

217 if(
l
.
upd©e
){

218 
l
.
	`upd©e
÷, 
a
);

221 
	}
}

223 
	$ˇlc_√tw‹k_co°
(
√tw‹k
 
√t
)

225 
i
;

226 
sum
 = 0;

227 
cou¡
 = 0;

228 
i
 = 0; i < 
√t
.
n
; ++i){

229 if(
√t
.
œyîs
[
i
].
co°
){

230 
sum
 +
√t
.
œyîs
[
i
].
co°
[0];

231 ++
cou¡
;

234 *
√t
.
co°
 = 
sum
/
cou¡
;

235 
	}
}

237 
	$gë_¥edi˘ed_˛ass_√tw‹k
(
√tw‹k
 
√t
)

239  
	`max_ödex
(
√t
.
ouçut
,Çë.
ouçuts
);

240 
	}
}

242 
	$backw¨d_√tw‹k
(
√tw‹k
 
√t
)

244 
i
;

245 
√tw‹k
 
‹ig
 = 
√t
;

246 
i
 = 
√t
.
n
-1; i >= 0; --i){

247 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

248 if(
l
.
°›backw¨d
) ;

249 if(
i
 == 0){

250 
√t
 = 
‹ig
;

252 
œyî
 
¥ev
 = 
√t
.
œyîs
[
i
-1];

253 
√t
.
öput
 = 
¥ev
.
ouçut
;

254 
√t
.
dñè
 = 
¥ev
.delta;

256 
√t
.
ödex
 = 
i
;

257 
l
.
	`backw¨d
÷, 
√t
);

259 
	}
}

261 
	$åaö_√tw‹k_d©um
(
√tw‹k
 
√t
)

263 #ifde‡
GPU


264 if(
gpu_ödex
 >0Ë 
	`åaö_√tw‹k_d©um_gpu
(
√t
);

266 *
√t
.
£í
 +√t.
b©ch
;

267 
√t
.
åaö
 = 1;

268 
	`f‹w¨d_√tw‹k
(
√t
);

269 
	`backw¨d_√tw‹k
(
√t
);

270 
îr‹
 = *
√t
.
co°
;

271 if(((*
√t
.
£í
)/√t.
b©ch
)%√t.
subdivisi⁄s
 =0Ë
	`upd©e_√tw‹k
(net);

272  
îr‹
;

273 
	}
}

275 
	$åaö_√tw‹k_sgd
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
)

277 
b©ch
 = 
√t
.batch;

279 
i
;

280 
sum
 = 0;

281 
i
 = 0; i < 
n
; ++i){

282 
	`gë_øndom_b©ch
(
d
, 
b©ch
, 
√t
.
öput
,Çë.
åuth
);

283 
îr
 = 
	`åaö_√tw‹k_d©um
(
√t
);

284 
sum
 +
îr
;

286  ()
sum
/(
n
*
b©ch
);

287 
	}
}

289 
	$åaö_√tw‹k
(
√tw‹k
 
√t
, 
d©a
 
d
)

291 
	`as£π
(
d
.
X
.
rows
 % 
√t
.
b©ch
 == 0);

292 
b©ch
 = 
√t
.batch;

293 
n
 = 
d
.
X
.
rows
 / 
b©ch
;

295 
i
;

296 
sum
 = 0;

297 
i
 = 0; i < 
n
; ++i){

298 
	`gë_√xt_b©ch
(
d
, 
b©ch
, 
i
*b©ch, 
√t
.
öput
,Çë.
åuth
);

299 
îr
 = 
	`åaö_√tw‹k_d©um
(
√t
);

300 
sum
 +
îr
;

302  ()
sum
/(
n
*
b©ch
);

303 
	}
}

305 
	$£t_b©ch_√tw‹k
(
√tw‹k
 *
√t
, 
b
)

307 
√t
->
b©ch
 = 
b
;

308 
i
;

309 
i
 = 0; i < 
√t
->
n
; ++i){

310 
√t
->
œyîs
[
i
].
b©ch
 = 
b
;

311 #ifde‡
CUDNN


312 if(
√t
->
œyîs
[
i
].
ty≥
 =
CONVOLUTIONAL
){

313 
	`cud¬_c⁄vﬁuti⁄Æ_£tup
(
√t
->
œyîs
 + 
i
);

315 if(
√t
->
œyîs
[
i
].
ty≥
 =
DECONVOLUTIONAL
){

316 
œyî
 *
l
 = 
√t
->
œyîs
 + 
i
;

317 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü->
out_c
,Ü->
out_h
,Ü->
out_w
);

318 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
->
n‹mTís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 1,Ü->
out_c
, 1, 1);

322 
	}
}

324 
	$ªsize_√tw‹k
(
√tw‹k
 *
√t
, 
w
, 
h
)

326 #ifde‡
GPU


327 
	`cuda_£t_devi˚
(
√t
->
gpu_ödex
);

328 
	`cuda_‰ì
(
√t
->
w‹k•a˚
);

330 
i
;

332 
√t
->
w
 = w;

333 
√t
->
h
 = h;

334 
öputs
 = 0;

335 
size_t
 
w‹k•a˚_size
 = 0;

338 
i
 = 0; i < 
√t
->
n
; ++i){

339 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

340 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

341 
	`ªsize_c⁄vﬁuti⁄Æ_œyî
(&
l
, 
w
, 
h
);

342 }if(
l
.
ty≥
 =
CROP
){

343 
	`ªsize_¸›_œyî
(&
l
, 
w
, 
h
);

344 }if(
l
.
ty≥
 =
MAXPOOL
){

345 
	`ªsize_maxpoﬁ_œyî
(&
l
, 
w
, 
h
);

346 }if(
l
.
ty≥
 =
REGION
){

347 
	`ªsize_ªgi⁄_œyî
(&
l
, 
w
, 
h
);

348 }if(
l
.
ty≥
 =
ROUTE
){

349 
	`ªsize_rouã_œyî
(&
l
, 
√t
);

350 }if(
l
.
ty≥
 =
REORG
){

351 
	`ªsize_ª‹g_œyî
(&
l
, 
w
, 
h
);

352 }if(
l
.
ty≥
 =
AVGPOOL
){

353 
	`ªsize_avgpoﬁ_œyî
(&
l
, 
w
, 
h
);

354 }if(
l
.
ty≥
 =
NORMALIZATION
){

355 
	`ªsize_n‹mÆiz©i⁄_œyî
(&
l
, 
w
, 
h
);

356 }if(
l
.
ty≥
 =
COST
){

357 
	`ªsize_co°_œyî
(&
l
, 
öputs
);

359 
	`îr‹
("CannotÑesizeÅhisÅype ofÜayer");

361 if(
l
.
w‹k•a˚_size
 > workspace_size) workspace_size =Ü.workspace_size;

362 
öputs
 = 
l
.
ouçuts
;

363 
√t
->
œyîs
[
i
] = 
l
;

364 
w
 = 
l
.
out_w
;

365 
h
 = 
l
.
out_h
;

366 if(
l
.
ty≥
 =
AVGPOOL
) ;

368 
œyî
 
out
 = 
	`gë_√tw‹k_ouçut_œyî
(*
√t
);

369 
√t
->
öputs
 =Çë->
œyîs
[0].inputs;

370 
√t
->
ouçuts
 = 
out
.outputs;

371 
√t
->
åuths
 = 
out
.
ouçuts
;

372 if(
√t
->
œyîs
[√t->
n
-1].
åuths
)Çet->truths =Çet->layers[net->n-1].truths;

373 
√t
->
ouçut
 = 
out
.output;

374 
	`‰ì
(
√t
->
öput
);

375 
	`‰ì
(
√t
->
åuth
);

376 
√t
->
öput
 = 
	`ˇŒoc
“ë->
öputs
*√t->
b©ch
, ());

377 
√t
->
åuth
 = 
	`ˇŒoc
“ë->
åuths
*√t->
b©ch
, ());

378 #ifde‡
GPU


379 if(
gpu_ödex
 >= 0){

380 
	`cuda_‰ì
(
√t
->
öput_gpu
);

381 
	`cuda_‰ì
(
√t
->
åuth_gpu
);

382 
√t
->
öput_gpu
 = 
	`cuda_make_¨øy
“ë->
öput
,Çë->
öputs
*√t->
b©ch
);

383 
√t
->
åuth_gpu
 = 
	`cuda_make_¨øy
“ë->
åuth
,Çë->
åuths
*√t->
b©ch
);

384 
√t
->
w‹k•a˚
 = 
	`cuda_make_¨øy
(0, (
w‹k•a˚_size
-1)/()+1);

386 
	`‰ì
(
√t
->
w‹k•a˚
);

387 
√t
->
w‹k•a˚
 = 
	`ˇŒoc
(1, 
w‹k•a˚_size
);

390 
	`‰ì
(
√t
->
w‹k•a˚
);

391 
√t
->
w‹k•a˚
 = 
	`ˇŒoc
(1, 
w‹k•a˚_size
);

395 
	}
}

397 
dëe˘i⁄_œyî
 
	$gë_√tw‹k_dëe˘i⁄_œyî
(
√tw‹k
 
√t
)

399 
i
;

400 
i
 = 0; i < 
√t
.
n
; ++i){

401 if(
√t
.
œyîs
[
i
].
ty≥
 =
DETECTION
){

402  
√t
.
œyîs
[
i
];

405 
	`Ârötf
(
°dîr
, "DetectionÜayerÇot found!!\n");

406 
dëe˘i⁄_œyî
 
l
 = {0};

407  
l
;

408 
	}
}

410 
image
 
	$gë_√tw‹k_image_œyî
(
√tw‹k
 
√t
, 
i
)

412 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

413 #ifde‡
GPU


416 i‡(
l
.
out_w
 &&Ü.
out_h
 &&Ü.
out_c
){

417  
	`Êﬂt_to_image
(
l
.
out_w
,Ü.
out_h
,Ü.
out_c
,Ü.
ouçut
);

419 
image
 
def
 = {0};

420  
def
;

421 
	}
}

423 
image
 
	$gë_√tw‹k_image
(
√tw‹k
 
√t
)

425 
i
;

426 
i
 = 
√t
.
n
-1; i >= 0; --i){

427 
image
 
m
 = 
	`gë_√tw‹k_image_œyî
(
√t
, 
i
);

428 if(
m
.
h
 != 0)  m;

430 
image
 
def
 = {0};

431  
def
;

432 
	}
}

434 
	$visuÆize_√tw‹k
(
√tw‹k
 
√t
)

436 
image
 *
¥ev
 = 0;

437 
i
;

438 
buff
[256];

439 
i
 = 0; i < 
√t
.
n
; ++i){

440 
	`•rötf
(
buff
, "Layî %d", 
i
);

441 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

442 if(
l
.
ty≥
 =
CONVOLUTIONAL
){

443 
¥ev
 = 
	`visuÆize_c⁄vﬁuti⁄Æ_œyî
(
l
, 
buff
,Örev);

446 
	}
}

448 
	$t›_¥edi˘i⁄s
(
√tw‹k
 
√t
, 
k
, *
ödex
)

450 
	`t›_k
(
√t
.
ouçut
,Çë.
ouçuts
, 
k
, 
ödex
);

451 
	}
}

454 *
	$√tw‹k_¥edi˘
(
√tw‹k
 
√t
, *
öput
)

456 #ifde‡
GPU


457 if(
gpu_ödex
 >0Ë 
	`√tw‹k_¥edi˘_gpu
(
√t
, 
öput
);

459 
√t
.
öput
 = input;

460 
√t
.
åuth
 = 0;

461 
√t
.
åaö
 = 0;

462 
√t
.
dñè
 = 0;

463 
	`f‹w¨d_√tw‹k
(
√t
);

464  
√t
.
ouçut
;

465 
	}
}

467 *
	$√tw‹k_¥edi˘_p
(
√tw‹k
 *
√t
, *
öput
)

469  
	`√tw‹k_¥edi˘
(*
√t
, 
öput
);

470 
	}
}

472 *
	$√tw‹k_¥edi˘_image
(
√tw‹k
 *
√t
, 
image
 
im
)

474 
image
 
imr
 = 
	`Àâîbox_image
(
im
, 
√t
->
w
,Çë->
h
);

475 
	`£t_b©ch_√tw‹k
(
√t
, 1);

476 *
p
 = 
	`√tw‹k_¥edi˘
(*
√t
, 
imr
.
d©a
);

477 
	`‰ì_image
(
imr
);

478  
p
;

479 
	}
}

481 
	$√tw‹k_width
(
√tw‹k
 *
√t
){Çë->
w
;
	}
}

482 
	$√tw‹k_height
(
√tw‹k
 *
√t
){Çë->
h
;
	}
}

484 
m©rix
 
	$√tw‹k_¥edi˘_d©a_mu…i
(
√tw‹k
 
√t
, 
d©a
 
ã°
, 
n
)

486 
i
,
j
,
b
,
m
;

487 
k
 = 
√t
.
ouçuts
;

488 
m©rix
 
¥ed
 = 
	`make_m©rix
(
ã°
.
X
.
rows
, 
k
);

489 *
X
 = 
	`ˇŒoc
(
√t
.
b©ch
*
ã°
.X.
rows
, ());

490 
i
 = 0; i < 
ã°
.
X
.
rows
; i +
√t
.
b©ch
){

491 
b
 = 0; b < 
√t
.
b©ch
; ++b){

492 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

493 
	`mem˝y
(
X
+
b
*
ã°
.X.
cﬁs
,Åe°.X.
vÆs
[
i
+b],Åest.X.cols*());

495 
m
 = 0; m < 
n
; ++m){

496 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

497 
b
 = 0; b < 
√t
.
b©ch
; ++b){

498 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

499 
j
 = 0; j < 
k
; ++j){

500 
¥ed
.
vÆs
[
i
+
b
][
j
] +
out
[j+b*
k
]/
n
;

505 
	`‰ì
(
X
);

506  
¥ed
;

507 
	}
}

509 
m©rix
 
	$√tw‹k_¥edi˘_d©a
(
√tw‹k
 
√t
, 
d©a
 
ã°
)

511 
i
,
j
,
b
;

512 
k
 = 
√t
.
ouçuts
;

513 
m©rix
 
¥ed
 = 
	`make_m©rix
(
ã°
.
X
.
rows
, 
k
);

514 *
X
 = 
	`ˇŒoc
(
√t
.
b©ch
*
ã°
.X.
cﬁs
, ());

515 
i
 = 0; i < 
ã°
.
X
.
rows
; i +
√t
.
b©ch
){

516 
b
 = 0; b < 
√t
.
b©ch
; ++b){

517 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

518 
	`mem˝y
(
X
+
b
*
ã°
.X.
cﬁs
,Åe°.X.
vÆs
[
i
+b],Åest.X.cols*());

520 *
out
 = 
	`√tw‹k_¥edi˘
(
√t
, 
X
);

521 
b
 = 0; b < 
√t
.
b©ch
; ++b){

522 if(
i
+
b
 =
ã°
.
X
.
rows
) ;

523 
j
 = 0; j < 
k
; ++j){

524 
¥ed
.
vÆs
[
i
+
b
][
j
] = 
out
[j+b*
k
];

528 
	`‰ì
(
X
);

529  
¥ed
;

530 
	}
}

532 
	$¥öt_√tw‹k
(
√tw‹k
 
√t
)

534 
i
,
j
;

535 
i
 = 0; i < 
√t
.
n
; ++i){

536 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

537 *
ouçut
 = 
l
.output;

538 
n
 = 
l
.
ouçuts
;

539 
món
 = 
	`món_¨øy
(
ouçut
, 
n
);

540 
v¨i
 = 
	`v¨ün˚_¨øy
(
ouçut
, 
n
);

541 
	`Ârötf
(
°dîr
, "Layî %d - Món: %f, V¨ün˚: %f\n",
i
,
món
, 
v¨i
);

542 if(
n
 > 100)Ç = 100;

543 
j
 = 0; j < 
n
; ++jË
	`Ârötf
(
°dîr
, "%f, ", 
ouçut
[j]);

544 if(
n
 =100)
	`Ârötf
(
°dîr
,".....\n");

545 
	`Ârötf
(
°dîr
, "\n");

547 
	}
}

549 
	$com∑ª_√tw‹ks
(
√tw‹k
 
n1
,Çëw‹k 
n2
, 
d©a
 
ã°
)

551 
m©rix
 
g1
 = 
	`√tw‹k_¥edi˘_d©a
(
n1
, 
ã°
);

552 
m©rix
 
g2
 = 
	`√tw‹k_¥edi˘_d©a
(
n2
, 
ã°
);

553 
i
;

554 
a
,
b
,
c
,
d
;

555 
a
 = 
b
 = 
c
 = 
d
 = 0;

556 
i
 = 0; i < 
g1
.
rows
; ++i){

557 
åuth
 = 
	`max_ödex
(
ã°
.
y
.
vÆs
[
i
],Åe°.y.
cﬁs
);

558 
p1
 = 
	`max_ödex
(
g1
.
vÆs
[
i
], g1.
cﬁs
);

559 
p2
 = 
	`max_ödex
(
g2
.
vÆs
[
i
], g2.
cﬁs
);

560 if(
p1
 =
åuth
){

561 if(
p2
 =
åuth
Ë++
d
;

562 ++
c
;

564 if(
p2
 =
åuth
Ë++
b
;

565 ++
a
;

568 
	`¥ötf
("%5d %5d\n%5d %5d\n", 
a
, 
b
, 
c
, 
d
);

569 
num
 = 
	`pow
((
	`abs
(
b
 - 
c
) - 1.), 2.);

570 
dí
 = 
b
 + 
c
;

571 
	`¥ötf
("%f\n", 
num
/
dí
);

572 
	}
}

574 
	$√tw‹k_accuøcy
(
√tw‹k
 
√t
, 
d©a
 
d
)

576 
m©rix
 
guess
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
d
);

577 
acc
 = 
	`m©rix_t›k_accuøcy
(
d
.
y
, 
guess
,1);

578 
	`‰ì_m©rix
(
guess
);

579  
acc
;

580 
	}
}

582 *
	$√tw‹k_accuøcõs
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
)

584 
acc
[2];

585 
m©rix
 
guess
 = 
	`√tw‹k_¥edi˘_d©a
(
√t
, 
d
);

586 
acc
[0] = 
	`m©rix_t›k_accuøcy
(
d
.
y
, 
guess
, 1);

587 
acc
[1] = 
	`m©rix_t›k_accuøcy
(
d
.
y
, 
guess
, 
n
);

588 
	`‰ì_m©rix
(
guess
);

589  
acc
;

590 
	}
}

592 
œyî
 
	$gë_√tw‹k_ouçut_œyî
(
√tw‹k
 
√t
)

594 
i
;

595 
i
 = 
√t
.
n
 - 1; i >= 0; --i){

596 if(
√t
.
œyîs
[
i
].
ty≥
 !
COST
) ;

598  
√t
.
œyîs
[
i
];

599 
	}
}

601 
	$√tw‹k_accuøcy_mu…i
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
)

603 
m©rix
 
guess
 = 
	`√tw‹k_¥edi˘_d©a_mu…i
(
√t
, 
d
, 
n
);

604 
acc
 = 
	`m©rix_t›k_accuøcy
(
d
.
y
, 
guess
,1);

605 
	`‰ì_m©rix
(
guess
);

606  
acc
;

607 
	}
}

609 
	$‰ì_√tw‹k
(
√tw‹k
 
√t
)

611 
i
;

612 
i
 = 0; i < 
√t
.
n
; ++i){

613 
	`‰ì_œyî
(
√t
.
œyîs
[
i
]);

615 
	`‰ì
(
√t
.
œyîs
);

616 if(
√t
.
öput
Ë
	`‰ì
(net.input);

617 if(
√t
.
åuth
Ë
	`‰ì
(net.truth);

618 #ifde‡
GPU


619 if(
√t
.
öput_gpu
Ë
	`cuda_‰ì
(net.input_gpu);

620 if(
√t
.
åuth_gpu
Ë
	`cuda_‰ì
(net.truth_gpu);

622 
	}
}

627 
œyî
 
	$√tw‹k_ouçut_œyî
(
√tw‹k
 
√t
)

629 
i
;

630 
i
 = 
√t
.
n
 - 1; i >= 0; --i){

631 if(
√t
.
œyîs
[
i
].
ty≥
 !
COST
) ;

633  
√t
.
œyîs
[
i
];

634 
	}
}

636 
	$√tw‹k_öputs
(
√tw‹k
 
√t
)

638  
√t
.
œyîs
[0].
öputs
;

639 
	}
}

641 
	$√tw‹k_ouçuts
(
√tw‹k
 
√t
)

643  
	`√tw‹k_ouçut_œyî
(
√t
).
ouçuts
;

644 
	}
}

646 *
	$√tw‹k_ouçut
(
√tw‹k
 
√t
)

648  
	`√tw‹k_ouçut_œyî
(
√t
).
ouçut
;

649 
	}
}

	@src/network.h

2 #i‚de‡
NETWORK_H


3 
	#NETWORK_H


	)

4 
	~"d¨k√t.h
"

6 
	~"image.h
"

7 
	~"œyî.h
"

8 
	~"d©a.h
"

9 
	~"åì.h
"

12 #ifde‡
GPU


13 
åaö_√tw‹k_d©um_gpu
(
√tw‹k
 
√t
);

14 *
√tw‹k_¥edi˘_gpu
(
√tw‹k
 
√t
, *
öput
);

15 
puŒ_√tw‹k_ouçut
(
√tw‹k
 
√t
);

18 
com∑ª_√tw‹ks
(
√tw‹k
 
n1
,Çëw‹k 
n2
, 
d©a
 
d
);

19 *
gë_œyî_°rög
(
LAYER_TYPE
 
a
);

21 
√tw‹k
 
make_√tw‹k
(
n
);

24 
√tw‹k_accuøcy_mu…i
(
√tw‹k
 
√t
, 
d©a
 
d
, 
n
);

25 
gë_¥edi˘ed_˛ass_√tw‹k
(
√tw‹k
 
√t
);

26 
¥öt_√tw‹k
(
√tw‹k
 
√t
);

27 
ªsize_√tw‹k
(
√tw‹k
 *
√t
, 
w
, 
h
);

28 
ˇlc_√tw‹k_co°
(
√tw‹k
 
√t
);

	@src/normalization_layer.c

1 
	~"n‹mÆiz©i⁄_œyî.h
"

2 
	~"bœs.h
"

4 
	~<°dio.h
>

6 
œyî
 
	$make_n‹mÆiz©i⁄_œyî
(
b©ch
, 
w
, 
h
, 
c
, 
size
, 
Æpha
, 
bëa
, 
k≠∑
)

8 
	`Ârötf
(
°dîr
, "Loˇ»Re•⁄£ N‹mÆiz©i⁄ Layî: %d x %d x %d image, %d size\n", 
w
,
h
,
c
,
size
);

9 
œyî
Üayer = {0};

10 
œyî
.
ty≥
 = 
NORMALIZATION
;

11 
œyî
.
b©ch
 = batch;

12 
œyî
.
h
 =Üayî.
out_h
 = h;

13 
œyî
.
w
 =Üayî.
out_w
 = w;

14 
œyî
.
c
 =Üayî.
out_c
 = c;

15 
œyî
.
k≠∑
 = kappa;

16 
œyî
.
size
 = size;

17 
œyî
.
Æpha
 =álpha;

18 
œyî
.
bëa
 = beta;

19 
œyî
.
ouçut
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

20 
œyî
.
dñè
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

21 
œyî
.
squ¨ed
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

22 
œyî
.
n‹ms
 = 
	`ˇŒoc
(
h
 * 
w
 * 
c
 * 
b©ch
, ());

23 
œyî
.
öputs
 = 
w
*
h
*
c
;

24 
œyî
.
ouçuts
 =Üayî.
öputs
;

26 
œyî
.
f‹w¨d
 = 
f‹w¨d_n‹mÆiz©i⁄_œyî
;

27 
œyî
.
backw¨d
 = 
backw¨d_n‹mÆiz©i⁄_œyî
;

28 #ifde‡
GPU


29 
œyî
.
f‹w¨d_gpu
 = 
f‹w¨d_n‹mÆiz©i⁄_œyî_gpu
;

30 
œyî
.
backw¨d_gpu
 = 
backw¨d_n‹mÆiz©i⁄_œyî_gpu
;

32 
œyî
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷ayî.
ouçut
, 
h
 * 
w
 * 
c
 * 
b©ch
);

33 
œyî
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷ayî.
dñè
, 
h
 * 
w
 * 
c
 * 
b©ch
);

34 
œyî
.
squ¨ed_gpu
 = 
	`cuda_make_¨øy
÷ayî.
squ¨ed
, 
h
 * 
w
 * 
c
 * 
b©ch
);

35 
œyî
.
n‹ms_gpu
 = 
	`cuda_make_¨øy
÷ayî.
n‹ms
, 
h
 * 
w
 * 
c
 * 
b©ch
);

37  
œyî
;

38 
	}
}

40 
	$ªsize_n‹mÆiz©i⁄_œyî
(
œyî
 *œyî, 
w
, 
h
)

42 
c
 = 
œyî
->c;

43 
b©ch
 = 
œyî
->batch;

44 
œyî
->
h
 = h;

45 
œyî
->
w
 = w;

46 
œyî
->
out_h
 = 
h
;

47 
œyî
->
out_w
 = 
w
;

48 
œyî
->
öputs
 = 
w
*
h
*
c
;

49 
œyî
->
ouçuts
 =Üayî->
öputs
;

50 
œyî
->
ouçut
 = 
	`ªÆloc
÷ayî->ouçut, 
h
 * 
w
 * 
c
 * 
b©ch
 * ());

51 
œyî
->
dñè
 = 
	`ªÆloc
÷ayî->dñè, 
h
 * 
w
 * 
c
 * 
b©ch
 * ());

52 
œyî
->
squ¨ed
 = 
	`ªÆloc
÷ayî->squ¨ed, 
h
 * 
w
 * 
c
 * 
b©ch
 * ());

53 
œyî
->
n‹ms
 = 
	`ªÆloc
÷ayî->n‹ms, 
h
 * 
w
 * 
c
 * 
b©ch
 * ());

54 #ifde‡
GPU


55 
	`cuda_‰ì
(
œyî
->
ouçut_gpu
);

56 
	`cuda_‰ì
(
œyî
->
dñè_gpu
);

57 
	`cuda_‰ì
(
œyî
->
squ¨ed_gpu
);

58 
	`cuda_‰ì
(
œyî
->
n‹ms_gpu
);

59 
œyî
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷ayî->
ouçut
, 
h
 * 
w
 * 
c
 * 
b©ch
);

60 
œyî
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷ayî->
dñè
, 
h
 * 
w
 * 
c
 * 
b©ch
);

61 
œyî
->
squ¨ed_gpu
 = 
	`cuda_make_¨øy
÷ayî->
squ¨ed
, 
h
 * 
w
 * 
c
 * 
b©ch
);

62 
œyî
->
n‹ms_gpu
 = 
	`cuda_make_¨øy
÷ayî->
n‹ms
, 
h
 * 
w
 * 
c
 * 
b©ch
);

64 
	}
}

66 
	$f‹w¨d_n‹mÆiz©i⁄_œyî
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
)

68 
k
,
b
;

69 
w
 = 
œyî
.w;

70 
h
 = 
œyî
.h;

71 
c
 = 
œyî
.c;

72 
	`sˇl_˝u
(
w
*
h
*
c
*
œyî
.
b©ch
, 0,Üayî.
squ¨ed
, 1);

74 
b
 = 0; b < 
œyî
.
b©ch
; ++b){

75 *
squ¨ed
 = 
œyî
.squ¨ed + 
w
*
h
*
c
*
b
;

76 *
n‹ms
 = 
œyî
.n‹m†+ 
w
*
h
*
c
*
b
;

77 *
öput
 = 
√t
.öpuà+ 
w
*
h
*
c
*
b
;

78 
	`pow_˝u
(
w
*
h
*
c
, 2, 
öput
, 1, 
squ¨ed
, 1);

80 
	`c⁄°_˝u
(
w
*
h
, 
œyî
.
k≠∑
, 
n‹ms
, 1);

81 
k
 = 0; k < 
œyî
.
size
/2; ++k){

82 
	`axpy_˝u
(
w
*
h
, 
œyî
.
Æpha
, 
squ¨ed
 + w*h*
k
, 1, 
n‹ms
, 1);

85 
k
 = 1; k < 
œyî
.
c
; ++k){

86 
	`c›y_˝u
(
w
*
h
, 
n‹ms
 + w*h*(
k
-1), 1,Çorms + w*h*k, 1);

87 
¥ev
 = 
k
 - ((
œyî
.
size
-1)/2) - 1;

88 
√xt
 = 
k
 + (
œyî
.
size
/2);

89 if(
¥ev
 >0Ë
	`axpy_˝u
(
w
*
h
, -
œyî
.
Æpha
, 
squ¨ed
 + w*h*¥ev, 1, 
n‹ms
 + w*h*
k
, 1);

90 if(
√xt
 < 
œyî
.
c
Ë
	`axpy_˝u
(
w
*
h
,Üayî.
Æpha
, 
squ¨ed
 + w*h*√xt, 1, 
n‹ms
 + w*h*
k
, 1);

93 
	`pow_˝u
(
w
*
h
*
c
*
œyî
.
b©ch
, -œyî.
bëa
,Üayî.
n‹ms
, 1,Üayî.
ouçut
, 1);

94 
	`mul_˝u
(
w
*
h
*
c
*
œyî
.
b©ch
, 
√t
.
öput
, 1,Üayî.
ouçut
, 1);

95 
	}
}

97 
	$backw¨d_n‹mÆiz©i⁄_œyî
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
)

102 
w
 = 
œyî
.w;

103 
h
 = 
œyî
.h;

104 
c
 = 
œyî
.c;

105 
	`pow_˝u
(
w
*
h
*
c
*
œyî
.
b©ch
, -œyî.
bëa
,Üayî.
n‹ms
, 1, 
√t
.
dñè
, 1);

106 
	`mul_˝u
(
w
*
h
*
c
*
œyî
.
b©ch
,Üayî.
dñè
, 1, 
√t
.delta, 1);

107 
	}
}

109 #ifde‡
GPU


110 
	$f‹w¨d_n‹mÆiz©i⁄_œyî_gpu
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
)

112 
k
,
b
;

113 
w
 = 
œyî
.w;

114 
h
 = 
œyî
.h;

115 
c
 = 
œyî
.c;

116 
	`sˇl_gpu
(
w
*
h
*
c
*
œyî
.
b©ch
, 0,Üayî.
squ¨ed_gpu
, 1);

118 
b
 = 0; b < 
œyî
.
b©ch
; ++b){

119 *
squ¨ed
 = 
œyî
.
squ¨ed_gpu
 + 
w
*
h
*
c
*
b
;

120 *
n‹ms
 = 
œyî
.
n‹ms_gpu
 + 
w
*
h
*
c
*
b
;

121 *
öput
 = 
√t
.
öput_gpu
 + 
w
*
h
*
c
*
b
;

122 
	`pow_gpu
(
w
*
h
*
c
, 2, 
öput
, 1, 
squ¨ed
, 1);

124 
	`c⁄°_gpu
(
w
*
h
, 
œyî
.
k≠∑
, 
n‹ms
, 1);

125 
k
 = 0; k < 
œyî
.
size
/2; ++k){

126 
	`axpy_gpu
(
w
*
h
, 
œyî
.
Æpha
, 
squ¨ed
 + w*h*
k
, 1, 
n‹ms
, 1);

129 
k
 = 1; k < 
œyî
.
c
; ++k){

130 
	`c›y_gpu
(
w
*
h
, 
n‹ms
 + w*h*(
k
-1), 1,Çorms + w*h*k, 1);

131 
¥ev
 = 
k
 - ((
œyî
.
size
-1)/2) - 1;

132 
√xt
 = 
k
 + (
œyî
.
size
/2);

133 if(
¥ev
 >0Ë
	`axpy_gpu
(
w
*
h
, -
œyî
.
Æpha
, 
squ¨ed
 + w*h*¥ev, 1, 
n‹ms
 + w*h*
k
, 1);

134 if(
√xt
 < 
œyî
.
c
Ë
	`axpy_gpu
(
w
*
h
,Üayî.
Æpha
, 
squ¨ed
 + w*h*√xt, 1, 
n‹ms
 + w*h*
k
, 1);

137 
	`pow_gpu
(
w
*
h
*
c
*
œyî
.
b©ch
, -œyî.
bëa
,Üayî.
n‹ms_gpu
, 1,Üayî.
ouçut_gpu
, 1);

138 
	`mul_gpu
(
w
*
h
*
c
*
œyî
.
b©ch
, 
√t
.
öput_gpu
, 1,Üayî.
ouçut_gpu
, 1);

139 
	}
}

141 
	$backw¨d_n‹mÆiz©i⁄_œyî_gpu
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
)

145 
w
 = 
œyî
.w;

146 
h
 = 
œyî
.h;

147 
c
 = 
œyî
.c;

148 
	`pow_gpu
(
w
*
h
*
c
*
œyî
.
b©ch
, -œyî.
bëa
,Üayî.
n‹ms_gpu
, 1, 
√t
.
dñè_gpu
, 1);

149 
	`mul_gpu
(
w
*
h
*
c
*
œyî
.
b©ch
,Üayî.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

150 
	}
}

	@src/normalization_layer.h

1 #i‚de‡
NORMALIZATION_LAYER_H


2 
	#NORMALIZATION_LAYER_H


	)

4 
	~"image.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
make_n‹mÆiz©i⁄_œyî
(
b©ch
, 
w
, 
h
, 
c
, 
size
, 
Æpha
, 
bëa
, 
k≠∑
);

9 
ªsize_n‹mÆiz©i⁄_œyî
(
œyî
 *œyî, 
h
, 
w
);

10 
f‹w¨d_n‹mÆiz©i⁄_œyî
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
);

11 
backw¨d_n‹mÆiz©i⁄_œyî
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
);

12 
visuÆize_n‹mÆiz©i⁄_œyî
(
œyî
Üayî, *
wödow
);

14 #ifde‡
GPU


15 
f‹w¨d_n‹mÆiz©i⁄_œyî_gpu
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
);

16 
backw¨d_n‹mÆiz©i⁄_œyî_gpu
(c⁄° 
œyî
Üayî, 
√tw‹k
 
√t
);

	@src/option_list.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~"›ti⁄_li°.h
"

5 
	~"utûs.h
"

7 
li°
 *
	$ªad_d©a_cfg
(*
fûíame
)

9 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

10 if(
fûe
 =0Ë
	`fûe_îr‹
(
fûíame
);

11 *
löe
;

12 
nu
 = 0;

13 
li°
 *
›ti⁄s
 = 
	`make_li°
();

14 (
löe
=
	`fgël
(
fûe
)) != 0){

15 ++ 
nu
;

16 
	`°rù
(
löe
);

17 
löe
[0]){

21 
	`‰ì
(
löe
);

24 if(!
	`ªad_›ti⁄
(
löe
, 
›ti⁄s
)){

25 
	`Ârötf
(
°dîr
, "C⁄fig fûêîr‹Üöê%d, couldÖ¨£: %s\n", 
nu
, 
löe
);

26 
	`‰ì
(
löe
);

31 
	`f˛o£
(
fûe
);

32  
›ti⁄s
;

33 
	}
}

35 
mëad©a
 
	$gë_mëad©a
(*
fûe
)

37 
mëad©a
 
m
 = {0};

38 
li°
 *
›ti⁄s
 = 
	`ªad_d©a_cfg
(
fûe
);

40 *
«me_li°
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "names", 0);

41 if(!
«me_li°
Ë«me_li° = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "labels", 0);

42 if(!
«me_li°
) {

43 
	`Ârötf
(
°dîr
, "NoÇames orÜabels found\n");

45 
m
.
«mes
 = 
	`gë_œbñs
(
«me_li°
);

47 
m
.
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 2);

48 
	`‰ì_li°
(
›ti⁄s
);

49  
m
;

50 
	}
}

52 
	$ªad_›ti⁄
(*
s
, 
li°
 *
›ti⁄s
)

54 
size_t
 
i
;

55 
size_t
 
Àn
 = 
	`°æí
(
s
);

56 *
vÆ
 = 0;

57 
i
 = 0; i < 
Àn
; ++i){

58 if(
s
[
i
] == '='){

59 
s
[
i
] = '\0';

60 
vÆ
 = 
s
+
i
+1;

64 if(
i
 =
Àn
-1)  0;

65 *
key
 = 
s
;

66 
	`›ti⁄_ö£π
(
›ti⁄s
, 
key
, 
vÆ
);

68 
	}
}

70 
	$›ti⁄_ö£π
(
li°
 *
l
, *
key
, *
vÆ
)

72 
kvp
 *
p
 = 
	`mÆloc
((kvp));

73 
p
->
key
 = key;

74 
p
->
vÆ
 = val;

75 
p
->
u£d
 = 0;

76 
	`li°_ö£π
(
l
, 
p
);

77 
	}
}

79 
	$›ti⁄_unu£d
(
li°
 *
l
)

81 
node
 *
n
 = 
l
->
‰⁄t
;

82 
n
){

83 
kvp
 *
p
 = (kv∞*)
n
->
vÆ
;

84 if(!
p
->
u£d
){

85 
	`Ârötf
(
°dîr
, "Unu£d fõld: '%†%s'\n", 
p
->
key
,Ö->
vÆ
);

87 
n
 =Ç->
√xt
;

89 
	}
}

91 *
	$›ti⁄_föd
(
li°
 *
l
, *
key
)

93 
node
 *
n
 = 
l
->
‰⁄t
;

94 
n
){

95 
kvp
 *
p
 = (kv∞*)
n
->
vÆ
;

96 if(
	`°rcmp
(
p
->
key
, key) == 0){

97 
p
->
u£d
 = 1;

98  
p
->
vÆ
;

100 
n
 =Ç->
√xt
;

103 
	}
}

104 *
	$›ti⁄_föd_°r
(
li°
 *
l
, *
key
, *
def
)

106 *
v
 = 
	`›ti⁄_föd
(
l
, 
key
);

107 if(
v
)  v;

108 if(
def
Ë
	`Ârötf
(
°dîr
, "%s: Usög deÁu… '%s'\n", 
key
, def);

109  
def
;

110 
	}
}

112 
	$›ti⁄_föd_öt
(
li°
 *
l
, *
key
, 
def
)

114 *
v
 = 
	`›ti⁄_föd
(
l
, 
key
);

115 if(
v
Ë 
	`©oi
(v);

116 
	`Ârötf
(
°dîr
, "%s: Usög deÁu… '%d'\n", 
key
, 
def
);

117  
def
;

118 
	}
}

120 
	$›ti⁄_föd_öt_quõt
(
li°
 *
l
, *
key
, 
def
)

122 *
v
 = 
	`›ti⁄_föd
(
l
, 
key
);

123 if(
v
Ë 
	`©oi
(v);

124  
def
;

125 
	}
}

127 
	$›ti⁄_föd_Êﬂt_quõt
(
li°
 *
l
, *
key
, 
def
)

129 *
v
 = 
	`›ti⁄_föd
(
l
, 
key
);

130 if(
v
Ë 
	`©of
(v);

131  
def
;

132 
	}
}

134 
	$›ti⁄_föd_Êﬂt
(
li°
 *
l
, *
key
, 
def
)

136 *
v
 = 
	`›ti⁄_föd
(
l
, 
key
);

137 if(
v
Ë 
	`©of
(v);

138 
	`Ârötf
(
°dîr
, "%s: Usög deÁu… '%lf'\n", 
key
, 
def
);

139  
def
;

140 
	}
}

	@src/option_list.h

1 #i‚de‡
OPTION_LIST_H


2 
	#OPTION_LIST_H


	)

3 
	~"li°.h
"

6 *
	mkey
;

7 *
	mvÆ
;

8 
	mu£d
;

9 } 
	tkvp
;

12 
ªad_›ti⁄
(*
s
, 
li°
 *
›ti⁄s
);

13 
›ti⁄_ö£π
(
li°
 *
l
, *
key
, *
vÆ
);

14 *
›ti⁄_föd
(
li°
 *
l
, *
key
);

15 
›ti⁄_föd_öt_quõt
(
li°
 *
l
, *
key
, 
def
);

16 
›ti⁄_föd_Êﬂt
(
li°
 *
l
, *
key
, 
def
);

17 
›ti⁄_föd_Êﬂt_quõt
(
li°
 *
l
, *
key
, 
def
);

18 
›ti⁄_unu£d
(
li°
 *
l
);

	@src/parser.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<as£π.h
>

6 
	~"a˘iv©i⁄_œyî.h
"

7 
	~"a˘iv©i⁄s.h
"

8 
	~"avgpoﬁ_œyî.h
"

9 
	~"b©chn‹m_œyî.h
"

10 
	~"bœs.h
"

11 
	~"c⁄√˘ed_œyî.h
"

12 
	~"dec⁄vﬁuti⁄Æ_œyî.h
"

13 
	~"c⁄vﬁuti⁄Æ_œyî.h
"

14 
	~"co°_œyî.h
"

15 
	~"¸¬_œyî.h
"

16 
	~"¸›_œyî.h
"

17 
	~"dëe˘i⁄_œyî.h
"

18 
	~"dr›out_œyî.h
"

19 
	~"gru_œyî.h
"

20 
	~"li°.h
"

21 
	~"loˇl_œyî.h
"

22 
	~"maxpoﬁ_œyî.h
"

23 
	~"n‹mÆiz©i⁄_œyî.h
"

24 
	~"›ti⁄_li°.h
"

25 
	~"∑r£r.h
"

26 
	~"ªgi⁄_œyî.h
"

27 
	~"ª‹g_œyî.h
"

28 
	~"∫n_œyî.h
"

29 
	~"rouã_œyî.h
"

30 
	~"sh‹tcut_œyî.h
"

31 
	~"so·max_œyî.h
"

32 
	~"l°m_œyî.h
"

33 
	~"utûs.h
"

36 
	#DEBUG


	)

37 
	~"debug.h
"

40 *
	mty≥
;

41 
li°
 *
	m›ti⁄s
;

42 }
	t£˘i⁄
;

44 
li°
 *
ªad_cfg
(*
fûíame
);

46 
LAYER_TYPE
 
	$°rög_to_œyî_ty≥
(* 
ty≥
)

49 i‡(
	`°rcmp
(
ty≥
, "[sh‹tcut]")==0Ë 
SHORTCUT
;

50 i‡(
	`°rcmp
(
ty≥
, "[¸›]")==0Ë 
CROP
;

51 i‡(
	`°rcmp
(
ty≥
, "[co°]")==0Ë 
COST
;

52 i‡(
	`°rcmp
(
ty≥
, "[dëe˘i⁄]")==0Ë 
DETECTION
;

53 i‡(
	`°rcmp
(
ty≥
, "[ªgi⁄]")==0Ë 
REGION
;

54 i‡(
	`°rcmp
(
ty≥
, "[loˇl]")==0Ë 
LOCAL
;

55 i‡(
	`°rcmp
(
ty≥
, "[conv]")==0

56 || 
	`°rcmp
(
ty≥
, "[c⁄vﬁuti⁄Æ]")==0Ë 
CONVOLUTIONAL
;

57 i‡(
	`°rcmp
(
ty≥
, "[deconv]")==0

58 || 
	`°rcmp
(
ty≥
, "[dec⁄vﬁuti⁄Æ]")==0Ë 
DECONVOLUTIONAL
;

59 i‡(
	`°rcmp
(
ty≥
, "[a˘iv©i⁄]")==0Ë 
ACTIVE
;

60 i‡(
	`°rcmp
(
ty≥
, "[net]")==0

61 || 
	`°rcmp
(
ty≥
, "[√tw‹k]")==0Ë 
NETWORK
;

62 i‡(
	`°rcmp
(
ty≥
, "[¸¬]")==0Ë 
CRNN
;

63 i‡(
	`°rcmp
(
ty≥
, "[gru]")==0Ë 
GRU
;

64 i‡(
	`°rcmp
(
ty≥
, "[l°m]"Ë=0Ë 
LSTM
;

65 i‡(
	`°rcmp
(
ty≥
, "[∫n]")==0Ë 
RNN
;

66 i‡(
	`°rcmp
(
ty≥
, "[conn]")==0

67 || 
	`°rcmp
(
ty≥
, "[c⁄√˘ed]")==0Ë 
CONNECTED
;

68 i‡(
	`°rcmp
(
ty≥
, "[max]")==0

69 || 
	`°rcmp
(
ty≥
, "[maxpoﬁ]")==0Ë 
MAXPOOL
;

70 i‡(
	`°rcmp
(
ty≥
, "[ª‹g]")==0Ë 
REORG
;

71 i‡(
	`°rcmp
(
ty≥
, "[avg]")==0

72 || 
	`°rcmp
(
ty≥
, "[avgpoﬁ]")==0Ë 
AVGPOOL
;

73 i‡(
	`°rcmp
(
ty≥
, "[dr›out]")==0Ë 
DROPOUT
;

74 i‡(
	`°rcmp
(
ty≥
, "[lrn]")==0

75 || 
	`°rcmp
(
ty≥
, "[n‹mÆiz©i⁄]")==0Ë 
NORMALIZATION
;

76 i‡(
	`°rcmp
(
ty≥
, "[b©chn‹m]")==0Ë 
BATCHNORM
;

77 i‡(
	`°rcmp
(
ty≥
, "[soft]")==0

78 || 
	`°rcmp
(
ty≥
, "[so·max]")==0Ë 
SOFTMAX
;

79 i‡(
	`°rcmp
(
ty≥
, "[rouã]")==0Ë 
ROUTE
;

80  
BLANK
;

81 
	}
}

83 
	$‰ì_£˘i⁄
(
£˘i⁄
 *
s
)

85 
	`‰ì
(
s
->
ty≥
);

86 
node
 *
n
 = 
s
->
›ti⁄s
->
‰⁄t
;

87 
n
){

88 
kvp
 *
∑ú
 = (kv∞*)
n
->
vÆ
;

89 
	`‰ì
(
∑ú
->
key
);

90 
	`‰ì
(
∑ú
);

91 
node
 *
√xt
 = 
n
->next;

92 
	`‰ì
(
n
);

93 
n
 = 
√xt
;

95 
	`‰ì
(
s
->
›ti⁄s
);

96 
	`‰ì
(
s
);

97 
	}
}

99 
	$∑r£_d©a
(*
d©a
, *
a
, 
n
)

101 
i
;

102 if(!
d©a
) ;

103 *
cuº
 = 
d©a
;

104 *
√xt
 = 
d©a
;

105 
d⁄e
 = 0;

106 
i
 = 0; i < 
n
 && !
d⁄e
; ++i){

107 *++
√xt
 !='\0' && *next != ',');

108 if(*
√xt
 ='\0'Ë
d⁄e
 = 1;

109 *
√xt
 = '\0';

110 
	`ssˇnf
(
cuº
, "%g", &
a
[
i
]);

111 
cuº
 = 
√xt
+1;

113 
	}
}

115 
	ssize_∑øms
{

116 
	mb©ch
;

117 
	möputs
;

118 
	mh
;

119 
	mw
;

120 
	mc
;

121 
	mödex
;

122 
	mtime_°ïs
;

123 
√tw‹k
 
	m√t
;

124 } 
	tsize_∑øms
;

126 
loˇl_œyî
 
	$∑r£_loˇl
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

128 
n
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "filters",1);

129 
size
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "size",1);

130 
°ride
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "stride",1);

131 
∑d
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "pad",0);

132 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

133 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

135 
b©ch
,
h
,
w
,
c
;

136 
h
 = 
∑øms
.h;

137 
w
 = 
∑øms
.w;

138 
c
 = 
∑øms
.c;

139 
b©ch
=
∑øms
.batch;

140 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer beforeÜocalÜayer must output image.");

142 
loˇl_œyî
 
œyî
 = 
	`make_loˇl_œyî
(
b©ch
,
h
,
w
,
c
,
n
,
size
,
°ride
,
∑d
,
a˘iv©i⁄
);

144  
œyî
;

145 
	}
}

147 
œyî
 
	$∑r£_dec⁄vﬁuti⁄Æ
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

149 
n
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "filters",1);

150 
size
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "size",1);

151 
°ride
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "stride",1);

153 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

154 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

156 
b©ch
,
h
,
w
,
c
;

157 
h
 = 
∑øms
.h;

158 
w
 = 
∑øms
.w;

159 
c
 = 
∑øms
.c;

160 
b©ch
=
∑øms
.batch;

161 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer before deconvolutionalÜayer must output image.");

162 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

163 
∑d
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "pad",0);

164 
∑ddög
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "padding",0);

165 if(
∑d
Ë
∑ddög
 = 
size
/2;

167 
œyî
 
l
 = 
	`make_dec⁄vﬁuti⁄Æ_œyî
(
b©ch
,
h
,
w
,
c
,
n
,
size
,
°ride
,
∑ddög
, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
∑øms
.
√t
.
adam
);

169  
l
;

170 
	}
}

173 
c⁄vﬁuti⁄Æ_œyî
 
	$∑r£_c⁄vﬁuti⁄Æ
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

175 
n
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "filters",1);

176 
size
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "size",1);

177 
°ride
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "stride",1);

178 
∑d
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "pad",0);

179 
∑ddög
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "padding",0);

180 if(
∑d
Ë
∑ddög
 = 
size
/2;

182 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

183 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

185 
b©ch
,
h
,
w
,
c
;

186 
h
 = 
∑øms
.h;

187 
w
 = 
∑øms
.w;

188 
c
 = 
∑øms
.c;

189 
b©ch
=
∑øms
.batch;

190 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer before convolutionalÜayer must output image.");

191 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

192 
bö¨y
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "binary", 0);

193 
xn‹
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "xnor", 0);

195 
c⁄vﬁuti⁄Æ_œyî
 
œyî
 = 
	`make_c⁄vﬁuti⁄Æ_œyî
(
b©ch
,
h
,
w
,
c
,
n
,
size
,
°ride
,
∑ddög
,
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
bö¨y
, 
xn‹
, 
∑øms
.
√t
.
adam
);

196 
œyî
.
Êù≥d
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "flipped", 0);

197 
œyî
.
dŸ
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "dot", 0);

199  
œyî
;

200 
	}
}

202 
œyî
 
	$∑r£_¸¬
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

204 
ouçut_fûãrs
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "output_filters",1);

205 
hiddí_fûãrs
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "hidden_filters",1);

206 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

207 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

208 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

210 
œyî
 
l
 = 
	`make_¸¬_œyî
(
∑øms
.
b©ch
,Ö¨ams.
w
,Ö¨ams.
h
,Ö¨ams.
c
, 
hiddí_fûãrs
, 
ouçut_fûãrs
,Ö¨ams.
time_°ïs
, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
);

212 
l
.
sh‹tcut
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "shortcut", 0);

214  
l
;

215 
	}
}

217 
œyî
 
	$∑r£_∫n
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

219 
ouçut
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "output",1);

220 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

221 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

222 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

224 
œyî
 
l
 = 
	`make_∫n_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
ouçut
,Ö¨ams.
time_°ïs
, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
,Ö¨ams.
√t
.
adam
);

226 
l
.
sh‹tcut
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "shortcut", 0);

228  
l
;

229 
	}
}

231 
œyî
 
	$∑r£_gru
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

233 
ouçut
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "output",1);

234 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

236 
œyî
 
l
 = 
	`make_gru_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
ouçut
,Ö¨ams.
time_°ïs
, 
b©ch_n‹mÆize
,Ö¨ams.
√t
.
adam
);

237 
l
.
ènh
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "tanh", 0);

239  
l
;

240 
	}
}

242 
œyî
 
	$∑r£_l°m
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

244 
ouçut
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "output", 1);

245 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

247 
œyî
 
l
 = 
	`make_l°m_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
ouçut
,Ö¨ams.
time_°ïs
, 
b©ch_n‹mÆize
,Ö¨ams.
√t
.
adam
);

249  
l
;

250 
	}
}

252 
œyî
 
	$∑r£_c⁄√˘ed
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

254 
ouçut
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "output",1);

255 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "logistic");

256 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

257 
b©ch_n‹mÆize
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "batch_normalize", 0);

259 
œyî
 
l
 = 
	`make_c⁄√˘ed_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
ouçut
, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
,Ö¨ams.
√t
.
adam
);

260  
l
;

261 
	}
}

263 
so·max_œyî
 
	$∑r£_so·max
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

265 
groups
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "groups",1);

266 
so·max_œyî
 
œyî
 = 
	`make_so·max_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
groups
);

267 
œyî
.
ãm≥øtuª
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "temperature", 1);

268 *
åì_fûe
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "tree", 0);

269 i‡(
åì_fûe
Ë
œyî
.
so·max_åì
 = 
	`ªad_åì
(tree_file);

270 
œyî
.
w
 = 
∑øms
.w;

271 
œyî
.
h
 = 
∑øms
.h;

272 
œyî
.
c
 = 
∑øms
.c;

273 
œyî
.
•©ül
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "spatial", 0);

274  
œyî
;

275 
	}
}

277 
œyî
 
	$∑r£_ªgi⁄
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

279 
co‹ds
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "coords", 4);

280 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 20);

281 
num
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "num", 1);

283 
œyî
 
l
 = 
	`make_ªgi⁄_œyî
(
∑øms
.
b©ch
,Ö¨ams.
w
,Ö¨ams.
h
, 
num
, 
˛as£s
, 
co‹ds
);

284 
	`as£π
(
l
.
ouçuts
 =
∑øms
.
öputs
);

286 
l
.
log
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "log", 0);

287 
l
.
sqπ
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "sqrt", 0);

289 
l
.
so·max
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "softmax", 0);

290 
l
.
background
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "background", 0);

291 
l
.
max_boxes
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "max",30);

292 
l
.
jôãr
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "jitter", .2);

293 
l
.
ªsc‹e
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "rescore",0);

295 
l
.
thªsh
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "thresh", .5);

296 
l
.
˛assfix
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "classfix", 0);

297 
l
.
absﬁuã
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "absolute", 0);

298 
l
.
øndom
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "random", 0);

300 
l
.
co‹d_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "coord_scale", 1);

301 
l
.
obje˘_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "object_scale", 1);

302 
l
.
noobje˘_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "noobject_scale", 1);

303 
l
.
˛ass_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "class_scale", 1);

304 
l
.
büs_m©ch
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "bias_match",0);

306 *
åì_fûe
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "tree", 0);

307 i‡(
åì_fûe
Ë
l
.
so·max_åì
 = 
	`ªad_åì
(tree_file);

308 *
m≠_fûe
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "map", 0);

309 i‡(
m≠_fûe
Ë
l
.
m≠
 = 
	`ªad_m≠
(map_file);

311 *
a
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "anchors", 0);

312 if(
a
){

313 
Àn
 = 
	`°æí
(
a
);

314 
n
 = 1;

315 
i
;

316 
i
 = 0; i < 
Àn
; ++i){

317 i‡(
a
[
i
] =','Ë++
n
;

319 
i
 = 0; i < 
n
; ++i){

320 
büs
 = 
	`©of
(
a
);

321 
l
.
bü£s
[
i
] = 
büs
;

322 
a
 = 
	`°rchr
(a, ',')+1;

325  
l
;

326 
	}
}

327 
dëe˘i⁄_œyî
 
	$∑r£_dëe˘i⁄
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

329 
co‹ds
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "coords", 1);

330 
˛as£s
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "classes", 1);

331 
ªsc‹e
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "rescore", 0);

332 
num
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "num", 1);

333 
side
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "side", 7);

334 
dëe˘i⁄_œyî
 
œyî
 = 
	`make_dëe˘i⁄_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
num
, 
side
, 
˛as£s
, 
co‹ds
, 
ªsc‹e
);

336 
œyî
.
so·max
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "softmax", 0);

337 
œyî
.
sqπ
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "sqrt", 0);

339 
œyî
.
max_boxes
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "max",30);

340 
œyî
.
co‹d_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "coord_scale", 1);

341 
œyî
.
f‹˚d
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "forced", 0);

342 
œyî
.
obje˘_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "object_scale", 1);

343 
œyî
.
noobje˘_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "noobject_scale", 1);

344 
œyî
.
˛ass_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "class_scale", 1);

345 
œyî
.
jôãr
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "jitter", .2);

346 
œyî
.
øndom
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "random", 0);

347 
œyî
.
ª‹g
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "reorg", 0);

348  
œyî
;

349 
	}
}

351 
co°_œyî
 
	$∑r£_co°
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

353 *
ty≥_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "type", "sse");

354 
COST_TYPE
 
ty≥
 = 
	`gë_co°_ty≥
(
ty≥_s
);

355 
sˇÀ
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "scale",1);

356 
co°_œyî
 
œyî
 = 
	`make_co°_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
ty≥
, 
sˇÀ
);

357 
œyî
.
øtio
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "ratio",0);

358 
œyî
.
noobje˘_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "noobj", 1);

359 
œyî
.
thªsh
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "thresh",0);

360  
œyî
;

361 
	}
}

363 
¸›_œyî
 
	$∑r£_¸›
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

365 
¸›_height
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "crop_height",1);

366 
¸›_width
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "crop_width",1);

367 
Êù
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "flip",0);

368 
™gÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "angle",0);

369 
ßtuøti⁄
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "saturation",1);

370 
exposuª
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "exposure",1);

372 
b©ch
,
h
,
w
,
c
;

373 
h
 = 
∑øms
.h;

374 
w
 = 
∑øms
.w;

375 
c
 = 
∑øms
.c;

376 
b©ch
=
∑øms
.batch;

377 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer before cropÜayer must output image.");

379 
nﬂdju°
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "noadjust",0);

381 
¸›_œyî
 
l
 = 
	`make_¸›_œyî
(
b©ch
,
h
,
w
,
c
,
¸›_height
,
¸›_width
,
Êù
, 
™gÀ
, 
ßtuøti⁄
, 
exposuª
);

382 
l
.
shi·
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "shift", 0);

383 
l
.
nﬂdju°
 =Çoadjust;

384  
l
;

385 
	}
}

387 
œyî
 
	$∑r£_ª‹g
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

389 
°ride
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "stride",1);

390 
ªvî£
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "reverse",0);

391 
Ê©ãn
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "flatten",0);

392 
exåa
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "extra",0);

394 
b©ch
,
h
,
w
,
c
;

395 
h
 = 
∑øms
.h;

396 
w
 = 
∑øms
.w;

397 
c
 = 
∑øms
.c;

398 
b©ch
=
∑øms
.batch;

399 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer beforeÑeorgÜayer must output image.");

401 
œyî
Üayî = 
	`make_ª‹g_œyî
(
b©ch
,
w
,
h
,
c
,
°ride
,
ªvî£
, 
Ê©ãn
, 
exåa
);

402  
œyî
;

403 
	}
}

405 
maxpoﬁ_œyî
 
	$∑r£_maxpoﬁ
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

407 
°ride
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "stride",1);

408 
size
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "size",
°ride
);

409 
∑ddög
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "∑ddög", (
size
-1)/2);

411 
b©ch
,
h
,
w
,
c
;

412 
h
 = 
∑øms
.h;

413 
w
 = 
∑øms
.w;

414 
c
 = 
∑øms
.c;

415 
b©ch
=
∑øms
.batch;

416 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer before maxpoolÜayer must output image.");

418 
maxpoﬁ_œyî
 
œyî
 = 
	`make_maxpoﬁ_œyî
(
b©ch
,
h
,
w
,
c
,
size
,
°ride
,
∑ddög
);

419  
œyî
;

420 
	}
}

422 
avgpoﬁ_œyî
 
	$∑r£_avgpoﬁ
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

424 
b©ch
,
w
,
h
,
c
;

425 
w
 = 
∑øms
.w;

426 
h
 = 
∑øms
.h;

427 
c
 = 
∑øms
.c;

428 
b©ch
=
∑øms
.batch;

429 if(!(
h
 && 
w
 && 
c
)Ë
	`îr‹
("Layer beforeávgpoolÜayer must output image.");

431 
avgpoﬁ_œyî
 
œyî
 = 
	`make_avgpoﬁ_œyî
(
b©ch
,
w
,
h
,
c
);

432  
œyî
;

433 
	}
}

435 
dr›out_œyî
 
	$∑r£_dr›out
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

437 
¥obabûôy
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "probability", .5);

438 
dr›out_œyî
 
œyî
 = 
	`make_dr›out_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
¥obabûôy
);

439 
œyî
.
out_w
 = 
∑øms
.
w
;

440 
œyî
.
out_h
 = 
∑øms
.
h
;

441 
œyî
.
out_c
 = 
∑øms
.
c
;

442  
œyî
;

443 
	}
}

445 
œyî
 
	$∑r£_n‹mÆiz©i⁄
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

447 
Æpha
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "alpha", .0001);

448 
bëa
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "beta" , .75);

449 
k≠∑
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "kappa", 1);

450 
size
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "size", 5);

451 
œyî
 
l
 = 
	`make_n‹mÆiz©i⁄_œyî
(
∑øms
.
b©ch
,Ö¨ams.
w
,Ö¨ams.
h
,Ö¨ams.
c
, 
size
, 
Æpha
, 
bëa
, 
k≠∑
);

452  
l
;

453 
	}
}

455 
œyî
 
	$∑r£_b©chn‹m
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

457 
œyî
 
l
 = 
	`make_b©chn‹m_œyî
(
∑øms
.
b©ch
,Ö¨ams.
w
,Ö¨ams.
h
,Ö¨ams.
c
);

458  
l
;

459 
	}
}

461 
œyî
 
	$∑r£_sh‹tcut
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
, 
√tw‹k
 
√t
)

463 *
l
 = 
	`›ti⁄_föd
(
›ti⁄s
, "from");

464 
ödex
 = 
	`©oi
(
l
);

465 if(
ödex
 < 0Ëödex = 
∑øms
.index + index;

467 
b©ch
 = 
∑øms
.batch;

468 
œyî
 
‰om
 = 
√t
.
œyîs
[
ödex
];

470 
œyî
 
s
 = 
	`make_sh‹tcut_œyî
(
b©ch
, 
ödex
, 
∑øms
.
w
,Ö¨ams.
h
,Ö¨ams.
c
, 
‰om
.
out_w
, from.
out_h
, from.
out_c
);

472 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "linear");

473 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

474 
s
.
a˘iv©i⁄
 =áctivation;

475  
s
;

476 
	}
}

479 
œyî
 
	$∑r£_a˘iv©i⁄
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
)

481 *
a˘iv©i⁄_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "activation", "linear");

482 
ACTIVATION
 
a˘iv©i⁄
 = 
	`gë_a˘iv©i⁄
(
a˘iv©i⁄_s
);

484 
œyî
 
l
 = 
	`make_a˘iv©i⁄_œyî
(
∑øms
.
b©ch
,Ö¨ams.
öputs
, 
a˘iv©i⁄
);

486 
l
.
out_h
 = 
∑øms
.
h
;

487 
l
.
out_w
 = 
∑øms
.
w
;

488 
l
.
out_c
 = 
∑øms
.
c
;

489 
l
.
h
 = 
∑øms
.h;

490 
l
.
w
 = 
∑øms
.w;

491 
l
.
c
 = 
∑øms
.c;

493  
l
;

494 
	}
}

496 
rouã_œyî
 
	$∑r£_rouã
(
li°
 *
›ti⁄s
, 
size_∑øms
 
∑øms
, 
√tw‹k
 
√t
)

498 *
l
 = 
	`›ti⁄_föd
(
›ti⁄s
, "layers");

499 
Àn
 = 
	`°æí
(
l
);

500 if(!
l
Ë
	`îr‹
("Route Layer must specify inputÜayers");

501 
n
 = 1;

502 
i
;

503 
i
 = 0; i < 
Àn
; ++i){

504 i‡(
l
[
i
] =','Ë++
n
;

507 *
œyîs
 = 
	`ˇŒoc
(
n
, ());

508 *
sizes
 = 
	`ˇŒoc
(
n
, ());

509 
i
 = 0; i < 
n
; ++i){

510 
ödex
 = 
	`©oi
(
l
);

511 
l
 = 
	`°rchr
(l, ',')+1;

512 if(
ödex
 < 0Ëödex = 
∑øms
.index + index;

513 
œyîs
[
i
] = 
ödex
;

514 
sizes
[
i
] = 
√t
.
œyîs
[
ödex
].
ouçuts
;

516 
b©ch
 = 
∑øms
.batch;

518 
rouã_œyî
 
œyî
 = 
	`make_rouã_œyî
(
b©ch
, 
n
, 
œyîs
, 
sizes
);

520 
c⁄vﬁuti⁄Æ_œyî
 
fú°
 = 
√t
.
œyîs
[layers[0]];

521 
œyî
.
out_w
 = 
fú°
.out_w;

522 
œyî
.
out_h
 = 
fú°
.out_h;

523 
œyî
.
out_c
 = 
fú°
.out_c;

524 
i
 = 1; i < 
n
; ++i){

525 
ödex
 = 
œyîs
[
i
];

526 
c⁄vﬁuti⁄Æ_œyî
 
√xt
 = 
√t
.
œyîs
[
ödex
];

527 if(
√xt
.
out_w
 =
fú°
.out_w &&Çext.
out_h
 == first.out_h){

528 
œyî
.
out_c
 +
√xt
.out_c;

530 
œyî
.
out_h
 =Üayî.
out_w
 =Üayî.
out_c
 = 0;

534  
œyî
;

535 
	}
}

537 
À¨nög_øã_pﬁicy
 
	$gë_pﬁicy
(*
s
)

539 i‡(
	`°rcmp
(
s
, "øndom")==0Ë 
RANDOM
;

540 i‡(
	`°rcmp
(
s
, "pﬁy")==0Ë 
POLY
;

541 i‡(
	`°rcmp
(
s
, "c⁄°™t")==0Ë 
CONSTANT
;

542 i‡(
	`°rcmp
(
s
, "°ï")==0Ë 
STEP
;

543 i‡(
	`°rcmp
(
s
, "exp")==0Ë 
EXP
;

544 i‡(
	`°rcmp
(
s
, "sigmoid")==0Ë 
SIG
;

545 i‡(
	`°rcmp
(
s
, "°ïs")==0Ë 
STEPS
;

546 
	`Ârötf
(
°dîr
, "Couldn'àfödÖﬁicy %s, goög wôh c⁄°™t\n", 
s
);

547  
CONSTANT
;

548 
	}
}

550 
	$∑r£_√t_›ti⁄s
(
li°
 *
›ti⁄s
, 
√tw‹k
 *
√t
)

552 
√t
->
b©ch
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "batch",1);

553 
√t
->
À¨nög_øã
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "learning_rate", .001);

554 
√t
->
momítum
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "momentum", .9);

555 
√t
->
deˇy
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "decay", .0001);

556 
subdivs
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "subdivisions",1);

557 
√t
->
time_°ïs
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "time_steps",1);

558 
√t
->
nŸruth
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "notruth",0);

559 
√t
->
b©ch
 /
subdivs
;

560 
√t
->
b©ch
 *√t->
time_°ïs
;

561 
√t
->
subdivisi⁄s
 = 
subdivs
;

563 
√t
->
adam
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "adam", 0);

564 if(
√t
->
adam
){

565 
√t
->
B1
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "B1", .9);

566 
√t
->
B2
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "B2", .999);

567 
√t
->
ïs
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "eps", .0000001);

570 
√t
->
h
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "height",0);

571 
√t
->
w
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "width",0);

572 
√t
->
c
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "channels",0);

573 
√t
->
öputs
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "öputs",Çë->
h
 *Çë->
w
 *Çë->
c
);

574 
√t
->
max_¸›
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "max_¸›",√t->
w
*2);

575 
√t
->
mö_¸›
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "mö_¸›",√t->
w
);

576 
√t
->
˚¡î
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "center",0);

578 
√t
->
™gÀ
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "angle", 0);

579 
√t
->
a•e˘
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "aspect", 1);

580 
√t
->
ßtuøti⁄
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "saturation", 1);

581 
√t
->
exposuª
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "exposure", 1);

582 
√t
->
hue
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "hue", 0);

584 if(!
√t
->
öputs
 && !“ë->
h
 &&Çë->
w
 &&Çë->
c
)Ë
	`îr‹
("No inputÖarameters supplied");

586 *
pﬁicy_s
 = 
	`›ti⁄_föd_°r
(
›ti⁄s
, "policy", "constant");

587 
√t
->
pﬁicy
 = 
	`gë_pﬁicy
(
pﬁicy_s
);

588 
√t
->
bu∫_ö
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "burn_in", 0);

589 
√t
->
powî
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "power", 4);

590 if(
√t
->
pﬁicy
 =
STEP
){

591 
√t
->
°ï
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "step", 1);

592 
√t
->
sˇÀ
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "scale", 1);

593 } i‡(
√t
->
pﬁicy
 =
STEPS
){

594 *
l
 = 
	`›ti⁄_föd
(
›ti⁄s
, "steps");

595 *
p
 = 
	`›ti⁄_föd
(
›ti⁄s
, "scales");

596 if(!
l
 || !
p
Ë
	`îr‹
("STEPSÖolicy must have stepsánd scales in cfg file");

598 
Àn
 = 
	`°æí
(
l
);

599 
n
 = 1;

600 
i
;

601 
i
 = 0; i < 
Àn
; ++i){

602 i‡(
l
[
i
] =','Ë++
n
;

604 *
°ïs
 = 
	`ˇŒoc
(
n
, ());

605 *
sˇÀs
 = 
	`ˇŒoc
(
n
, ());

606 
i
 = 0; i < 
n
; ++i){

607 
°ï
 = 
	`©oi
(
l
);

608 
sˇÀ
 = 
	`©of
(
p
);

609 
l
 = 
	`°rchr
(l, ',')+1;

610 
p
 = 
	`°rchr
(p, ',')+1;

611 
°ïs
[
i
] = 
°ï
;

612 
sˇÀs
[
i
] = 
sˇÀ
;

614 
√t
->
sˇÀs
 = scales;

615 
√t
->
°ïs
 = steps;

616 
√t
->
num_°ïs
 = 
n
;

617 } i‡(
√t
->
pﬁicy
 =
EXP
){

618 
√t
->
gamma
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "gamma", 1);

619 } i‡(
√t
->
pﬁicy
 =
SIG
){

620 
√t
->
gamma
 = 
	`›ti⁄_föd_Êﬂt
(
›ti⁄s
, "gamma", 1);

621 
√t
->
°ï
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "step", 1);

622 } i‡(
√t
->
pﬁicy
 =
POLY
 ||Çë->pﬁicy =
RANDOM
){

624 
√t
->
max_b©ches
 = 
	`›ti⁄_föd_öt
(
›ti⁄s
, "max_batches", 0);

625 
	}
}

627 
	$is_√tw‹k
(
£˘i⁄
 *
s
)

629  (
	`°rcmp
(
s
->
ty≥
, "[net]")==0

630 || 
	`°rcmp
(
s
->
ty≥
, "[network]")==0);

631 
	}
}

633 
√tw‹k
 
	$∑r£_√tw‹k_cfg
(*
fûíame
)

635 
li°
 *
£˘i⁄s
 = 
	`ªad_cfg
(
fûíame
);

636 
node
 *
n
 = 
£˘i⁄s
->
‰⁄t
;

637 if(!
n
Ë
	`îr‹
("Config file hasÇo sections");

638 
√tw‹k
 
√t
 = 
	`make_√tw‹k
(
£˘i⁄s
->
size
 - 1);

639 
√t
.
gpu_ödex
 = gpu_index;

640 
size_∑øms
 
∑øms
;

642 
£˘i⁄
 *
s
 = (£˘i⁄ *)
n
->
vÆ
;

643 
li°
 *
›ti⁄s
 = 
s
->options;

644 if(!
	`is_√tw‹k
(
s
)Ë
	`îr‹
("First section must be [net] or [network]");

645 
	`∑r£_√t_›ti⁄s
(
›ti⁄s
, &
√t
);

647 
∑øms
.
h
 = 
√t
.h;

648 
∑øms
.
w
 = 
√t
.w;

649 
∑øms
.
c
 = 
√t
.c;

650 
∑øms
.
öputs
 = 
√t
.inputs;

651 
∑øms
.
b©ch
 = 
√t
.batch;

652 
∑øms
.
time_°ïs
 = 
√t
.time_steps;

653 
∑øms
.
√t
 =Çet;

655 
size_t
 
w‹k•a˚_size
 = 0;

656 
n
 =Ç->
√xt
;

657 
cou¡
 = 0;

658 
	`‰ì_£˘i⁄
(
s
);

659 
	`Ârötf
(
°dîr
, "layer filters size input output\n");

660 
n
){

661 
∑øms
.
ödex
 = 
cou¡
;

662 
	`Ârötf
(
°dîr
, "%5d ", 
cou¡
);

663 
s
 = (
£˘i⁄
 *)
n
->
vÆ
;

664 
›ti⁄s
 = 
s
->options;

665 
œyî
 
l
 = {0};

666 
LAYER_TYPE
 
…
 = 
	`°rög_to_œyî_ty≥
(
s
->
ty≥
);

667 if(
…
 =
CONVOLUTIONAL
){

668 
l
 = 
	`∑r£_c⁄vﬁuti⁄Æ
(
›ti⁄s
, 
∑øms
);

669 }if(
…
 =
DECONVOLUTIONAL
){

670 
l
 = 
	`∑r£_dec⁄vﬁuti⁄Æ
(
›ti⁄s
, 
∑øms
);

671 }if(
…
 =
LOCAL
){

672 
l
 = 
	`∑r£_loˇl
(
›ti⁄s
, 
∑øms
);

673 }if(
…
 =
ACTIVE
){

674 
l
 = 
	`∑r£_a˘iv©i⁄
(
›ti⁄s
, 
∑øms
);

675 }if(
…
 =
RNN
){

676 
l
 = 
	`∑r£_∫n
(
›ti⁄s
, 
∑øms
);

677 }if(
…
 =
GRU
){

678 
l
 = 
	`∑r£_gru
(
›ti⁄s
, 
∑øms
);

679 }i‡(
…
 =
LSTM
) {

680 
l
 = 
	`∑r£_l°m
(
›ti⁄s
, 
∑øms
);

681 }if(
…
 =
CRNN
){

682 
l
 = 
	`∑r£_¸¬
(
›ti⁄s
, 
∑øms
);

683 }if(
…
 =
CONNECTED
){

684 
l
 = 
	`∑r£_c⁄√˘ed
(
›ti⁄s
, 
∑øms
);

685 }if(
…
 =
CROP
){

686 
l
 = 
	`∑r£_¸›
(
›ti⁄s
, 
∑øms
);

687 }if(
…
 =
COST
){

688 
l
 = 
	`∑r£_co°
(
›ti⁄s
, 
∑øms
);

689 }if(
…
 =
REGION
){

690 
l
 = 
	`∑r£_ªgi⁄
(
›ti⁄s
, 
∑øms
);

691 }if(
…
 =
DETECTION
){

692 
l
 = 
	`∑r£_dëe˘i⁄
(
›ti⁄s
, 
∑øms
);

693 }if(
…
 =
SOFTMAX
){

694 
l
 = 
	`∑r£_so·max
(
›ti⁄s
, 
∑øms
);

695 
√t
.
hõørchy
 = 
l
.
so·max_åì
;

696 }if(
…
 =
NORMALIZATION
){

697 
l
 = 
	`∑r£_n‹mÆiz©i⁄
(
›ti⁄s
, 
∑øms
);

698 }if(
…
 =
BATCHNORM
){

699 
l
 = 
	`∑r£_b©chn‹m
(
›ti⁄s
, 
∑øms
);

700 }if(
…
 =
MAXPOOL
){

701 
l
 = 
	`∑r£_maxpoﬁ
(
›ti⁄s
, 
∑øms
);

702 }if(
…
 =
REORG
){

703 
l
 = 
	`∑r£_ª‹g
(
›ti⁄s
, 
∑øms
);

704 }if(
…
 =
AVGPOOL
){

705 
l
 = 
	`∑r£_avgpoﬁ
(
›ti⁄s
, 
∑øms
);

706 }if(
…
 =
ROUTE
){

707 
l
 = 
	`∑r£_rouã
(
›ti⁄s
, 
∑øms
, 
√t
);

708 }if(
…
 =
SHORTCUT
){

709 
l
 = 
	`∑r£_sh‹tcut
(
›ti⁄s
, 
∑øms
, 
√t
);

710 }if(
…
 =
DROPOUT
){

711 
l
 = 
	`∑r£_dr›out
(
›ti⁄s
, 
∑øms
);

712 
l
.
ouçut
 = 
√t
.
œyîs
[
cou¡
-1].output;

713 
l
.
dñè
 = 
√t
.
œyîs
[
cou¡
-1].delta;

714 #ifde‡
GPU


715 
l
.
ouçut_gpu
 = 
√t
.
œyîs
[
cou¡
-1].output_gpu;

716 
l
.
dñè_gpu
 = 
√t
.
œyîs
[
cou¡
-1].delta_gpu;

719 
	`Ârötf
(
°dîr
, "Ty≥ÇŸÑecognized: %s\n", 
s
->
ty≥
);

721 
l
.
åuth
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "truth", 0);

722 
l
.
⁄lyf‹w¨d
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "onlyforward", 0);

723 
l
.
°›backw¨d
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "stopbackward", 0);

724 
l
.
d⁄éﬂd
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "dontload", 0);

725 
l
.
d⁄éﬂdsˇÀs
 = 
	`›ti⁄_föd_öt_quõt
(
›ti⁄s
, "dontloadscales", 0);

726 
l
.
À¨nög_øã_sˇÀ
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "learning_rate", 1);

727 
l
.
smoŸh
 = 
	`›ti⁄_föd_Êﬂt_quõt
(
›ti⁄s
, "smooth", 0);

728 
	`›ti⁄_unu£d
(
›ti⁄s
);

729 
√t
.
œyîs
[
cou¡
] = 
l
;

730 i‡(
l
.
w‹k•a˚_size
 > workspace_size) workspace_size =Ü.workspace_size;

731 
	`‰ì_£˘i⁄
(
s
);

732 
n
 =Ç->
√xt
;

733 ++
cou¡
;

734 if(
n
){

735 
∑øms
.
h
 = 
l
.
out_h
;

736 
∑øms
.
w
 = 
l
.
out_w
;

737 
∑øms
.
c
 = 
l
.
out_c
;

738 
∑øms
.
öputs
 = 
l
.
ouçuts
;

741 
	`‰ì_li°
(
£˘i⁄s
);

742 
œyî
 
out
 = 
	`gë_√tw‹k_ouçut_œyî
(
√t
);

743 
√t
.
ouçuts
 = 
out
.outputs;

744 
√t
.
åuths
 = 
out
.
ouçuts
;

745 if(
√t
.
œyîs
[√t.
n
-1].
åuths
)Çet.truths =Çet.layers[net.n-1].truths;

746 
√t
.
ouçut
 = 
out
.output;

747 
√t
.
öput
 = 
	`ˇŒoc
“ë.
öputs
*√t.
b©ch
, ());

748 
√t
.
åuth
 = 
	`ˇŒoc
“ë.
åuths
*√t.
b©ch
, ());

749 #ifde‡
GPU


750 
√t
.
ouçut_gpu
 = 
out
.output_gpu;

751 
√t
.
öput_gpu
 = 
	`cuda_make_¨øy
“ë.
öput
,Çë.
öputs
*√t.
b©ch
);

752 
√t
.
åuth_gpu
 = 
	`cuda_make_¨øy
“ë.
åuth
,Çë.
åuths
*√t.
b©ch
);

754 if(
w‹k•a˚_size
){

756 #ifde‡
GPU


757 if(
gpu_ödex
 >= 0){

758 
√t
.
w‹k•a˚
 = 
	`cuda_make_¨øy
(0, (
w‹k•a˚_size
-1)/()+1);

760 
√t
.
w‹k•a˚
 = 
	`ˇŒoc
(1, 
w‹k•a˚_size
);

763 
√t
.
w‹k•a˚
 = 
	`ˇŒoc
(1, 
w‹k•a˚_size
);

766  
√t
;

767 
	}
}

769 
li°
 *
	$ªad_cfg
(*
fûíame
)

771 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

772 if(
fûe
 =0Ë
	`fûe_îr‹
(
fûíame
);

773 *
löe
;

774 
nu
 = 0;

775 
li°
 *
›ti⁄s
 = 
	`make_li°
();

776 
£˘i⁄
 *
cuºít
 = 0;

777 (
löe
=
	`fgël
(
fûe
)) != 0){

778 ++ 
nu
;

779 
	`°rù
(
löe
);

780 
löe
[0]){

782 
cuºít
 = 
	`mÆloc
((
£˘i⁄
));

783 
	`li°_ö£π
(
›ti⁄s
, 
cuºít
);

784 
cuºít
->
›ti⁄s
 = 
	`make_li°
();

785 
cuºít
->
ty≥
 = 
löe
;

790 
	`‰ì
(
löe
);

793 if(!
	`ªad_›ti⁄
(
löe
, 
cuºít
->
›ti⁄s
)){

794 
	`Ârötf
(
°dîr
, "C⁄fig fûêîr‹Üöê%d, couldÖ¨£: %s\n", 
nu
, 
löe
);

795 
	`‰ì
(
löe
);

800 
	`f˛o£
(
fûe
);

801  
›ti⁄s
;

802 
	}
}

804 
	$ßve_c⁄vﬁuti⁄Æ_weights_bö¨y
(
œyî
 
l
, 
FILE
 *
Â
)

806 #ifde‡
GPU


807 if(
gpu_ödex
 >= 0){

808 
	`puŒ_c⁄vﬁuti⁄Æ_œyî
(
l
);

811 
	`bö¨ize_weights
(
l
.
weights
,Ü.
n
,Ü.
c
*l.
size
*l.size,Ü.
bö¨y_weights
);

812 
size
 = 
l
.
c
*l.size*l.size;

813 
i
, 
j
, 
k
;

814 
	`fwrôe
(
l
.
bü£s
, (),Ü.
n
, 
Â
);

815 i‡(
l
.
b©ch_n‹mÆize
){

816 
	`fwrôe
(
l
.
sˇÀs
, (),Ü.
n
, 
Â
);

817 
	`fwrôe
(
l
.
rﬁlög_món
, (),Ü.
n
, 
Â
);

818 
	`fwrôe
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
n
, 
Â
);

820 
i
 = 0; i < 
l
.
n
; ++i){

821 
món
 = 
l
.
bö¨y_weights
[
i
*
size
];

822 if(
món
 < 0) mean = -mean;

823 
	`fwrôe
(&
món
, (), 1, 
Â
);

824 
j
 = 0; j < 
size
/8; ++j){

825 
ödex
 = 
i
*
size
 + 
j
*8;

826 
c
 = 0;

827 
k
 = 0; k < 8; ++k){

828 i‡(
j
*8 + 
k
 >
size
) ;

829 i‡(
l
.
bö¨y_weights
[
ödex
 + 
k
] > 0Ë
c
 = (c | 1<<k);

831 
	`fwrôe
(&
c
, (), 1, 
Â
);

834 
	}
}

836 
	$ßve_c⁄vﬁuti⁄Æ_weights
(
œyî
 
l
, 
FILE
 *
Â
)

838 if(
l
.
bö¨y
){

842 #ifde‡
GPU


843 if(
gpu_ödex
 >= 0){

844 
	`puŒ_c⁄vﬁuti⁄Æ_œyî
(
l
);

847 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

848 
	`fwrôe
(
l
.
bü£s
, (),Ü.
n
, 
Â
);

849 i‡(
l
.
b©ch_n‹mÆize
){

850 
	`fwrôe
(
l
.
sˇÀs
, (),Ü.
n
, 
Â
);

851 
	`fwrôe
(
l
.
rﬁlög_món
, (),Ü.
n
, 
Â
);

852 
	`fwrôe
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
n
, 
Â
);

854 
	`fwrôe
(
l
.
weights
, (), 
num
, 
Â
);

855 
	}
}

857 
	$ßve_b©chn‹m_weights
(
œyî
 
l
, 
FILE
 *
Â
)

859 #ifde‡
GPU


860 if(
gpu_ödex
 >= 0){

861 
	`puŒ_b©chn‹m_œyî
(
l
);

864 
	`fwrôe
(
l
.
sˇÀs
, (),Ü.
c
, 
Â
);

865 
	`fwrôe
(
l
.
rﬁlög_món
, (),Ü.
c
, 
Â
);

866 
	`fwrôe
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
c
, 
Â
);

867 
	}
}

869 
	$ßve_c⁄√˘ed_weights
(
œyî
 
l
, 
FILE
 *
Â
)

871 #ifde‡
GPU


872 if(
gpu_ödex
 >= 0){

873 
	`puŒ_c⁄√˘ed_œyî
(
l
);

876 
	`fwrôe
(
l
.
bü£s
, (),Ü.
ouçuts
, 
Â
);

877 
	`fwrôe
(
l
.
weights
, (),Ü.
ouçuts
*l.
öputs
, 
Â
);

878 i‡(
l
.
b©ch_n‹mÆize
){

879 
	`fwrôe
(
l
.
sˇÀs
, (),Ü.
ouçuts
, 
Â
);

880 
	`fwrôe
(
l
.
rﬁlög_món
, (),Ü.
ouçuts
, 
Â
);

881 
	`fwrôe
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
ouçuts
, 
Â
);

883 
	}
}

885 
	$ßve_weights_u±o
(
√tw‹k
 
√t
, *
fûíame
, 
cutoff
)

887 #ifde‡
GPU


888 if(
√t
.
gpu_ödex
 >= 0){

889 
	`cuda_£t_devi˚
(
√t
.
gpu_ödex
);

892 
	`Ârötf
(
°dîr
, "Savög weight†tÿ%s\n", 
fûíame
);

893 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "wb");

894 if(!
Â
Ë
	`fûe_îr‹
(
fûíame
);

896 
maj‹
 = 0;

897 
mö‹
 = 2;

898 
ªvisi⁄
 = 0;

899 
	`fwrôe
(&
maj‹
, (), 1, 
Â
);

900 
	`fwrôe
(&
mö‹
, (), 1, 
Â
);

901 
	`fwrôe
(&
ªvisi⁄
, (), 1, 
Â
);

902 
	`fwrôe
(
√t
.
£í
, (
size_t
), 1, 
Â
);

904 
i
;

905 
i
 = 0; i < 
√t
.
n
 && i < 
cutoff
; ++i){

906 
œyî
 
l
 = 
√t
.
œyîs
[
i
];

907 if(
l
.
ty≥
 =
CONVOLUTIONAL
 ||Ü.ty≥ =
DECONVOLUTIONAL
){

908 
	`ßve_c⁄vﬁuti⁄Æ_weights
(
l
, 
Â
);

909 } if(
l
.
ty≥
 =
CONNECTED
){

910 
	`ßve_c⁄√˘ed_weights
(
l
, 
Â
);

911 } if(
l
.
ty≥
 =
BATCHNORM
){

912 
	`ßve_b©chn‹m_weights
(
l
, 
Â
);

913 } if(
l
.
ty≥
 =
RNN
){

914 
	`ßve_c⁄√˘ed_weights
(*(
l
.
öput_œyî
), 
Â
);

915 
	`ßve_c⁄√˘ed_weights
(*(
l
.
£lf_œyî
), 
Â
);

916 
	`ßve_c⁄√˘ed_weights
(*(
l
.
ouçut_œyî
), 
Â
);

917 } i‡(
l
.
ty≥
 =
LSTM
) {

918 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wi
), 
Â
);

919 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wf
), 
Â
);

920 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wo
), 
Â
);

921 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wg
), 
Â
);

922 
	`ßve_c⁄√˘ed_weights
(*(
l
.
ui
), 
Â
);

923 
	`ßve_c⁄√˘ed_weights
(*(
l
.
uf
), 
Â
);

924 
	`ßve_c⁄√˘ed_weights
(*(
l
.
uo
), 
Â
);

925 
	`ßve_c⁄√˘ed_weights
(*(
l
.
ug
), 
Â
);

926 } i‡(
l
.
ty≥
 =
GRU
) {

928 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wz
), 
Â
);

929 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wr
), 
Â
);

930 
	`ßve_c⁄√˘ed_weights
(*(
l
.
wh
), 
Â
);

931 
	`ßve_c⁄√˘ed_weights
(*(
l
.
uz
), 
Â
);

932 
	`ßve_c⁄√˘ed_weights
(*(
l
.
ur
), 
Â
);

933 
	`ßve_c⁄√˘ed_weights
(*(
l
.
uh
), 
Â
);

935 
	`ßve_c⁄√˘ed_weights
(*(
l
.
ª£t_œyî
), 
Â
);

936 
	`ßve_c⁄√˘ed_weights
(*(
l
.
upd©e_œyî
), 
Â
);

937 
	`ßve_c⁄√˘ed_weights
(*(
l
.
°©e_œyî
), 
Â
);

939 } if(
l
.
ty≥
 =
CRNN
){

940 
	`ßve_c⁄vﬁuti⁄Æ_weights
(*(
l
.
öput_œyî
), 
Â
);

941 
	`ßve_c⁄vﬁuti⁄Æ_weights
(*(
l
.
£lf_œyî
), 
Â
);

942 
	`ßve_c⁄vﬁuti⁄Æ_weights
(*(
l
.
ouçut_œyî
), 
Â
);

943 } if(
l
.
ty≥
 =
LOCAL
){

944 #ifde‡
GPU


945 if(
gpu_ödex
 >= 0){

946 
	`puŒ_loˇl_œyî
(
l
);

949 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

950 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

951 
	`fwrôe
(
l
.
bü£s
, (),Ü.
ouçuts
, 
Â
);

952 
	`fwrôe
(
l
.
weights
, (), 
size
, 
Â
);

955 
	`f˛o£
(
Â
);

956 
	}
}

957 
	$ßve_weights
(
√tw‹k
 
√t
, *
fûíame
)

959 
	`ßve_weights_u±o
(
√t
, 
fûíame
,Çë.
n
);

960 
	}
}

962 
	$å™•o£_m©rix
(*
a
, 
rows
, 
cﬁs
)

964 *
å™•o£
 = 
	`ˇŒoc
(
rows
*
cﬁs
, ());

965 
x
, 
y
;

966 
x
 = 0; x < 
rows
; ++x){

967 
y
 = 0; y < 
cﬁs
; ++y){

968 
å™•o£
[
y
*
rows
 + 
x
] = 
a
[x*
cﬁs
 + y];

971 
	`mem˝y
(
a
, 
å™•o£
, 
rows
*
cﬁs
*());

972 
	`‰ì
(
å™•o£
);

973 
	}
}

975 
	$lﬂd_c⁄√˘ed_weights
(
œyî
 
l
, 
FILE
 *
Â
, 
å™•o£
)

977 
	`‰ód
(
l
.
bü£s
, (),Ü.
ouçuts
, 
Â
);

978 
	`‰ód
(
l
.
weights
, (),Ü.
ouçuts
*l.
öputs
, 
Â
);

979 if(
å™•o£
){

980 
	`å™•o£_m©rix
(
l
.
weights
,Ü.
öputs
,Ü.
ouçuts
);

984 i‡(
l
.
b©ch_n‹mÆize
 && (!l.
d⁄éﬂdsˇÀs
)){

985 
	`‰ód
(
l
.
sˇÀs
, (),Ü.
ouçuts
, 
Â
);

986 
	`‰ód
(
l
.
rﬁlög_món
, (),Ü.
ouçuts
, 
Â
);

987 
	`‰ód
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
ouçuts
, 
Â
);

992 #ifde‡
GPU


993 if(
gpu_ödex
 >= 0){

994 
	`push_c⁄√˘ed_œyî
(
l
);

997 
	}
}

999 
	$lﬂd_b©chn‹m_weights
(
œyî
 
l
, 
FILE
 *
Â
)

1001 
	`‰ód
(
l
.
sˇÀs
, (),Ü.
c
, 
Â
);

1002 
	`‰ód
(
l
.
rﬁlög_món
, (),Ü.
c
, 
Â
);

1003 
	`‰ód
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
c
, 
Â
);

1004 #ifde‡
GPU


1005 if(
gpu_ödex
 >= 0){

1006 
	`push_b©chn‹m_œyî
(
l
);

1009 
	}
}

1011 
	$lﬂd_c⁄vﬁuti⁄Æ_weights_bö¨y
(
œyî
 
l
, 
FILE
 *
Â
)

1013 
	`‰ód
(
l
.
bü£s
, (),Ü.
n
, 
Â
);

1014 i‡(
l
.
b©ch_n‹mÆize
 && (!l.
d⁄éﬂdsˇÀs
)){

1015 
	`‰ód
(
l
.
sˇÀs
, (),Ü.
n
, 
Â
);

1016 
	`‰ód
(
l
.
rﬁlög_món
, (),Ü.
n
, 
Â
);

1017 
	`‰ód
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
n
, 
Â
);

1019 
size
 = 
l
.
c
*l.size*l.size;

1020 
i
, 
j
, 
k
;

1021 
i
 = 0; i < 
l
.
n
; ++i){

1022 
món
 = 0;

1023 
	`‰ód
(&
món
, (), 1, 
Â
);

1024 
j
 = 0; j < 
size
/8; ++j){

1025 
ödex
 = 
i
*
size
 + 
j
*8;

1026 
c
 = 0;

1027 
	`‰ód
(&
c
, (), 1, 
Â
);

1028 
k
 = 0; k < 8; ++k){

1029 i‡(
j
*8 + 
k
 >
size
) ;

1030 
l
.
weights
[
ödex
 + 
k
] = (
c
 & 1<<kË? 
món
 : -mean;

1034 #ifde‡
GPU


1035 if(
gpu_ödex
 >= 0){

1036 
	`push_c⁄vﬁuti⁄Æ_œyî
(
l
);

1039 
	}
}

1041 
	$lﬂd_c⁄vﬁuti⁄Æ_weights
(
œyî
 
l
, 
FILE
 *
Â
)

1043 if(
l
.
bö¨y
){

1047 
num
 = 
l
.
n
*l.
c
*l.
size
*l.size;

1048 
	`‰ód
(
l
.
bü£s
, (),Ü.
n
, 
Â
);

1049 i‡(
l
.
b©ch_n‹mÆize
 && (!l.
d⁄éﬂdsˇÀs
)){

1050 
	`‰ód
(
l
.
sˇÀs
, (),Ü.
n
, 
Â
);

1051 
	`‰ód
(
l
.
rﬁlög_món
, (),Ü.
n
, 
Â
);

1052 
	`‰ód
(
l
.
rﬁlög_v¨ün˚
, (),Ü.
n
, 
Â
);

1054 
i
;

1055 
i
 = 0; i < 
l
.
n
; ++i){

1056 
	`¥ötf
("%g, ", 
l
.
rﬁlög_món
[
i
]);

1058 
	`¥ötf
("\n");

1059 
i
 = 0; i < 
l
.
n
; ++i){

1060 
	`¥ötf
("%g, ", 
l
.
rﬁlög_v¨ün˚
[
i
]);

1062 
	`¥ötf
("\n");

1065 
	`fûl_˝u
(
l
.
n
, 0,Ü.
rﬁlög_món
, 1);

1066 
	`fûl_˝u
(
l
.
n
, 0,Ü.
rﬁlög_v¨ün˚
, 1);

1069 
	`‰ód
(
l
.
weights
, (), 
num
, 
Â
);

1071 i‡(
l
.
Êù≥d
) {

1072 
	`å™•o£_m©rix
(
l
.
weights
,Ü.
c
*l.
size
*l.size,Ü.
n
);

1075 #ifde‡
GPU


1076 if(
gpu_ödex
 >= 0){

1077 
	`push_c⁄vﬁuti⁄Æ_œyî
(
l
);

1080 
	}
}

1083 
	$lﬂd_weights_u±o
(
√tw‹k
 *
√t
, *
fûíame
, 
°¨t
, 
cutoff
)

1085 #ifde‡
GPU


1086 if(
√t
->
gpu_ödex
 >= 0){

1087 
	`cuda_£t_devi˚
(
√t
->
gpu_ödex
);

1090 
	`Ârötf
(
°dîr
, "Lﬂdög weight†‰om %s...", 
fûíame
);

1091 
	`fÊush
(
°dout
);

1092 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

1093 if(!
Â
Ë
	`fûe_îr‹
(
fûíame
);

1095 
maj‹
;

1096 
mö‹
;

1097 
ªvisi⁄
;

1098 
	`‰ód
(&
maj‹
, (), 1, 
Â
);

1099 
	`‰ód
(&
mö‹
, (), 1, 
Â
);

1100 
	`‰ód
(&
ªvisi⁄
, (), 1, 
Â
);

1101 i‡((
maj‹
*10 + 
mö‹
) >= 2){

1102 
	`‰ód
(
√t
->
£í
, (
size_t
), 1, 
Â
);

1104 
i£í
 = 0;

1105 
	`‰ód
(&
i£í
, (), 1, 
Â
);

1106 *
√t
->
£í
 = 
i£í
;

1108 
å™•o£
 = (
maj‹
 > 1000Ë|| (
mö‹
 > 1000);

1110 
i
;

1111 
i
 = 
°¨t
; i < 
√t
->
n
 && i < 
cutoff
; ++i){

1112 
œyî
 
l
 = 
√t
->
œyîs
[
i
];

1113 
	`LOGD
("œyî:Åy≥=%dá˘iv©i⁄=%d i≈uts=%d ouçuts=%dÇweights=%d h=%d w=%d c=%d out_h=%d out_w=%d out_c=%dÇ=%d max_boxes=%d\n", 
l
.
ty≥
,

1114 
l
.
a˘iv©i⁄
,

1115 
l
.
öputs
,

1116 
l
.
ouçuts
,

1117 
l
.
nweights
,

1118 
l
.
h
,

1119 
l
.
w
,

1120 
l
.
c
,

1121 
l
.
out_h
,

1122 
l
.
out_w
,

1123 
l
.
out_c
,

1124 
l
.
n
,

1125 
l
.
max_boxes


1127 i‡(
l
.
d⁄éﬂd
) ;

1128 if(
l
.
ty≥
 =
CONVOLUTIONAL
 ||Ü.ty≥ =
DECONVOLUTIONAL
){

1129 
	`lﬂd_c⁄vﬁuti⁄Æ_weights
(
l
, 
Â
);

1131 if(
l
.
ty≥
 =
CONNECTED
){

1132 
	`lﬂd_c⁄√˘ed_weights
(
l
, 
Â
, 
å™•o£
);

1134 if(
l
.
ty≥
 =
BATCHNORM
){

1135 
	`lﬂd_b©chn‹m_weights
(
l
, 
Â
);

1137 if(
l
.
ty≥
 =
CRNN
){

1138 
	`lﬂd_c⁄vﬁuti⁄Æ_weights
(*(
l
.
öput_œyî
), 
Â
);

1139 
	`lﬂd_c⁄vﬁuti⁄Æ_weights
(*(
l
.
£lf_œyî
), 
Â
);

1140 
	`lﬂd_c⁄vﬁuti⁄Æ_weights
(*(
l
.
ouçut_œyî
), 
Â
);

1142 if(
l
.
ty≥
 =
RNN
){

1143 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
öput_œyî
), 
Â
, 
å™•o£
);

1144 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
£lf_œyî
), 
Â
, 
å™•o£
);

1145 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
ouçut_œyî
), 
Â
, 
å™•o£
);

1147 i‡(
l
.
ty≥
 =
LSTM
) {

1148 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wi
), 
Â
, 
å™•o£
);

1149 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wf
), 
Â
, 
å™•o£
);

1150 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wo
), 
Â
, 
å™•o£
);

1151 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wg
), 
Â
, 
å™•o£
);

1152 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
ui
), 
Â
, 
å™•o£
);

1153 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
uf
), 
Â
, 
å™•o£
);

1154 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
uo
), 
Â
, 
å™•o£
);

1155 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
ug
), 
Â
, 
å™•o£
);

1157 i‡(
l
.
ty≥
 =
GRU
) {

1159 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wz
), 
Â
, 
å™•o£
);

1160 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wr
), 
Â
, 
å™•o£
);

1161 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
wh
), 
Â
, 
å™•o£
);

1162 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
uz
), 
Â
, 
å™•o£
);

1163 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
ur
), 
Â
, 
å™•o£
);

1164 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
uh
), 
Â
, 
å™•o£
);

1166 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
ª£t_œyî
), 
Â
, 
å™•o£
);

1167 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
upd©e_œyî
), 
Â
, 
å™•o£
);

1168 
	`lﬂd_c⁄√˘ed_weights
(*(
l
.
°©e_œyî
), 
Â
, 
å™•o£
);

1171 if(
l
.
ty≥
 =
LOCAL
){

1172 
loˇti⁄s
 = 
l
.
out_w
*l.
out_h
;

1173 
size
 = 
l
.size*l.size*l.
c
*l.
n
*
loˇti⁄s
;

1174 
	`‰ód
(
l
.
bü£s
, (),Ü.
ouçuts
, 
Â
);

1175 
	`‰ód
(
l
.
weights
, (), 
size
, 
Â
);

1176 #ifde‡
GPU


1177 if(
gpu_ödex
 >= 0){

1178 
	`push_loˇl_œyî
(
l
);

1183 
	`Ârötf
(
°dîr
, "Done!\n");

1184 
	`f˛o£
(
Â
);

1185 
	}
}

1187 
	$lﬂd_weights
(
√tw‹k
 *
√t
, *
fûíame
)

1189 
	`lﬂd_weights_u±o
(
√t
, 
fûíame
, 0,Çë->
n
);

1190 
	}
}

	@src/parser.h

1 #i‚de‡
PARSER_H


2 
	#PARSER_H


	)

3 
	~"d¨k√t.h
"

4 
	~"√tw‹k.h
"

6 
ßve_√tw‹k
(
√tw‹k
 
√t
, *
fûíame
);

7 
ßve_weights_doubÀ
(
√tw‹k
 
√t
, *
fûíame
);

	@src/pythonc_iface.c

1 
	~"Pyth⁄.h
"

3 
PyObje˘
 *
	gdn_ˇŒback
 = 
NULL
;

6 
PyObje˘
 *

7 
	$dn_£t_ˇŒback
(
PyObje˘
 *
PyFunc
)

9 
PyObje˘
 *
ªsu…
 = 
NULL
;

11 if(!
PyFunc
)

12  
ªsu…
;

14 
	`¥ötf
("set callback..\n");

17 i‡(!
	`PyCÆœbÀ_Check
(
PyFunc
)) {

18 
	`¥ötf
("error\n");

19 
	`PyEº_SëSåög
(
PyExc_Ty≥Eº‹
, "parameter must be callable");

20  
NULL
;

22 
	`¥ötf
("valid callable found\n");

23 
	`Py_XINCREF
(
PyFunc
);

24 
	`Py_XDECREF
(
dn_ˇŒback
);

25 
dn_ˇŒback
 = 
PyFunc
;

27 
	`Py_INCREF
(
Py_N⁄e
);

28 
ªsu…
 = 
Py_N⁄e
;

30  
ªsu…
;

31 
	}
}

34 
	$dn_ã°
()

36 
	`¥ötf
("testttttt\n");

37 
	}
}

	@src/region_layer.c

1 
	~"ªgi⁄_œyî.h
"

2 
	~"a˘iv©i⁄s.h
"

3 
	~"bœs.h
"

4 
	~"box.h
"

5 
	~"cuda.h
"

6 
	~"utûs.h
"

8 
	~<°dio.h
>

9 
	~<as£π.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

13 
œyî
 
	$make_ªgi⁄_œyî
(
b©ch
, 
w
, 
h
, 
n
, 
˛as£s
, 
co‹ds
)

15 
œyî
 
l
 = {0};

16 
l
.
ty≥
 = 
REGION
;

18 
l
.
n
 =Ç;

19 
l
.
b©ch
 = batch;

20 
l
.
h
 = h;

21 
l
.
w
 = w;

22 
l
.
c
 = 
n
*(
˛as£s
 + 
co‹ds
 + 1);

23 
l
.
out_w
 =Ü.
w
;

24 
l
.
out_h
 =Ü.
h
;

25 
l
.
out_c
 =Ü.
c
;

26 
l
.
˛as£s
 = classes;

27 
l
.
co‹ds
 = coords;

28 
l
.
co°
 = 
	`ˇŒoc
(1, ());

29 
l
.
bü£s
 = 
	`ˇŒoc
(
n
*2, ());

30 
l
.
büs_upd©es
 = 
	`ˇŒoc
(
n
*2, ());

31 
l
.
ouçuts
 = 
h
*
w
*
n
*(
˛as£s
 + 
co‹ds
 + 1);

32 
l
.
öputs
 =Ü.
ouçuts
;

33 
l
.
åuths
 = 30*÷.
co‹ds
 + 1);

34 
l
.
dñè
 = 
	`ˇŒoc
(
b©ch
*l.
ouçuts
, ());

35 
l
.
ouçut
 = 
	`ˇŒoc
(
b©ch
*l.
ouçuts
, ());

36 
i
;

37 
i
 = 0; i < 
n
*2; ++i){

38 
l
.
bü£s
[
i
] = .5;

41 
l
.
f‹w¨d
 = 
f‹w¨d_ªgi⁄_œyî
;

42 
l
.
backw¨d
 = 
backw¨d_ªgi⁄_œyî
;

43 #ifde‡
GPU


44 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_ªgi⁄_œyî_gpu
;

45 
l
.
backw¨d_gpu
 = 
backw¨d_ªgi⁄_œyî_gpu
;

46 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
b©ch
*l.
ouçuts
);

47 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
b©ch
*l.
ouçuts
);

50 
	`Ârötf
(
°dîr
, "detection\n");

51 
	`§™d
(0);

53  
l
;

54 
	}
}

56 
	$ªsize_ªgi⁄_œyî
(
œyî
 *
l
, 
w
, 
h
)

58 
l
->
w
 = w;

59 
l
->
h
 = h;

61 
l
->
ouçuts
 = 
h
*
w
*l->
n
*÷->
˛as£s
 +Ü->
co‹ds
 + 1);

62 
l
->
öputs
 =Ü->
ouçuts
;

64 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut,Ü->
b©ch
*l->
ouçuts
*());

65 
l
->
dñè
 = 
	`ªÆloc
÷->dñè,Ü->
b©ch
*l->
ouçuts
*());

67 #ifde‡
GPU


68 
	`cuda_‰ì
(
l
->
dñè_gpu
);

69 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

71 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
,Ü->
b©ch
*l->
ouçuts
);

72 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
b©ch
*l->
ouçuts
);

74 
	}
}

76 
box
 
	$gë_ªgi⁄_box
(*
x
, *
bü£s
, 
n
, 
ödex
, 
i
, 
j
, 
w
, 
h
, 
°ride
)

78 
box
 
b
;

79 
b
.
x
 = (
i
 + x[
ödex
 + 0*
°ride
]Ë/ 
w
;

80 
b
.
y
 = (
j
 + 
x
[
ödex
 + 1*
°ride
]Ë/ 
h
;

81 
b
.
w
 = 
	`exp
(
x
[
ödex
 + 2*
°ride
]Ë* 
bü£s
[2*
n
] / w;

82 
b
.
h
 = 
	`exp
(
x
[
ödex
 + 3*
°ride
]Ë* 
bü£s
[2*
n
+1] / h;

83  
b
;

84 
	}
}

86 
	$dñè_ªgi⁄_box
(
box
 
åuth
, *
x
, *
bü£s
, 
n
, 
ödex
, 
i
, 
j
, 
w
, 
h
, *
dñè
, 
sˇÀ
, 
°ride
)

88 
box
 
¥ed
 = 
	`gë_ªgi⁄_box
(
x
, 
bü£s
, 
n
, 
ödex
, 
i
, 
j
, 
w
, 
h
, 
°ride
);

89 
iou
 = 
	`box_iou
(
¥ed
, 
åuth
);

91 
tx
 = (
åuth
.
x
*
w
 - 
i
);

92 
ty
 = (
åuth
.
y
*
h
 - 
j
);

93 
tw
 = 
	`log
(
åuth
.
w
*w / 
bü£s
[2*
n
]);

94 
th
 = 
	`log
(
åuth
.
h
*h / 
bü£s
[2*
n
 + 1]);

96 
dñè
[
ödex
 + 0*
°ride
] = 
sˇÀ
 * (
tx
 - 
x
[index + 0*stride]);

97 
dñè
[
ödex
 + 1*
°ride
] = 
sˇÀ
 * (
ty
 - 
x
[index + 1*stride]);

98 
dñè
[
ödex
 + 2*
°ride
] = 
sˇÀ
 * (
tw
 - 
x
[index + 2*stride]);

99 
dñè
[
ödex
 + 3*
°ride
] = 
sˇÀ
 * (
th
 - 
x
[index + 3*stride]);

100  
iou
;

101 
	}
}

103 
	$dñè_ªgi⁄_˛ass
(*
ouçut
, *
dñè
, 
ödex
, 
˛ass
, 
˛as£s
, 
åì
 *
hõr
, 
sˇÀ
, 
°ride
, *
avg_ˇt
)

105 
i
, 
n
;

106 if(
hõr
){

107 
¥ed
 = 1;

108 
˛ass
 >= 0){

109 
¥ed
 *
ouçut
[
ödex
 + 
°ride
*
˛ass
];

110 
g
 = 
hõr
->
group
[
˛ass
];

111 
off£t
 = 
hõr
->
group_off£t
[
g
];

112 
i
 = 0; i < 
hõr
->
group_size
[
g
]; ++i){

113 
dñè
[
ödex
 + 
°ride
*(
off£t
 + 
i
)] = 
sˇÀ
 * (0 - 
ouçut
[index + stride*(offset + i)]);

115 
dñè
[
ödex
 + 
°ride
*
˛ass
] = 
sˇÀ
 * (1 - 
ouçut
[index + stride*class]);

117 
˛ass
 = 
hõr
->
∑ª¡
[class];

119 *
avg_ˇt
 +
¥ed
;

121 
n
 = 0;Ç < 
˛as£s
; ++n){

122 
dñè
[
ödex
 + 
°ride
*
n
] = 
sˇÀ
 * ((“ =
˛ass
)?1 : 0Ë- 
ouçut
[index + stride*n]);

123 if(
n
 =
˛ass
Ë*
avg_ˇt
 +
ouçut
[
ödex
 + 
°ride
*n];

126 
	}
}

128 
	$logô
(
x
)

130  
	`log
(
x
/(1.-x));

131 
	}
}

133 
	$ti¢™
(
x
)

135  (
x
 != x);

136 
	}
}

138 
	$íåy_ödex
(
œyî
 
l
, 
b©ch
, 
loˇti⁄
, 
íåy
)

140 
n
 = 
loˇti⁄
 / (
l
.
w
*l.
h
);

141 
loc
 = 
loˇti⁄
 % (
l
.
w
*l.
h
);

142  
b©ch
*
l
.
ouçuts
 + 
n
*l.
w
*l.
h
*÷.
co‹ds
+l.
˛as£s
+1Ë+ 
íåy
*l.w*l.h + 
loc
;

143 
	}
}

145 
	$f‹w¨d_ªgi⁄_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

147 
i
,
j
,
b
,
t
,
n
;

148 
	`mem˝y
(
l
.
ouçut
, 
√t
.
öput
,Ü.
ouçuts
*l.
b©ch
*());

150 #i‚de‡
GPU


151 
b
 = 0; b < 
l
.
b©ch
; ++b){

152 
n
 = 0;Ç < 
l
.n; ++n){

153 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
, 0);

154 
	`a˘iv©e_¨øy
(
l
.
ouçut
 + 
ödex
, 2*l.
w
*l.
h
, 
LOGISTIC
);

155 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
,Ü.
co‹ds
);

156 if(!
l
.
background
Ë
	`a˘iv©e_¨øy
÷.
ouçut
 + 
ödex
,Ü.
w
*l.
h
, 
LOGISTIC
);

159 i‡(
l
.
so·max_åì
){

160 
i
;

161 
cou¡
 = 
l
.
co‹ds
 + 1;

162 
i
 = 0; i < 
l
.
so·max_åì
->
groups
; ++i) {

163 
group_size
 = 
l
.
so·max_åì
->group_size[
i
];

164 
	`so·max_˝u
(
√t
.
öput
 + 
cou¡
, 
group_size
, 
l
.
b©ch
,Ü.
öputs
,Ü.
n
*l.
w
*l.
h
, 1,Ü.n*l.w*l.h,Ü.
ãm≥øtuª
,Ü.
ouçut
 + count);

165 
cou¡
 +
group_size
;

167 } i‡(
l
.
so·max
){

168 
ödex
 = 
	`íåy_ödex
(
l
, 0, 0,Ü.
co‹ds
 + !l.
background
);

169 
	`so·max_˝u
(
√t
.
öput
 + 
ödex
, 
l
.
˛as£s
 +Ü.
background
,Ü.
b©ch
*l.
n
,Ü.
öputs
/l.n,Ü.
w
*l.
h
, 1,Ü.w*l.h, 1,Ü.
ouçut
 + index);

173 
	`mem£t
(
l
.
dñè
, 0,Ü.
ouçuts
 *Ü.
b©ch
 * ());

174 if(!
√t
.
åaö
) ;

175 
avg_iou
 = 0;

176 
ªˇŒ
 = 0;

177 
avg_ˇt
 = 0;

178 
avg_obj
 = 0;

179 
avg_™yobj
 = 0;

180 
cou¡
 = 0;

181 
˛ass_cou¡
 = 0;

182 *(
l
.
co°
) = 0;

183 
b
 = 0; b < 
l
.
b©ch
; ++b) {

184 if(
l
.
so·max_åì
){

185 
⁄ly˛ass
 = 0;

186 
t
 = 0;Å < 30; ++t){

187 
box
 
åuth
 = 
	`Êﬂt_to_box
(
√t
.åuth + 
t
*(
l
.
co‹ds
 + 1Ë+ 
b
*l.
åuths
, 1);

188 if(!
åuth
.
x
) ;

189 
˛ass
 = 
√t
.
åuth
[
t
*(
l
.
co‹ds
 + 1Ë+ 
b
*l.
åuths
 +Ü.coords];

190 
maxp
 = 0;

191 
maxi
 = 0;

192 if(
åuth
.
x
 > 100000 &&Åruth.
y
 > 100000){

193 
n
 = 0;Ç < 
l
.n*l.
w
*l.
h
; ++n){

194 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
,Ü.
co‹ds
 + 1);

195 
obj_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
,Ü.
co‹ds
);

196 
sˇÀ
 = 
l
.
ouçut
[
obj_ödex
];

197 
l
.
dñè
[
obj_ödex
] =Ü.
noobje˘_sˇÀ
 * (0 -Ü.
ouçut
[obj_index]);

198 
p
 = 
sˇÀ
*
	`gë_hõørchy_¥obabûôy
(
l
.
ouçut
 + 
˛ass_ödex
,Ü.
so·max_åì
, 
˛ass
,Ü.
w
*l.
h
);

199 if(
p
 > 
maxp
){

200 
maxp
 = 
p
;

201 
maxi
 = 
n
;

204 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
maxi
,Ü.
co‹ds
 + 1);

205 
obj_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
maxi
,Ü.
co‹ds
);

206 
	`dñè_ªgi⁄_˛ass
(
l
.
ouçut
,Ü.
dñè
, 
˛ass_ödex
, 
˛ass
,Ü.
˛as£s
,Ü.
so·max_åì
,Ü.
˛ass_sˇÀ
,Ü.
w
*l.
h
, &
avg_ˇt
);

207 if(
l
.
ouçut
[
obj_ödex
] < .3Ël.
dñè
[obj_ödex] =Ü.
obje˘_sˇÀ
 * (.3 -Ü.output[obj_index]);

208 
l
.
dñè
[
obj_ödex
] = 0;

209 ++
˛ass_cou¡
;

210 
⁄ly˛ass
 = 1;

214 if(
⁄ly˛ass
) ;

216 
j
 = 0; j < 
l
.
h
; ++j) {

217 
i
 = 0; i < 
l
.
w
; ++i) {

218 
n
 = 0;Ç < 
l
.n; ++n) {

219 
box_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
 + 
j
*l.w + 
i
, 0);

220 
box
 
¥ed
 = 
	`gë_ªgi⁄_box
(
l
.
ouçut
,Ü.
bü£s
, 
n
, 
box_ödex
, 
i
, 
j
,Ü.
w
,Ü.
h
,Ü.w*l.h);

221 
be°_iou
 = 0;

222 
t
 = 0;Å < 30; ++t){

223 
box
 
åuth
 = 
	`Êﬂt_to_box
(
√t
.åuth + 
t
*(
l
.
co‹ds
 + 1Ë+ 
b
*l.
åuths
, 1);

224 if(!
åuth
.
x
) ;

225 
iou
 = 
	`box_iou
(
¥ed
, 
åuth
);

226 i‡(
iou
 > 
be°_iou
) {

227 
be°_iou
 = 
iou
;

230 
obj_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
 + 
j
*l.w + 
i
,Ü.
co‹ds
);

231 
avg_™yobj
 +
l
.
ouçut
[
obj_ödex
];

232 
l
.
dñè
[
obj_ödex
] =Ü.
noobje˘_sˇÀ
 * (0 -Ü.
ouçut
[obj_index]);

233 if(
l
.
background
Ël.
dñè
[
obj_ödex
] =Ü.
noobje˘_sˇÀ
 * (1 -Ü.
ouçut
[obj_index]);

234 i‡(
be°_iou
 > 
l
.
thªsh
) {

235 
l
.
dñè
[
obj_ödex
] = 0;

238 if(*(
√t
.
£í
) < 12800){

239 
box
 
åuth
 = {0};

240 
åuth
.
x
 = (
i
 + .5)/
l
.
w
;

241 
åuth
.
y
 = (
j
 + .5)/
l
.
h
;

242 
åuth
.
w
 = 
l
.
bü£s
[2*
n
]/l.w;

243 
åuth
.
h
 = 
l
.
bü£s
[2*
n
+1]/l.h;

244 
	`dñè_ªgi⁄_box
(
åuth
, 
l
.
ouçut
,Ü.
bü£s
, 
n
, 
box_ödex
, 
i
, 
j
,Ü.
w
,Ü.
h
,Ü.
dñè
, .01,Ü.w*l.h);

249 
t
 = 0;Å < 30; ++t){

250 
box
 
åuth
 = 
	`Êﬂt_to_box
(
√t
.åuth + 
t
*(
l
.
co‹ds
 + 1Ë+ 
b
*l.
åuths
, 1);

252 if(!
åuth
.
x
) ;

253 
be°_iou
 = 0;

254 
be°_n
 = 0;

255 
i
 = (
åuth
.
x
 * 
l
.
w
);

256 
j
 = (
åuth
.
y
 * 
l
.
h
);

258 
box
 
åuth_shi·
 = 
åuth
;

259 
åuth_shi·
.
x
 = 0;

260 
åuth_shi·
.
y
 = 0;

262 
n
 = 0;Ç < 
l
.n; ++n){

263 
box_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
 + 
j
*l.w + 
i
, 0);

264 
box
 
¥ed
 = 
	`gë_ªgi⁄_box
(
l
.
ouçut
,Ü.
bü£s
, 
n
, 
box_ödex
, 
i
, 
j
,Ü.
w
,Ü.
h
,Ü.w*l.h);

265 if(
l
.
büs_m©ch
){

266 
¥ed
.
w
 = 
l
.
bü£s
[2*
n
]/l.w;

267 
¥ed
.
h
 = 
l
.
bü£s
[2*
n
+1]/l.h;

270 
¥ed
.
x
 = 0;

271 
¥ed
.
y
 = 0;

272 
iou
 = 
	`box_iou
(
¥ed
, 
åuth_shi·
);

273 i‡(
iou
 > 
be°_iou
){

274 
be°_iou
 = 
iou
;

275 
be°_n
 = 
n
;

280 
box_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
be°_n
*l.
w
*l.
h
 + 
j
*l.w + 
i
, 0);

281 
iou
 = 
	`dñè_ªgi⁄_box
(
åuth
, 
l
.
ouçut
,Ü.
bü£s
, 
be°_n
, 
box_ödex
, 
i
, 
j
,Ü.
w
,Ü.
h
,Ü.
dñè
,Ü.
co‹d_sˇÀ
 * (2 -Åruth.w*truth.h),Ü.w*l.h);

282 if(
iou
 > .5Ë
ªˇŒ
 += 1;

283 
avg_iou
 +
iou
;

286 
obj_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
be°_n
*l.
w
*l.
h
 + 
j
*l.w + 
i
,Ü.
co‹ds
);

287 
avg_obj
 +
l
.
ouçut
[
obj_ödex
];

288 
l
.
dñè
[
obj_ödex
] =Ü.
obje˘_sˇÀ
 * (1 -Ü.
ouçut
[obj_index]);

289 i‡(
l
.
ªsc‹e
) {

290 
l
.
dñè
[
obj_ödex
] =Ü.
obje˘_sˇÀ
 * (
iou
 -Ü.
ouçut
[obj_index]);

292 if(
l
.
background
){

293 
l
.
dñè
[
obj_ödex
] =Ü.
obje˘_sˇÀ
 * (0 -Ü.
ouçut
[obj_index]);

296 
˛ass
 = 
√t
.
åuth
[
t
*(
l
.
co‹ds
 + 1Ë+ 
b
*l.
åuths
 +Ü.coords];

297 i‡(
l
.
m≠
Ë
˛ass
 =Ü.map[class];

298 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
be°_n
*l.
w
*l.
h
 + 
j
*l.w + 
i
,Ü.
co‹ds
 + 1);

299 
	`dñè_ªgi⁄_˛ass
(
l
.
ouçut
,Ü.
dñè
, 
˛ass_ödex
, 
˛ass
,Ü.
˛as£s
,Ü.
so·max_åì
,Ü.
˛ass_sˇÀ
,Ü.
w
*l.
h
, &
avg_ˇt
);

300 ++
cou¡
;

301 ++
˛ass_cou¡
;

305 *(
l
.
co°
Ë
	`pow
(
	`mag_¨øy
÷.
dñè
,Ü.
ouçuts
 *Ü.
b©ch
), 2);

306 
	`¥ötf
("Regi⁄ Avg IOU: %f, Cœss: %f, Obj: %f, NÿObj: %f, Avg ReˇŒ: %f, cou¡: %d\n", 
avg_iou
/
cou¡
, 
avg_ˇt
/
˛ass_cou¡
, 
avg_obj
/cou¡, 
avg_™yobj
/(
l
.
w
*l.
h
*l.
n
*l.
b©ch
), 
ªˇŒ
/count, count);

307 
	}
}

309 
	$backw¨d_ªgi⁄_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

320 
	}
}

322 
	$c‹ª˘_ªgi⁄_boxes
(
box
 *
boxes
, 
n
, 
w
, 
h
, 
√tw
, 
√th
, 
ªœtive
)

324 
i
;

325 
√w_w
=0;

326 
√w_h
=0;

327 i‡((()
√tw
/
w
Ë< (()
√th
/
h
)) {

328 
√w_w
 = 
√tw
;

329 
√w_h
 = (
h
 * 
√tw
)/
w
;

331 
√w_h
 = 
√th
;

332 
√w_w
 = (
w
 * 
√th
)/
h
;

334 
i
 = 0; i < 
n
; ++i){

335 
box
 
b
 = 
boxes
[
i
];

336 
b
.
x
 = (b.x - (
√tw
 - 
√w_w
)/2./netw) / (()new_w/netw);

337 
b
.
y
 = (b.y - (
√th
 - 
√w_h
)/2./neth) / (()new_h/neth);

338 
b
.
w
 *()
√tw
/
√w_w
;

339 
b
.
h
 *()
√th
/
√w_h
;

340 if(!
ªœtive
){

341 
b
.
x
 *
w
;

342 
b
.
w
 *= w;

343 
b
.
y
 *
h
;

344 
b
.
h
 *= h;

346 
boxes
[
i
] = 
b
;

348 
	}
}

350 
	$gë_ªgi⁄_boxes
(
œyî
 
l
, 
w
, 
h
, 
√tw
, 
√th
, 
thªsh
, **
¥obs
, 
box
 *
boxes
, 
⁄ly_obje˘√ss
, *
m≠
, 
åì_thªsh
, 
ªœtive
)

352 
i
,
j
,
n
,
z
;

353 *
¥edi˘i⁄s
 = 
l
.
ouçut
;

354 i‡(
l
.
b©ch
 == 2) {

355 *
Êù
 = 
l
.
ouçut
 +Ü.
ouçuts
;

356 
j
 = 0; j < 
l
.
h
; ++j) {

357 
i
 = 0; i < 
l
.
w
/2; ++i) {

358 
n
 = 0;Ç < 
l
.n; ++n) {

359 
z
 = 0; z < 
l
.
˛as£s
 +Ü.
co‹ds
 + 1; ++z){

360 
i1
 = 
z
*
l
.
w
*l.
h
*l.
n
 +Ç*l.w*l.h + 
j
*l.w + 
i
;

361 
i2
 = 
z
*
l
.
w
*l.
h
*l.
n
 +Ç*l.w*l.h + 
j
*l.w + (l.w - 
i
 - 1);

362 
sw≠
 = 
Êù
[
i1
];

363 
Êù
[
i1
] = flù[
i2
];

364 
Êù
[
i2
] = 
sw≠
;

365 if(
z
 == 0){

366 
Êù
[
i1
] = -flip[i1];

367 
Êù
[
i2
] = -flip[i2];

373 
i
 = 0; i < 
l
.
ouçuts
; ++i){

374 
l
.
ouçut
[
i
] = (l.ouçut[i] + 
Êù
[i])/2.;

377 
i
 = 0; i < 
l
.
w
*l.
h
; ++i){

378 
row
 = 
i
 / 
l
.
w
;

379 
cﬁ
 = 
i
 % 
l
.
w
;

380 
n
 = 0;Ç < 
l
.n; ++n){

381 
ödex
 = 
n
*
l
.
w
*l.
h
 + 
i
;

382 
j
 = 0; j < 
l
.
˛as£s
; ++j){

383 
¥obs
[
ödex
][
j
] = 0;

385 
obj_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
,Ü.
co‹ds
);

386 
box_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
, 0);

387 
sˇÀ
 = 
l
.
background
 ? 1 : 
¥edi˘i⁄s
[
obj_ödex
];

388 
boxes
[
ödex
] = 
	`gë_ªgi⁄_box
(
¥edi˘i⁄s
, 
l
.
bü£s
, 
n
, 
box_ödex
, 
cﬁ
, 
row
,Ü.
w
,Ü.
h
,Ü.w*l.h);

390 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
,Ü.
co‹ds
 + !l.
background
);

391 if(
l
.
so·max_åì
){

393 
	`hõørchy_¥edi˘i⁄s
(
¥edi˘i⁄s
 + 
˛ass_ödex
, 
l
.
˛as£s
,Ü.
so·max_åì
, 0,Ü.
w
*l.
h
);

394 if(
m≠
){

395 
j
 = 0; j < 200; ++j){

396 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
,Ü.
co‹ds
 + 1 + 
m≠
[
j
]);

397 
¥ob
 = 
sˇÀ
*
¥edi˘i⁄s
[
˛ass_ödex
];

398 
¥obs
[
ödex
][
j
] = (
¥ob
 > 
thªsh
) ?Örob : 0;

401 
j
 = 
	`hõørchy_t›_¥edi˘i⁄
(
¥edi˘i⁄s
 + 
˛ass_ödex
, 
l
.
so·max_åì
, 
åì_thªsh
,Ü.
w
*l.
h
);

402 
¥obs
[
ödex
][
j
] = (
sˇÀ
 > 
thªsh
) ? scale : 0;

403 
¥obs
[
ödex
][
l
.
˛as£s
] = 
sˇÀ
;

406 
max
 = 0;

407 
j
 = 0; j < 
l
.
˛as£s
; ++j){

408 
˛ass_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
,Ü.
co‹ds
 + 1 + 
j
);

409 
¥ob
 = 
sˇÀ
*
¥edi˘i⁄s
[
˛ass_ödex
];

410 
¥obs
[
ödex
][
j
] = (
¥ob
 > 
thªsh
) ?Örob : 0;

411 if(
¥ob
 > 
max
) max =Örob;

423 
¥obs
[
ödex
][
l
.
˛as£s
] = 
max
;

425 if(
⁄ly_obje˘√ss
){

426 
¥obs
[
ödex
][0] = 
sˇÀ
;

430 
	`c‹ª˘_ªgi⁄_boxes
(
boxes
, 
l
.
w
*l.
h
*l.
n
, w, h, 
√tw
, 
√th
, 
ªœtive
);

431 
	}
}

433 #ifde‡
GPU


435 
	$f‹w¨d_ªgi⁄_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

437 
	`c›y_gpu
(
l
.
b©ch
*l.
öputs
, 
√t
.
öput_gpu
, 1,Ü.
ouçut_gpu
, 1);

438 
b
, 
n
;

439 
b
 = 0; b < 
l
.
b©ch
; ++b){

440 
n
 = 0;Ç < 
l
.n; ++n){

441 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
, 0);

442 
	`a˘iv©e_¨øy_gpu
(
l
.
ouçut_gpu
 + 
ödex
, 2*l.
w
*l.
h
, 
LOGISTIC
);

443 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
,Ü.
co‹ds
);

444 if(!
l
.
background
Ë
	`a˘iv©e_¨øy_gpu
÷.
ouçut_gpu
 + 
ödex
,Ü.
w
*l.
h
, 
LOGISTIC
);

447 i‡(
l
.
so·max_åì
){

448 
mmö
 = 9000;

449 
mmax
 = 0;

450 
i
;

451 
i
 = 0; i < 
l
.
so·max_åì
->
groups
; ++i){

452 
group_size
 = 
l
.
so·max_åì
->group_size[
i
];

453 i‡(
group_size
 < 
mmö
) mmin = group_size;

454 i‡(
group_size
 > 
mmax
) mmax = group_size;

456 
	`¥ötf
("%d %d %d \n", 
l
.
so·max_åì
->
groups
, 
mmö
, 
mmax
);

457 
ödex
 = 
	`íåy_ödex
(
l
, 0, 0,Ü.
co‹ds
 + 1);

458 
	`so·max_åì
(
√t
.
öput_gpu
 + 
ödex
, 
l
.
w
*l.
h
,Ü.
b©ch
*l.
n
,Ü.
öputs
/l.n, 1,Ü.
ouçut_gpu
 + index, *l.
so·max_åì
);

519 } i‡(
l
.
so·max
) {

520 
ödex
 = 
	`íåy_ödex
(
l
, 0, 0,Ü.
co‹ds
 + !l.
background
);

522 
	`so·max_gpu
(
√t
.
öput_gpu
 + 
ödex
, 
l
.
˛as£s
 +Ü.
background
,Ü.
b©ch
*l.
n
,Ü.
öputs
/l.n,Ü.
w
*l.
h
, 1,Ü.w*l.h, 1,Ü.
ouçut_gpu
 + index);

524 if(!
√t
.
åaö
 || 
l
.
⁄lyf‹w¨d
){

525 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
,Ü.
ouçut
,Ü.
b©ch
*l.
ouçuts
);

529 
	`cuda_puŒ_¨øy
(
l
.
ouçut_gpu
, 
√t
.
öput
,Ü.
b©ch
*l.
öputs
);

530 
	`f‹w¨d_ªgi⁄_œyî
(
l
, 
√t
);

532 if(!
√t
.
åaö
) ;

533 
	`cuda_push_¨øy
(
l
.
dñè_gpu
,Ü.
dñè
,Ü.
b©ch
*l.
ouçuts
);

534 
	}
}

536 
	$backw¨d_ªgi⁄_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

538 
b
, 
n
;

539 
b
 = 0; b < 
l
.
b©ch
; ++b){

540 
n
 = 0;Ç < 
l
.n; ++n){

541 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
, 0);

542 
	`gødõ¡_¨øy_gpu
(
l
.
ouçut_gpu
 + 
ödex
, 2*l.
w
*l.
h
, 
LOGISTIC
,Ü.
dñè_gpu
 + index);

543 
ödex
 = 
	`íåy_ödex
(
l
, 
b
, 
n
*l.
w
*l.
h
,Ü.
co‹ds
);

544 if(!
l
.
background
Ë
	`gødõ¡_¨øy_gpu
÷.
ouçut_gpu
 + 
ödex
,Ü.
w
*l.
h
, 
LOGISTIC
,Ü.
dñè_gpu
 + index);

547 
	`axpy_gpu
(
l
.
b©ch
*l.
öputs
, 1,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

548 
	}
}

551 
	$zîo_obje˘√ss
(
œyî
 
l
)

553 
i
, 
n
;

554 
i
 = 0; i < 
l
.
w
*l.
h
; ++i){

555 
n
 = 0;Ç < 
l
.n; ++n){

556 
obj_ödex
 = 
	`íåy_ödex
(
l
, 0, 
n
*l.
w
*l.
h
 + 
i
,Ü.
co‹ds
);

557 
l
.
ouçut
[
obj_ödex
] = 0;

560 
	}
}

	@src/region_layer.h

1 #i‚de‡
REGION_LAYER_H


2 
	#REGION_LAYER_H


	)

4 
	~"d¨k√t.h
"

5 
	~"œyî.h
"

6 
	~"√tw‹k.h
"

8 
œyî
 
make_ªgi⁄_œyî
(
b©ch
, 
h
, 
w
, 
n
, 
˛as£s
, 
co‹ds
);

9 
f‹w¨d_ªgi⁄_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

10 
backw¨d_ªgi⁄_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

11 
ªsize_ªgi⁄_œyî
(
œyî
 *
l
, 
w
, 
h
);

13 #ifde‡
GPU


14 
f‹w¨d_ªgi⁄_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_ªgi⁄_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

	@src/reorg_layer.c

1 
	~"ª‹g_œyî.h
"

2 
	~"cuda.h
"

3 
	~"bœs.h
"

5 
	~<°dio.h
>

8 
œyî
 
	$make_ª‹g_œyî
(
b©ch
, 
w
, 
h
, 
c
, 
°ride
, 
ªvî£
, 
Ê©ãn
, 
exåa
)

10 
œyî
 
l
 = {0};

11 
l
.
ty≥
 = 
REORG
;

12 
l
.
b©ch
 = batch;

13 
l
.
°ride
 = stride;

14 
l
.
exåa
 =Éxtra;

15 
l
.
h
 = h;

16 
l
.
w
 = w;

17 
l
.
c
 = c;

18 
l
.
Ê©ãn
 = flatten;

19 if(
ªvî£
){

20 
l
.
out_w
 = 
w
*
°ride
;

21 
l
.
out_h
 = 
h
*
°ride
;

22 
l
.
out_c
 = 
c
/(
°ride
*stride);

24 
l
.
out_w
 = 
w
/
°ride
;

25 
l
.
out_h
 = 
h
/
°ride
;

26 
l
.
out_c
 = 
c
*(
°ride
*stride);

28 
l
.
ªvî£
 =Ñeverse;

30 
l
.
ouçuts
 =Ü.
out_h
 *Ü.
out_w
 *Ü.
out_c
;

31 
l
.
öputs
 = 
h
*
w
*
c
;

32 if(
l
.
exåa
){

33 
l
.
out_w
 =Ü.
out_h
 =Ü.
out_c
 = 0;

34 
l
.
ouçuts
 =Ü.
öputs
 +Ü.
exåa
;

37 if(
exåa
){

38 
	`Ârötf
(
°dîr
, "ª‹g %4d -> %4d\n", 
l
.
öputs
,Ü.
ouçuts
);

40 
	`Ârötf
(
°dîr
, "ª‹g /%2d %4d x%4d x%4d -> %4d x%4d x%4d\n", 
°ride
, 
w
, 
h
, 
c
, 
l
.
out_w
,Ü.
out_h
,Ü.
out_c
);

42 
ouçut_size
 = 
l
.
ouçuts
 * 
b©ch
;

43 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçut_size
, ());

44 
l
.
dñè
 = 
	`ˇŒoc
(
ouçut_size
, ());

46 
l
.
f‹w¨d
 = 
f‹w¨d_ª‹g_œyî
;

47 
l
.
backw¨d
 = 
backw¨d_ª‹g_œyî
;

48 #ifde‡
GPU


49 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_ª‹g_œyî_gpu
;

50 
l
.
backw¨d_gpu
 = 
backw¨d_ª‹g_œyî_gpu
;

52 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
ouçut_size
);

53 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
ouçut_size
);

55  
l
;

56 
	}
}

58 
	$ªsize_ª‹g_œyî
(
œyî
 *
l
, 
w
, 
h
)

60 
°ride
 = 
l
->stride;

61 
c
 = 
l
->c;

63 
l
->
h
 = h;

64 
l
->
w
 = w;

66 if(
l
->
ªvî£
){

67 
l
->
out_w
 = 
w
*
°ride
;

68 
l
->
out_h
 = 
h
*
°ride
;

69 
l
->
out_c
 = 
c
/(
°ride
*stride);

71 
l
->
out_w
 = 
w
/
°ride
;

72 
l
->
out_h
 = 
h
/
°ride
;

73 
l
->
out_c
 = 
c
*(
°ride
*stride);

76 
l
->
ouçuts
 =Ü->
out_h
 *Ü->
out_w
 *Ü->
out_c
;

77 
l
->
öputs
 =Ü->
ouçuts
;

78 
ouçut_size
 = 
l
->
ouçuts
 *Ü->
b©ch
;

80 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut, 
ouçut_size
 * ());

81 
l
->
dñè
 = 
	`ªÆloc
÷->dñè, 
ouçut_size
 * ());

83 #ifde‡
GPU


84 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

85 
	`cuda_‰ì
(
l
->
dñè_gpu
);

86 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
, 
ouçut_size
);

87 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
, 
ouçut_size
);

89 
	}
}

91 
	$f‹w¨d_ª‹g_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

93 
i
;

94 if(
l
.
Ê©ãn
){

95 
	`mem˝y
(
l
.
ouçut
, 
√t
.
öput
,Ü.
ouçuts
*l.
b©ch
*());

96 if(
l
.
ªvî£
){

97 
	`Ê©ãn
(
l
.
ouçut
,Ü.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 0);

99 
	`Ê©ãn
(
l
.
ouçut
,Ü.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 1);

101 } i‡(
l
.
exåa
) {

102 
i
 = 0; i < 
l
.
b©ch
; ++i){

103 
	`c›y_˝u
(
l
.
öputs
, 
√t
.
öput
 + 
i
*l.öputs, 1,Ü.
ouçut
 + i*l.
ouçuts
, 1);

105 } i‡(
l
.
ªvî£
){

106 
	`ª‹g_˝u
(
√t
.
öput
, 
l
.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 1,Ü.
ouçut
);

108 
	`ª‹g_˝u
(
√t
.
öput
, 
l
.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 0,Ü.
ouçut
);

110 
	}
}

112 
	$backw¨d_ª‹g_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

114 
i
;

115 if(
l
.
Ê©ãn
){

116 
	`mem˝y
(
√t
.
dñè
, 
l
.dñè,Ü.
ouçuts
*l.
b©ch
*());

117 if(
l
.
ªvî£
){

118 
	`Ê©ãn
(
√t
.
dñè
, 
l
.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 1);

120 
	`Ê©ãn
(
√t
.
dñè
, 
l
.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 0);

122 } if(
l
.
ªvî£
){

123 
	`ª‹g_˝u
(
l
.
dñè
,Ü.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 0, 
√t
.delta);

124 } i‡(
l
.
exåa
) {

125 
i
 = 0; i < 
l
.
b©ch
; ++i){

126 
	`c›y_˝u
(
l
.
öputs
,Ü.
dñè
 + 
i
*l.
ouçuts
, 1, 
√t
.delta + i*l.inputs, 1);

129 
	`ª‹g_˝u
(
l
.
dñè
,Ü.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 1, 
√t
.delta);

131 
	}
}

133 #ifde‡
GPU


134 
	$f‹w¨d_ª‹g_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

136 
i
;

137 if(
l
.
Ê©ãn
){

138 if(
l
.
ªvî£
){

139 
	`Ê©ãn_gpu
(
√t
.
öput_gpu
, 
l
.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 0,Ü.
ouçut_gpu
);

141 
	`Ê©ãn_gpu
(
√t
.
öput_gpu
, 
l
.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 1,Ü.
ouçut_gpu
);

143 } i‡(
l
.
exåa
) {

144 
i
 = 0; i < 
l
.
b©ch
; ++i){

145 
	`c›y_gpu
(
l
.
öputs
, 
√t
.
öput_gpu
 + 
i
*l.öputs, 1,Ü.
ouçut_gpu
 + i*l.
ouçuts
, 1);

147 } i‡(
l
.
ªvî£
) {

148 
	`ª‹g_gpu
(
√t
.
öput_gpu
, 
l
.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 1,Ü.
ouçut_gpu
);

150 
	`ª‹g_gpu
(
√t
.
öput_gpu
, 
l
.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 0,Ü.
ouçut_gpu
);

152 
	}
}

154 
	$backw¨d_ª‹g_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

156 if(
l
.
Ê©ãn
){

157 if(
l
.
ªvî£
){

158 
	`Ê©ãn_gpu
(
l
.
dñè_gpu
,Ü.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 1, 
√t
.delta_gpu);

160 
	`Ê©ãn_gpu
(
l
.
dñè_gpu
,Ü.
w
*l.
h
,Ü.
c
,Ü.
b©ch
, 0, 
√t
.delta_gpu);

162 } i‡(
l
.
exåa
) {

163 
i
;

164 
i
 = 0; i < 
l
.
b©ch
; ++i){

165 
	`c›y_gpu
(
l
.
öputs
,Ü.
dñè_gpu
 + 
i
*l.
ouçuts
, 1, 
√t
.delta_gpu + i*l.inputs, 1);

167 } if(
l
.
ªvî£
){

168 
	`ª‹g_gpu
(
l
.
dñè_gpu
,Ü.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 0, 
√t
.delta_gpu);

170 
	`ª‹g_gpu
(
l
.
dñè_gpu
,Ü.
w
,Ü.
h
,Ü.
c
,Ü.
b©ch
,Ü.
°ride
, 1, 
√t
.delta_gpu);

172 
	}
}

	@src/reorg_layer.h

1 #i‚de‡
REORG_LAYER_H


2 
	#REORG_LAYER_H


	)

4 
	~"image.h
"

5 
	~"cuda.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

9 
œyî
 
make_ª‹g_œyî
(
b©ch
, 
w
, 
h
, 
c
, 
°ride
, 
ªvî£
, 
Ê©ãn
, 
exåa
);

10 
ªsize_ª‹g_œyî
(
œyî
 *
l
, 
w
, 
h
);

11 
f‹w¨d_ª‹g_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

12 
backw¨d_ª‹g_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

14 #ifde‡
GPU


15 
f‹w¨d_ª‹g_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

16 
backw¨d_ª‹g_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

	@src/rnn_layer.c

1 
	~"∫n_œyî.h
"

2 
	~"c⁄√˘ed_œyî.h
"

3 
	~"utûs.h
"

4 
	~"cuda.h
"

5 
	~"bœs.h
"

6 
	~"gemm.h
"

8 
	~<m©h.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	$ö¸emít_œyî
(
œyî
 *
l
, 
°ïs
)

15 
num
 = 
l
->
ouçuts
*l->
b©ch
*
°ïs
;

16 
l
->
ouçut
 +
num
;

17 
l
->
dñè
 +
num
;

18 
l
->
x
 +
num
;

19 
l
->
x_n‹m
 +
num
;

21 #ifde‡
GPU


22 
l
->
ouçut_gpu
 +
num
;

23 
l
->
dñè_gpu
 +
num
;

24 
l
->
x_gpu
 +
num
;

25 
l
->
x_n‹m_gpu
 +
num
;

27 
	}
}

29 
œyî
 
	$make_∫n_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
)

31 
	`Ârötf
(
°dîr
, "RNN Layî: %d i≈uts, %d ouçuts\n", 
öputs
, 
ouçuts
);

32 
b©ch
 = b©ch / 
°ïs
;

33 
œyî
 
l
 = {0};

34 
l
.
b©ch
 = batch;

35 
l
.
ty≥
 = 
RNN
;

36 
l
.
°ïs
 = steps;

37 
l
.
öputs
 = inputs;

39 
l
.
°©e
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

40 
l
.
¥ev_°©e
 = 
	`ˇŒoc
(
b©ch
*
ouçuts
, ());

42 
l
.
öput_œyî
 = 
	`mÆloc
((
œyî
));

43 
	`Ârötf
(
°dîr
, "\t\t");

44 *(
l
.
öput_œyî
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
öputs
, 
ouçuts
, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

45 
l
.
öput_œyî
->
b©ch
 = batch;

47 
l
.
£lf_œyî
 = 
	`mÆloc
((
œyî
));

48 
	`Ârötf
(
°dîr
, "\t\t");

49 *(
l
.
£lf_œyî
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

50 
l
.
£lf_œyî
->
b©ch
 = batch;

52 
l
.
ouçut_œyî
 = 
	`mÆloc
((
œyî
));

53 
	`Ârötf
(
°dîr
, "\t\t");

54 *(
l
.
ouçut_œyî
Ë
	`make_c⁄√˘ed_œyî
(
b©ch
*
°ïs
, 
ouçuts
, ouçuts, 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

55 
l
.
ouçut_œyî
->
b©ch
 = batch;

57 
l
.
ouçuts
 = outputs;

58 
l
.
ouçut
 =Ü.
ouçut_œyî
->output;

59 
l
.
dñè
 =Ü.
ouçut_œyî
->delta;

61 
l
.
f‹w¨d
 = 
f‹w¨d_∫n_œyî
;

62 
l
.
backw¨d
 = 
backw¨d_∫n_œyî
;

63 
l
.
upd©e
 = 
upd©e_∫n_œyî
;

64 #ifde‡
GPU


65 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_∫n_œyî_gpu
;

66 
l
.
backw¨d_gpu
 = 
backw¨d_∫n_œyî_gpu
;

67 
l
.
upd©e_gpu
 = 
upd©e_∫n_œyî_gpu
;

68 
l
.
°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

69 
l
.
¥ev_°©e_gpu
 = 
	`cuda_make_¨øy
(0, 
b©ch
*
ouçuts
);

70 
l
.
ouçut_gpu
 =Ü.
ouçut_œyî
->output_gpu;

71 
l
.
dñè_gpu
 =Ü.
ouçut_œyî
->delta_gpu;

72 #ifde‡
CUDNN


73 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
öput_œyî
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.öput_œyî->
out_c
,Ü.öput_œyî->
out_h
,Ü.öput_œyî->
out_w
);

74 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
£lf_œyî
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.£lf_œyî->
out_c
,Ü.£lf_œyî->
out_h
,Ü.£lf_œyî->
out_w
);

75 
	`cud¬SëTís‹4dDes¸ùt‹
(
l
.
ouçut_œyî
->
d°Tís‹Desc
, 
CUDNN_TENSOR_NCHW
, 
CUDNN_DATA_FLOAT
, 
b©ch
,Ü.ouçut_œyî->
out_c
,Ü.ouçut_œyî->
out_h
,Ü.ouçut_œyî->
out_w
);

79  
l
;

80 
	}
}

82 
	$upd©e_∫n_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

84 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
öput_œyî
), 
a
);

85 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
£lf_œyî
), 
a
);

86 
	`upd©e_c⁄√˘ed_œyî
(*(
l
.
ouçut_œyî
), 
a
);

87 
	}
}

89 
	$f‹w¨d_∫n_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

91 
√tw‹k
 
s
 = 
√t
;

92 
s
.
åaö
 = 
√t
.train;

93 
i
;

94 
œyî
 
öput_œyî
 = *(
l
.input_layer);

95 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

96 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

98 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ouçut_œyî
.
dñè
, 1);

99 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
£lf_œyî
.
dñè
, 1);

100 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
öput_œyî
.
dñè
, 1);

101 if(
√t
.
åaö
Ë
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e
, 1);

103 
i
 = 0; i < 
l
.
°ïs
; ++i) {

104 
s
.
öput
 = 
√t
.input;

105 
	`f‹w¨d_c⁄√˘ed_œyî
(
öput_œyî
, 
s
);

107 
s
.
öput
 = 
l
.
°©e
;

108 
	`f‹w¨d_c⁄√˘ed_œyî
(
£lf_œyî
, 
s
);

110 *
ﬁd_°©e
 = 
l
.
°©e
;

111 if(
√t
.
åaö
Ë
l
.
°©e
 +l.
ouçuts
*l.
b©ch
;

112 if(
l
.
sh‹tcut
){

113 
	`c›y_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 
ﬁd_°©e
, 1,Ü.
°©e
, 1);

115 
	`fûl_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e
, 1);

117 
	`axpy_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

118 
	`axpy_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

120 
s
.
öput
 = 
l
.
°©e
;

121 
	`f‹w¨d_c⁄√˘ed_œyî
(
ouçut_œyî
, 
s
);

123 
√t
.
öput
 +
l
.
öputs
*l.
b©ch
;

124 
	`ö¸emít_œyî
(&
öput_œyî
, 1);

125 
	`ö¸emít_œyî
(&
£lf_œyî
, 1);

126 
	`ö¸emít_œyî
(&
ouçut_œyî
, 1);

128 
	}
}

130 
	$backw¨d_∫n_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
)

132 
√tw‹k
 
s
 = 
√t
;

133 
s
.
åaö
 = 
√t
.train;

134 
i
;

135 
œyî
 
öput_œyî
 = *(
l
.input_layer);

136 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

137 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

139 
	`ö¸emít_œyî
(&
öput_œyî
, 
l
.
°ïs
-1);

140 
	`ö¸emít_œyî
(&
£lf_œyî
, 
l
.
°ïs
-1);

141 
	`ö¸emít_œyî
(&
ouçut_œyî
, 
l
.
°ïs
-1);

143 
l
.
°©e
 +l.
ouçuts
*l.
b©ch
*l.
°ïs
;

144 
i
 = 
l
.
°ïs
-1; i >= 0; --i) {

145 
	`c›y_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 
öput_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

146 
	`axpy_˝u
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut
, 1,Ü.
°©e
, 1);

148 
s
.
öput
 = 
l
.
°©e
;

149 
s
.
dñè
 = 
£lf_œyî
.delta;

150 
	`backw¨d_c⁄√˘ed_œyî
(
ouçut_œyî
, 
s
);

152 
l
.
°©e
 -l.
ouçuts
*l.
b©ch
;

162 
s
.
öput
 = 
l
.
°©e
;

163 
s
.
dñè
 = 
£lf_œyî
.dñè - 
l
.
ouçuts
*l.
b©ch
;

164 i‡(
i
 =0Ë
s
.
dñè
 = 0;

165 
	`backw¨d_c⁄√˘ed_œyî
(
£lf_œyî
, 
s
);

167 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
£lf_œyî
.
dñè
, 1, 
öput_œyî
.delta, 1);

168 i‡(
i
 > 0 && 
l
.
sh‹tcut
Ë
	`axpy_˝u
÷.
ouçuts
*l.
b©ch
, 1, 
£lf_œyî
.
dñè
, 1, self_layer.delta -Ü.outputs*l.batch, 1);

169 
s
.
öput
 = 
√t
.öpuà+ 
i
*
l
.
öputs
*l.
b©ch
;

170 if(
√t
.
dñè
Ë
s
.dñè =Çë.dñè + 
i
*
l
.
öputs
*l.
b©ch
;

171 
s
.
dñè
 = 0;

172 
	`backw¨d_c⁄√˘ed_œyî
(
öput_œyî
, 
s
);

174 
	`ö¸emít_œyî
(&
öput_œyî
, -1);

175 
	`ö¸emít_œyî
(&
£lf_œyî
, -1);

176 
	`ö¸emít_œyî
(&
ouçut_œyî
, -1);

178 
	}
}

180 #ifde‡
GPU


182 
	$puŒ_∫n_œyî
(
œyî
 
l
)

184 
	`puŒ_c⁄√˘ed_œyî
(*(
l
.
öput_œyî
));

185 
	`puŒ_c⁄√˘ed_œyî
(*(
l
.
£lf_œyî
));

186 
	`puŒ_c⁄√˘ed_œyî
(*(
l
.
ouçut_œyî
));

187 
	}
}

189 
	$push_∫n_œyî
(
œyî
 
l
)

191 
	`push_c⁄√˘ed_œyî
(*(
l
.
öput_œyî
));

192 
	`push_c⁄√˘ed_œyî
(*(
l
.
£lf_œyî
));

193 
	`push_c⁄√˘ed_œyî
(*(
l
.
ouçut_œyî
));

194 
	}
}

196 
	$upd©e_∫n_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
)

198 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
öput_œyî
), 
a
);

199 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
£lf_œyî
), 
a
);

200 
	`upd©e_c⁄√˘ed_œyî_gpu
(*(
l
.
ouçut_œyî
), 
a
);

201 
	}
}

203 
	$f‹w¨d_∫n_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

205 
√tw‹k
 
s
 = {0};

206 
s
.
åaö
 = 
√t
.train;

207 
i
;

208 
œyî
 
öput_œyî
 = *(
l
.input_layer);

209 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

210 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

212 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
ouçut_œyî
.
dñè_gpu
, 1);

213 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
£lf_œyî
.
dñè_gpu
, 1);

214 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0, 
öput_œyî
.
dñè_gpu
, 1);

216 if(
√t
.
åaö
) {

217 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
 *Ü.
°ïs
, 0,Ü.
dñè_gpu
, 1);

218 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
°©e_gpu
, 1,Ü.
¥ev_°©e_gpu
, 1);

221 
i
 = 0; i < 
l
.
°ïs
; ++i) {

222 
s
.
öput_gpu
 = 
√t
.input_gpu;

223 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
öput_œyî
, 
s
);

225 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

226 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
£lf_œyî
, 
s
);

228 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

229 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

230 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

232 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

233 
	`f‹w¨d_c⁄√˘ed_œyî_gpu
(
ouçut_œyî
, 
s
);

235 
√t
.
öput_gpu
 +
l
.
öputs
*l.
b©ch
;

236 
	`ö¸emít_œyî
(&
öput_œyî
, 1);

237 
	`ö¸emít_œyî
(&
£lf_œyî
, 1);

238 
	`ö¸emít_œyî
(&
ouçut_œyî
, 1);

240 
	}
}

242 
	$backw¨d_∫n_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
)

244 
√tw‹k
 
s
 = {0};

245 
s
.
åaö
 = 
√t
.train;

246 
i
;

247 
œyî
 
öput_œyî
 = *(
l
.input_layer);

248 
œyî
 
£lf_œyî
 = *(
l
.self_layer);

249 
œyî
 
ouçut_œyî
 = *(
l
.output_layer);

250 
	`ö¸emít_œyî
(&
öput_œyî
, 
l
.
°ïs
 - 1);

251 
	`ö¸emít_œyî
(&
£lf_œyî
, 
l
.
°ïs
 - 1);

252 
	`ö¸emít_œyî
(&
ouçut_œyî
, 
l
.
°ïs
 - 1);

253 *
œ°_öput
 = 
öput_œyî
.
ouçut_gpu
;

254 *
œ°_£lf
 = 
£lf_œyî
.
ouçut_gpu
;

255 
i
 = 
l
.
°ïs
-1; i >= 0; --i) {

256 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

257 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

258 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut_gpu
, 1,Ü.
°©e_gpu
, 1);

260 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

261 
s
.
dñè_gpu
 = 
£lf_œyî
.delta_gpu;

262 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
ouçut_œyî
, 
s
);

264 if(
i
 != 0) {

265 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

266 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
öput_œyî
.
ouçut_gpu
 -Ü.ouçuts*l.b©ch, 1,Ü.
°©e_gpu
, 1);

267 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
£lf_œyî
.
ouçut_gpu
 -Ü.ouçuts*l.b©ch, 1,Ü.
°©e_gpu
, 1);

269 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
,Ü.
¥ev_°©e_gpu
, 1,Ü.
°©e_gpu
, 1);

272 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
£lf_œyî
.
dñè_gpu
, 1, 
öput_œyî
.delta_gpu, 1);

274 
s
.
öput_gpu
 = 
l
.
°©e_gpu
;

275 
s
.
dñè_gpu
 = (
i
 > 0Ë? 
£lf_œyî
.dñè_gpu - 
l
.
ouçuts
*l.
b©ch
 : 0;

276 i‡(
i
 =0Ë
s
.
dñè_gpu
 = 0;

277 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
£lf_œyî
, 
s
);

279 
s
.
öput_gpu
 = 
√t
.öput_gpu + 
i
*
l
.
öputs
*l.
b©ch
;

280 if(
√t
.
dñè_gpu
Ë
s
.dñè_gpu =Çë.dñè_gpu + 
i
*
l
.
öputs
*l.
b©ch
;

281 
s
.
dñè_gpu
 = 0;

282 
	`backw¨d_c⁄√˘ed_œyî_gpu
(
öput_œyî
, 
s
);

284 
	`ö¸emít_œyî
(&
öput_œyî
, -1);

285 
	`ö¸emít_œyî
(&
£lf_œyî
, -1);

286 
	`ö¸emít_œyî
(&
ouçut_œyî
, -1);

288 
	`fûl_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 0,Ü.
°©e_gpu
, 1);

289 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
œ°_öput
, 1,Ü.
°©e_gpu
, 1);

290 
	`axpy_gpu
(
l
.
ouçuts
 *Ü.
b©ch
, 1, 
œ°_£lf
, 1,Ü.
°©e_gpu
, 1);

291 
	}
}

	@src/rnn_layer.h

2 #i‚de‡
RNN_LAYER_H


3 
	#RNN_LAYER_H


	)

5 
	~"a˘iv©i⁄s.h
"

6 
	~"œyî.h
"

7 
	~"√tw‹k.h
"

8 
	#USET


	)

10 
œyî
 
make_∫n_œyî
(
b©ch
, 
öputs
, 
ouçuts
, 
°ïs
, 
ACTIVATION
 
a˘iv©i⁄
, 
b©ch_n‹mÆize
, 
adam
);

12 
f‹w¨d_∫n_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

13 
backw¨d_∫n_œyî
(
œyî
 
l
, 
√tw‹k
 
√t
);

14 
upd©e_∫n_œyî
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

16 #ifde‡
GPU


17 
f‹w¨d_∫n_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

18 
backw¨d_∫n_œyî_gpu
(
œyî
 
l
, 
√tw‹k
 
√t
);

19 
upd©e_∫n_œyî_gpu
(
œyî
 
l
, 
upd©e_¨gs
 
a
);

20 
push_∫n_œyî
(
œyî
 
l
);

21 
puŒ_∫n_œyî
(
œyî
 
l
);

	@src/route_layer.c

1 
	~"rouã_œyî.h
"

2 
	~"cuda.h
"

3 
	~"bœs.h
"

5 
	~<°dio.h
>

7 
rouã_œyî
 
	$make_rouã_œyî
(
b©ch
, 
n
, *
öput_œyîs
, *
öput_sizes
)

9 
	`Ârötf
(
°dîr
,"route ");

10 
rouã_œyî
 
l
 = {0};

11 
l
.
ty≥
 = 
ROUTE
;

12 
l
.
b©ch
 = batch;

13 
l
.
n
 =Ç;

14 
l
.
öput_œyîs
 = input_layers;

15 
l
.
öput_sizes
 = input_sizes;

16 
i
;

17 
ouçuts
 = 0;

18 
i
 = 0; i < 
n
; ++i){

19 
	`Ârötf
(
°dîr
," %d", 
öput_œyîs
[
i
]);

20 
ouçuts
 +
öput_sizes
[
i
];

22 
	`Ârötf
(
°dîr
, "\n");

23 
l
.
ouçuts
 = outputs;

24 
l
.
öputs
 = 
ouçuts
;

25 
l
.
dñè
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());

26 
l
.
ouçut
 = 
	`ˇŒoc
(
ouçuts
*
b©ch
, ());;

28 
l
.
f‹w¨d
 = 
f‹w¨d_rouã_œyî
;

29 
l
.
backw¨d
 = 
backw¨d_rouã_œyî
;

30 #ifde‡
GPU


31 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_rouã_œyî_gpu
;

32 
l
.
backw¨d_gpu
 = 
backw¨d_rouã_œyî_gpu
;

34 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
ouçuts
*
b©ch
);

35 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
ouçuts
*
b©ch
);

37  
l
;

38 
	}
}

40 
	$ªsize_rouã_œyî
(
rouã_œyî
 *
l
, 
√tw‹k
 *
√t
)

42 
i
;

43 
œyî
 
fú°
 = 
√t
->
œyîs
[
l
->
öput_œyîs
[0]];

44 
l
->
out_w
 = 
fú°
.out_w;

45 
l
->
out_h
 = 
fú°
.out_h;

46 
l
->
out_c
 = 
fú°
.out_c;

47 
l
->
ouçuts
 = 
fú°
.outputs;

48 
l
->
öput_sizes
[0] = 
fú°
.
ouçuts
;

49 
i
 = 1; i < 
l
->
n
; ++i){

50 
ödex
 = 
l
->
öput_œyîs
[
i
];

51 
œyî
 
√xt
 = 
√t
->
œyîs
[
ödex
];

52 
l
->
ouçuts
 +
√xt
.outputs;

53 
l
->
öput_sizes
[
i
] = 
√xt
.
ouçuts
;

54 if(
√xt
.
out_w
 =
fú°
.out_w &&Çext.
out_h
 == first.out_h){

55 
l
->
out_c
 +
√xt
.out_c;

57 
	`¥ötf
("%d %d, %d %d\n", 
√xt
.
out_w
,Çext.
out_h
, 
fú°
.out_w, first.out_h);

58 
l
->
out_h
 =Ü->
out_w
 =Ü->
out_c
 = 0;

61 
l
->
öputs
 =Ü->
ouçuts
;

62 
l
->
dñè
 = 
	`ªÆloc
÷->dñè,Ü->
ouçuts
*l->
b©ch
*());

63 
l
->
ouçut
 = 
	`ªÆloc
÷->ouçut,Ü->
ouçuts
*l->
b©ch
*());

65 #ifde‡
GPU


66 
	`cuda_‰ì
(
l
->
ouçut_gpu
);

67 
	`cuda_‰ì
(
l
->
dñè_gpu
);

68 
l
->
ouçut_gpu
 = 
	`cuda_make_¨øy
÷->
ouçut
,Ü->
ouçuts
*l->
b©ch
);

69 
l
->
dñè_gpu
 = 
	`cuda_make_¨øy
÷->
dñè
,Ü->
ouçuts
*l->
b©ch
);

72 
	}
}

74 
	$f‹w¨d_rouã_œyî
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
)

76 
i
, 
j
;

77 
off£t
 = 0;

78 
i
 = 0; i < 
l
.
n
; ++i){

79 
ödex
 = 
l
.
öput_œyîs
[
i
];

80 *
öput
 = 
√t
.
œyîs
[
ödex
].
ouçut
;

81 
öput_size
 = 
l
.
öput_sizes
[
i
];

82 
j
 = 0; j < 
l
.
b©ch
; ++j){

83 
	`c›y_˝u
(
öput_size
, 
öput
 + 
j
*öput_size, 1, 
l
.
ouçut
 + 
off£t
 + j*l.
ouçuts
, 1);

85 
off£t
 +
öput_size
;

87 
	}
}

89 
	$backw¨d_rouã_œyî
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
)

91 
i
, 
j
;

92 
off£t
 = 0;

93 
i
 = 0; i < 
l
.
n
; ++i){

94 
ödex
 = 
l
.
öput_œyîs
[
i
];

95 *
dñè
 = 
√t
.
œyîs
[
ödex
].delta;

96 
öput_size
 = 
l
.
öput_sizes
[
i
];

97 
j
 = 0; j < 
l
.
b©ch
; ++j){

98 
	`axpy_˝u
(
öput_size
, 1, 
l
.
dñè
 + 
off£t
 + 
j
*l.
ouçuts
, 1, delta + j*input_size, 1);

100 
off£t
 +
öput_size
;

102 
	}
}

104 #ifde‡
GPU


105 
	$f‹w¨d_rouã_œyî_gpu
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
)

107 
i
, 
j
;

108 
off£t
 = 0;

109 
i
 = 0; i < 
l
.
n
; ++i){

110 
ödex
 = 
l
.
öput_œyîs
[
i
];

111 *
öput
 = 
√t
.
œyîs
[
ödex
].
ouçut_gpu
;

112 
öput_size
 = 
l
.
öput_sizes
[
i
];

113 
j
 = 0; j < 
l
.
b©ch
; ++j){

114 
	`c›y_gpu
(
öput_size
, 
öput
 + 
j
*öput_size, 1, 
l
.
ouçut_gpu
 + 
off£t
 + j*l.
ouçuts
, 1);

116 
off£t
 +
öput_size
;

118 
	}
}

120 
	$backw¨d_rouã_œyî_gpu
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
)

122 
i
, 
j
;

123 
off£t
 = 0;

124 
i
 = 0; i < 
l
.
n
; ++i){

125 
ödex
 = 
l
.
öput_œyîs
[
i
];

126 *
dñè
 = 
√t
.
œyîs
[
ödex
].
dñè_gpu
;

127 
öput_size
 = 
l
.
öput_sizes
[
i
];

128 
j
 = 0; j < 
l
.
b©ch
; ++j){

129 
	`axpy_gpu
(
öput_size
, 1, 
l
.
dñè_gpu
 + 
off£t
 + 
j
*l.
ouçuts
, 1, 
dñè
 + j*input_size, 1);

131 
off£t
 +
öput_size
;

133 
	}
}

	@src/route_layer.h

1 #i‚de‡
ROUTE_LAYER_H


2 
	#ROUTE_LAYER_H


	)

3 
	~"√tw‹k.h
"

4 
	~"œyî.h
"

6 
œyî
 
	trouã_œyî
;

8 
rouã_œyî
 
make_rouã_œyî
(
b©ch
, 
n
, *
öput_œyîs
, *
öput_size
);

9 
f‹w¨d_rouã_œyî
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
);

10 
backw¨d_rouã_œyî
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
);

11 
ªsize_rouã_œyî
(
rouã_œyî
 *
l
, 
√tw‹k
 *
√t
);

13 #ifde‡
GPU


14 
f‹w¨d_rouã_œyî_gpu
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
);

15 
backw¨d_rouã_œyî_gpu
(c⁄° 
rouã_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/shortcut_layer.c

1 
	~"sh‹tcut_œyî.h
"

2 
	~"cuda.h
"

3 
	~"bœs.h
"

4 
	~"a˘iv©i⁄s.h
"

6 
	~<°dio.h
>

7 
	~<as£π.h
>

9 
œyî
 
	$make_sh‹tcut_œyî
(
b©ch
, 
ödex
, 
w
, 
h
, 
c
, 
w2
, 
h2
, 
c2
)

11 
	`Ârötf
(
°dîr
,"Sh‹tcuàLayî: %d\n", 
ödex
);

12 
œyî
 
l
 = {0};

13 
l
.
ty≥
 = 
SHORTCUT
;

14 
l
.
b©ch
 = batch;

15 
l
.
w
 = 
w2
;

16 
l
.
h
 = 
h2
;

17 
l
.
c
 = 
c2
;

18 
l
.
out_w
 = 
w
;

19 
l
.
out_h
 = 
h
;

20 
l
.
out_c
 = 
c
;

21 
l
.
ouçuts
 = 
w
*
h
*
c
;

22 
l
.
öputs
 =Ü.
ouçuts
;

24 
l
.
ödex
 = index;

26 
l
.
dñè
 = 
	`ˇŒoc
÷.
ouçuts
*
b©ch
, ());

27 
l
.
ouçut
 = 
	`ˇŒoc
÷.
ouçuts
*
b©ch
, ());;

29 
l
.
f‹w¨d
 = 
f‹w¨d_sh‹tcut_œyî
;

30 
l
.
backw¨d
 = 
backw¨d_sh‹tcut_œyî
;

31 #ifde‡
GPU


32 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_sh‹tcut_œyî_gpu
;

33 
l
.
backw¨d_gpu
 = 
backw¨d_sh‹tcut_œyî_gpu
;

35 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
,Ü.
ouçuts
*
b©ch
);

36 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
,Ü.
ouçuts
*
b©ch
);

38  
l
;

39 
	}
}

41 
	$f‹w¨d_sh‹tcut_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

43 
	`c›y_˝u
(
l
.
ouçuts
*l.
b©ch
, 
√t
.
öput
, 1,Ü.
ouçut
, 1);

44 
	`sh‹tcut_˝u
(
l
.
b©ch
,Ü.
w
,Ü.
h
,Ü.
c
, 
√t
.
œyîs
[l.
ödex
].
ouçut
,Ü.
out_w
,Ü.
out_h
,Ü.
out_c
,Ü.output);

45 
	`a˘iv©e_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

46 
	}
}

48 
	$backw¨d_sh‹tcut_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

50 
	`gødõ¡_¨øy
(
l
.
ouçut
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè
);

51 
	`axpy_˝u
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
dñè
, 1, 
√t
.delta, 1);

52 
	`sh‹tcut_˝u
(
l
.
b©ch
,Ü.
out_w
,Ü.
out_h
,Ü.
out_c
,Ü.
dñè
,Ü.
w
,Ü.
h
,Ü.
c
, 
√t
.
œyîs
[l.
ödex
].delta);

53 
	}
}

55 #ifde‡
GPU


56 
	$f‹w¨d_sh‹tcut_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

58 
	`c›y_gpu
(
l
.
ouçuts
*l.
b©ch
, 
√t
.
öput_gpu
, 1,Ü.
ouçut_gpu
, 1);

59 
	`sh‹tcut_gpu
(
l
.
b©ch
,Ü.
w
,Ü.
h
,Ü.
c
, 
√t
.
œyîs
[l.
ödex
].
ouçut_gpu
,Ü.
out_w
,Ü.
out_h
,Ü.
out_c
,Ü.output_gpu);

60 
	`a˘iv©e_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
);

61 
	}
}

63 
	$backw¨d_sh‹tcut_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
)

65 
	`gødõ¡_¨øy_gpu
(
l
.
ouçut_gpu
,Ü.
ouçuts
*l.
b©ch
,Ü.
a˘iv©i⁄
,Ü.
dñè_gpu
);

66 
	`axpy_gpu
(
l
.
ouçuts
*l.
b©ch
, 1,Ü.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

67 
	`sh‹tcut_gpu
(
l
.
b©ch
,Ü.
out_w
,Ü.
out_h
,Ü.
out_c
,Ü.
dñè_gpu
,Ü.
w
,Ü.
h
,Ü.
c
, 
√t
.
œyîs
[l.
ödex
].delta_gpu);

68 
	}
}

	@src/shortcut_layer.h

1 #i‚de‡
SHORTCUT_LAYER_H


2 
	#SHORTCUT_LAYER_H


	)

4 
	~"œyî.h
"

5 
	~"√tw‹k.h
"

7 
œyî
 
make_sh‹tcut_œyî
(
b©ch
, 
ödex
, 
w
, 
h
, 
c
, 
w2
, 
h2
, 
c2
);

8 
f‹w¨d_sh‹tcut_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

9 
backw¨d_sh‹tcut_œyî
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

11 #ifde‡
GPU


12 
f‹w¨d_sh‹tcut_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

13 
backw¨d_sh‹tcut_œyî_gpu
(c⁄° 
œyî
 
l
, 
√tw‹k
 
√t
);

	@src/softmax_layer.c

1 
	~"so·max_œyî.h
"

2 
	~"bœs.h
"

3 
	~"cuda.h
"

5 
	~<Êﬂt.h
>

6 
	~<m©h.h
>

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~<as£π.h
>

11 
so·max_œyî
 
	$make_so·max_œyî
(
b©ch
, 
öputs
, 
groups
)

13 
	`as£π
(
öputs
%
groups
 == 0);

14 
	`Ârötf
(
°dîr
, "so·max %4d\n", 
öputs
);

15 
so·max_œyî
 
l
 = {0};

16 
l
.
ty≥
 = 
SOFTMAX
;

17 
l
.
b©ch
 = batch;

18 
l
.
groups
 = groups;

19 
l
.
öputs
 = inputs;

20 
l
.
ouçuts
 = 
öputs
;

21 
l
.
ouçut
 = 
	`ˇŒoc
(
öputs
*
b©ch
, ());

22 
l
.
dñè
 = 
	`ˇŒoc
(
öputs
*
b©ch
, ());

24 
l
.
f‹w¨d
 = 
f‹w¨d_so·max_œyî
;

25 
l
.
backw¨d
 = 
backw¨d_so·max_œyî
;

26 #ifde‡
GPU


27 
l
.
f‹w¨d_gpu
 = 
f‹w¨d_so·max_œyî_gpu
;

28 
l
.
backw¨d_gpu
 = 
backw¨d_so·max_œyî_gpu
;

30 
l
.
ouçut_gpu
 = 
	`cuda_make_¨øy
÷.
ouçut
, 
öputs
*
b©ch
);

31 
l
.
dñè_gpu
 = 
	`cuda_make_¨øy
÷.
dñè
, 
öputs
*
b©ch
);

33  
l
;

34 
	}
}

36 
	$f‹w¨d_so·max_œyî
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
)

38 if(
l
.
so·max_åì
){

39 
i
;

40 
cou¡
 = 0;

41 
i
 = 0; i < 
l
.
so·max_åì
->
groups
; ++i) {

42 
group_size
 = 
l
.
so·max_åì
->group_size[
i
];

43 
	`so·max_˝u
(
√t
.
öput
 + 
cou¡
, 
group_size
, 
l
.
b©ch
,Ü.
öputs
, 1, 0, 1,Ü.
ãm≥øtuª
,Ü.
ouçut
 + count);

44 
cou¡
 +
group_size
;

47 
	`so·max_˝u
(
√t
.
öput
, 
l
.
öputs
/l.
groups
,Ü.
b©ch
,Ü.öputs,Ü.groups,Ü.öputs/l.groups, 1,Ü.
ãm≥øtuª
,Ü.
ouçut
);

49 
	}
}

51 
	$backw¨d_so·max_œyî
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
)

53 
	`axpy_˝u
(
l
.
öputs
*l.
b©ch
, 1,Ü.
dñè
, 1, 
√t
.delta, 1);

54 
	}
}

56 #ifde‡
GPU


58 
	$puŒ_so·max_œyî_ouçut
(c⁄° 
so·max_œyî
 
œyî
)

60 
	`cuda_puŒ_¨øy
(
œyî
.
ouçut_gpu
,Üayî.
ouçut
,Üayî.
öputs
*œyî.
b©ch
);

61 
	}
}

63 
	$f‹w¨d_so·max_œyî_gpu
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
)

65 if(
l
.
so·max_åì
){

66 
i
;

67 
cou¡
 = 0;

68 
i
 = 0; i < 
l
.
so·max_åì
->
groups
; ++i) {

69 
group_size
 = 
l
.
so·max_åì
->group_size[
i
];

70 
	`so·max_gpu
(
√t
.
öput_gpu
 + 
cou¡
, 
group_size
, 
l
.
b©ch
,Ü.
öputs
, 1, 0, 1,Ü.
ãm≥øtuª
,Ü.
ouçut_gpu
 + count);

71 
cou¡
 +
group_size
;

74 if(
l
.
•©ül
){

75 
	`so·max_gpu
(
√t
.
öput_gpu
, 
l
.
c
,Ü.
b©ch
*l.c,Ü.
öputs
/l.c,Ü.
w
*l.
h
, 1,Ü.w*l.h, 1,Ü.
ouçut_gpu
);

77 
	`so·max_gpu
(
√t
.
öput_gpu
, 
l
.
öputs
/l.
groups
,Ü.
b©ch
,Ü.öputs,Ü.groups,Ü.öputs/l.groups, 1,Ü.
ãm≥øtuª
,Ü.
ouçut_gpu
);

80 
	}
}

82 
	$backw¨d_so·max_œyî_gpu
(c⁄° 
so·max_œyî
 
œyî
, 
√tw‹k
 
√t
)

84 
	`axpy_gpu
(
œyî
.
b©ch
*œyî.
öputs
, 1,Üayî.
dñè_gpu
, 1, 
√t
.delta_gpu, 1);

85 
	}
}

	@src/softmax_layer.h

1 #i‚de‡
SOFTMAX_LAYER_H


2 
	#SOFTMAX_LAYER_H


	)

3 
	~"œyî.h
"

4 
	~"√tw‹k.h
"

6 
œyî
 
	tso·max_œyî
;

8 
so·max_¨øy
(*
öput
, 
n
, 
ãmp
, *
ouçut
);

9 
so·max_œyî
 
make_so·max_œyî
(
b©ch
, 
öputs
, 
groups
);

10 
f‹w¨d_so·max_œyî
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
);

11 
backw¨d_so·max_œyî
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
);

13 #ifde‡
GPU


14 
puŒ_so·max_œyî_ouçut
(c⁄° 
so·max_œyî
 
l
);

15 
f‹w¨d_so·max_œyî_gpu
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
);

16 
backw¨d_so·max_œyî_gpu
(c⁄° 
so·max_œyî
 
l
, 
√tw‹k
 
√t
);

	@src/stb_image.h

214 #i‚de‡
STBI_INCLUDE_STB_IMAGE_H


215 
	#STBI_INCLUDE_STB_IMAGE_H


	)

387 #i‚de‡
STBI_NO_STDIO


388 
	~<°dio.h
>

391 
	#STBI_VERSION
 1

	)

395 
	mSTBI_deÁu…
 = 0,

397 
	mSTBI_gªy
 = 1,

398 
	mSTBI_gªy_Æpha
 = 2,

399 
	mSTBI_rgb
 = 3,

400 
	mSTBI_rgb_Æpha
 = 4

403 
	t°bi_uc
;

405 #ifde‡
__˝lu•lus


409 #ifde‡
STB_IMAGE_STATIC


410 
	#STBIDEF
 

	)

412 
	#STBIDEF
 

	)

426 (*
ªad
Ë(*
u£r
,*
d©a
,
size
);

427 (*
skù
Ë(*
u£r
,
n
);

428 (*
eof
Ë(*
u£r
);

429 } 
	t°bi_io_ˇŒbacks
;

431 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd
 (c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
);

432 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_mem‹y
 (°bi_u¯c⁄° *
buf„r
, 
Àn
 , *
x
, *
y
, *
comp
, 
ªq_comp
);

433 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
 , *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
);

435 #i‚de‡
STBI_NO_STDIO


436 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
);

440 #i‚de‡
STBI_NO_LINEAR


441 
STBIDEF
 *
°bi_lﬂdf
 (c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
);

442 
STBIDEF
 *
°bi_lﬂdf_‰om_mem‹y
 (
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
, 
ªq_comp
);

443 
STBIDEF
 *
°bi_lﬂdf_‰om_ˇŒbacks
 (
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
);

445 #i‚de‡
STBI_NO_STDIO


446 
STBIDEF
 *
°bi_lﬂdf_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
);

450 #i‚de‡
STBI_NO_HDR


451 
STBIDEF
 
°bi_hdr_to_ldr_gamma
(
gamma
);

452 
STBIDEF
 
°bi_hdr_to_ldr_sˇÀ
(
sˇÀ
);

455 #i‚de‡
STBI_NO_LINEAR


456 
STBIDEF
 
°bi_ldr_to_hdr_gamma
(
gamma
);

457 
STBIDEF
 
°bi_ldr_to_hdr_sˇÀ
(
sˇÀ
);

461 
STBIDEF
 
°bi_is_hdr_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
);

462 
STBIDEF
 
°bi_is_hdr_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
);

463 #i‚de‡
STBI_NO_STDIO


464 
STBIDEF
 
°bi_is_hdr
 (c⁄° *
fûíame
);

465 
STBIDEF
 
°bi_is_hdr_‰om_fûe
(
FILE
 *
f
);

471 
STBIDEF
 c⁄° *
°bi_Áûuª_ªas⁄
 ();

474 
STBIDEF
 
°bi_image_‰ì
 (*
ªtvÆ_‰om_°bi_lﬂd
);

477 
STBIDEF
 
°bi_öfo_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
);

478 
STBIDEF
 
°bi_öfo_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
);

480 #i‚de‡
STBI_NO_STDIO


481 
STBIDEF
 
°bi_öfo
 (c⁄° *
fûíame
, *
x
, *
y
, *
comp
);

482 
STBIDEF
 
°bi_öfo_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
comp
);

491 
STBIDEF
 
°bi_£t_u≈ªmu…ùly_⁄_lﬂd
(
Êag_åue_if_should_u≈ªmu…ùly
);

495 
STBIDEF
 
°bi_c⁄vît_ùh⁄e_≤g_to_rgb
(
Êag_åue_if_should_c⁄vît
);

498 
STBIDEF
 
°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd
(
Êag_åue_if_should_Êù
);

502 
STBIDEF
 *
°bi_zlib_decode_mÆloc_guesssize
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
);

503 
STBIDEF
 *
°bi_zlib_decode_mÆloc_guesssize_hódîÊag
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
, 
∑r£_hódî
);

504 
STBIDEF
 *
°bi_zlib_decode_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
);

505 
STBIDEF
 
°bi_zlib_decode_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
);

507 
STBIDEF
 *
°bi_zlib_decode_nohódî_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
);

508 
STBIDEF
 
°bi_zlib_decode_nohódî_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
);

511 #ifde‡
__˝lu•lus


520 #ifde‡
STB_IMAGE_IMPLEMENTATION


522 #i‡
deföed
(
STBI_ONLY_JPEG
Ë|| deföed(
STBI_ONLY_PNG
Ë|| deföed(
STBI_ONLY_BMP
) \

523 || 
deföed
(
STBI_ONLY_TGA
Ë|| deföed(
STBI_ONLY_GIF
Ë|| deföed(
STBI_ONLY_PSD
) \

524 || 
deföed
(
STBI_ONLY_HDR
Ë|| deföed(
STBI_ONLY_PIC
Ë|| deföed(
STBI_ONLY_PNM
) \

525 || 
	$deföed
(
STBI_ONLY_ZLIB
)

526 #i‚de‡
STBI_ONLY_JPEG


527 
	#STBI_NO_JPEG


	)

529 #i‚de‡
STBI_ONLY_PNG


530 
	#STBI_NO_PNG


	)

532 #i‚de‡
STBI_ONLY_BMP


533 
	#STBI_NO_BMP


	)

535 #i‚de‡
STBI_ONLY_PSD


536 
	#STBI_NO_PSD


	)

538 #i‚de‡
STBI_ONLY_TGA


539 
	#STBI_NO_TGA


	)

541 #i‚de‡
STBI_ONLY_GIF


542 
	#STBI_NO_GIF


	)

544 #i‚de‡
STBI_ONLY_HDR


545 
	#STBI_NO_HDR


	)

547 #i‚de‡
STBI_ONLY_PIC


548 
	#STBI_NO_PIC


	)

550 #i‚de‡
STBI_ONLY_PNM


551 
	#STBI_NO_PNM


	)

555 #i‡
	`deföed
(
STBI_NO_PNG
Ë&& !deföed(
STBI_SUPPORT_ZLIB
Ë&& !deföed(
STBI_NO_ZLIB
)

556 
	#STBI_NO_ZLIB


	)

560 
	~<°d¨g.h
>

561 
	~<°ddef.h
>

562 
	~<°dlib.h
>

563 
	~<°rög.h
>

565 #i‡!
	`deföed
(
STBI_NO_LINEAR
Ë|| !deföed(
STBI_NO_HDR
)

566 
	~<m©h.h
>

569 #i‚de‡
STBI_NO_STDIO


570 
	~<°dio.h
>

573 #i‚de‡
STBI_ASSERT


574 
	~<as£π.h
>

575 
	#STBI_ASSERT
(
x
Ë
	`as£π
(x)

	)

579 #i‚de‡
_MSC_VER


580 #ifde‡
__˝lu•lus


581 
	#°bi_ölöe
 
ölöe


	)

583 
	#°bi_ölöe


	)

586 
	#°bi_ölöe
 
__f‹˚ölöe


	)

590 #ifde‡
_MSC_VER


591 
	t°bi__uöt16
;

592 sig√d 
	t°bi__öt16
;

593 
	t°bi__uöt32
;

594 sig√d 
	t°bi__öt32
;

596 
	~<°döt.h
>

597 
uöt16_t
 
	t°bi__uöt16
;

598 
öt16_t
 
	t°bi__öt16
;

599 
uöt32_t
 
	t°bi__uöt32
;

600 
öt32_t
 
	t°bi__öt32
;

604 
	tvÆid©e_uöt32
[(
°bi__uöt32
)==4 ? 1 : -1];

606 #ifde‡
_MSC_VER


607 
	#STBI_NOTUSED
(
v
Ë()(v)

	)

609 
	#STBI_NOTUSED
(
v
Ë()(v)

	)

612 #ifde‡
_MSC_VER


613 
	#STBI_HAS_LROTL


	)

616 #ifde‡
STBI_HAS_LROTL


617 
	#°bi_ÃŸ
(
x
,
y
Ë
	`_ÃŸl
(x,y)

	)

619 
	#°bi_ÃŸ
(
x
,
y
Ë(((xË<< (y)Ë| ((xË>> (32 - (y))))

	)

622 #i‡
	`deföed
(
STBI_MALLOC
Ë&& deföed(
STBI_FREE
Ë&& deföed(
STBI_REALLOC
)

624 #ñi‡!
	`deföed
(
STBI_MALLOC
Ë&& !deföed(
STBI_FREE
Ë&& !deföed(
STBI_REALLOC
)

630 #i‚de‡
STBI_MALLOC


631 
	#STBI_MALLOC
(
sz
Ë
	`mÆloc
(sz)

	)

632 
	#STBI_REALLOC
(
p
,
sz
Ë
	`ªÆloc
’,sz)

	)

633 
	#STBI_FREE
(
p
Ë
	`‰ì
’)

	)

637 #i‡
	`deföed
(
__x86_64__
Ë|| deföed(
_M_X64
)

638 
	#STBI__X64_TARGET


	)

639 #ñi‡
	`deföed
(
__i386
Ë|| deföed(
_M_IX86
)

640 
	#STBI__X86_TARGET


	)

643 #i‡
	`deföed
(
__GNUC__
Ë&& (deföed(
STBI__X86_TARGET
Ë|| deföed(
STBI__X64_TARGET
)Ë&& !deföed(
__SSE2__
Ë&& !deföed(
STBI_NO_SIMD
)

649 
	#STBI_NO_SIMD


	)

652 #i‡
	`deföed
(
__MINGW32__
Ë&& deföed(
STBI__X86_TARGET
Ë&& !deföed(
STBI_MINGW_ENABLE_SSE2
Ë&& !deföed(
STBI_NO_SIMD
)

664 
	#STBI_NO_SIMD


	)

667 #i‡!
	`deföed
(
STBI_NO_SIMD
Ë&& deföed(
STBI__X86_TARGET
)

668 
	#STBI_SSE2


	)

669 
	~<emmöåö.h
>

671 #ifde‡
_MSC_VER


673 #i‡
_MSC_VER
 >= 1400

674 
	~<öåö.h
>

675 
	$°bi__˝uid3
()

677 
öfo
[4];

678 
	`__˝uid
(
öfo
,1);

679  
öfo
[3];

680 
	}
}

682 
	$°bi__˝uid3
()

684 
ªs
;

685 
__asm
 {

686 
mov
 
óx
,1

687 
˝uid


688 
mov
 
ªs
,
edx


690  
ªs
;

691 
	}
}

694 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ë
	`__de˛•ec
(
	`Æign
(16)Ëty≥ 
	)
name

696 
	$°bi__s£2_avaûabÀ
()

698 
öfo3
 = 
	`°bi__˝uid3
();

699  ((
öfo3
 >> 26) & 1) != 0;

700 
	}
}

702 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥Çamê
	`__©åibuã__
((
	`Æig√d
(16)))

	)

704 
	$°bi__s£2_avaûabÀ
()

706 #i‡
	`deföed
(
__GNUC__
Ë&& (__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 408

708  
	`__buûtö_˝u_suµ‹ts
("sse2");

714 
	}
}

719 #i‡
deföed
(
STBI_NO_SIMD
Ë&& deföed(
STBI_NEON
)

720 #unde‡
STBI_NEON


723 #ifde‡
STBI_NEON


724 
	~<¨m_√⁄.h
>

726 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥Çamê
	`__©åibuã__
((
	`Æig√d
(16)))

	)

729 #i‚de‡
STBI_SIMD_ALIGN


730 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥ 
	)
name

741 
°bi__uöt32
 
	mimg_x
, 
	mimg_y
;

742 
	mimg_n
, 
	mimg_out_n
;

744 
°bi_io_ˇŒbacks
 
	mio
;

745 *
	mio_u£r_d©a
;

747 
	mªad_‰om_ˇŒbacks
;

748 
	mbuÊí
;

749 
°bi_uc
 
	mbuf„r_°¨t
[128];

751 
°bi_uc
 *
	mimg_buf„r
, *
	mimg_buf„r_íd
;

752 
°bi_uc
 *
	mimg_buf„r_‹igöÆ
;

753 } 
	t°bi__c⁄ãxt
;

756 
°bi__ªfûl_buf„r
(
°bi__c⁄ãxt
 *
s
);

759 
	$°bi__°¨t_mem
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 c⁄° *
buf„r
, 
Àn
)

761 
s
->
io
.
ªad
 = 
NULL
;

762 
s
->
ªad_‰om_ˇŒbacks
 = 0;

763 
s
->
img_buf„r
 = s->
img_buf„r_‹igöÆ
 = (
°bi_uc
 *Ë
buf„r
;

764 
s
->
img_buf„r_íd
 = (
°bi_uc
 *Ë
buf„r
+
Àn
;

765 
	}
}

768 
	$°bi__°¨t_ˇŒbacks
(
°bi__c⁄ãxt
 *
s
, 
°bi_io_ˇŒbacks
 *
c
, *
u£r
)

770 
s
->
io
 = *
c
;

771 
s
->
io_u£r_d©a
 = 
u£r
;

772 
s
->
buÊí
 = (s->
buf„r_°¨t
);

773 
s
->
ªad_‰om_ˇŒbacks
 = 1;

774 
s
->
img_buf„r_‹igöÆ
 = s->
buf„r_°¨t
;

775 
	`°bi__ªfûl_buf„r
(
s
);

776 
	}
}

778 #i‚de‡
STBI_NO_STDIO


780 
	$°bi__°dio_ªad
(*
u£r
, *
d©a
, 
size
)

782  (Ë
	`‰ód
(
d©a
,1,
size
,(
FILE
*Ë
u£r
);

783 
	}
}

785 
	$°bi__°dio_skù
(*
u£r
, 
n
)

787 
	`f£ek
((
FILE
*Ë
u£r
, 
n
, 
SEEK_CUR
);

788 
	}
}

790 
	$°bi__°dio_eof
(*
u£r
)

792  
	`„of
((
FILE
*Ë
u£r
);

793 
	}
}

795 
°bi_io_ˇŒbacks
 
	g°bi__°dio_ˇŒbacks
 =

797 
°bi__°dio_ªad
,

798 
°bi__°dio_skù
,

799 
°bi__°dio_eof
,

802 
	$°bi__°¨t_fûe
(
°bi__c⁄ãxt
 *
s
, 
FILE
 *
f
)

804 
	`°bi__°¨t_ˇŒbacks
(
s
, &
°bi__°dio_ˇŒbacks
, (*Ë
f
);

805 
	}
}

811 
	$°bi__ªwöd
(
°bi__c⁄ãxt
 *
s
)

816 
s
->
img_buf„r
 = s->
img_buf„r_‹igöÆ
;

817 
	}
}

819 #i‚de‡
STBI_NO_JPEG


820 
°bi__j≥g_ã°
(
°bi__c⁄ãxt
 *
s
);

821 
°bi_uc
 *
°bi__j≥g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

822 
°bi__j≥g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

825 #i‚de‡
STBI_NO_PNG


826 
°bi__≤g_ã°
(
°bi__c⁄ãxt
 *
s
);

827 
°bi_uc
 *
°bi__≤g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

828 
°bi__≤g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

831 #i‚de‡
STBI_NO_BMP


832 
°bi__bmp_ã°
(
°bi__c⁄ãxt
 *
s
);

833 
°bi_uc
 *
°bi__bmp_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

834 
°bi__bmp_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

837 #i‚de‡
STBI_NO_TGA


838 
°bi__tga_ã°
(
°bi__c⁄ãxt
 *
s
);

839 
°bi_uc
 *
°bi__tga_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

840 
°bi__tga_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

843 #i‚de‡
STBI_NO_PSD


844 
°bi__psd_ã°
(
°bi__c⁄ãxt
 *
s
);

845 
°bi_uc
 *
°bi__psd_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

846 
°bi__psd_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

849 #i‚de‡
STBI_NO_HDR


850 
°bi__hdr_ã°
(
°bi__c⁄ãxt
 *
s
);

851 *
°bi__hdr_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

852 
°bi__hdr_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

855 #i‚de‡
STBI_NO_PIC


856 
°bi__pic_ã°
(
°bi__c⁄ãxt
 *
s
);

857 
°bi_uc
 *
°bi__pic_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

858 
°bi__pic_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

861 #i‚de‡
STBI_NO_GIF


862 
°bi__gif_ã°
(
°bi__c⁄ãxt
 *
s
);

863 
°bi_uc
 *
°bi__gif_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

864 
°bi__gif_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

867 #i‚de‡
STBI_NO_PNM


868 
°bi__≤m_ã°
(
°bi__c⁄ãxt
 *
s
);

869 
°bi_uc
 *
°bi__≤m_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
);

870 
°bi__≤m_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

874 c⁄° *
	g°bi__g_Áûuª_ªas⁄
;

876 
STBIDEF
 c⁄° *
	$°bi_Áûuª_ªas⁄
()

878  
°bi__g_Áûuª_ªas⁄
;

879 
	}
}

881 
	$°bi__îr
(c⁄° *
°r
)

883 
°bi__g_Áûuª_ªas⁄
 = 
°r
;

885 
	}
}

887 *
	$°bi__mÆloc
(
size_t
 
size
)

889  
	`STBI_MALLOC
(
size
);

890 
	}
}

896 #ifde‡
STBI_NO_FAILURE_STRINGS


897 
	#°bi__îr
(
x
,
y
Ë0

	)

898 #ñi‡
deföed
(
STBI_FAILURE_USERMSG
)

899 
	#°bi__îr
(
x
,
y
Ë
	`°bi__îr
(y)

	)

901 
	#°bi__îr
(
x
,
y
Ë
	`°bi__îr
(x)

	)

904 
	#°bi__îΩf
(
x
,
y
Ë((*Ë(
	`°bi__îr
(x,y)?
NULL
:NULL))

	)

905 
	#°bi__îΩuc
(
x
,
y
Ë((*Ë(
	`°bi__îr
(x,y)?
NULL
:NULL))

	)

907 
STBIDEF
 
	$°bi_image_‰ì
(*
ªtvÆ_‰om_°bi_lﬂd
)

909 
	`STBI_FREE
(
ªtvÆ_‰om_°bi_lﬂd
);

910 
	}
}

912 #i‚de‡
STBI_NO_LINEAR


913 *
°bi__ldr_to_hdr
(
°bi_uc
 *
d©a
, 
x
, 
y
, 
comp
);

916 #i‚de‡
STBI_NO_HDR


917 
°bi_uc
 *
°bi__hdr_to_ldr
(*
d©a
, 
x
, 
y
, 
comp
);

920 
	g°bi__vîtiˇŒy_Êù_⁄_lﬂd
 = 0;

922 
STBIDEF
 
	$°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd
(
Êag_åue_if_should_Êù
)

924 
°bi__vîtiˇŒy_Êù_⁄_lﬂd
 = 
Êag_åue_if_should_Êù
;

925 
	}
}

927 *
	$°bi__lﬂd_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

929 #i‚de‡
STBI_NO_JPEG


930 i‡(
	`°bi__j≥g_ã°
(
s
)Ë 
	`°bi__j≥g_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

932 #i‚de‡
STBI_NO_PNG


933 i‡(
	`°bi__≤g_ã°
(
s
)Ë 
	`°bi__≤g_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

935 #i‚de‡
STBI_NO_BMP


936 i‡(
	`°bi__bmp_ã°
(
s
)Ë 
	`°bi__bmp_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

938 #i‚de‡
STBI_NO_GIF


939 i‡(
	`°bi__gif_ã°
(
s
)Ë 
	`°bi__gif_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

941 #i‚de‡
STBI_NO_PSD


942 i‡(
	`°bi__psd_ã°
(
s
)Ë 
	`°bi__psd_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

944 #i‚de‡
STBI_NO_PIC


945 i‡(
	`°bi__pic_ã°
(
s
)Ë 
	`°bi__pic_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

947 #i‚de‡
STBI_NO_PNM


948 i‡(
	`°bi__≤m_ã°
(
s
)Ë 
	`°bi__≤m_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
);

951 #i‚de‡
STBI_NO_HDR


952 i‡(
	`°bi__hdr_ã°
(
s
)) {

953 *
hdr
 = 
	`°bi__hdr_lﬂd
(
s
, 
x
,
y
,
comp
,
ªq_comp
);

954  
	`°bi__hdr_to_ldr
(
hdr
, *
x
, *
y
, 
ªq_comp
 ?Ñeq_com∞: *
comp
);

958 #i‚de‡
STBI_NO_TGA


960 i‡(
	`°bi__tga_ã°
(
s
))

961  
	`°bi__tga_lﬂd
(
s
,
x
,
y
,
comp
,
ªq_comp
);

964  
	`°bi__îΩuc
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

965 
	}
}

967 *
	$°bi__lﬂd_Êù
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

969 *
ªsu…
 = 
	`°bi__lﬂd_maö
(
s
, 
x
, 
y
, 
comp
, 
ªq_comp
);

971 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
 && 
ªsu…
 !
NULL
) {

972 
w
 = *
x
, 
h
 = *
y
;

973 
dïth
 = 
ªq_comp
 ?Ñeq_com∞: *
comp
;

974 
row
,
cﬁ
,
z
;

975 
°bi_uc
 
ãmp
;

978 
row
 = 0;Ñow < (
h
>>1);Ñow++) {

979 
cﬁ
 = 0; cﬁ < 
w
; col++) {

980 
z
 = 0; z < 
dïth
; z++) {

981 
ãmp
 = 
ªsu…
[(
row
 * 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
];

982 
ªsu…
[(
row
 * 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
] =Ñesu…[((
h
 -Ñow - 1) * w + col) * depth + z];

983 
ªsu…
[((
h
 - 
row
 - 1Ë* 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
] = 
ãmp
;

989  
ªsu…
;

990 
	}
}

992 
	$°bi__Êﬂt_po°¥o˚ss
(*
ªsu…
, *
x
, *
y
, *
comp
, 
ªq_comp
)

994 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
 && 
ªsu…
 !
NULL
) {

995 
w
 = *
x
, 
h
 = *
y
;

996 
dïth
 = 
ªq_comp
 ?Ñeq_com∞: *
comp
;

997 
row
,
cﬁ
,
z
;

998 
ãmp
;

1001 
row
 = 0;Ñow < (
h
>>1);Ñow++) {

1002 
cﬁ
 = 0; cﬁ < 
w
; col++) {

1003 
z
 = 0; z < 
dïth
; z++) {

1004 
ãmp
 = 
ªsu…
[(
row
 * 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
];

1005 
ªsu…
[(
row
 * 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
] =Ñesu…[((
h
 -Ñow - 1) * w + col) * depth + z];

1006 
ªsu…
[((
h
 - 
row
 - 1Ë* 
w
 + 
cﬁ
Ë* 
dïth
 + 
z
] = 
ãmp
;

1011 
	}
}

1014 #i‚de‡
STBI_NO_STDIO


1016 
FILE
 *
	$°bi__f›í
(c⁄° *
fûíame
, c⁄° *
mode
)

1018 
FILE
 *
f
;

1019 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1400

1020 i‡(0 !
	`f›í_s
(&
f
, 
fûíame
, 
mode
))

1021 
f
=0;

1023 
f
 = 
	`f›í
(
fûíame
, 
mode
);

1025  
f
;

1026 
	}
}

1029 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1031 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1032 *
ªsu…
;

1033 i‡(!
f
Ë 
	`°bi__îΩuc
("can't fopen", "UnableÅo open file");

1034 
ªsu…
 = 
	`°bi_lﬂd_‰om_fûe
(
f
,
x
,
y
,
comp
,
ªq_comp
);

1035 
	`f˛o£
(
f
);

1036  
ªsu…
;

1037 
	}
}

1039 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1041 *
ªsu…
;

1042 
°bi__c⁄ãxt
 
s
;

1043 
	`°bi__°¨t_fûe
(&
s
,
f
);

1044 
ªsu…
 = 
	`°bi__lﬂd_Êù
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1045 i‡(
ªsu…
) {

1047 
	`f£ek
(
f
, - (Ë(
s
.
img_buf„r_íd
 - s.
img_buf„r
), 
SEEK_CUR
);

1049  
ªsu…
;

1050 
	}
}

1053 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1055 
°bi__c⁄ãxt
 
s
;

1056 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1057  
	`°bi__lﬂd_Êù
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1058 
	}
}

1060 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1062 
°bi__c⁄ãxt
 
s
;

1063 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1064  
	`°bi__lﬂd_Êù
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1065 
	}
}

1067 #i‚de‡
STBI_NO_LINEAR


1068 *
	$°bi__lﬂdf_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1070 *
d©a
;

1071 #i‚de‡
STBI_NO_HDR


1072 i‡(
	`°bi__hdr_ã°
(
s
)) {

1073 *
hdr_d©a
 = 
	`°bi__hdr_lﬂd
(
s
,
x
,
y
,
comp
,
ªq_comp
);

1074 i‡(
hdr_d©a
)

1075 
	`°bi__Êﬂt_po°¥o˚ss
(
hdr_d©a
,
x
,
y
,
comp
,
ªq_comp
);

1076  
hdr_d©a
;

1079 
d©a
 = 
	`°bi__lﬂd_Êù
(
s
, 
x
, 
y
, 
comp
, 
ªq_comp
);

1080 i‡(
d©a
)

1081  
	`°bi__ldr_to_hdr
(
d©a
, *
x
, *
y
, 
ªq_comp
 ?Ñeq_com∞: *
comp
);

1082  
	`°bi__îΩf
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

1083 
	}
}

1085 
STBIDEF
 *
	$°bi_lﬂdf_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1087 
°bi__c⁄ãxt
 
s
;

1088 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1089  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1090 
	}
}

1092 
STBIDEF
 *
	$°bi_lﬂdf_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1094 
°bi__c⁄ãxt
 
s
;

1095 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1096  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1097 
	}
}

1099 #i‚de‡
STBI_NO_STDIO


1100 
STBIDEF
 *
	$°bi_lﬂdf
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1102 *
ªsu…
;

1103 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1104 i‡(!
f
Ë 
	`°bi__îΩf
("can't fopen", "UnableÅo open file");

1105 
ªsu…
 = 
	`°bi_lﬂdf_‰om_fûe
(
f
,
x
,
y
,
comp
,
ªq_comp
);

1106 
	`f˛o£
(
f
);

1107  
ªsu…
;

1108 
	}
}

1110 
STBIDEF
 *
	$°bi_lﬂdf_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1112 
°bi__c⁄ãxt
 
s
;

1113 
	`°bi__°¨t_fûe
(&
s
,
f
);

1114  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1115 
	}
}

1124 
STBIDEF
 
	$°bi_is_hdr_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
)

1126 #i‚de‡
STBI_NO_HDR


1127 
°bi__c⁄ãxt
 
s
;

1128 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1129  
	`°bi__hdr_ã°
(&
s
);

1131 
	`STBI_NOTUSED
(
buf„r
);

1132 
	`STBI_NOTUSED
(
Àn
);

1135 
	}
}

1137 #i‚de‡
STBI_NO_STDIO


1138 
STBIDEF
 
	$°bi_is_hdr
 (c⁄° *
fûíame
)

1140 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1141 
ªsu…
=0;

1142 i‡(
f
) {

1143 
ªsu…
 = 
	`°bi_is_hdr_‰om_fûe
(
f
);

1144 
	`f˛o£
(
f
);

1146  
ªsu…
;

1147 
	}
}

1149 
STBIDEF
 
	$°bi_is_hdr_‰om_fûe
(
FILE
 *
f
)

1151 #i‚de‡
STBI_NO_HDR


1152 
°bi__c⁄ãxt
 
s
;

1153 
	`°bi__°¨t_fûe
(&
s
,
f
);

1154  
	`°bi__hdr_ã°
(&
s
);

1158 
	}
}

1161 
STBIDEF
 
	$°bi_is_hdr_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
)

1163 #i‚de‡
STBI_NO_HDR


1164 
°bi__c⁄ãxt
 
s
;

1165 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1166  
	`°bi__hdr_ã°
(&
s
);

1170 
	}
}

1172 
	g°bi__h2l_gamma_i
=1.0f/2.2f, 
	g°bi__h2l_sˇÀ_i
=1.0f;

1173 
	g°bi__l2h_gamma
=2.2f, 
	g°bi__l2h_sˇÀ
=1.0f;

1175 #i‚de‡
STBI_NO_LINEAR


1176 
STBIDEF
 
	$°bi_ldr_to_hdr_gamma
(
gamma
Ë{ 
°bi__l2h_gamma
 = gamma; 
	}
}

1177 
STBIDEF
 
	$°bi_ldr_to_hdr_sˇÀ
(
sˇÀ
Ë{ 
°bi__l2h_sˇÀ
 = sˇÀ; 
	}
}

1180 
STBIDEF
 
	$°bi_hdr_to_ldr_gamma
(
gamma
Ë{ 
°bi__h2l_gamma_i
 = 1/gamma; 
	}
}

1181 
STBIDEF
 
	$°bi_hdr_to_ldr_sˇÀ
(
sˇÀ
Ë{ 
°bi__h2l_sˇÀ_i
 = 1/sˇÀ; 
	}
}

1191 
	mSTBI__SCAN_lﬂd
=0,

1192 
	mSTBI__SCAN_ty≥
,

1193 
	mSTBI__SCAN_hódî


1196 
	$°bi__ªfûl_buf„r
(
°bi__c⁄ãxt
 *
s
)

1198 
n
 = (
s
->
io
.
ªad
)(s->
io_u£r_d©a
,(*)s->
buf„r_°¨t
,s->
buÊí
);

1199 i‡(
n
 == 0) {

1202 
s
->
ªad_‰om_ˇŒbacks
 = 0;

1203 
s
->
img_buf„r
 = s->
buf„r_°¨t
;

1204 
s
->
img_buf„r_íd
 = s->
buf„r_°¨t
+1;

1205 *
s
->
img_buf„r
 = 0;

1207 
s
->
img_buf„r
 = s->
buf„r_°¨t
;

1208 
s
->
img_buf„r_íd
 = s->
buf„r_°¨t
 + 
n
;

1210 
	}
}

1212 
°bi_ölöe
 
°bi_uc
 
	$°bi__gë8
(
°bi__c⁄ãxt
 *
s
)

1214 i‡(
s
->
img_buf„r
 < s->
img_buf„r_íd
)

1215  *
s
->
img_buf„r
++;

1216 i‡(
s
->
ªad_‰om_ˇŒbacks
) {

1217 
	`°bi__ªfûl_buf„r
(
s
);

1218  *
s
->
img_buf„r
++;

1221 
	}
}

1223 
°bi_ölöe
 
	$°bi__©_eof
(
°bi__c⁄ãxt
 *
s
)

1225 i‡(
s
->
io
.
ªad
) {

1226 i‡(!(
s
->
io
.
eof
)(s->
io_u£r_d©a
))  0;

1229 i‡(
s
->
ªad_‰om_ˇŒbacks
 == 0)  1;

1232  
s
->
img_buf„r
 >s->
img_buf„r_íd
;

1233 
	}
}

1235 
	$°bi__skù
(
°bi__c⁄ãxt
 *
s
, 
n
)

1237 i‡(
n
 < 0) {

1238 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1241 i‡(
s
->
io
.
ªad
) {

1242 
bÀn
 = (Ë(
s
->
img_buf„r_íd
 - s->
img_buf„r
);

1243 i‡(
bÀn
 < 
n
) {

1244 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1245 (
s
->
io
.
skù
)(s->
io_u£r_d©a
, 
n
 - 
bÀn
);

1249 
s
->
img_buf„r
 +
n
;

1250 
	}
}

1252 
	$°bi__gën
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 *
buf„r
, 
n
)

1254 i‡(
s
->
io
.
ªad
) {

1255 
bÀn
 = (Ë(
s
->
img_buf„r_íd
 - s->
img_buf„r
);

1256 i‡(
bÀn
 < 
n
) {

1257 
ªs
, 
cou¡
;

1259 
	`mem˝y
(
buf„r
, 
s
->
img_buf„r
, 
bÀn
);

1261 
cou¡
 = (
s
->
io
.
ªad
)(s->
io_u£r_d©a
, (*Ë
buf„r
 + 
bÀn
, 
n
 - blen);

1262 
ªs
 = (
cou¡
 =(
n
-
bÀn
));

1263 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1264  
ªs
;

1268 i‡(
s
->
img_buf„r
+
n
 <s->
img_buf„r_íd
) {

1269 
	`mem˝y
(
buf„r
, 
s
->
img_buf„r
, 
n
);

1270 
s
->
img_buf„r
 +
n
;

1274 
	}
}

1276 
	$°bi__gë16be
(
°bi__c⁄ãxt
 *
s
)

1278 
z
 = 
	`°bi__gë8
(
s
);

1279  (
z
 << 8Ë+ 
	`°bi__gë8
(
s
);

1280 
	}
}

1282 
°bi__uöt32
 
	$°bi__gë32be
(
°bi__c⁄ãxt
 *
s
)

1284 
°bi__uöt32
 
z
 = 
	`°bi__gë16be
(
s
);

1285  (
z
 << 16Ë+ 
	`°bi__gë16be
(
s
);

1286 
	}
}

1288 
	$°bi__gë16À
(
°bi__c⁄ãxt
 *
s
)

1290 
z
 = 
	`°bi__gë8
(
s
);

1291  
z
 + (
	`°bi__gë8
(
s
) << 8);

1292 
	}
}

1294 
°bi__uöt32
 
	$°bi__gë32À
(
°bi__c⁄ãxt
 *
s
)

1296 
°bi__uöt32
 
z
 = 
	`°bi__gë16À
(
s
);

1297  
z
 + (
	`°bi__gë16À
(
s
) << 16);

1298 
	}
}

1300 
	#STBI__BYTECAST
(
x
Ë((
°bi_uc
) ((x) & 255))

1301 

	)

1314 
°bi_uc
 
	$°bi__compuã_y
(
r
, 
g
, 
b
)

1316  (
°bi_uc
Ë(((
r
*77Ë+ (
g
*150Ë+ (29*
b
)) >> 8);

1317 
	}
}

1319 *
	$°bi__c⁄vît_f‹m©
(*
d©a
, 
img_n
, 
ªq_comp
, 
x
, 
y
)

1321 
i
,
j
;

1322 *
good
;

1324 i‡(
ªq_comp
 =
img_n
Ë 
d©a
;

1325 
	`STBI_ASSERT
(
ªq_comp
 >= 1 &&Ñeq_comp <= 4);

1327 
good
 = (*Ë
	`°bi__mÆloc
(
ªq_comp
 * 
x
 * 
y
);

1328 i‡(
good
 =
NULL
) {

1329 
	`STBI_FREE
(
d©a
);

1330  
	`°bi__îΩuc
("outofmem", "Out of memory");

1333 
j
=0; j < (Ë
y
; ++j) {

1334 *
§c
 = 
d©a
 + 
j
 * 
x
 * 
img_n
 ;

1335 *
de°
 = 
good
 + 
j
 * 
x
 * 
ªq_comp
;

1337 
	#COMBO
(
a
,
b
Ë(◊)*8+(b))

	)

1338 
	#CASE
(
a
,
b
Ë
	`COMBO
◊,b): 
i
=
x
-1; i >0; --i, 
§c
 +a, 
de°
 +b)

	)

1341 
	`COMBO
(
img_n
, 
ªq_comp
)) {

1342 
	`CASE
(1,2Ë
de°
[0]=
§c
[0], dest[1]=255; ;

1343 
	`CASE
(1,3Ë
de°
[0]=de°[1]=de°[2]=
§c
[0]; ;

1344 
	`CASE
(1,4Ë
de°
[0]=de°[1]=de°[2]=
§c
[0], dest[3]=255; ;

1345 
	`CASE
(2,1Ë
de°
[0]=
§c
[0]; ;

1346 
	`CASE
(2,3Ë
de°
[0]=de°[1]=de°[2]=
§c
[0]; ;

1347 
	`CASE
(2,4Ë
de°
[0]=de°[1]=de°[2]=
§c
[0], dest[3]=src[1]; ;

1348 
	`CASE
(3,4Ë
de°
[0]=
§c
[0],dest[1]=src[1],dest[2]=src[2],dest[3]=255; ;

1349 
	`CASE
(3,1Ë
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); ;

1350 
	`CASE
(3,2Ë
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]), dest[1] = 255; ;

1351 
	`CASE
(4,1Ë
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); ;

1352 
	`CASE
(4,2Ë
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]), dest[1] = src[3]; ;

1353 
	`CASE
(4,3Ë
de°
[0]=
§c
[0],dest[1]=src[1],dest[2]=src[2]; ;

1354 : 
	`STBI_ASSERT
(0);

1356 #unde‡
CASE


1359 
	`STBI_FREE
(
d©a
);

1360  
good
;

1361 
	}
}

1363 #i‚de‡
STBI_NO_LINEAR


1364 *
	$°bi__ldr_to_hdr
(
°bi_uc
 *
d©a
, 
x
, 
y
, 
comp
)

1366 
i
,
k
,
n
;

1367 *
ouçut
 = (*Ë
	`°bi__mÆloc
(
x
 * 
y
 * 
comp
 * ());

1368 i‡(
ouçut
 =
NULL
Ë{ 
	`STBI_FREE
(
d©a
);  
	`°bi__îΩf
("outofmem", "Out of memory"); }

1370 i‡(
comp
 & 1Ë
n
 = comp; n = comp-1;

1371 
i
=0; i < 
x
*
y
; ++i) {

1372 
k
=0; k < 
n
; ++k) {

1373 
ouçut
[
i
*
comp
 + 
k
] = (Ë(
	`pow
(
d©a
[i*comp+k]/255.0f, 
°bi__l2h_gamma
Ë* 
°bi__l2h_sˇÀ
);

1375 i‡(
k
 < 
comp
Ë
ouçut
[
i
*com∞+ k] = 
d©a
[i*comp+k]/255.0f;

1377 
	`STBI_FREE
(
d©a
);

1378  
ouçut
;

1379 
	}
}

1382 #i‚de‡
STBI_NO_HDR


1383 
	#°bi__Êﬂt2öt
(
x
Ë((Ë(x))

	)

1384 
°bi_uc
 *
	$°bi__hdr_to_ldr
(*
d©a
, 
x
, 
y
, 
comp
)

1386 
i
,
k
,
n
;

1387 
°bi_uc
 *
ouçut
 = (°bi_u¯*Ë
	`°bi__mÆloc
(
x
 * 
y
 * 
comp
);

1388 i‡(
ouçut
 =
NULL
Ë{ 
	`STBI_FREE
(
d©a
);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

1390 i‡(
comp
 & 1Ë
n
 = comp; n = comp-1;

1391 
i
=0; i < 
x
*
y
; ++i) {

1392 
k
=0; k < 
n
; ++k) {

1393 
z
 = (Ë
	`pow
(
d©a
[
i
*
comp
+
k
]*
°bi__h2l_sˇÀ_i
, 
°bi__h2l_gamma_i
) * 255 + 0.5f;

1394 i‡(
z
 < 0) z = 0;

1395 i‡(
z
 > 255) z = 255;

1396 
ouçut
[
i
*
comp
 + 
k
] = (
°bi_uc
Ë
	`°bi__Êﬂt2öt
(
z
);

1398 i‡(
k
 < 
comp
) {

1399 
z
 = 
d©a
[
i
*
comp
+
k
] * 255 + 0.5f;

1400 i‡(
z
 < 0) z = 0;

1401 i‡(
z
 > 255) z = 255;

1402 
ouçut
[
i
*
comp
 + 
k
] = (
°bi_uc
Ë
	`°bi__Êﬂt2öt
(
z
);

1405 
	`STBI_FREE
(
d©a
);

1406  
ouçut
;

1407 
	}
}

1431 #i‚de‡
STBI_NO_JPEG


1434 
	#FAST_BITS
 9

1435 

	)

1438 
°bi_uc
 
	mÁ°
[1 << 
FAST_BITS
];

1440 
°bi__uöt16
 
	mcode
[256];

1441 
°bi_uc
 
	mvÆues
[256];

1442 
°bi_uc
 
	msize
[257];

1443 
	mmaxcode
[18];

1444 
	mdñè
[17];

1445 } 
	t°bi__huffm™
;

1449 
°bi__c⁄ãxt
 *
	ms
;

1450 
°bi__huffm™
 
	mhuff_dc
[4];

1451 
°bi__huffm™
 
	mhuff_ac
[4];

1452 
°bi_uc
 
	mdequ™t
[4][64];

1453 
°bi__öt16
 
	mÁ°_ac
[4][1 << 
FAST_BITS
];

1456 
	mimg_h_max
, 
	mimg_v_max
;

1457 
	mimg_mcu_x
, 
	mimg_mcu_y
;

1458 
	mimg_mcu_w
, 
	mimg_mcu_h
;

1463 
	mid
;

1464 
	mh
,
	mv
;

1465 
	mtq
;

1466 
	mhd
,
	mha
;

1467 
	mdc_¥ed
;

1469 
	mx
,
	my
,
	mw2
,
	mh2
;

1470 
°bi_uc
 *
	md©a
;

1471 *
	møw_d©a
, *
	møw_c€ff
;

1472 
°bi_uc
 *
	mlöebuf
;

1473 *
	mc€ff
;

1474 
	mc€ff_w
, 
	mc€ff_h
;

1475 } 
	mimg_comp
[4];

1477 
°bi__uöt32
 
	mcode_buf„r
;

1478 
	mcode_bôs
;

1479 
	mm¨kî
;

1480 
	mnom‹e
;

1482 
	m¥ogªssive
;

1483 
	m•ec_°¨t
;

1484 
	m•ec_íd
;

1485 
	msucc_high
;

1486 
	msucc_low
;

1487 
	meob_run
;

1489 
	msˇn_n
, 
	m‹dî
[4];

1490 
	mª°¨t_öãrvÆ
, 
	mtodo
;

1493 (*
	mid˘_block_kî√l
)(
°bi_uc
 *
	mout
, 
	mout_°ride
, 
	md©a
[64]);

1494 (*
	mYCbCr_to_RGB_kî√l
)(
°bi_uc
 *
	mout
, c⁄° stbi_u¯*
	my
, c⁄° stbi_u¯*
	mpcb
, c⁄° stbi_u¯*
	mp¸
, 
	mcou¡
, 
	m°ï
);

1495 
	m°bi_uc
 *(*
	mªßm∂e_row_hv_2_kî√l
)(
°bi_uc
 *
	mout
, stbi_u¯*
	mö_√¨
, stbi_u¯*
	mö_Ár
, 
	mw
, 
	mhs
);

1496 } 
	t°bi__j≥g
;

1498 
	$°bi__buûd_huffm™
(
°bi__huffm™
 *
h
, *
cou¡
)

1500 
i
,
j
,
k
=0,
code
;

1502 
i
=0; i < 16; ++i)

1503 
j
=0; j < 
cou¡
[
i
]; ++j)

1504 
h
->
size
[
k
++] = (
°bi_uc
Ë(
i
+1);

1505 
h
->
size
[
k
] = 0;

1508 
code
 = 0;

1509 
k
 = 0;

1510 
j
=1; j <= 16; ++j) {

1512 
h
->
dñè
[
j
] = 
k
 - 
code
;

1513 i‡(
h
->
size
[
k
] =
j
) {

1514 
h
->
size
[
k
] =
j
)

1515 
h
->
code
[
k
++] = (
°bi__uöt16
) (code++);

1516 i‡(
code
-1 >(1 << 
j
)Ë 
	`°bi__îr
("bad codeÜengths","Corrupt JPEG");

1519 
h
->
maxcode
[
j
] = 
code
 << (16-j);

1520 
code
 <<= 1;

1522 
h
->
maxcode
[
j
] = 0xffffffff;

1525 
	`mem£t
(
h
->
Á°
, 255, 1 << 
FAST_BITS
);

1526 
i
=0; i < 
k
; ++i) {

1527 
s
 = 
h
->
size
[
i
];

1528 i‡(
s
 <
FAST_BITS
) {

1529 
c
 = 
h
->
code
[
i
] << (
FAST_BITS
-
s
);

1530 
m
 = 1 << (
FAST_BITS
-
s
);

1531 
j
=0; j < 
m
; ++j) {

1532 
h
->
Á°
[
c
+
j
] = (
°bi_uc
Ë
i
;

1537 
	}
}

1541 
	$°bi__buûd_Á°_ac
(
°bi__öt16
 *
Á°_ac
, 
°bi__huffm™
 *
h
)

1543 
i
;

1544 
i
=0; i < (1 << 
FAST_BITS
); ++i) {

1545 
°bi_uc
 
Á°
 = 
h
->Á°[
i
];

1546 
Á°_ac
[
i
] = 0;

1547 i‡(
Á°
 < 255) {

1548 
rs
 = 
h
->
vÆues
[
Á°
];

1549 
run
 = (
rs
 >> 4) & 15;

1550 
magbôs
 = 
rs
 & 15;

1551 
Àn
 = 
h
->
size
[
Á°
];

1553 i‡(
magbôs
 && 
Àn
 + magbô†<
FAST_BITS
) {

1555 
k
 = ((
i
 << 
Àn
Ë& ((1 << 
FAST_BITS
Ë- 1)Ë>> (FAST_BITS - 
magbôs
);

1556 
m
 = 1 << (
magbôs
 - 1);

1557 i‡(
k
 < 
m
Ëk +(-1 << 
magbôs
) + 1;

1559 i‡(
k
 >= -128 && k <= 127)

1560 
Á°_ac
[
i
] = (
°bi__öt16
Ë((
k
 << 8Ë+ (
run
 << 4Ë+ (
Àn
 + 
magbôs
));

1564 
	}
}

1566 
	$°bi__grow_buf„r_unß„
(
°bi__j≥g
 *
j
)

1569 
b
 = 
j
->
nom‹e
 ? 0 : 
	`°bi__gë8
(j->
s
);

1570 i‡(
b
 == 0xff) {

1571 
c
 = 
	`°bi__gë8
(
j
->
s
);

1572 i‡(
c
 != 0) {

1573 
j
->
m¨kî
 = (Ë
c
;

1574 
j
->
nom‹e
 = 1;

1578 
j
->
code_buf„r
 |
b
 << (24 - j->
code_bôs
);

1579 
j
->
code_bôs
 += 8;

1580 } 
j
->
code_bôs
 <= 24);

1581 
	}
}

1584 
°bi__uöt32
 
	g°bi__bmask
[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};

1587 
°bi_ölöe
 
	$°bi__j≥g_huff_decode
(
°bi__j≥g
 *
j
, 
°bi__huffm™
 *
h
)

1589 
ãmp
;

1590 
c
,
k
;

1592 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

1596 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

1597 
k
 = 
h
->
Á°
[
c
];

1598 i‡(
k
 < 255) {

1599 
s
 = 
h
->
size
[
k
];

1600 i‡(
s
 > 
j
->
code_bôs
)

1602 
j
->
code_buf„r
 <<
s
;

1603 
j
->
code_bôs
 -
s
;

1604  
h
->
vÆues
[
k
];

1613 
ãmp
 = 
j
->
code_buf„r
 >> 16;

1614 
k
=
FAST_BITS
+1 ; ; ++k)

1615 i‡(
ãmp
 < 
h
->
maxcode
[
k
])

1617 i‡(
k
 == 17) {

1619 
j
->
code_bôs
 -= 16;

1623 i‡(
k
 > 
j
->
code_bôs
)

1627 
c
 = ((
j
->
code_buf„r
 >> (32 - 
k
)Ë& 
°bi__bmask
[k]Ë+ 
h
->
dñè
[k];

1628 
	`STBI_ASSERT
((((
j
->
code_buf„r
Ë>> (32 - 
h
->
size
[
c
])Ë& 
°bi__bmask
[h->size[c]]Ë=h->
code
[c]);

1631 
j
->
code_bôs
 -
k
;

1632 
j
->
code_buf„r
 <<
k
;

1633  
h
->
vÆues
[
c
];

1634 
	}
}

1637 c⁄° 
	g°bi__jbüs
[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};

1641 
°bi_ölöe
 
	$°bi__exãnd_ª˚ive
(
°bi__j≥g
 *
j
, 
n
)

1643 
k
;

1644 
sgn
;

1645 i‡(
j
->
code_bôs
 < 
n
Ë
	`°bi__grow_buf„r_unß„
(j);

1647 
sgn
 = (
°bi__öt32
)
j
->
code_buf„r
 >> 31;

1648 
k
 = 
	`°bi_ÃŸ
(
j
->
code_buf„r
, 
n
);

1649 
	`STBI_ASSERT
(
n
 >0 &&Ç < (Ë((
°bi__bmask
)/(*stbi__bmask)));

1650 
j
->
code_buf„r
 = 
k
 & ~
°bi__bmask
[
n
];

1651 
k
 &
°bi__bmask
[
n
];

1652 
j
->
code_bôs
 -
n
;

1653  
k
 + (
°bi__jbüs
[
n
] & ~
sgn
);

1654 
	}
}

1657 
°bi_ölöe
 
	$°bi__j≥g_gë_bôs
(
°bi__j≥g
 *
j
, 
n
)

1659 
k
;

1660 i‡(
j
->
code_bôs
 < 
n
Ë
	`°bi__grow_buf„r_unß„
(j);

1661 
k
 = 
	`°bi_ÃŸ
(
j
->
code_buf„r
, 
n
);

1662 
j
->
code_buf„r
 = 
k
 & ~
°bi__bmask
[
n
];

1663 
k
 &
°bi__bmask
[
n
];

1664 
j
->
code_bôs
 -
n
;

1665  
k
;

1666 
	}
}

1668 
°bi_ölöe
 
	$°bi__j≥g_gë_bô
(
°bi__j≥g
 *
j
)

1670 
k
;

1671 i‡(
j
->
code_bôs
 < 1Ë
	`°bi__grow_buf„r_unß„
(j);

1672 
k
 = 
j
->
code_buf„r
;

1673 
j
->
code_buf„r
 <<= 1;

1674 --
j
->
code_bôs
;

1675  
k
 & 0x80000000;

1676 
	}
}

1680 
°bi_uc
 
	g°bi__j≥g_dezigzag
[64+15] =

1696 
	$°bi__j≥g_decode_block
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hdc
, stbi__huffm™ *
hac
, 
°bi__öt16
 *
Ác
, 
b
, 
°bi_uc
 *
dequ™t
)

1698 
diff
,
dc
,
k
;

1699 
t
;

1701 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

1702 
t
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hdc
);

1703 i‡(
t
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

1706 
	`mem£t
(
d©a
,0,64*(data[0]));

1708 
diff
 = 
t
 ? 
	`°bi__exãnd_ª˚ive
(
j
,Å) : 0;

1709 
dc
 = 
j
->
img_comp
[
b
].
dc_¥ed
 + 
diff
;

1710 
j
->
img_comp
[
b
].
dc_¥ed
 = 
dc
;

1711 
d©a
[0] = (Ë(
dc
 * 
dequ™t
[0]);

1714 
k
 = 1;

1716 
zig
;

1717 
c
,
r
,
s
;

1718 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

1719 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

1720 
r
 = 
Ác
[
c
];

1721 i‡(
r
) {

1722 
k
 +(
r
 >> 4) & 15;

1723 
s
 = 
r
 & 15;

1724 
j
->
code_buf„r
 <<
s
;

1725 
j
->
code_bôs
 -
s
;

1727 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

1728 
d©a
[
zig
] = (Ë((
r
 >> 8Ë* 
dequ™t
[zig]);

1730 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

1731 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

1732 
s
 = 
rs
 & 15;

1733 
r
 = 
rs
 >> 4;

1734 i‡(
s
 == 0) {

1735 i‡(
rs
 != 0xf0) ;

1736 
k
 += 16;

1738 
k
 +
r
;

1740 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

1741 
d©a
[
zig
] = (Ë(
	`°bi__exãnd_ª˚ive
(
j
,
s
Ë* 
dequ™t
[zig]);

1744 } 
k
 < 64);

1746 
	}
}

1748 
	$°bi__j≥g_decode_block_¥og_dc
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hdc
, 
b
)

1750 
diff
,
dc
;

1751 
t
;

1752 i‡(
j
->
•ec_íd
 !0Ë 
	`°bi__îr
("can't merge dcándác", "Corrupt JPEG");

1754 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

1756 i‡(
j
->
succ_high
 == 0) {

1758 
	`mem£t
(
d©a
,0,64*(data[0]));

1759 
t
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hdc
);

1760 
diff
 = 
t
 ? 
	`°bi__exãnd_ª˚ive
(
j
,Å) : 0;

1762 
dc
 = 
j
->
img_comp
[
b
].
dc_¥ed
 + 
diff
;

1763 
j
->
img_comp
[
b
].
dc_¥ed
 = 
dc
;

1764 
d©a
[0] = (Ë(
dc
 << 
j
->
succ_low
);

1767 i‡(
	`°bi__j≥g_gë_bô
(
j
))

1768 
d©a
[0] +(Ë(1 << 
j
->
succ_low
);

1771 
	}
}

1775 
	$°bi__j≥g_decode_block_¥og_ac
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hac
, 
°bi__öt16
 *
Ác
)

1777 
k
;

1778 i‡(
j
->
•ec_°¨t
 =0Ë 
	`°bi__îr
("can't merge dcándác", "Corrupt JPEG");

1780 i‡(
j
->
succ_high
 == 0) {

1781 
shi·
 = 
j
->
succ_low
;

1783 i‡(
j
->
eob_run
) {

1784 --
j
->
eob_run
;

1788 
k
 = 
j
->
•ec_°¨t
;

1790 
zig
;

1791 
c
,
r
,
s
;

1792 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

1793 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

1794 
r
 = 
Ác
[
c
];

1795 i‡(
r
) {

1796 
k
 +(
r
 >> 4) & 15;

1797 
s
 = 
r
 & 15;

1798 
j
->
code_buf„r
 <<
s
;

1799 
j
->
code_bôs
 -
s
;

1800 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

1801 
d©a
[
zig
] = (Ë((
r
 >> 8Ë<< 
shi·
);

1803 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

1804 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

1805 
s
 = 
rs
 & 15;

1806 
r
 = 
rs
 >> 4;

1807 i‡(
s
 == 0) {

1808 i‡(
r
 < 15) {

1809 
j
->
eob_run
 = (1 << 
r
);

1810 i‡(
r
)

1811 
j
->
eob_run
 +
	`°bi__j≥g_gë_bôs
(j, 
r
);

1812 --
j
->
eob_run
;

1815 
k
 += 16;

1817 
k
 +
r
;

1818 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

1819 
d©a
[
zig
] = (Ë(
	`°bi__exãnd_ª˚ive
(
j
,
s
Ë<< 
shi·
);

1822 } 
k
 <
j
->
•ec_íd
);

1826 
bô
 = (Ë(1 << 
j
->
succ_low
);

1828 i‡(
j
->
eob_run
) {

1829 --
j
->
eob_run
;

1830 
k
 = 
j
->
•ec_°¨t
; k <j->
•ec_íd
; ++k) {

1831 *
p
 = &
d©a
[
°bi__j≥g_dezigzag
[
k
]];

1832 i‡(*
p
 != 0)

1833 i‡(
	`°bi__j≥g_gë_bô
(
j
))

1834 i‡((*
p
 & 
bô
)==0) {

1835 i‡(*
p
 > 0)

1836 *
p
 +
bô
;

1838 *
p
 -
bô
;

1842 
k
 = 
j
->
•ec_°¨t
;

1844 
r
,
s
;

1845 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

1846 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

1847 
s
 = 
rs
 & 15;

1848 
r
 = 
rs
 >> 4;

1849 i‡(
s
 == 0) {

1850 i‡(
r
 < 15) {

1851 
j
->
eob_run
 = (1 << 
r
) - 1;

1852 i‡(
r
)

1853 
j
->
eob_run
 +
	`°bi__j≥g_gë_bôs
(j, 
r
);

1854 
r
 = 64;

1861 i‡(
s
 !1Ë 
	`°bi__îr
("bad huffman code", "Corrupt JPEG");

1863 i‡(
	`°bi__j≥g_gë_bô
(
j
))

1864 
s
 = 
bô
;

1866 
s
 = -
bô
;

1870 
k
 <
j
->
•ec_íd
) {

1871 *
p
 = &
d©a
[
°bi__j≥g_dezigzag
[
k
++]];

1872 i‡(*
p
 != 0) {

1873 i‡(
	`°bi__j≥g_gë_bô
(
j
))

1874 i‡((*
p
 & 
bô
)==0) {

1875 i‡(*
p
 > 0)

1876 *
p
 +
bô
;

1878 *
p
 -
bô
;

1881 i‡(
r
 == 0) {

1882 *
p
 = (Ë
s
;

1885 --
r
;

1888 } 
k
 <
j
->
•ec_íd
);

1892 
	}
}

1895 
°bi_ölöe
 
°bi_uc
 
	$°bi__˛amp
(
x
)

1898 i‡((Ë
x
 > 255) {

1899 i‡(
x
 < 0)  0;

1900 i‡(
x
 > 255)  255;

1902  (
°bi_uc
Ë
x
;

1903 
	}
}

1905 
	#°bi__f2f
(
x
Ë((Ë(((xË* 4096 + 0.5)))

	)

1906 
	#°bi__fsh
(
x
Ë((xË<< 12)

	)

1909 
	#STBI__IDCT_1D
(
s0
,
s1
,
s2
,
s3
,
s4
,
s5
,
s6
,
s7
) \

1910 
t0
,
t1
,
t2
,
t3
,
p1
,
p2
,
p3
,
p4
,
p5
,
x0
,
x1
,
x2
,
x3
; \

1911 
p2
 = 
s2
; \

1912 
p3
 = 
s6
; \

1913 
p1
 = (
p2
+
p3
Ë* 
	`°bi__f2f
(0.5411961f); \

1914 
t2
 = 
p1
 + 
p3
*
	`°bi__f2f
(-1.847759065f); \

1915 
t3
 = 
p1
 + 
p2
*
	`°bi__f2f
( 0.765366865f); \

1916 
p2
 = 
s0
; \

1917 
p3
 = 
s4
; \

1918 
t0
 = 
	`°bi__fsh
(
p2
+
p3
); \

1919 
t1
 = 
	`°bi__fsh
(
p2
-
p3
); \

1920 
x0
 = 
t0
+
t3
; \

1921 
x3
 = 
t0
-
t3
; \

1922 
x1
 = 
t1
+
t2
; \

1923 
x2
 = 
t1
-
t2
; \

1924 
t0
 = 
s7
; \

1925 
t1
 = 
s5
; \

1926 
t2
 = 
s3
; \

1927 
t3
 = 
s1
; \

1928 
p3
 = 
t0
+
t2
; \

1929 
p4
 = 
t1
+
t3
; \

1930 
p1
 = 
t0
+
t3
; \

1931 
p2
 = 
t1
+
t2
; \

1932 
p5
 = (
p3
+
p4
)*
	`°bi__f2f
( 1.175875602f); \

1933 
t0
 =Å0*
	`°bi__f2f
( 0.298631336f); \

1934 
t1
 =Å1*
	`°bi__f2f
( 2.053119869f); \

1935 
t2
 =Å2*
	`°bi__f2f
( 3.072711026f); \

1936 
t3
 =Å3*
	`°bi__f2f
( 1.501321110f); \

1937 
p1
 = 
p5
 +Ö1*
	`°bi__f2f
(-0.899976223f); \

1938 
p2
 = 
p5
 +Ö2*
	`°bi__f2f
(-2.562915447f); \

1939 
p3
 =Ö3*
	`°bi__f2f
(-1.961570560f); \

1940 
p4
 =Ö4*
	`°bi__f2f
(-0.390180644f); \

1941 
t3
 +
p1
+
p4
; \

1942 
t2
 +
p2
+
p3
; \

1943 
t1
 +
p2
+
p4
; \

1944 
t0
 +
p1
+
p3
;

	)

1946 
	$°bi__id˘_block
(
°bi_uc
 *
out
, 
out_°ride
, 
d©a
[64])

1948 
i
,
vÆ
[64],*
v
=val;

1949 
°bi_uc
 *
o
;

1950 *
d
 = 
d©a
;

1953 
i
=0; i < 8; ++i,++
d
, ++
v
) {

1955 i‡(
d
[ 8]==0 && d[16]==0 && d[24]==0 && d[32]==0

1956 && 
d
[40]==0 && d[48]==0 && d[56]==0) {

1961 
d˘îm
 = 
d
[0] << 2;

1962 
v
[0] = v[8] = v[16] = v[24] = v[32] = v[40] = v[48] = v[56] = 
d˘îm
;

1964 
	`STBI__IDCT_1D
(
d
[ 0],d[ 8],d[16],d[24],d[32],d[40],d[48],d[56])

1967 
x0
 +512; 
x1
 +512; 
x2
 +512; 
x3
 += 512;

1968 
v
[ 0] = (
x0
+
t3
) >> 10;

1969 
v
[56] = (
x0
-
t3
) >> 10;

1970 
v
[ 8] = (
x1
+
t2
) >> 10;

1971 
v
[48] = (
x1
-
t2
) >> 10;

1972 
v
[16] = (
x2
+
t1
) >> 10;

1973 
v
[40] = (
x2
-
t1
) >> 10;

1974 
v
[24] = (
x3
+
t0
) >> 10;

1975 
v
[32] = (
x3
-
t0
) >> 10;

1979 
i
=0, 
v
=
vÆ
, 
o
=
out
; i < 8; ++i,v+=8,o+=
out_°ride
) {

1981 
	`STBI__IDCT_1D
(
v
[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7])

1988 
x0
 += 65536 + (128<<17);

1989 
x1
 += 65536 + (128<<17);

1990 
x2
 += 65536 + (128<<17);

1991 
x3
 += 65536 + (128<<17);

1994 
o
[0] = 
	`°bi__˛amp
((
x0
+
t3
) >> 17);

1995 
o
[7] = 
	`°bi__˛amp
((
x0
-
t3
) >> 17);

1996 
o
[1] = 
	`°bi__˛amp
((
x1
+
t2
) >> 17);

1997 
o
[6] = 
	`°bi__˛amp
((
x1
-
t2
) >> 17);

1998 
o
[2] = 
	`°bi__˛amp
((
x2
+
t1
) >> 17);

1999 
o
[5] = 
	`°bi__˛amp
((
x2
-
t1
) >> 17);

2000 
o
[3] = 
	`°bi__˛amp
((
x3
+
t0
) >> 17);

2001 
o
[4] = 
	`°bi__˛amp
((
x3
-
t0
) >> 17);

2003 
	}
}

2005 #ifde‡
STBI_SSE2


2009 
	$°bi__id˘_simd
(
°bi_uc
 *
out
, 
out_°ride
, 
d©a
[64])

2012 
__m128i
 
row0
, 
row1
, 
row2
, 
row3
, 
row4
, 
row5
, 
row6
, 
row7
;

2013 
__m128i
 
tmp
;

2016 
	#d˘_c⁄°
(
x
,
y
Ë
	`_mm_£å_ïi16
((x),(y),(x),(y),(x),(y),(x),(y))

	)

2020 
	#d˘_rŸ
(
out0
,
out1
, 
x
,
y
,
c0
,
c1
) \

2021 
__m128i
 
c0
##
lo
 = 
	`_mm_u≈acklo_ïi16
((
x
),(
y
)); \

2022 
__m128i
 
c0
##
hi
 = 
	`_mm_u≈ackhi_ïi16
((
x
),(
y
)); \

2023 
__m128i
 
out0
##
_l
 = 
	`_mm_madd_ïi16
(
c0
##
lo
, c0); \

2024 
__m128i
 
out0
##
_h
 = 
	`_mm_madd_ïi16
(
c0
##
hi
, c0); \

2025 
__m128i
 
out1
##
_l
 = 
	`_mm_madd_ïi16
(
c0
##
lo
, 
c1
); \

2026 
__m128i
 
out1
##
_h
 = 
	`_mm_madd_ïi16
(
c0
##
hi
, 
c1
)

	)

2029 
	#d˘_widí
(
out
, 
ö
) \

2030 
__m128i
 
out
##
_l
 = 
	`_mm_§ai_ïi32
(
	`_mm_u≈acklo_ïi16
(
	`_mm_£tzîo_si128
(), (
ö
)), 4); \

2031 
__m128i
 
out
##
_h
 = 
	`_mm_§ai_ïi32
(
	`_mm_u≈ackhi_ïi16
(
	`_mm_£tzîo_si128
(), (
ö
)), 4)

	)

2034 
	#d˘_wadd
(
out
, 
a
, 
b
) \

2035 
__m128i
 
out
##
_l
 = 
	`_mm_add_ïi32
(
a
##_l, 
b
##_l); \

2036 
__m128i
 
out
##
_h
 = 
	`_mm_add_ïi32
(
a
##_h, 
b
##_h)

	)

2039 
	#d˘_wsub
(
out
, 
a
, 
b
) \

2040 
__m128i
 
out
##
_l
 = 
	`_mm_sub_ïi32
(
a
##_l, 
b
##_l); \

2041 
__m128i
 
out
##
_h
 = 
	`_mm_sub_ïi32
(
a
##_h, 
b
##_h)

	)

2044 
	#d˘_bÊy32o
(
out0
, 
out1
, 
a
,
b
,
büs
,
s
) \

2046 
__m128i
 
abü£d_l
 = 
	`_mm_add_ïi32
(
a
##
_l
, 
büs
); \

2047 
__m128i
 
abü£d_h
 = 
	`_mm_add_ïi32
(
a
##
_h
, 
büs
); \

2048 
	`d˘_wadd
(
sum
, 
abü£d
, 
b
); \

2049 
	`d˘_wsub
(
dif
, 
abü£d
, 
b
); \

2050 
out0
 = 
	`_mm_∑cks_ïi32
(
	`_mm_§ai_ïi32
(
sum_l
, 
s
), _mm_§ai_ïi32(
sum_h
, s)); \

2051 
out1
 = 
	`_mm_∑cks_ïi32
(
	`_mm_§ai_ïi32
(
dif_l
, 
s
), _mm_§ai_ïi32(
dif_h
, s)); \

2052 }

	)

2055 
	#d˘_öãæóve8
(
a
, 
b
) \

2056 
tmp
 = 
a
; \

2057 
a
 = 
	`_mm_u≈acklo_ïi8
◊, 
b
); \

2058 
b
 = 
	`_mm_u≈ackhi_ïi8
(
tmp
, b)

	)

2061 
	#d˘_öãæóve16
(
a
, 
b
) \

2062 
tmp
 = 
a
; \

2063 
a
 = 
	`_mm_u≈acklo_ïi16
◊, 
b
); \

2064 
b
 = 
	`_mm_u≈ackhi_ïi16
(
tmp
, b)

	)

2066 
	#d˘_∑ss
(
büs
,
shi·
) \

2069 
	`d˘_rŸ
(
t2e
,
t3e
, 
row2
,
row6
, 
rŸ0_0
,
rŸ0_1
); \

2070 
__m128i
 
sum04
 = 
	`_mm_add_ïi16
(
row0
, 
row4
); \

2071 
__m128i
 
dif04
 = 
	`_mm_sub_ïi16
(
row0
, 
row4
); \

2072 
	`d˘_widí
(
t0e
, 
sum04
); \

2073 
	`d˘_widí
(
t1e
, 
dif04
); \

2074 
	`d˘_wadd
(
x0
, 
t0e
, 
t3e
); \

2075 
	`d˘_wsub
(
x3
, 
t0e
, 
t3e
); \

2076 
	`d˘_wadd
(
x1
, 
t1e
, 
t2e
); \

2077 
	`d˘_wsub
(
x2
, 
t1e
, 
t2e
); \

2079 
	`d˘_rŸ
(
y0o
,
y2o
, 
row7
,
row3
, 
rŸ2_0
,
rŸ2_1
); \

2080 
	`d˘_rŸ
(
y1o
,
y3o
, 
row5
,
row1
, 
rŸ3_0
,
rŸ3_1
); \

2081 
__m128i
 
sum17
 = 
	`_mm_add_ïi16
(
row1
, 
row7
); \

2082 
__m128i
 
sum35
 = 
	`_mm_add_ïi16
(
row3
, 
row5
); \

2083 
	`d˘_rŸ
(
y4o
,
y5o
, 
sum17
,
sum35
, 
rŸ1_0
,
rŸ1_1
); \

2084 
	`d˘_wadd
(
x4
, 
y0o
, 
y4o
); \

2085 
	`d˘_wadd
(
x5
, 
y1o
, 
y5o
); \

2086 
	`d˘_wadd
(
x6
, 
y2o
, 
y5o
); \

2087 
	`d˘_wadd
(
x7
, 
y3o
, 
y4o
); \

2088 
	`d˘_bÊy32o
(
row0
,
row7
, 
x0
,
x7
,
büs
,
shi·
); \

2089 
	`d˘_bÊy32o
(
row1
,
row6
, 
x1
,
x6
,
büs
,
shi·
); \

2090 
	`d˘_bÊy32o
(
row2
,
row5
, 
x2
,
x5
,
büs
,
shi·
); \

2091 
	`d˘_bÊy32o
(
row3
,
row4
, 
x3
,
x4
,
büs
,
shi·
); \

2092 }

	)

2094 
__m128i
 
rŸ0_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(0.5411961f), stbi__f2f(0.5411961f) + stbi__f2f(-1.847759065f));

2095 
__m128i
 
rŸ0_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(0.5411961f) + stbi__f2f( 0.765366865f), stbi__f2f(0.5411961f));

2096 
__m128i
 
rŸ1_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(1.175875602f) + stbi__f2f(-0.899976223f), stbi__f2f(1.175875602f));

2097 
__m128i
 
rŸ1_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(1.175875602f), stbi__f2f(1.175875602f) + stbi__f2f(-2.562915447f));

2098 
__m128i
 
rŸ2_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-1.961570560f) + stbi__f2f( 0.298631336f), stbi__f2f(-1.961570560f));

2099 
__m128i
 
rŸ2_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-1.961570560f), stbi__f2f(-1.961570560f) + stbi__f2f( 3.072711026f));

2100 
__m128i
 
rŸ3_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-0.390180644f) + stbi__f2f( 2.053119869f), stbi__f2f(-0.390180644f));

2101 
__m128i
 
rŸ3_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-0.390180644f), stbi__f2f(-0.390180644f) + stbi__f2f( 1.501321110f));

2104 
__m128i
 
büs_0
 = 
	`_mm_£t1_ïi32
(512);

2105 
__m128i
 
büs_1
 = 
	`_mm_£t1_ïi32
(65536 + (128<<17));

2108 
row0
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 0*8));

2109 
row1
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 1*8));

2110 
row2
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 2*8));

2111 
row3
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 3*8));

2112 
row4
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 4*8));

2113 
row5
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 5*8));

2114 
row6
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 6*8));

2115 
row7
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 7*8));

2118 
	`d˘_∑ss
(
büs_0
, 10);

2122 
	`d˘_öãæóve16
(
row0
, 
row4
);

2123 
	`d˘_öãæóve16
(
row1
, 
row5
);

2124 
	`d˘_öãæóve16
(
row2
, 
row6
);

2125 
	`d˘_öãæóve16
(
row3
, 
row7
);

2128 
	`d˘_öãæóve16
(
row0
, 
row2
);

2129 
	`d˘_öãæóve16
(
row1
, 
row3
);

2130 
	`d˘_öãæóve16
(
row4
, 
row6
);

2131 
	`d˘_öãæóve16
(
row5
, 
row7
);

2134 
	`d˘_öãæóve16
(
row0
, 
row1
);

2135 
	`d˘_öãæóve16
(
row2
, 
row3
);

2136 
	`d˘_öãæóve16
(
row4
, 
row5
);

2137 
	`d˘_öãæóve16
(
row6
, 
row7
);

2141 
	`d˘_∑ss
(
büs_1
, 17);

2145 
__m128i
 
p0
 = 
	`_mm_∑ckus_ïi16
(
row0
, 
row1
);

2146 
__m128i
 
p1
 = 
	`_mm_∑ckus_ïi16
(
row2
, 
row3
);

2147 
__m128i
 
p2
 = 
	`_mm_∑ckus_ïi16
(
row4
, 
row5
);

2148 
__m128i
 
p3
 = 
	`_mm_∑ckus_ïi16
(
row6
, 
row7
);

2151 
	`d˘_öãæóve8
(
p0
, 
p2
);

2152 
	`d˘_öãæóve8
(
p1
, 
p3
);

2155 
	`d˘_öãæóve8
(
p0
, 
p1
);

2156 
	`d˘_öãæóve8
(
p2
, 
p3
);

2159 
	`d˘_öãæóve8
(
p0
, 
p2
);

2160 
	`d˘_öãæóve8
(
p1
, 
p3
);

2163 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p0
); ouà+
out_°ride
;

2164 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p0
, 0x4e)); ouà+
out_°ride
;

2165 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p2
); ouà+
out_°ride
;

2166 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p2
, 0x4e)); ouà+
out_°ride
;

2167 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p1
); ouà+
out_°ride
;

2168 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p1
, 0x4e)); ouà+
out_°ride
;

2169 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p3
); ouà+
out_°ride
;

2170 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p3
, 0x4e));

2173 #unde‡
d˘_c⁄°


2174 #unde‡
d˘_rŸ


2175 #unde‡
d˘_widí


2176 #unde‡
d˘_wadd


2177 #unde‡
d˘_wsub


2178 #unde‡
d˘_bÊy32o


2179 #unde‡
d˘_öãæóve8


2180 #unde‡
d˘_öãæóve16


2181 #unde‡
d˘_∑ss


2182 
	}
}

2186 #ifde‡
STBI_NEON


2190 
	$°bi__id˘_simd
(
°bi_uc
 *
out
, 
out_°ride
, 
d©a
[64])

2192 
öt16x8_t
 
row0
, 
row1
, 
row2
, 
row3
, 
row4
, 
row5
, 
row6
, 
row7
;

2194 
öt16x4_t
 
rŸ0_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
(0.5411961f));

2195 
öt16x4_t
 
rŸ0_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-1.847759065f));

2196 
öt16x4_t
 
rŸ0_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 0.765366865f));

2197 
öt16x4_t
 
rŸ1_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 1.175875602f));

2198 
öt16x4_t
 
rŸ1_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-0.899976223f));

2199 
öt16x4_t
 
rŸ1_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-2.562915447f));

2200 
öt16x4_t
 
rŸ2_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-1.961570560f));

2201 
öt16x4_t
 
rŸ2_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-0.390180644f));

2202 
öt16x4_t
 
rŸ3_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 0.298631336f));

2203 
öt16x4_t
 
rŸ3_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 2.053119869f));

2204 
öt16x4_t
 
rŸ3_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 3.072711026f));

2205 
öt16x4_t
 
rŸ3_3
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 1.501321110f));

2207 
	#d˘_l⁄g_mul
(
out
, 
öq
, 
c€ff
) \

2208 
öt32x4_t
 
out
##
_l
 = 
	`vmuŒ_s16
(
	`vgë_low_s16
(
öq
), 
c€ff
); \

2209 
öt32x4_t
 
out
##
_h
 = 
	`vmuŒ_s16
(
	`vgë_high_s16
(
öq
), 
c€ff
)

	)

2211 
	#d˘_l⁄g_mac
(
out
, 
acc
, 
öq
, 
c€ff
) \

2212 
öt32x4_t
 
out
##
_l
 = 
	`vmœl_s16
(
acc
##_l, 
	`vgë_low_s16
(
öq
), 
c€ff
); \

2213 
öt32x4_t
 
out
##
_h
 = 
	`vmœl_s16
(
acc
##_h, 
	`vgë_high_s16
(
öq
), 
c€ff
)

	)

2215 
	#d˘_widí
(
out
, 
öq
) \

2216 
öt32x4_t
 
out
##
_l
 = 
	`vshŒ_n_s16
(
	`vgë_low_s16
(
öq
), 12); \

2217 
öt32x4_t
 
out
##
_h
 = 
	`vshŒ_n_s16
(
	`vgë_high_s16
(
öq
), 12)

	)

2220 
	#d˘_wadd
(
out
, 
a
, 
b
) \

2221 
öt32x4_t
 
out
##
_l
 = 
	`vaddq_s32
(
a
##_l, 
b
##_l); \

2222 
öt32x4_t
 
out
##
_h
 = 
	`vaddq_s32
(
a
##_h, 
b
##_h)

	)

2225 
	#d˘_wsub
(
out
, 
a
, 
b
) \

2226 
öt32x4_t
 
out
##
_l
 = 
	`vsubq_s32
(
a
##_l, 
b
##_l); \

2227 
öt32x4_t
 
out
##
_h
 = 
	`vsubq_s32
(
a
##_h, 
b
##_h)

	)

2230 
	#d˘_bÊy32o
(
out0
,
out1
, 
a
,
b
,
shi·›
,
s
) \

2232 
	`d˘_wadd
(
sum
, 
a
, 
b
); \

2233 
	`d˘_wsub
(
dif
, 
a
, 
b
); \

2234 
out0
 = 
	`vcomböe_s16
(
	`shi·›
(
sum_l
, 
s
), shi·›(
sum_h
, s)); \

2235 
out1
 = 
	`vcomböe_s16
(
	`shi·›
(
dif_l
, 
s
), shi·›(
dif_h
, s)); \

2236 }

	)

2238 
	#d˘_∑ss
(
shi·›
, 
shi·
) \

2241 
öt16x8_t
 
sum26
 = 
	`vaddq_s16
(
row2
, 
row6
); \

2242 
	`d˘_l⁄g_mul
(
p1e
, 
sum26
, 
rŸ0_0
); \

2243 
	`d˘_l⁄g_mac
(
t2e
, 
p1e
, 
row6
, 
rŸ0_1
); \

2244 
	`d˘_l⁄g_mac
(
t3e
, 
p1e
, 
row2
, 
rŸ0_2
); \

2245 
öt16x8_t
 
sum04
 = 
	`vaddq_s16
(
row0
, 
row4
); \

2246 
öt16x8_t
 
dif04
 = 
	`vsubq_s16
(
row0
, 
row4
); \

2247 
	`d˘_widí
(
t0e
, 
sum04
); \

2248 
	`d˘_widí
(
t1e
, 
dif04
); \

2249 
	`d˘_wadd
(
x0
, 
t0e
, 
t3e
); \

2250 
	`d˘_wsub
(
x3
, 
t0e
, 
t3e
); \

2251 
	`d˘_wadd
(
x1
, 
t1e
, 
t2e
); \

2252 
	`d˘_wsub
(
x2
, 
t1e
, 
t2e
); \

2254 
öt16x8_t
 
sum15
 = 
	`vaddq_s16
(
row1
, 
row5
); \

2255 
öt16x8_t
 
sum17
 = 
	`vaddq_s16
(
row1
, 
row7
); \

2256 
öt16x8_t
 
sum35
 = 
	`vaddq_s16
(
row3
, 
row5
); \

2257 
öt16x8_t
 
sum37
 = 
	`vaddq_s16
(
row3
, 
row7
); \

2258 
öt16x8_t
 
sumodd
 = 
	`vaddq_s16
(
sum17
, 
sum35
); \

2259 
	`d˘_l⁄g_mul
(
p5o
, 
sumodd
, 
rŸ1_0
); \

2260 
	`d˘_l⁄g_mac
(
p1o
, 
p5o
, 
sum17
, 
rŸ1_1
); \

2261 
	`d˘_l⁄g_mac
(
p2o
, 
p5o
, 
sum35
, 
rŸ1_2
); \

2262 
	`d˘_l⁄g_mul
(
p3o
, 
sum37
, 
rŸ2_0
); \

2263 
	`d˘_l⁄g_mul
(
p4o
, 
sum15
, 
rŸ2_1
); \

2264 
	`d˘_wadd
(
sump13o
, 
p1o
, 
p3o
); \

2265 
	`d˘_wadd
(
sump24o
, 
p2o
, 
p4o
); \

2266 
	`d˘_wadd
(
sump23o
, 
p2o
, 
p3o
); \

2267 
	`d˘_wadd
(
sump14o
, 
p1o
, 
p4o
); \

2268 
	`d˘_l⁄g_mac
(
x4
, 
sump13o
, 
row7
, 
rŸ3_0
); \

2269 
	`d˘_l⁄g_mac
(
x5
, 
sump24o
, 
row5
, 
rŸ3_1
); \

2270 
	`d˘_l⁄g_mac
(
x6
, 
sump23o
, 
row3
, 
rŸ3_2
); \

2271 
	`d˘_l⁄g_mac
(
x7
, 
sump14o
, 
row1
, 
rŸ3_3
); \

2272 
	`d˘_bÊy32o
(
row0
,
row7
, 
x0
,
x7
,
shi·›
,
shi·
); \

2273 
	`d˘_bÊy32o
(
row1
,
row6
, 
x1
,
x6
,
shi·›
,
shi·
); \

2274 
	`d˘_bÊy32o
(
row2
,
row5
, 
x2
,
x5
,
shi·›
,
shi·
); \

2275 
	`d˘_bÊy32o
(
row3
,
row4
, 
x3
,
x4
,
shi·›
,
shi·
); \

2276 }

	)

2279 
row0
 = 
	`vld1q_s16
(
d©a
 + 0*8);

2280 
row1
 = 
	`vld1q_s16
(
d©a
 + 1*8);

2281 
row2
 = 
	`vld1q_s16
(
d©a
 + 2*8);

2282 
row3
 = 
	`vld1q_s16
(
d©a
 + 3*8);

2283 
row4
 = 
	`vld1q_s16
(
d©a
 + 4*8);

2284 
row5
 = 
	`vld1q_s16
(
d©a
 + 5*8);

2285 
row6
 = 
	`vld1q_s16
(
d©a
 + 6*8);

2286 
row7
 = 
	`vld1q_s16
(
d©a
 + 7*8);

2289 
row0
 = 
	`vaddq_s16
‘ow0, 
	`v£tq_œ√_s16
(1024, 
	`vdupq_n_s16
(0), 0));

2292 
	`d˘_∑ss
(
vrsh∫_n_s32
, 10);

2298 
	#d˘_ån16
(
x
, 
y
Ë{ 
öt16x8x2_t
 
t
 = 
	`vånq_s16
(x, y); x =Å.
vÆ
[0]; y =Å.vÆ[1]; }

	)

2299 
	#d˘_ån32
(
x
, 
y
Ë{ 
öt32x4x2_t
 
t
 = 
	`vånq_s32
(
	`vªöãΩªtq_s32_s16
(x), vªöãΩªtq_s32_s16(y)); x = 
	`vªöãΩªtq_s16_s32
—.
vÆ
[0]); y = vªöãΩªtq_s16_s32—.vÆ[1]); }

	)

2300 
	#d˘_ån64
(
x
, 
y
Ë{ 
öt16x8_t
 
x0
 = x; i¡16x8_à
y0
 = y; x = 
	`vcomböe_s16
(
	`vgë_low_s16
(x0), vgë_low_s16(y0)); y = vcomböe_s16(
	`vgë_high_s16
(x0), vgë_high_s16(y0)); }

	)

2303 
	`d˘_ån16
(
row0
, 
row1
);

2304 
	`d˘_ån16
(
row2
, 
row3
);

2305 
	`d˘_ån16
(
row4
, 
row5
);

2306 
	`d˘_ån16
(
row6
, 
row7
);

2309 
	`d˘_ån32
(
row0
, 
row2
);

2310 
	`d˘_ån32
(
row1
, 
row3
);

2311 
	`d˘_ån32
(
row4
, 
row6
);

2312 
	`d˘_ån32
(
row5
, 
row7
);

2315 
	`d˘_ån64
(
row0
, 
row4
);

2316 
	`d˘_ån64
(
row1
, 
row5
);

2317 
	`d˘_ån64
(
row2
, 
row6
);

2318 
	`d˘_ån64
(
row3
, 
row7
);

2320 #unde‡
d˘_ån16


2321 #unde‡
d˘_ån32


2322 #unde‡
d˘_ån64


2329 
	`d˘_∑ss
(
vsh∫_n_s32
, 16);

2333 
uöt8x8_t
 
p0
 = 
	`vqrshrun_n_s16
(
row0
, 1);

2334 
uöt8x8_t
 
p1
 = 
	`vqrshrun_n_s16
(
row1
, 1);

2335 
uöt8x8_t
 
p2
 = 
	`vqrshrun_n_s16
(
row2
, 1);

2336 
uöt8x8_t
 
p3
 = 
	`vqrshrun_n_s16
(
row3
, 1);

2337 
uöt8x8_t
 
p4
 = 
	`vqrshrun_n_s16
(
row4
, 1);

2338 
uöt8x8_t
 
p5
 = 
	`vqrshrun_n_s16
(
row5
, 1);

2339 
uöt8x8_t
 
p6
 = 
	`vqrshrun_n_s16
(
row6
, 1);

2340 
uöt8x8_t
 
p7
 = 
	`vqrshrun_n_s16
(
row7
, 1);

2343 
	#d˘_ån8_8
(
x
, 
y
Ë{ 
uöt8x8x2_t
 
t
 = 
	`vån_u8
(x, y); x =Å.
vÆ
[0]; y =Å.vÆ[1]; }

	)

2344 
	#d˘_ån8_16
(
x
, 
y
Ë{ 
uöt16x4x2_t
 
t
 = 
	`vån_u16
(
	`vªöãΩªt_u16_u8
(x), vªöãΩªt_u16_u8(y)); x = 
	`vªöãΩªt_u8_u16
—.
vÆ
[0]); y = vªöãΩªt_u8_u16—.vÆ[1]); }

	)

2345 
	#d˘_ån8_32
(
x
, 
y
Ë{ 
uöt32x2x2_t
 
t
 = 
	`vån_u32
(
	`vªöãΩªt_u32_u8
(x), vªöãΩªt_u32_u8(y)); x = 
	`vªöãΩªt_u8_u32
—.
vÆ
[0]); y = vªöãΩªt_u8_u32—.vÆ[1]); }

	)

2351 
	`d˘_ån8_8
(
p0
, 
p1
);

2352 
	`d˘_ån8_8
(
p2
, 
p3
);

2353 
	`d˘_ån8_8
(
p4
, 
p5
);

2354 
	`d˘_ån8_8
(
p6
, 
p7
);

2357 
	`d˘_ån8_16
(
p0
, 
p2
);

2358 
	`d˘_ån8_16
(
p1
, 
p3
);

2359 
	`d˘_ån8_16
(
p4
, 
p6
);

2360 
	`d˘_ån8_16
(
p5
, 
p7
);

2363 
	`d˘_ån8_32
(
p0
, 
p4
);

2364 
	`d˘_ån8_32
(
p1
, 
p5
);

2365 
	`d˘_ån8_32
(
p2
, 
p6
);

2366 
	`d˘_ån8_32
(
p3
, 
p7
);

2369 
	`v°1_u8
(
out
, 
p0
); ouà+
out_°ride
;

2370 
	`v°1_u8
(
out
, 
p1
); ouà+
out_°ride
;

2371 
	`v°1_u8
(
out
, 
p2
); ouà+
out_°ride
;

2372 
	`v°1_u8
(
out
, 
p3
); ouà+
out_°ride
;

2373 
	`v°1_u8
(
out
, 
p4
); ouà+
out_°ride
;

2374 
	`v°1_u8
(
out
, 
p5
); ouà+
out_°ride
;

2375 
	`v°1_u8
(
out
, 
p6
); ouà+
out_°ride
;

2376 
	`v°1_u8
(
out
, 
p7
);

2378 #unde‡
d˘_ån8_8


2379 #unde‡
d˘_ån8_16


2380 #unde‡
d˘_ån8_32


2383 #unde‡
d˘_l⁄g_mul


2384 #unde‡
d˘_l⁄g_mac


2385 #unde‡
d˘_widí


2386 #unde‡
d˘_wadd


2387 #unde‡
d˘_wsub


2388 #unde‡
d˘_bÊy32o


2389 #unde‡
d˘_∑ss


2390 
	}
}

2394 
	#STBI__MARKER_n⁄e
 0xff

	)

2398 
°bi_uc
 
	$°bi__gë_m¨kî
(
°bi__j≥g
 *
j
)

2400 
°bi_uc
 
x
;

2401 i‡(
j
->
m¨kî
 !
STBI__MARKER_n⁄e
Ë{ 
x
 = j->marker; j->marker = STBI__MARKER_none;  x; }

2402 
x
 = 
	`°bi__gë8
(
j
->
s
);

2403 i‡(
x
 !0xffË 
STBI__MARKER_n⁄e
;

2404 
x
 == 0xff)

2405 
x
 = 
	`°bi__gë8
(
j
->
s
);

2406  
x
;

2407 
	}
}

2411 
	#STBI__RESTART
(
x
Ë((xË>0xd0 && (xË<0xd7)

	)

2415 
	$°bi__j≥g_ª£t
(
°bi__j≥g
 *
j
)

2417 
j
->
code_bôs
 = 0;

2418 
j
->
code_buf„r
 = 0;

2419 
j
->
nom‹e
 = 0;

2420 
j
->
img_comp
[0].
dc_¥ed
 = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = 0;

2421 
j
->
m¨kî
 = 
STBI__MARKER_n⁄e
;

2422 
j
->
todo
 = j->
ª°¨t_öãrvÆ
 ? j->restart_interval : 0x7fffffff;

2423 
j
->
eob_run
 = 0;

2426 
	}
}

2428 
	$°bi__∑r£_íå›y_coded_d©a
(
°bi__j≥g
 *
z
)

2430 
	`°bi__j≥g_ª£t
(
z
);

2431 i‡(!
z
->
¥ogªssive
) {

2432 i‡(
z
->
sˇn_n
 == 1) {

2433 
i
,
j
;

2434 
	`STBI_SIMD_ALIGN
(, 
d©a
[64]);

2435 
n
 = 
z
->
‹dî
[0];

2440 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2441 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2442 
j
=0; j < 
h
; ++j) {

2443 
i
=0; i < 
w
; ++i) {

2444 
ha
 = 
z
->
img_comp
[
n
].ha;

2445 i‡(!
	`°bi__j≥g_decode_block
(
z
, 
d©a
, z->
huff_dc
+z->
img_comp
[
n
].
hd
, z->
huff_ac
+
ha
, z->
Á°_ac
[ha],Ç, z->
dequ™t
[z->img_comp[n].
tq
]))  0;

2446 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
j
*8+
i
*8, z->img_comp[n].w2, data);

2448 i‡(--
z
->
todo
 <= 0) {

2449 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2452 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2453 
	`°bi__j≥g_ª£t
(
z
);

2459 
i
,
j
,
k
,
x
,
y
;

2460 
	`STBI_SIMD_ALIGN
(, 
d©a
[64]);

2461 
j
=0; j < 
z
->
img_mcu_y
; ++j) {

2462 
i
=0; i < 
z
->
img_mcu_x
; ++i) {

2464 
k
=0; k < 
z
->
sˇn_n
; ++k) {

2465 
n
 = 
z
->
‹dî
[
k
];

2468 
y
=0; y < 
z
->
img_comp
[
n
].
v
; ++y) {

2469 
x
=0; x < 
z
->
img_comp
[
n
].
h
; ++x) {

2470 
x2
 = (
i
*
z
->
img_comp
[
n
].
h
 + 
x
)*8;

2471 
y2
 = (
j
*
z
->
img_comp
[
n
].
v
 + 
y
)*8;

2472 
ha
 = 
z
->
img_comp
[
n
].ha;

2473 i‡(!
	`°bi__j≥g_decode_block
(
z
, 
d©a
, z->
huff_dc
+z->
img_comp
[
n
].
hd
, z->
huff_ac
+
ha
, z->
Á°_ac
[ha],Ç, z->
dequ™t
[z->img_comp[n].
tq
]))  0;

2474 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
y2
+
x2
, z->img_comp[n].w2, data);

2480 i‡(--
z
->
todo
 <= 0) {

2481 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2482 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2483 
	`°bi__j≥g_ª£t
(
z
);

2490 i‡(
z
->
sˇn_n
 == 1) {

2491 
i
,
j
;

2492 
n
 = 
z
->
‹dî
[0];

2497 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2498 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2499 
j
=0; j < 
h
; ++j) {

2500 
i
=0; i < 
w
; ++i) {

2501 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
i
 + 
j
 * z->img_comp[n].
c€ff_w
);

2502 i‡(
z
->
•ec_°¨t
 == 0) {

2503 i‡(!
	`°bi__j≥g_decode_block_¥og_dc
(
z
, 
d©a
, &z->
huff_dc
[z->
img_comp
[
n
].
hd
],Ç))

2506 
ha
 = 
z
->
img_comp
[
n
].ha;

2507 i‡(!
	`°bi__j≥g_decode_block_¥og_ac
(
z
, 
d©a
, &z->
huff_ac
[
ha
], z->
Á°_ac
[ha]))

2511 i‡(--
z
->
todo
 <= 0) {

2512 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2513 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2514 
	`°bi__j≥g_ª£t
(
z
);

2520 
i
,
j
,
k
,
x
,
y
;

2521 
j
=0; j < 
z
->
img_mcu_y
; ++j) {

2522 
i
=0; i < 
z
->
img_mcu_x
; ++i) {

2524 
k
=0; k < 
z
->
sˇn_n
; ++k) {

2525 
n
 = 
z
->
‹dî
[
k
];

2528 
y
=0; y < 
z
->
img_comp
[
n
].
v
; ++y) {

2529 
x
=0; x < 
z
->
img_comp
[
n
].
h
; ++x) {

2530 
x2
 = (
i
*
z
->
img_comp
[
n
].
h
 + 
x
);

2531 
y2
 = (
j
*
z
->
img_comp
[
n
].
v
 + 
y
);

2532 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
x2
 + 
y2
 * z->img_comp[n].
c€ff_w
);

2533 i‡(!
	`°bi__j≥g_decode_block_¥og_dc
(
z
, 
d©a
, &z->
huff_dc
[z->
img_comp
[
n
].
hd
],Ç))

2540 i‡(--
z
->
todo
 <= 0) {

2541 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2542 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2543 
	`°bi__j≥g_ª£t
(
z
);

2550 
	}
}

2552 
	$°bi__j≥g_dequ™tize
(*
d©a
, 
°bi_uc
 *
dequ™t
)

2554 
i
;

2555 
i
=0; i < 64; ++i)

2556 
d©a
[
i
] *
dequ™t
[i];

2557 
	}
}

2559 
	$°bi__j≥g_föish
(
°bi__j≥g
 *
z
)

2561 i‡(
z
->
¥ogªssive
) {

2563 
i
,
j
,
n
;

2564 
n
=0;Ç < 
z
->
s
->
img_n
; ++n) {

2565 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2566 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2567 
j
=0; j < 
h
; ++j) {

2568 
i
=0; i < 
w
; ++i) {

2569 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
i
 + 
j
 * z->img_comp[n].
c€ff_w
);

2570 
	`°bi__j≥g_dequ™tize
(
d©a
, 
z
->
dequ™t
[z->
img_comp
[
n
].
tq
]);

2571 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
j
*8+
i
*8, z->img_comp[n].w2, data);

2576 
	}
}

2578 
	$°bi__¥o˚ss_m¨kî
(
°bi__j≥g
 *
z
, 
m
)

2580 
L
;

2581 
m
) {

2582 
STBI__MARKER_n⁄e
:

2583  
	`°bi__îr
("expected marker","Corrupt JPEG");

2586 i‡(
	`°bi__gë16be
(
z
->
s
Ë!4Ë 
	`°bi__îr
("bad DRIÜen","Corrupt JPEG");

2587 
z
->
ª°¨t_öãrvÆ
 = 
	`°bi__gë16be
(z->
s
);

2591 
L
 = 
	`°bi__gë16be
(
z
->
s
)-2;

2592 
L
 > 0) {

2593 
q
 = 
	`°bi__gë8
(
z
->
s
);

2594 
p
 = 
q
 >> 4;

2595 
t
 = 
q
 & 15,
i
;

2596 i‡(
p
 !0Ë 
	`°bi__îr
("bad DQTÅype","Corrupt JPEG");

2597 i‡(
t
 > 3Ë 
	`°bi__îr
("bad DQTÅable","Corrupt JPEG");

2598 
i
=0; i < 64; ++i)

2599 
z
->
dequ™t
[
t
][
°bi__j≥g_dezigzag
[
i
]] = 
	`°bi__gë8
(z->
s
);

2600 
L
 -= 65;

2602  
L
==0;

2605 
L
 = 
	`°bi__gë16be
(
z
->
s
)-2;

2606 
L
 > 0) {

2607 
°bi_uc
 *
v
;

2608 
sizes
[16],
i
,
n
=0;

2609 
q
 = 
	`°bi__gë8
(
z
->
s
);

2610 
tc
 = 
q
 >> 4;

2611 
th
 = 
q
 & 15;

2612 i‡(
tc
 > 1 || 
th
 > 3Ë 
	`°bi__îr
("bad DHT header","Corrupt JPEG");

2613 
i
=0; i < 16; ++i) {

2614 
sizes
[
i
] = 
	`°bi__gë8
(
z
->
s
);

2615 
n
 +
sizes
[
i
];

2617 
L
 -= 17;

2618 i‡(
tc
 == 0) {

2619 i‡(!
	`°bi__buûd_huffm™
(
z
->
huff_dc
+
th
, 
sizes
))  0;

2620 
v
 = 
z
->
huff_dc
[
th
].
vÆues
;

2622 i‡(!
	`°bi__buûd_huffm™
(
z
->
huff_ac
+
th
, 
sizes
))  0;

2623 
v
 = 
z
->
huff_ac
[
th
].
vÆues
;

2625 
i
=0; i < 
n
; ++i)

2626 
v
[
i
] = 
	`°bi__gë8
(
z
->
s
);

2627 i‡(
tc
 != 0)

2628 
	`°bi__buûd_Á°_ac
(
z
->
Á°_ac
[
th
], z->
huff_ac
 +Åh);

2629 
L
 -
n
;

2631  
L
==0;

2634 i‡((
m
 >= 0xE0 && m <= 0xEF) || m == 0xFE) {

2635 
	`°bi__skù
(
z
->
s
, 
	`°bi__gë16be
(z->s)-2);

2639 
	}
}

2642 
	$°bi__¥o˚ss_sˇn_hódî
(
°bi__j≥g
 *
z
)

2644 
i
;

2645 
Ls
 = 
	`°bi__gë16be
(
z
->
s
);

2646 
z
->
sˇn_n
 = 
	`°bi__gë8
(z->
s
);

2647 i‡(
z
->
sˇn_n
 < 1 || z->sˇn_¿> 4 || z->sˇn_¿> (Ëz->
s
->
img_n
Ë 
	`°bi__îr
("bad SOS component count","Corrupt JPEG");

2648 i‡(
Ls
 !6+2*
z
->
sˇn_n
Ë 
	`°bi__îr
("bad SOSÜen","Corrupt JPEG");

2649 
i
=0; i < 
z
->
sˇn_n
; ++i) {

2650 
id
 = 
	`°bi__gë8
(
z
->
s
), 
which
;

2651 
q
 = 
	`°bi__gë8
(
z
->
s
);

2652 
which
 = 0; which < 
z
->
s
->
img_n
; ++which)

2653 i‡(
z
->
img_comp
[
which
].
id
 == id)

2655 i‡(
which
 =
z
->
s
->
img_n
)  0;

2656 
z
->
img_comp
[
which
].
hd
 = 
q
 >> 4; i‡(z->img_comp[which].hd > 3Ë 
	`°bi__îr
("bad DC huff","Corrupt JPEG");

2657 
z
->
img_comp
[
which
].
ha
 = 
q
 & 15; i‡(z->img_comp[which].h®> 3Ë 
	`°bi__îr
("bad AC huff","Corrupt JPEG");

2658 
z
->
‹dî
[
i
] = 
which
;

2662 
Ø
;

2663 
z
->
•ec_°¨t
 = 
	`°bi__gë8
(z->
s
);

2664 
z
->
•ec_íd
 = 
	`°bi__gë8
(z->
s
);

2665 
Ø
 = 
	`°bi__gë8
(
z
->
s
);

2666 
z
->
succ_high
 = (
Ø
 >> 4);

2667 
z
->
succ_low
 = (
Ø
 & 15);

2668 i‡(
z
->
¥ogªssive
) {

2669 i‡(
z
->
•ec_°¨t
 > 63 || z->
•ec_íd
 > 63 || z->•ec_°¨à> z->•ec_íd || z->
succ_high
 > 13 || z->
succ_low
 > 13)

2670  
	`°bi__îr
("bad SOS", "Corrupt JPEG");

2672 i‡(
z
->
•ec_°¨t
 !0Ë 
	`°bi__îr
("bad SOS","Corrupt JPEG");

2673 i‡(
z
->
succ_high
 !0 || z->
succ_low
 !0Ë 
	`°bi__îr
("bad SOS","Corrupt JPEG");

2674 
z
->
•ec_íd
 = 63;

2679 
	}
}

2681 
	$°bi__¥o˚ss_‰ame_hódî
(
°bi__j≥g
 *
z
, 
sˇn
)

2683 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

2684 
Lf
,
p
,
i
,
q
, 
h_max
=1,
v_max
=1,
c
;

2685 
Lf
 = 
	`°bi__gë16be
(
s
); i‡(L‡< 11Ë 
	`°bi__îr
("bad SOFÜen","Corrupt JPEG");

2686 
p
 = 
	`°bi__gë8
(
s
); i‡’ !8Ë 
	`°bi__îr
("only 8-bit","JPEG formatÇot supported: 8-bit only");

2687 
s
->
img_y
 = 
	`°bi__gë16be
(s); i‡(s->img_y =0Ë 
	`°bi__îr
("no header height", "JPEG formatÇot supported: delayed height");

2688 
s
->
img_x
 = 
	`°bi__gë16be
(s); i‡(s->img_x =0Ë 
	`°bi__îr
("0 width","Corrupt JPEG");

2689 
c
 = 
	`°bi__gë8
(
s
);

2690 i‡(
c
 !3 && c !1Ë 
	`°bi__îr
("bad component count","Corrupt JPEG");

2691 
s
->
img_n
 = 
c
;

2692 
i
=0; i < 
c
; ++i) {

2693 
z
->
img_comp
[
i
].
d©a
 = 
NULL
;

2694 
z
->
img_comp
[
i
].
löebuf
 = 
NULL
;

2697 i‡(
Lf
 !8+3*
s
->
img_n
Ë 
	`°bi__îr
("bad SOFÜen","Corrupt JPEG");

2699 
i
=0; i < 
s
->
img_n
; ++i) {

2700 
z
->
img_comp
[
i
].
id
 = 
	`°bi__gë8
(
s
);

2701 i‡(
z
->
img_comp
[
i
].
id
 != i+1)

2702 i‡(
z
->
img_comp
[
i
].
id
 != i)

2703  
	`°bi__îr
("bad component ID","Corrupt JPEG");

2704 
q
 = 
	`°bi__gë8
(
s
);

2705 
z
->
img_comp
[
i
].
h
 = (
q
 >> 4); i‡(!z->img_comp[i].h || z->img_comp[i].h > 4Ë 
	`°bi__îr
("bad H","Corrupt JPEG");

2706 
z
->
img_comp
[
i
].
v
 = 
q
 & 15; i‡(!z->img_comp[i].v || z->img_comp[i].v > 4Ë 
	`°bi__îr
("bad V","Corrupt JPEG");

2707 
z
->
img_comp
[
i
].
tq
 = 
	`°bi__gë8
(
s
); i‡(z->img_comp[i].tq > 3Ë 
	`°bi__îr
("bad TQ","Corrupt JPEG");

2710 i‡(
sˇn
 !
STBI__SCAN_lﬂd
)  1;

2712 i‡((1 << 30Ë/ 
s
->
img_x
 / s->
img_n
 < s->
img_y
Ë 
	`°bi__îr
("tooÜarge", "ImageÅooÜargeÅo decode");

2714 
i
=0; i < 
s
->
img_n
; ++i) {

2715 i‡(
z
->
img_comp
[
i
].
h
 > 
h_max
) h_max = z->img_comp[i].h;

2716 i‡(
z
->
img_comp
[
i
].
v
 > 
v_max
) v_max = z->img_comp[i].v;

2720 
z
->
img_h_max
 = 
h_max
;

2721 
z
->
img_v_max
 = 
v_max
;

2722 
z
->
img_mcu_w
 = 
h_max
 * 8;

2723 
z
->
img_mcu_h
 = 
v_max
 * 8;

2724 
z
->
img_mcu_x
 = (
s
->
img_x
 + z->
img_mcu_w
-1) / z->img_mcu_w;

2725 
z
->
img_mcu_y
 = (
s
->
img_y
 + z->
img_mcu_h
-1) / z->img_mcu_h;

2727 
i
=0; i < 
s
->
img_n
; ++i) {

2729 
z
->
img_comp
[
i
].
x
 = (
s
->
img_x
 * z->img_comp[i].
h
 + 
h_max
-1) / h_max;

2730 
z
->
img_comp
[
i
].
y
 = (
s
->
img_y
 * z->img_comp[i].
v
 + 
v_max
-1) / v_max;

2735 
z
->
img_comp
[
i
].
w2
 = z->
img_mcu_x
 * z->img_comp[i].
h
 * 8;

2736 
z
->
img_comp
[
i
].
h2
 = z->
img_mcu_y
 * z->img_comp[i].
v
 * 8;

2737 
z
->
img_comp
[
i
].
øw_d©a
 = 
	`°bi__mÆloc
(z->img_comp[i].
w2
 * z->img_comp[i].
h2
+15);

2739 i‡(
z
->
img_comp
[
i
].
øw_d©a
 =
NULL
) {

2740 --
i
; i >= 0; --i) {

2741 
	`STBI_FREE
(
z
->
img_comp
[
i
].
øw_d©a
);

2742 
z
->
img_comp
[
i
].
d©a
 = 
NULL
;

2744  
	`°bi__îr
("outofmem", "Out of memory");

2747 
z
->
img_comp
[
i
].
d©a
 = (
°bi_uc
*Ë(((
size_t
Ëz->img_comp[i].
øw_d©a
 + 15) & ~15);

2748 
z
->
img_comp
[
i
].
löebuf
 = 
NULL
;

2749 i‡(
z
->
¥ogªssive
) {

2750 
z
->
img_comp
[
i
].
c€ff_w
 = (z->img_comp[i].
w2
 + 7) >> 3;

2751 
z
->
img_comp
[
i
].
c€ff_h
 = (z->img_comp[i].
h2
 + 7) >> 3;

2752 
z
->
img_comp
[
i
].
øw_c€ff
 = 
	`STBI_MALLOC
(z->img_comp[i].
c€ff_w
 * z->img_comp[i].
c€ff_h
 * 64 * () + 15);

2753 
z
->
img_comp
[
i
].
c€ff
 = (*Ë(((
size_t
Ëz->img_comp[i].
øw_c€ff
 + 15) & ~15);

2755 
z
->
img_comp
[
i
].
c€ff
 = 0;

2756 
z
->
img_comp
[
i
].
øw_c€ff
 = 0;

2761 
	}
}

2764 
	#°bi__DNL
(
x
Ë((xË=0xdc)

	)

2765 
	#°bi__SOI
(
x
Ë((xË=0xd8)

	)

2766 
	#°bi__EOI
(
x
Ë((xË=0xd9)

	)

2767 
	#°bi__SOF
(
x
Ë((xË=0xc0 || (xË=0xc1 || (xË=0xc2)

	)

2768 
	#°bi__SOS
(
x
Ë((xË=0xda)

	)

2770 
	#°bi__SOF_¥ogªssive
(
x
Ë((xË=0xc2)

	)

2772 
	$°bi__decode_j≥g_hódî
(
°bi__j≥g
 *
z
, 
sˇn
)

2774 
m
;

2775 
z
->
m¨kî
 = 
STBI__MARKER_n⁄e
;

2776 
m
 = 
	`°bi__gë_m¨kî
(
z
);

2777 i‡(!
	`°bi__SOI
(
m
)Ë 
	`°bi__îr
("no SOI","Corrupt JPEG");

2778 i‡(
sˇn
 =
STBI__SCAN_ty≥
)  1;

2779 
m
 = 
	`°bi__gë_m¨kî
(
z
);

2780 !
	`°bi__SOF
(
m
)) {

2781 i‡(!
	`°bi__¥o˚ss_m¨kî
(
z
,
m
))  0;

2782 
m
 = 
	`°bi__gë_m¨kî
(
z
);

2783 
m
 =
STBI__MARKER_n⁄e
) {

2785 i‡(
	`°bi__©_eof
(
z
->
s
)Ë 
	`°bi__îr
("no SOF", "Corrupt JPEG");

2786 
m
 = 
	`°bi__gë_m¨kî
(
z
);

2789 
z
->
¥ogªssive
 = 
	`°bi__SOF_¥ogªssive
(
m
);

2790 i‡(!
	`°bi__¥o˚ss_‰ame_hódî
(
z
, 
sˇn
))  0;

2792 
	}
}

2795 
	$°bi__decode_j≥g_image
(
°bi__j≥g
 *
j
)

2797 
m
;

2798 
m
 = 0; m < 4; m++) {

2799 
j
->
img_comp
[
m
].
øw_d©a
 = 
NULL
;

2800 
j
->
img_comp
[
m
].
øw_c€ff
 = 
NULL
;

2802 
j
->
ª°¨t_öãrvÆ
 = 0;

2803 i‡(!
	`°bi__decode_j≥g_hódî
(
j
, 
STBI__SCAN_lﬂd
))  0;

2804 
m
 = 
	`°bi__gë_m¨kî
(
j
);

2805 !
	`°bi__EOI
(
m
)) {

2806 i‡(
	`°bi__SOS
(
m
)) {

2807 i‡(!
	`°bi__¥o˚ss_sˇn_hódî
(
j
))  0;

2808 i‡(!
	`°bi__∑r£_íå›y_coded_d©a
(
j
))  0;

2809 i‡(
j
->
m¨kî
 =
STBI__MARKER_n⁄e
 ) {

2811 !
	`°bi__©_eof
(
j
->
s
)) {

2812 
x
 = 
	`°bi__gë8
(
j
->
s
);

2813 i‡(
x
 == 255) {

2814 
j
->
m¨kî
 = 
	`°bi__gë8
(j->
s
);

2816 } i‡(
x
 != 0) {

2817  
	`°bi__îr
("junk before marker", "Corrupt JPEG");

2823 i‡(!
	`°bi__¥o˚ss_m¨kî
(
j
, 
m
))  0;

2825 
m
 = 
	`°bi__gë_m¨kî
(
j
);

2827 i‡(
j
->
¥ogªssive
)

2828 
	`°bi__j≥g_föish
(
j
);

2830 
	}
}

2834 
	g°bi_uc
 *(*
	tªßm∂e_row_func
)(
	t°bi_uc
 *
	tout
, stbi_u¯*
	tö0
, stbi_u¯*
	tö1
,

2835 
	tw
, 
	ths
);

2837 
	#°bi__div4
(
x
Ë((
°bi_uc
Ë((xË>> 2))

	)

2839 
°bi_uc
 *
	$ªßm∂e_row_1
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

2841 
	`STBI_NOTUSED
(
out
);

2842 
	`STBI_NOTUSED
(
ö_Ár
);

2843 
	`STBI_NOTUSED
(
w
);

2844 
	`STBI_NOTUSED
(
hs
);

2845  
ö_√¨
;

2846 
	}
}

2848 
°bi_uc
* 
	$°bi__ªßm∂e_row_v_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

2851 
i
;

2852 
	`STBI_NOTUSED
(
hs
);

2853 
i
=0; i < 
w
; ++i)

2854 
out
[
i
] = 
	`°bi__div4
(3*
ö_√¨
[i] + 
ö_Ár
[i] + 2);

2855  
out
;

2856 
	}
}

2858 
°bi_uc
* 
	$°bi__ªßm∂e_row_h_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

2861 
i
;

2862 
°bi_uc
 *
öput
 = 
ö_√¨
;

2864 i‡(
w
 == 1) {

2866 
out
[0] = out[1] = 
öput
[0];

2867  
out
;

2870 
out
[0] = 
öput
[0];

2871 
out
[1] = 
	`°bi__div4
(
öput
[0]*3 + input[1] + 2);

2872 
i
=1; i < 
w
-1; ++i) {

2873 
n
 = 3*
öput
[
i
]+2;

2874 
out
[
i
*2+0] = 
	`°bi__div4
(
n
+
öput
[i-1]);

2875 
out
[
i
*2+1] = 
	`°bi__div4
(
n
+
öput
[i+1]);

2877 
out
[
i
*2+0] = 
	`°bi__div4
(
öput
[
w
-2]*3 + input[w-1] + 2);

2878 
out
[
i
*2+1] = 
öput
[
w
-1];

2880 
	`STBI_NOTUSED
(
ö_Ár
);

2881 
	`STBI_NOTUSED
(
hs
);

2883  
out
;

2884 
	}
}

2886 
	#°bi__div16
(
x
Ë((
°bi_uc
Ë((xË>> 4))

	)

2888 
°bi_uc
 *
	$°bi__ªßm∂e_row_hv_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

2891 
i
,
t0
,
t1
;

2892 i‡(
w
 == 1) {

2893 
out
[0] = out[1] = 
	`°bi__div4
(3*
ö_√¨
[0] + 
ö_Ár
[0] + 2);

2894  
out
;

2897 
t1
 = 3*
ö_√¨
[0] + 
ö_Ár
[0];

2898 
out
[0] = 
	`°bi__div4
(
t1
+2);

2899 
i
=1; i < 
w
; ++i) {

2900 
t0
 = 
t1
;

2901 
t1
 = 3*
ö_√¨
[
i
]+
ö_Ár
[i];

2902 
out
[
i
*2-1] = 
	`°bi__div16
(3*
t0
 + 
t1
 + 8);

2903 
out
[
i
*2 ] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

2905 
out
[
w
*2-1] = 
	`°bi__div4
(
t1
+2);

2907 
	`STBI_NOTUSED
(
hs
);

2909  
out
;

2910 
	}
}

2912 #i‡
deföed
(
STBI_SSE2
Ë|| deföed(
STBI_NEON
)

2913 
°bi_uc
 *
	$°bi__ªßm∂e_row_hv_2_simd
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

2916 
i
=0,
t0
,
t1
;

2918 i‡(
w
 == 1) {

2919 
out
[0] = out[1] = 
	`°bi__div4
(3*
ö_√¨
[0] + 
ö_Ár
[0] + 2);

2920  
out
;

2923 
t1
 = 3*
ö_√¨
[0] + 
ö_Ár
[0];

2927 ; 
i
 < ((
w
-1) & ~7); i += 8) {

2928 #i‡
	`deföed
(
STBI_SSE2
)

2931 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

2932 
__m128i
 
Árb
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
ö_Ár
 + 
i
));

2933 
__m128i
 
√¨b
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
ö_√¨
 + 
i
));

2934 
__m128i
 
Árw
 = 
	`_mm_u≈acklo_ïi8
(
Árb
, 
zîo
);

2935 
__m128i
 
√¨w
 = 
	`_mm_u≈acklo_ïi8
(
√¨b
, 
zîo
);

2936 
__m128i
 
diff
 = 
	`_mm_sub_ïi16
(
Árw
, 
√¨w
);

2937 
__m128i
 
√¨s
 = 
	`_mm_¶li_ïi16
(
√¨w
, 2);

2938 
__m128i
 
cuº
 = 
	`_mm_add_ïi16
(
√¨s
, 
diff
);

2945 
__m128i
 
¥v0
 = 
	`_mm_¶li_si128
(
cuº
, 2);

2946 
__m128i
 
nxt0
 = 
	`_mm_§li_si128
(
cuº
, 2);

2947 
__m128i
 
¥ev
 = 
	`_mm_ö£π_ïi16
(
¥v0
, 
t1
, 0);

2948 
__m128i
 
√xt
 = 
	`_mm_ö£π_ïi16
(
nxt0
, 3*
ö_√¨
[
i
+8] + 
ö_Ár
[i+8], 7);

2954 
__m128i
 
büs
 = 
	`_mm_£t1_ïi16
(8);

2955 
__m128i
 
curs
 = 
	`_mm_¶li_ïi16
(
cuº
, 2);

2956 
__m128i
 
¥vd
 = 
	`_mm_sub_ïi16
(
¥ev
, 
cuº
);

2957 
__m128i
 
nxtd
 = 
	`_mm_sub_ïi16
(
√xt
, 
cuº
);

2958 
__m128i
 
curb
 = 
	`_mm_add_ïi16
(
curs
, 
büs
);

2959 
__m128i
 
eví
 = 
	`_mm_add_ïi16
(
¥vd
, 
curb
);

2960 
__m128i
 
odd
 = 
	`_mm_add_ïi16
(
nxtd
, 
curb
);

2963 
__m128i
 
öt0
 = 
	`_mm_u≈acklo_ïi16
(
eví
, 
odd
);

2964 
__m128i
 
öt1
 = 
	`_mm_u≈ackhi_ïi16
(
eví
, 
odd
);

2965 
__m128i
 
de0
 = 
	`_mm_§li_ïi16
(
öt0
, 4);

2966 
__m128i
 
de1
 = 
	`_mm_§li_ïi16
(
öt1
, 4);

2969 
__m128i
 
outv
 = 
	`_mm_∑ckus_ïi16
(
de0
, 
de1
);

2970 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 
i
*2), 
outv
);

2971 #ñi‡
	`deföed
(
STBI_NEON
)

2974 
uöt8x8_t
 
Árb
 = 
	`vld1_u8
(
ö_Ár
 + 
i
);

2975 
uöt8x8_t
 
√¨b
 = 
	`vld1_u8
(
ö_√¨
 + 
i
);

2976 
öt16x8_t
 
diff
 = 
	`vªöãΩªtq_s16_u16
(
	`vsubl_u8
(
Árb
, 
√¨b
));

2977 
öt16x8_t
 
√¨s
 = 
	`vªöãΩªtq_s16_u16
(
	`vshŒ_n_u8
(
√¨b
, 2));

2978 
öt16x8_t
 
cuº
 = 
	`vaddq_s16
(
√¨s
, 
diff
);

2985 
öt16x8_t
 
¥v0
 = 
	`vextq_s16
(
cuº
, curr, 7);

2986 
öt16x8_t
 
nxt0
 = 
	`vextq_s16
(
cuº
, curr, 1);

2987 
öt16x8_t
 
¥ev
 = 
	`v£tq_œ√_s16
(
t1
, 
¥v0
, 0);

2988 
öt16x8_t
 
√xt
 = 
	`v£tq_œ√_s16
(3*
ö_√¨
[
i
+8] + 
ö_Ár
[i+8], 
nxt0
, 7);

2994 
öt16x8_t
 
curs
 = 
	`vshlq_n_s16
(
cuº
, 2);

2995 
öt16x8_t
 
¥vd
 = 
	`vsubq_s16
(
¥ev
, 
cuº
);

2996 
öt16x8_t
 
nxtd
 = 
	`vsubq_s16
(
√xt
, 
cuº
);

2997 
öt16x8_t
 
eví
 = 
	`vaddq_s16
(
curs
, 
¥vd
);

2998 
öt16x8_t
 
odd
 = 
	`vaddq_s16
(
curs
, 
nxtd
);

3001 
uöt8x8x2_t
 
o
;

3002 
o
.
vÆ
[0] = 
	`vqrshrun_n_s16
(
eví
, 4);

3003 
o
.
vÆ
[1] = 
	`vqrshrun_n_s16
(
odd
, 4);

3004 
	`v°2_u8
(
out
 + 
i
*2, 
o
);

3008 
t1
 = 3*
ö_√¨
[
i
+7] + 
ö_Ár
[i+7];

3011 
t0
 = 
t1
;

3012 
t1
 = 3*
ö_√¨
[
i
] + 
ö_Ár
[i];

3013 
out
[
i
*2] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

3015 ++
i
; i < 
w
; ++i) {

3016 
t0
 = 
t1
;

3017 
t1
 = 3*
ö_√¨
[
i
]+
ö_Ár
[i];

3018 
out
[
i
*2-1] = 
	`°bi__div16
(3*
t0
 + 
t1
 + 8);

3019 
out
[
i
*2 ] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

3021 
out
[
w
*2-1] = 
	`°bi__div4
(
t1
+2);

3023 
	`STBI_NOTUSED
(
hs
);

3025  
out
;

3026 
	}
}

3029 
°bi_uc
 *
	$°bi__ªßm∂e_row_gíîic
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3032 
i
,
j
;

3033 
	`STBI_NOTUSED
(
ö_Ár
);

3034 
i
=0; i < 
w
; ++i)

3035 
j
=0; j < 
hs
; ++j)

3036 
out
[
i
*
hs
+
j
] = 
ö_√¨
[i];

3037  
out
;

3038 
	}
}

3040 #ifde‡
STBI_JPEG_OLD


3043 
	#Êﬂt2fixed
(
x
Ë((Ë((xË* 65536 + 0.5))

	)

3044 
	$°bi__YCbCr_to_RGB_row
(
°bi_uc
 *
out
, c⁄° stbi_u¯*
y
, c⁄° stbi_u¯*
pcb
, c⁄° stbi_u¯*
p¸
, 
cou¡
, 
°ï
)

3046 
i
;

3047 
i
=0; i < 
cou¡
; ++i) {

3048 
y_fixed
 = (
y
[
i
] << 16) + 32768;

3049 
r
,
g
,
b
;

3050 
¸
 = 
p¸
[
i
] - 128;

3051 
cb
 = 
pcb
[
i
] - 128;

3052 
r
 = 
y_fixed
 + 
¸
*
	`Êﬂt2fixed
(1.40200f);

3053 
g
 = 
y_fixed
 - 
¸
*
	`Êﬂt2fixed
(0.71414fË- 
cb
*float2fixed(0.34414f);

3054 
b
 = 
y_fixed
 + 
cb
*
	`Êﬂt2fixed
(1.77200f);

3055 
r
 >>= 16;

3056 
g
 >>= 16;

3057 
b
 >>= 16;

3058 i‡((Ë
r
 > 255) { if (r < 0)Ñ = 0; r = 255; }

3059 i‡((Ë
g
 > 255) { if (g < 0) g = 0; g = 255; }

3060 i‡((Ë
b
 > 255) { if (b < 0) b = 0; b = 255; }

3061 
out
[0] = (
°bi_uc
)
r
;

3062 
out
[1] = (
°bi_uc
)
g
;

3063 
out
[2] = (
°bi_uc
)
b
;

3064 
out
[3] = 255;

3065 
out
 +
°ï
;

3067 
	}
}

3071 
	#Êﬂt2fixed
(
x
Ë(((Ë((xË* 4096.0‡+ 0.5f)Ë<< 8)

	)

3072 
	$°bi__YCbCr_to_RGB_row
(
°bi_uc
 *
out
, c⁄° stbi_u¯*
y
, c⁄° stbi_u¯*
pcb
, c⁄° stbi_u¯*
p¸
, 
cou¡
, 
°ï
)

3074 
i
;

3075 
i
=0; i < 
cou¡
; ++i) {

3076 
y_fixed
 = (
y
[
i
] << 20) + (1<<19);

3077 
r
,
g
,
b
;

3078 
¸
 = 
p¸
[
i
] - 128;

3079 
cb
 = 
pcb
[
i
] - 128;

3080 
r
 = 
y_fixed
 + 
¸
* 
	`Êﬂt2fixed
(1.40200f);

3081 
g
 = 
y_fixed
 + (
¸
*-
	`Êﬂt2fixed
(0.71414f)Ë+ ((
cb
*-float2fixed(0.34414f)) & 0xffff0000);

3082 
b
 = 
y_fixed
 + 
cb
* 
	`Êﬂt2fixed
(1.77200f);

3083 
r
 >>= 20;

3084 
g
 >>= 20;

3085 
b
 >>= 20;

3086 i‡((Ë
r
 > 255) { if (r < 0)Ñ = 0; r = 255; }

3087 i‡((Ë
g
 > 255) { if (g < 0) g = 0; g = 255; }

3088 i‡((Ë
b
 > 255) { if (b < 0) b = 0; b = 255; }

3089 
out
[0] = (
°bi_uc
)
r
;

3090 
out
[1] = (
°bi_uc
)
g
;

3091 
out
[2] = (
°bi_uc
)
b
;

3092 
out
[3] = 255;

3093 
out
 +
°ï
;

3095 
	}
}

3098 #i‡
deföed
(
STBI_SSE2
Ë|| deföed(
STBI_NEON
)

3099 
	$°bi__YCbCr_to_RGB_simd
(
°bi_uc
 *
out
, stbi_u¯c⁄° *
y
, stbi_u¯c⁄° *
pcb
, stbi_u¯c⁄° *
p¸
, 
cou¡
, 
°ï
)

3101 
i
 = 0;

3103 #ifde‡
STBI_SSE2


3107 i‡(
°ï
 == 4) {

3109 
__m128i
 
signÊù
 = 
	`_mm_£t1_ïi8
(-0x80);

3110 
__m128i
 
¸_c⁄°0
 = 
	`_mm_£t1_ïi16
( () ( 1.40200f*4096.0f+0.5f));

3111 
__m128i
 
¸_c⁄°1
 = 
	`_mm_£t1_ïi16
( - () ( 0.71414f*4096.0f+0.5f));

3112 
__m128i
 
cb_c⁄°0
 = 
	`_mm_£t1_ïi16
( - () ( 0.34414f*4096.0f+0.5f));

3113 
__m128i
 
cb_c⁄°1
 = 
	`_mm_£t1_ïi16
( () ( 1.77200f*4096.0f+0.5f));

3114 
__m128i
 
y_büs
 = 
	`_mm_£t1_ïi8
(() () 128);

3115 
__m128i
 
xw
 = 
	`_mm_£t1_ïi16
(255);

3117 ; 
i
+7 < 
cou¡
; i += 8) {

3119 
__m128i
 
y_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
y
+
i
));

3120 
__m128i
 
¸_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
p¸
+
i
));

3121 
__m128i
 
cb_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
pcb
+
i
));

3122 
__m128i
 
¸_bü£d
 = 
	`_mm_x‹_si128
(
¸_byãs
, 
signÊù
);

3123 
__m128i
 
cb_bü£d
 = 
	`_mm_x‹_si128
(
cb_byãs
, 
signÊù
);

3126 
__m128i
 
yw
 = 
	`_mm_u≈acklo_ïi8
(
y_büs
, 
y_byãs
);

3127 
__m128i
 
¸w
 = 
	`_mm_u≈acklo_ïi8
(
	`_mm_£tzîo_si128
(), 
¸_bü£d
);

3128 
__m128i
 
cbw
 = 
	`_mm_u≈acklo_ïi8
(
	`_mm_£tzîo_si128
(), 
cb_bü£d
);

3131 
__m128i
 
yws
 = 
	`_mm_§li_ïi16
(
yw
, 4);

3132 
__m128i
 
¸0
 = 
	`_mm_mulhi_ïi16
(
¸_c⁄°0
, 
¸w
);

3133 
__m128i
 
cb0
 = 
	`_mm_mulhi_ïi16
(
cb_c⁄°0
, 
cbw
);

3134 
__m128i
 
cb1
 = 
	`_mm_mulhi_ïi16
(
cbw
, 
cb_c⁄°1
);

3135 
__m128i
 
¸1
 = 
	`_mm_mulhi_ïi16
(
¸w
, 
¸_c⁄°1
);

3136 
__m128i
 
rws
 = 
	`_mm_add_ïi16
(
¸0
, 
yws
);

3137 
__m128i
 
gwt
 = 
	`_mm_add_ïi16
(
cb0
, 
yws
);

3138 
__m128i
 
bws
 = 
	`_mm_add_ïi16
(
yws
, 
cb1
);

3139 
__m128i
 
gws
 = 
	`_mm_add_ïi16
(
gwt
, 
¸1
);

3142 
__m128i
 
rw
 = 
	`_mm_§ai_ïi16
(
rws
, 4);

3143 
__m128i
 
bw
 = 
	`_mm_§ai_ïi16
(
bws
, 4);

3144 
__m128i
 
gw
 = 
	`_mm_§ai_ïi16
(
gws
, 4);

3147 
__m128i
 
brb
 = 
	`_mm_∑ckus_ïi16
(
rw
, 
bw
);

3148 
__m128i
 
gxb
 = 
	`_mm_∑ckus_ïi16
(
gw
, 
xw
);

3151 
__m128i
 
t0
 = 
	`_mm_u≈acklo_ïi8
(
brb
, 
gxb
);

3152 
__m128i
 
t1
 = 
	`_mm_u≈ackhi_ïi8
(
brb
, 
gxb
);

3153 
__m128i
 
o0
 = 
	`_mm_u≈acklo_ïi16
(
t0
, 
t1
);

3154 
__m128i
 
o1
 = 
	`_mm_u≈ackhi_ïi16
(
t0
, 
t1
);

3157 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 0), 
o0
);

3158 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 16), 
o1
);

3159 
out
 += 32;

3164 #ifde‡
STBI_NEON


3166 i‡(
°ï
 == 4) {

3168 
uöt8x8_t
 
signÊù
 = 
	`vdup_n_u8
(0x80);

3169 
öt16x8_t
 
¸_c⁄°0
 = 
	`vdupq_n_s16
( () ( 1.40200f*4096.0f+0.5f));

3170 
öt16x8_t
 
¸_c⁄°1
 = 
	`vdupq_n_s16
( - () ( 0.71414f*4096.0f+0.5f));

3171 
öt16x8_t
 
cb_c⁄°0
 = 
	`vdupq_n_s16
( - () ( 0.34414f*4096.0f+0.5f));

3172 
öt16x8_t
 
cb_c⁄°1
 = 
	`vdupq_n_s16
( () ( 1.77200f*4096.0f+0.5f));

3174 ; 
i
+7 < 
cou¡
; i += 8) {

3176 
uöt8x8_t
 
y_byãs
 = 
	`vld1_u8
(
y
 + 
i
);

3177 
uöt8x8_t
 
¸_byãs
 = 
	`vld1_u8
(
p¸
 + 
i
);

3178 
uöt8x8_t
 
cb_byãs
 = 
	`vld1_u8
(
pcb
 + 
i
);

3179 
öt8x8_t
 
¸_bü£d
 = 
	`vªöãΩªt_s8_u8
(
	`vsub_u8
(
¸_byãs
, 
signÊù
));

3180 
öt8x8_t
 
cb_bü£d
 = 
	`vªöãΩªt_s8_u8
(
	`vsub_u8
(
cb_byãs
, 
signÊù
));

3183 
öt16x8_t
 
yws
 = 
	`vªöãΩªtq_s16_u16
(
	`vshŒ_n_u8
(
y_byãs
, 4));

3184 
öt16x8_t
 
¸w
 = 
	`vshŒ_n_s8
(
¸_bü£d
, 7);

3185 
öt16x8_t
 
cbw
 = 
	`vshŒ_n_s8
(
cb_bü£d
, 7);

3188 
öt16x8_t
 
¸0
 = 
	`vqdmulhq_s16
(
¸w
, 
¸_c⁄°0
);

3189 
öt16x8_t
 
cb0
 = 
	`vqdmulhq_s16
(
cbw
, 
cb_c⁄°0
);

3190 
öt16x8_t
 
¸1
 = 
	`vqdmulhq_s16
(
¸w
, 
¸_c⁄°1
);

3191 
öt16x8_t
 
cb1
 = 
	`vqdmulhq_s16
(
cbw
, 
cb_c⁄°1
);

3192 
öt16x8_t
 
rws
 = 
	`vaddq_s16
(
yws
, 
¸0
);

3193 
öt16x8_t
 
gws
 = 
	`vaddq_s16
(vaddq_s16(
yws
, 
cb0
), 
¸1
);

3194 
öt16x8_t
 
bws
 = 
	`vaddq_s16
(
yws
, 
cb1
);

3197 
uöt8x8x4_t
 
o
;

3198 
o
.
vÆ
[0] = 
	`vqrshrun_n_s16
(
rws
, 4);

3199 
o
.
vÆ
[1] = 
	`vqrshrun_n_s16
(
gws
, 4);

3200 
o
.
vÆ
[2] = 
	`vqrshrun_n_s16
(
bws
, 4);

3201 
o
.
vÆ
[3] = 
	`vdup_n_u8
(255);

3204 
	`v°4_u8
(
out
, 
o
);

3205 
out
 += 8*4;

3210 ; 
i
 < 
cou¡
; ++i) {

3211 
y_fixed
 = (
y
[
i
] << 20) + (1<<19);

3212 
r
,
g
,
b
;

3213 
¸
 = 
p¸
[
i
] - 128;

3214 
cb
 = 
pcb
[
i
] - 128;

3215 
r
 = 
y_fixed
 + 
¸
* 
	`Êﬂt2fixed
(1.40200f);

3216 
g
 = 
y_fixed
 + 
¸
*-
	`Êﬂt2fixed
(0.71414fË+ ((
cb
*-float2fixed(0.34414f)) & 0xffff0000);

3217 
b
 = 
y_fixed
 + 
cb
* 
	`Êﬂt2fixed
(1.77200f);

3218 
r
 >>= 20;

3219 
g
 >>= 20;

3220 
b
 >>= 20;

3221 i‡((Ë
r
 > 255) { if (r < 0)Ñ = 0; r = 255; }

3222 i‡((Ë
g
 > 255) { if (g < 0) g = 0; g = 255; }

3223 i‡((Ë
b
 > 255) { if (b < 0) b = 0; b = 255; }

3224 
out
[0] = (
°bi_uc
)
r
;

3225 
out
[1] = (
°bi_uc
)
g
;

3226 
out
[2] = (
°bi_uc
)
b
;

3227 
out
[3] = 255;

3228 
out
 +
°ï
;

3230 
	}
}

3234 
	$°bi__£tup_j≥g
(
°bi__j≥g
 *
j
)

3236 
j
->
id˘_block_kî√l
 = 
°bi__id˘_block
;

3237 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_row
;

3238 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2
;

3240 #ifde‡
STBI_SSE2


3241 i‡(
	`°bi__s£2_avaûabÀ
()) {

3242 
j
->
id˘_block_kî√l
 = 
°bi__id˘_simd
;

3243 #i‚de‡
STBI_JPEG_OLD


3244 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_simd
;

3246 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2_simd
;

3250 #ifde‡
STBI_NEON


3251 
j
->
id˘_block_kî√l
 = 
°bi__id˘_simd
;

3252 #i‚de‡
STBI_JPEG_OLD


3253 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_simd
;

3255 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2_simd
;

3257 
	}
}

3260 
	$°bi__˛ónup_j≥g
(
°bi__j≥g
 *
j
)

3262 
i
;

3263 
i
=0; i < 
j
->
s
->
img_n
; ++i) {

3264 i‡(
j
->
img_comp
[
i
].
øw_d©a
) {

3265 
	`STBI_FREE
(
j
->
img_comp
[
i
].
øw_d©a
);

3266 
j
->
img_comp
[
i
].
øw_d©a
 = 
NULL
;

3267 
j
->
img_comp
[
i
].
d©a
 = 
NULL
;

3269 i‡(
j
->
img_comp
[
i
].
øw_c€ff
) {

3270 
	`STBI_FREE
(
j
->
img_comp
[
i
].
øw_c€ff
);

3271 
j
->
img_comp
[
i
].
øw_c€ff
 = 0;

3272 
j
->
img_comp
[
i
].
c€ff
 = 0;

3274 i‡(
j
->
img_comp
[
i
].
löebuf
) {

3275 
	`STBI_FREE
(
j
->
img_comp
[
i
].
löebuf
);

3276 
j
->
img_comp
[
i
].
löebuf
 = 
NULL
;

3279 
	}
}

3283 
ªßm∂e_row_func
 
	mªßm∂e
;

3284 
°bi_uc
 *
	mlöe0
,*
	mlöe1
;

3285 
	mhs
,
	mvs
;

3286 
	mw_l‹es
;

3287 
	my°ï
;

3288 
	mypos
;

3289 } 
	t°bi__ªßm∂e
;

3291 
°bi_uc
 *
	$lﬂd_j≥g_image
(
°bi__j≥g
 *
z
, *
out_x
, *
out_y
, *
comp
, 
ªq_comp
)

3293 
n
, 
decode_n
;

3294 
z
->
s
->
img_n
 = 0;

3297 i‡(
ªq_comp
 < 0 ||Ñeq_com∞> 4Ë 
	`°bi__îΩuc
("badÑeq_comp", "InternalÉrror");

3300 i‡(!
	`°bi__decode_j≥g_image
(
z
)Ë{ 
	`°bi__˛ónup_j≥g
(z);  
NULL
; }

3303 
n
 = 
ªq_comp
 ?Ñeq_com∞: 
z
->
s
->
img_n
;

3305 i‡(
z
->
s
->
img_n
 =3 && 
n
 < 3)

3306 
decode_n
 = 1;

3308 
decode_n
 = 
z
->
s
->
img_n
;

3312 
k
;

3313 
i
,
j
;

3314 
°bi_uc
 *
ouçut
;

3315 
°bi_uc
 *
couçut
[4];

3317 
°bi__ªßm∂e
 
ªs_comp
[4];

3319 
k
=0; k < 
decode_n
; ++k) {

3320 
°bi__ªßm∂e
 *
r
 = &
ªs_comp
[
k
];

3324 
z
->
img_comp
[
k
].
löebuf
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(z->
s
->
img_x
 + 3);

3325 i‡(!
z
->
img_comp
[
k
].
löebuf
Ë{ 
	`°bi__˛ónup_j≥g
(z);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

3327 
r
->
hs
 = 
z
->
img_h_max
 / z->
img_comp
[
k
].
h
;

3328 
r
->
vs
 = 
z
->
img_v_max
 / z->
img_comp
[
k
].
v
;

3329 
r
->
y°ï
 =Ñ->
vs
 >> 1;

3330 
r
->
w_l‹es
 = (
z
->
s
->
img_x
 +Ñ->
hs
-1) /Ñ->hs;

3331 
r
->
ypos
 = 0;

3332 
r
->
löe0
 =Ñ->
löe1
 = 
z
->
img_comp
[
k
].
d©a
;

3334 i‡(
r
->
hs
 =1 &&Ñ->
vs
 =1Ër->
ªßm∂e
 = 
ªßm∂e_row_1
;

3335 i‡(
r
->
hs
 =1 &&Ñ->
vs
 =2Ër->
ªßm∂e
 = 
°bi__ªßm∂e_row_v_2
;

3336 i‡(
r
->
hs
 =2 &&Ñ->
vs
 =1Ër->
ªßm∂e
 = 
°bi__ªßm∂e_row_h_2
;

3337 i‡(
r
->
hs
 =2 &&Ñ->
vs
 =2Ër->
ªßm∂e
 = 
z
->
ªßm∂e_row_hv_2_kî√l
;

3338 
r
->
ªßm∂e
 = 
°bi__ªßm∂e_row_gíîic
;

3342 
ouçut
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
n
 * 
z
->
s
->
img_x
 * z->s->
img_y
 + 1);

3343 i‡(!
ouçut
Ë{ 
	`°bi__˛ónup_j≥g
(
z
);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

3346 
j
=0; j < 
z
->
s
->
img_y
; ++j) {

3347 
°bi_uc
 *
out
 = 
ouçut
 + 
n
 * 
z
->
s
->
img_x
 * 
j
;

3348 
k
=0; k < 
decode_n
; ++k) {

3349 
°bi__ªßm∂e
 *
r
 = &
ªs_comp
[
k
];

3350 
y_bŸ
 = 
r
->
y°ï
 >‘->
vs
 >> 1);

3351 
couçut
[
k
] = 
r
->
	`ªßm∂e
(
z
->
img_comp
[k].
löebuf
,

3352 
y_bŸ
 ? 
r
->
löe1
 :Ñ->
löe0
,

3353 
y_bŸ
 ? 
r
->
löe0
 :Ñ->
löe1
,

3354 
r
->
w_l‹es
,Ñ->
hs
);

3355 i‡(++
r
->
y°ï
 >r->
vs
) {

3356 
r
->
y°ï
 = 0;

3357 
r
->
löe0
 =Ñ->
löe1
;

3358 i‡(++
r
->
ypos
 < 
z
->
img_comp
[
k
].
y
)

3359 
r
->
löe1
 +
z
->
img_comp
[
k
].
w2
;

3362 i‡(
n
 >= 3) {

3363 
°bi_uc
 *
y
 = 
couçut
[0];

3364 i‡(
z
->
s
->
img_n
 == 3) {

3365 
z
->
	`YCbCr_to_RGB_kî√l
(
out
, 
y
, 
couçut
[1], couçut[2], z->
s
->
img_x
, 
n
);

3367 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3368 
out
[0] = out[1] = out[2] = 
y
[
i
];

3369 
out
[3] = 255;

3370 
out
 +
n
;

3373 
°bi_uc
 *
y
 = 
couçut
[0];

3374 i‡(
n
 == 1)

3375 
i
=0; i < 
z
->
s
->
img_x
; ++iË
out
[i] = 
y
[i];

3377 
i
=0; i < 
z
->
s
->
img_x
; ++iË*
out
++ = 
y
[i], *out++ = 255;

3380 
	`°bi__˛ónup_j≥g
(
z
);

3381 *
out_x
 = 
z
->
s
->
img_x
;

3382 *
out_y
 = 
z
->
s
->
img_y
;

3383 i‡(
comp
Ë*com∞
z
->
s
->
img_n
;

3384  
ouçut
;

3386 
	}
}

3388 *
	$°bi__j≥g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

3390 
°bi__j≥g
 
j
;

3391 
j
.
s
 = s;

3392 
	`°bi__£tup_j≥g
(&
j
);

3393  
	`lﬂd_j≥g_image
(&
j
, 
x
,
y
,
comp
,
ªq_comp
);

3394 
	}
}

3396 
	$°bi__j≥g_ã°
(
°bi__c⁄ãxt
 *
s
)

3398 
r
;

3399 
°bi__j≥g
 
j
;

3400 
j
.
s
 = s;

3401 
	`°bi__£tup_j≥g
(&
j
);

3402 
r
 = 
	`°bi__decode_j≥g_hódî
(&
j
, 
STBI__SCAN_ty≥
);

3403 
	`°bi__ªwöd
(
s
);

3404  
r
;

3405 
	}
}

3407 
	$°bi__j≥g_öfo_øw
(
°bi__j≥g
 *
j
, *
x
, *
y
, *
comp
)

3409 i‡(!
	`°bi__decode_j≥g_hódî
(
j
, 
STBI__SCAN_hódî
)) {

3410 
	`°bi__ªwöd
–
j
->
s
 );

3413 i‡(
x
Ë*x = 
j
->
s
->
img_x
;

3414 i‡(
y
Ë*y = 
j
->
s
->
img_y
;

3415 i‡(
comp
Ë*com∞
j
->
s
->
img_n
;

3417 
	}
}

3419 
	$°bi__j≥g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

3421 
°bi__j≥g
 
j
;

3422 
j
.
s
 = s;

3423  
	`°bi__j≥g_öfo_øw
(&
j
, 
x
, 
y
, 
comp
);

3424 
	}
}

3434 #i‚de‡
STBI_NO_ZLIB


3437 
	#STBI__ZFAST_BITS
 9

3438 
	#STBI__ZFAST_MASK
 ((1 << 
STBI__ZFAST_BITS
Ë- 1)

	)

3444 
°bi__uöt16
 
	mÁ°
[1 << 
STBI__ZFAST_BITS
];

3445 
°bi__uöt16
 
	mfú°code
[16];

3446 
	mmaxcode
[17];

3447 
°bi__uöt16
 
	mfú°symbﬁ
[16];

3448 
°bi_uc
 
	msize
[288];

3449 
°bi__uöt16
 
	mvÆue
[288];

3450 } 
	t°bi__zhuffm™
;

3452 
°bi_ölöe
 
	$°bi__bôªvî£16
(
n
)

3454 
n
 = ((n & 0xAAAA) >> 1) | ((n & 0x5555) << 1);

3455 
n
 = ((n & 0xCCCC) >> 2) | ((n & 0x3333) << 2);

3456 
n
 = ((n & 0xF0F0) >> 4) | ((n & 0x0F0F) << 4);

3457 
n
 = ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);

3458  
n
;

3459 
	}
}

3461 
°bi_ölöe
 
	$°bi__bô_ªvî£
(
v
, 
bôs
)

3463 
	`STBI_ASSERT
(
bôs
 <= 16);

3466  
	`°bi__bôªvî£16
(
v
Ë>> (16-
bôs
);

3467 
	}
}

3469 
	$°bi__zbuûd_huffm™
(
°bi__zhuffm™
 *
z
, 
°bi_uc
 *
sizñi°
, 
num
)

3471 
i
,
k
=0;

3472 
code
, 
√xt_code
[16], 
sizes
[17];

3475 
	`mem£t
(
sizes
, 0, (sizes));

3476 
	`mem£t
(
z
->
Á°
, 0, (z->fast));

3477 
i
=0; i < 
num
; ++i)

3478 ++
sizes
[
sizñi°
[
i
]];

3479 
sizes
[0] = 0;

3480 
i
=1; i < 16; ++i)

3481 i‡(
sizes
[
i
] > (1 << i))

3482  
	`°bi__îr
("bad sizes", "Corrupt PNG");

3483 
code
 = 0;

3484 
i
=1; i < 16; ++i) {

3485 
√xt_code
[
i
] = 
code
;

3486 
z
->
fú°code
[
i
] = (
°bi__uöt16
Ë
code
;

3487 
z
->
fú°symbﬁ
[
i
] = (
°bi__uöt16
Ë
k
;

3488 
code
 = (codê+ 
sizes
[
i
]);

3489 i‡(
sizes
[
i
])

3490 i‡(
code
-1 >(1 << 
i
)Ë 
	`°bi__îr
("bad codelengths","Corrupt PNG");

3491 
z
->
maxcode
[
i
] = 
code
 << (16-i);

3492 
code
 <<= 1;

3493 
k
 +
sizes
[
i
];

3495 
z
->
maxcode
[16] = 0x10000;

3496 
i
=0; i < 
num
; ++i) {

3497 
s
 = 
sizñi°
[
i
];

3498 i‡(
s
) {

3499 
c
 = 
√xt_code
[
s
] - 
z
->
fú°code
[s] + z->
fú°symbﬁ
[s];

3500 
°bi__uöt16
 
Á°v
 = (°bi__uöt16Ë((
s
 << 9Ë| 
i
);

3501 
z
->
size
 [
c
] = (
°bi_uc
 ) 
s
;

3502 
z
->
vÆue
[
c
] = (
°bi__uöt16
Ë
i
;

3503 i‡(
s
 <
STBI__ZFAST_BITS
) {

3504 
k
 = 
	`°bi__bô_ªvî£
(
√xt_code
[
s
],s);

3505 
k
 < (1 << 
STBI__ZFAST_BITS
)) {

3506 
z
->
Á°
[
k
] = 
Á°v
;

3507 
k
 +(1 << 
s
);

3510 ++
√xt_code
[
s
];

3514 
	}
}

3524 
°bi_uc
 *
	mzbuf„r
, *
	mzbuf„r_íd
;

3525 
	mnum_bôs
;

3526 
°bi__uöt32
 
	mcode_buf„r
;

3528 *
	mzout
;

3529 *
	mzout_°¨t
;

3530 *
	mzout_íd
;

3531 
	mz_ex∑ndabÀ
;

3533 
°bi__zhuffm™
 
	mz_Àngth
, 
	mz_di°™˚
;

3534 } 
	t°bi__zbuf
;

3536 
°bi_ölöe
 
°bi_uc
 
	$°bi__zgë8
(
°bi__zbuf
 *
z
)

3538 i‡(
z
->
zbuf„r
 >z->
zbuf„r_íd
)  0;

3539  *
z
->
zbuf„r
++;

3540 
	}
}

3542 
	$°bi__fûl_bôs
(
°bi__zbuf
 *
z
)

3545 
	`STBI_ASSERT
(
z
->
code_buf„r
 < (1U << z->
num_bôs
));

3546 
z
->
code_buf„r
 |
	`°bi__zgë8
(zË<< z->
num_bôs
;

3547 
z
->
num_bôs
 += 8;

3548 } 
z
->
num_bôs
 <= 24);

3549 
	}
}

3551 
°bi_ölöe
 
	$°bi__zª˚ive
(
°bi__zbuf
 *
z
, 
n
)

3553 
k
;

3554 i‡(
z
->
num_bôs
 < 
n
Ë
	`°bi__fûl_bôs
(z);

3555 
k
 = 
z
->
code_buf„r
 & ((1 << 
n
) - 1);

3556 
z
->
code_buf„r
 >>
n
;

3557 
z
->
num_bôs
 -
n
;

3558  
k
;

3559 
	}
}

3561 
	$°bi__zhuffm™_decode_¶ow∑th
(
°bi__zbuf
 *
a
, 
°bi__zhuffm™
 *
z
)

3563 
b
,
s
,
k
;

3566 
k
 = 
	`°bi__bô_ªvî£
(
a
->
code_buf„r
, 16);

3567 
s
=
STBI__ZFAST_BITS
+1; ; ++s)

3568 i‡(
k
 < 
z
->
maxcode
[
s
])

3570 i‡(
s
 == 16)  -1;

3572 
b
 = (
k
 >> (16-
s
)Ë- 
z
->
fú°code
[s] + z->
fú°symbﬁ
[s];

3573 
	`STBI_ASSERT
(
z
->
size
[
b
] =
s
);

3574 
a
->
code_buf„r
 >>
s
;

3575 
a
->
num_bôs
 -
s
;

3576  
z
->
vÆue
[
b
];

3577 
	}
}

3579 
°bi_ölöe
 
	$°bi__zhuffm™_decode
(
°bi__zbuf
 *
a
, 
°bi__zhuffm™
 *
z
)

3581 
b
,
s
;

3582 i‡(
a
->
num_bôs
 < 16Ë
	`°bi__fûl_bôs
(a);

3583 
b
 = 
z
->
Á°
[
a
->
code_buf„r
 & 
STBI__ZFAST_MASK
];

3584 i‡(
b
) {

3585 
s
 = 
b
 >> 9;

3586 
a
->
code_buf„r
 >>
s
;

3587 
a
->
num_bôs
 -
s
;

3588  
b
 & 511;

3590  
	`°bi__zhuffm™_decode_¶ow∑th
(
a
, 
z
);

3591 
	}
}

3593 
	$°bi__zex∑nd
(
°bi__zbuf
 *
z
, *
zout
, 
n
)

3595 *
q
;

3596 
cur
, 
limô
;

3597 
z
->
zout
 = zout;

3598 i‡(!
z
->
z_ex∑ndabÀ
Ë 
	`°bi__îr
("output bufferÜimit","Corrupt PNG");

3599 
cur
 = (Ë(
z
->
zout
 - z->
zout_°¨t
);

3600 
limô
 = (Ë(
z
->
zout_íd
 - z->
zout_°¨t
);

3601 
cur
 + 
n
 > 
limô
)

3602 
limô
 *= 2;

3603 
q
 = (*Ë
	`STBI_REALLOC
(
z
->
zout_°¨t
, 
limô
);

3604 i‡(
q
 =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

3605 
z
->
zout_°¨t
 = 
q
;

3606 
z
->
zout
 = 
q
 + 
cur
;

3607 
z
->
zout_íd
 = 
q
 + 
limô
;

3609 
	}
}

3611 
	g°bi__zÀngth_ba£
[31] = {

3616 
	g°bi__zÀngth_exåa
[31]=

3619 
	g°bi__zdi°_ba£
[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,

3622 
	g°bi__zdi°_exåa
[32] =

3625 
	$°bi__∑r£_huffm™_block
(
°bi__zbuf
 *
a
)

3627 *
zout
 = 
a
->zout;

3629 
z
 = 
	`°bi__zhuffm™_decode
(
a
, &a->
z_Àngth
);

3630 i‡(
z
 < 256) {

3631 i‡(
z
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt PNG");

3632 i‡(
zout
 >
a
->
zout_íd
) {

3633 i‡(!
	`°bi__zex∑nd
(
a
, 
zout
, 1))  0;

3634 
zout
 = 
a
->zout;

3636 *
zout
++ = (Ë
z
;

3638 
°bi_uc
 *
p
;

3639 
Àn
,
di°
;

3640 i‡(
z
 == 256) {

3641 
a
->
zout
 = zout;

3644 
z
 -= 257;

3645 
Àn
 = 
°bi__zÀngth_ba£
[
z
];

3646 i‡(
°bi__zÀngth_exåa
[
z
]Ë
Àn
 +
	`°bi__zª˚ive
(
a
, stbi__zlength_extra[z]);

3647 
z
 = 
	`°bi__zhuffm™_decode
(
a
, &a->
z_di°™˚
);

3648 i‡(
z
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt PNG");

3649 
di°
 = 
°bi__zdi°_ba£
[
z
];

3650 i‡(
°bi__zdi°_exåa
[
z
]Ë
di°
 +
	`°bi__zª˚ive
(
a
, stbi__zdist_extra[z]);

3651 i‡(
zout
 - 
a
->
zout_°¨t
 < 
di°
Ë 
	`°bi__îr
("bad dist","Corrupt PNG");

3652 i‡(
zout
 + 
Àn
 > 
a
->
zout_íd
) {

3653 i‡(!
	`°bi__zex∑nd
(
a
, 
zout
, 
Àn
))  0;

3654 
zout
 = 
a
->zout;

3656 
p
 = (
°bi_uc
 *Ë(
zout
 - 
di°
);

3657 i‡(
di°
 == 1) {

3658 
°bi_uc
 
v
 = *
p
;

3659 i‡(
Àn
Ë{ dÿ*
zout
++ = 
v
; --len); }

3661 i‡(
Àn
Ë{ dÿ*
zout
++ = *
p
++; --len); }

3665 
	}
}

3667 
	$°bi__compuã_huffm™_codes
(
°bi__zbuf
 *
a
)

3669 
°bi_uc
 
Àngth_dezigzag
[19] = { 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15 };

3670 
°bi__zhuffm™
 
z_codñígth
;

3671 
°bi_uc
 
Àncodes
[286+32+137];

3672 
°bi_uc
 
codñígth_sizes
[19];

3673 
i
,
n
;

3675 
hlô
 = 
	`°bi__zª˚ive
(
a
,5) + 257;

3676 
hdi°
 = 
	`°bi__zª˚ive
(
a
,5) + 1;

3677 
h˛í
 = 
	`°bi__zª˚ive
(
a
,4) + 4;

3679 
	`mem£t
(
codñígth_sizes
, 0, (codelength_sizes));

3680 
i
=0; i < 
h˛í
; ++i) {

3681 
s
 = 
	`°bi__zª˚ive
(
a
,3);

3682 
codñígth_sizes
[
Àngth_dezigzag
[
i
]] = (
°bi_uc
Ë
s
;

3684 i‡(!
	`°bi__zbuûd_huffm™
(&
z_codñígth
, 
codñígth_sizes
, 19))  0;

3686 
n
 = 0;

3687 
n
 < 
hlô
 + 
hdi°
) {

3688 
c
 = 
	`°bi__zhuffm™_decode
(
a
, &
z_codñígth
);

3689 i‡(
c
 < 0 || c >19Ë 
	`°bi__îr
("bad codelengths", "Corrupt PNG");

3690 i‡(
c
 < 16)

3691 
Àncodes
[
n
++] = (
°bi_uc
Ë
c
;

3692 i‡(
c
 == 16) {

3693 
c
 = 
	`°bi__zª˚ive
(
a
,2)+3;

3694 
	`mem£t
(
Àncodes
+
n
,Üícodes[n-1], 
c
);

3695 
n
 +
c
;

3696 } i‡(
c
 == 17) {

3697 
c
 = 
	`°bi__zª˚ive
(
a
,3)+3;

3698 
	`mem£t
(
Àncodes
+
n
, 0, 
c
);

3699 
n
 +
c
;

3701 
	`STBI_ASSERT
(
c
 == 18);

3702 
c
 = 
	`°bi__zª˚ive
(
a
,7)+11;

3703 
	`mem£t
(
Àncodes
+
n
, 0, 
c
);

3704 
n
 +
c
;

3707 i‡(
n
 !
hlô
+
hdi°
Ë 
	`°bi__îr
("bad codelengths","Corrupt PNG");

3708 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_Àngth
, 
Àncodes
, 
hlô
))  0;

3709 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_di°™˚
, 
Àncodes
+
hlô
, 
hdi°
))  0;

3711 
	}
}

3713 
	$°bi__∑r£_uncom≥rs£d_block
(
°bi__zbuf
 *
a
)

3715 
°bi_uc
 
hódî
[4];

3716 
Àn
,
∆í
,
k
;

3717 i‡(
a
->
num_bôs
 & 7)

3718 
	`°bi__zª˚ive
(
a
,á->
num_bôs
 & 7);

3720 
k
 = 0;

3721 
a
->
num_bôs
 > 0) {

3722 
hódî
[
k
++] = (
°bi_uc
Ë(
a
->
code_buf„r
 & 255);

3723 
a
->
code_buf„r
 >>= 8;

3724 
a
->
num_bôs
 -= 8;

3726 
	`STBI_ASSERT
(
a
->
num_bôs
 == 0);

3728 
k
 < 4)

3729 
hódî
[
k
++] = 
	`°bi__zgë8
(
a
);

3730 
Àn
 = 
hódî
[1] * 256 + header[0];

3731 
∆í
 = 
hódî
[3] * 256 + header[2];

3732 i‡(
∆í
 !(
Àn
 ^ 0xffff)Ë 
	`°bi__îr
("zlib corrupt","Corrupt PNG");

3733 i‡(
a
->
zbuf„r
 + 
Àn
 >á->
zbuf„r_íd
Ë 
	`°bi__îr
("readÖast buffer","Corrupt PNG");

3734 i‡(
a
->
zout
 + 
Àn
 >á->
zout_íd
)

3735 i‡(!
	`°bi__zex∑nd
(
a
,á->
zout
, 
Àn
))  0;

3736 
	`mem˝y
(
a
->
zout
,á->
zbuf„r
, 
Àn
);

3737 
a
->
zbuf„r
 +
Àn
;

3738 
a
->
zout
 +
Àn
;

3740 
	}
}

3742 
	$°bi__∑r£_zlib_hódî
(
°bi__zbuf
 *
a
)

3744 
cmf
 = 
	`°bi__zgë8
(
a
);

3745 
cm
 = 
cmf
 & 15;

3747 
Êg
 = 
	`°bi__zgë8
(
a
);

3748 i‡((
cmf
*256+
Êg
Ë% 31 !0Ë 
	`°bi__îr
("bad zlib header","Corrupt PNG");

3749 i‡(
Êg
 & 32Ë 
	`°bi__îr
("noÖreset dict","Corrupt PNG");

3750 i‡(
cm
 !8Ë 
	`°bi__îr
("bad compression","Corrupt PNG");

3753 
	}
}

3756 
°bi_uc
 
	g°bi__zdeÁu…_Àngth
[288], 
	g°bi__zdeÁu…_di°™˚
[32];

3757 
	$°bi__öô_zdeÁu…s
()

3759 
i
;

3760 
i
=0; i <143; ++iË
°bi__zdeÁu…_Àngth
[i] = 8;

3761  ; 
i
 <255; ++iË
°bi__zdeÁu…_Àngth
[i] = 9;

3762  ; 
i
 <279; ++iË
°bi__zdeÁu…_Àngth
[i] = 7;

3763  ; 
i
 <287; ++iË
°bi__zdeÁu…_Àngth
[i] = 8;

3765 
i
=0; i <31; ++iË
°bi__zdeÁu…_di°™˚
[i] = 5;

3766 
	}
}

3768 
	$°bi__∑r£_zlib
(
°bi__zbuf
 *
a
, 
∑r£_hódî
)

3770 
föÆ
, 
ty≥
;

3771 i‡(
∑r£_hódî
)

3772 i‡(!
	`°bi__∑r£_zlib_hódî
(
a
))  0;

3773 
a
->
num_bôs
 = 0;

3774 
a
->
code_buf„r
 = 0;

3776 
föÆ
 = 
	`°bi__zª˚ive
(
a
,1);

3777 
ty≥
 = 
	`°bi__zª˚ive
(
a
,2);

3778 i‡(
ty≥
 == 0) {

3779 i‡(!
	`°bi__∑r£_uncom≥rs£d_block
(
a
))  0;

3780 } i‡(
ty≥
 == 3) {

3783 i‡(
ty≥
 == 1) {

3785 i‡(!
°bi__zdeÁu…_di°™˚
[31]Ë
	`°bi__öô_zdeÁu…s
();

3786 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_Àngth
 , 
°bi__zdeÁu…_Àngth
 , 288))  0;

3787 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_di°™˚
, 
°bi__zdeÁu…_di°™˚
, 32))  0;

3789 i‡(!
	`°bi__compuã_huffm™_codes
(
a
))  0;

3791 i‡(!
	`°bi__∑r£_huffm™_block
(
a
))  0;

3793 } !
föÆ
);

3795 
	}
}

3797 
	$°bi__do_zlib
(
°bi__zbuf
 *
a
, *
obuf
, 
ﬁí
, 
exp
, 
∑r£_hódî
)

3799 
a
->
zout_°¨t
 = 
obuf
;

3800 
a
->
zout
 = 
obuf
;

3801 
a
->
zout_íd
 = 
obuf
 + 
ﬁí
;

3802 
a
->
z_ex∑ndabÀ
 = 
exp
;

3804  
	`°bi__∑r£_zlib
(
a
, 
∑r£_hódî
);

3805 
	}
}

3807 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc_guesssize
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
)

3809 
°bi__zbuf
 
a
;

3810 *
p
 = (*Ë
	`°bi__mÆloc
(
öôül_size
);

3811 i‡(
p
 =
NULL
)  NULL;

3812 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

3813 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
 + 
Àn
;

3814 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 
öôül_size
, 1, 1)) {

3815 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

3816  
a
.
zout_°¨t
;

3818 
	`STBI_FREE
(
a
.
zout_°¨t
);

3819  
NULL
;

3821 
	}
}

3823 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
)

3825  
	`°bi_zlib_decode_mÆloc_guesssize
(
buf„r
, 
Àn
, 16384, 
ouéí
);

3826 
	}
}

3828 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc_guesssize_hódîÊag
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
, 
∑r£_hódî
)

3830 
°bi__zbuf
 
a
;

3831 *
p
 = (*Ë
	`°bi__mÆloc
(
öôül_size
);

3832 i‡(
p
 =
NULL
)  NULL;

3833 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

3834 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
 + 
Àn
;

3835 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 
öôül_size
, 1, 
∑r£_hódî
)) {

3836 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

3837  
a
.
zout_°¨t
;

3839 
	`STBI_FREE
(
a
.
zout_°¨t
);

3840  
NULL
;

3842 
	}
}

3844 
STBIDEF
 
	$°bi_zlib_decode_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
)

3846 
°bi__zbuf
 
a
;

3847 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
ibuf„r
;

3848 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
ibuf„r
 + 
ûí
;

3849 i‡(
	`°bi__do_zlib
(&
a
, 
obuf„r
, 
ﬁí
, 0, 1))

3850  (Ë(
a
.
zout
 -á.
zout_°¨t
);

3853 
	}
}

3855 
STBIDEF
 *
	$°bi_zlib_decode_nohódî_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
)

3857 
°bi__zbuf
 
a
;

3858 *
p
 = (*Ë
	`°bi__mÆloc
(16384);

3859 i‡(
p
 =
NULL
)  NULL;

3860 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

3861 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
+
Àn
;

3862 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 16384, 1, 0)) {

3863 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

3864  
a
.
zout_°¨t
;

3866 
	`STBI_FREE
(
a
.
zout_°¨t
);

3867  
NULL
;

3869 
	}
}

3871 
STBIDEF
 
	$°bi_zlib_decode_nohódî_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
)

3873 
°bi__zbuf
 
a
;

3874 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
ibuf„r
;

3875 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
ibuf„r
 + 
ûí
;

3876 i‡(
	`°bi__do_zlib
(&
a
, 
obuf„r
, 
ﬁí
, 0, 0))

3877  (Ë(
a
.
zout
 -á.
zout_°¨t
);

3880 
	}
}

3893 #i‚de‡
STBI_NO_PNG


3896 
°bi__uöt32
 
	mÀngth
;

3897 
°bi__uöt32
 
	mty≥
;

3898 } 
	t°bi__≤gchunk
;

3900 
°bi__≤gchunk
 
	$°bi__gë_chunk_hódî
(
°bi__c⁄ãxt
 *
s
)

3902 
°bi__≤gchunk
 
c
;

3903 
c
.
Àngth
 = 
	`°bi__gë32be
(
s
);

3904 
c
.
ty≥
 = 
	`°bi__gë32be
(
s
);

3905  
c
;

3906 
	}
}

3908 
	$°bi__check_≤g_hódî
(
°bi__c⁄ãxt
 *
s
)

3910 
°bi_uc
 
≤g_sig
[8] = { 137,80,78,71,13,10,26,10 };

3911 
i
;

3912 
i
=0; i < 8; ++i)

3913 i‡(
	`°bi__gë8
(
s
Ë!
≤g_sig
[
i
]Ë 
	`°bi__îr
("badÖng sig","Notá PNG");

3915 
	}
}

3919 
°bi__c⁄ãxt
 *
	ms
;

3920 
°bi_uc
 *
	mid©a
, *
	mex∑nded
, *
	mout
;

3921 } 
	t°bi__≤g
;

3925 
	mSTBI__F_n⁄e
=0,

3926 
	mSTBI__F_sub
=1,

3927 
	mSTBI__F_up
=2,

3928 
	mSTBI__F_avg
=3,

3929 
	mSTBI__F_∑ëh
=4,

3931 
	mSTBI__F_avg_fú°
,

3932 
	mSTBI__F_∑ëh_fú°


3935 
°bi_uc
 
	gfú°_row_fûãr
[5] =

3937 
STBI__F_n⁄e
,

3938 
STBI__F_sub
,

3939 
STBI__F_n⁄e
,

3940 
STBI__F_avg_fú°
,

3941 
STBI__F_∑ëh_fú°


3944 
	$°bi__∑ëh
(
a
, 
b
, 
c
)

3946 
p
 = 
a
 + 
b
 - 
c
;

3947 
∑
 = 
	`abs
(
p
-
a
);

3948 
pb
 = 
	`abs
(
p
-
b
);

3949 
pc
 = 
	`abs
(
p
-
c
);

3950 i‡(
∑
 <
pb
 &&Ö®<
pc
Ë 
a
;

3951 i‡(
pb
 <
pc
Ë 
b
;

3952  
c
;

3953 
	}
}

3955 
°bi_uc
 
	g°bi__dïth_sˇÀ_èbÀ
[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };

3958 
	$°bi__¸óã_≤g_image_øw
(
°bi__≤g
 *
a
, 
°bi_uc
 *
øw
, 
°bi__uöt32
 
øw_Àn
, 
out_n
, stbi__uöt32 
x
, stbi__uöt32 
y
, 
dïth
, 
cﬁ‹
)

3960 
°bi__c⁄ãxt
 *
s
 = 
a
->s;

3961 
°bi__uöt32
 
i
,
j
,
°ride
 = 
x
*
out_n
;

3962 
°bi__uöt32
 
img_Àn
, 
img_width_byãs
;

3963 
k
;

3964 
img_n
 = 
s
->img_n;

3966 
	`STBI_ASSERT
(
out_n
 =
s
->
img_n
 || out_n == s->img_n+1);

3967 
a
->
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
x
 * 
y
 * 
out_n
);

3968 i‡(!
a
->
out
Ë 
	`°bi__îr
("outofmem", "Out of memory");

3970 
img_width_byãs
 = (((
img_n
 * 
x
 * 
dïth
) + 7) >> 3);

3971 
img_Àn
 = (
img_width_byãs
 + 1Ë* 
y
;

3972 i‡(
s
->
img_x
 =
x
 && s->
img_y
 =
y
) {

3973 i‡(
øw_Àn
 !
img_Àn
Ë 
	`°bi__îr
("notÉnoughÖixels","Corrupt PNG");

3975 i‡(
øw_Àn
 < 
img_Àn
Ë 
	`°bi__îr
("notÉnoughÖixels","Corrupt PNG");

3978 
j
=0; j < 
y
; ++j) {

3979 
°bi_uc
 *
cur
 = 
a
->
out
 + 
°ride
*
j
;

3980 
°bi_uc
 *
¥i‹
 = 
cur
 - 
°ride
;

3981 
fûãr
 = *
øw
++;

3982 
fûãr_byãs
 = 
img_n
;

3983 
width
 = 
x
;

3984 i‡(
fûãr
 > 4)

3985  
	`°bi__îr
("invalid filter","Corrupt PNG");

3987 i‡(
dïth
 < 8) {

3988 
	`STBI_ASSERT
(
img_width_byãs
 <
x
);

3989 
cur
 +
x
*
out_n
 - 
img_width_byãs
;

3990 
fûãr_byãs
 = 1;

3991 
width
 = 
img_width_byãs
;

3995 i‡(
j
 =0Ë
fûãr
 = 
fú°_row_fûãr
[filter];

3998 
k
=0; k < 
fûãr_byãs
; ++k) {

3999 
fûãr
) {

4000 
STBI__F_n⁄e
 : 
cur
[
k
] = 
øw
[k]; ;

4001 
STBI__F_sub
 : 
cur
[
k
] = 
øw
[k]; ;

4002 
STBI__F_up
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); ;

4003 
STBI__F_avg
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (
¥i‹
[k]>>1)); ;

4004 
STBI__F_∑ëh
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(0,
¥i‹
[k],0)); ;

4005 
STBI__F_avg_fú°
 : 
cur
[
k
] = 
øw
[k]; ;

4006 
STBI__F_∑ëh_fú°
: 
cur
[
k
] = 
øw
[k]; ;

4010 i‡(
dïth
 == 8) {

4011 i‡(
img_n
 !
out_n
)

4012 
cur
[
img_n
] = 255;

4013 
øw
 +
img_n
;

4014 
cur
 +
out_n
;

4015 
¥i‹
 +
out_n
;

4017 
øw
 += 1;

4018 
cur
 += 1;

4019 
¥i‹
 += 1;

4023 i‡(
dïth
 < 8 || 
img_n
 =
out_n
) {

4024 
nk
 = (
width
 - 1)*
img_n
;

4025 
	#CASE
(
f
) \

4026 
f
: \

4027 
k
=0; k < 
nk
; ++k)

	)

4028 
fûãr
) {

4030 
STBI__F_n⁄e
: 
	`mem˝y
(
cur
, 
øw
, 
nk
); ;

4031 
	`CASE
(
STBI__F_sub
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + cur[k-
fûãr_byãs
]); ;

4032 
	`CASE
(
STBI__F_up
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); ;

4033 
	`CASE
(
STBI__F_avg
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + ((
¥i‹
[k] + cur[k-
fûãr_byãs
])>>1)); ;

4034 
	`CASE
(
STBI__F_∑ëh
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
fûãr_byãs
],
¥i‹
[k],prior[k-filter_bytes])); ;

4035 
	`CASE
(
STBI__F_avg_fú°
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (cur[k-
fûãr_byãs
] >> 1)); ;

4036 
	`CASE
(
STBI__F_∑ëh_fú°
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
fûãr_byãs
],0,0)); ;

4038 #unde‡
CASE


4039 
øw
 +
nk
;

4041 
	`STBI_ASSERT
(
img_n
+1 =
out_n
);

4042 
	#CASE
(
f
) \

4043 
f
: \

4044 
i
=
x
-1; i >1; --i, 
cur
[
img_n
]=255,
øw
+=img_n,cur+=
out_n
,
¥i‹
+=out_n) \

4045 
k
=0; k < 
img_n
; ++k)

	)

4046 
fûãr
) {

4047 
	`CASE
(
STBI__F_n⁄e
Ë
cur
[
k
] = 
øw
[k]; ;

4048 
	`CASE
(
STBI__F_sub
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + cur[k-
out_n
]); ;

4049 
	`CASE
(
STBI__F_up
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); ;

4050 
	`CASE
(
STBI__F_avg
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + ((
¥i‹
[k] + cur[k-
out_n
])>>1)); ;

4051 
	`CASE
(
STBI__F_∑ëh
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
out_n
],
¥i‹
[k],prior[k-out_n])); ;

4052 
	`CASE
(
STBI__F_avg_fú°
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (cur[k-
out_n
] >> 1)); ;

4053 
	`CASE
(
STBI__F_∑ëh_fú°
Ë
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
out_n
],0,0)); ;

4055 #unde‡
CASE


4062 i‡(
dïth
 < 8) {

4063 
j
=0; j < 
y
; ++j) {

4064 
°bi_uc
 *
cur
 = 
a
->
out
 + 
°ride
*
j
;

4065 
°bi_uc
 *
ö
 = 
a
->
out
 + 
°ride
*
j
 + 
x
*
out_n
 - 
img_width_byãs
;

4068 
°bi_uc
 
sˇÀ
 = (
cﬁ‹
 =0Ë? 
°bi__dïth_sˇÀ_èbÀ
[
dïth
] : 1;

4076 i‡(
dïth
 == 4) {

4077 
k
=
x
*
img_n
; k >2; k-=2, ++
ö
) {

4078 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) );

4079 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x0f);

4081 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) );

4082 } i‡(
dïth
 == 2) {

4083 
k
=
x
*
img_n
; k >4; k-=4, ++
ö
) {

4084 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) );

4085 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x03);

4086 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x03);

4087 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x03);

4089 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) );

4090 i‡(
k
 > 1Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x03);

4091 i‡(
k
 > 2Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x03);

4092 } i‡(
dïth
 == 1) {

4093 
k
=
x
*
img_n
; k >8; k-=8, ++
ö
) {

4094 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 7) );

4095 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) & 0x01);

4096 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 5) & 0x01);

4097 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x01);

4098 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 3) & 0x01);

4099 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x01);

4100 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 1) & 0x01);

4101 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x01);

4103 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 7) );

4104 i‡(
k
 > 1Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) & 0x01);

4105 i‡(
k
 > 2Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 5) & 0x01);

4106 i‡(
k
 > 3Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x01);

4107 i‡(
k
 > 4Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 3) & 0x01);

4108 i‡(
k
 > 5Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x01);

4109 i‡(
k
 > 6Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 1) & 0x01);

4111 i‡(
img_n
 !
out_n
) {

4113 
°bi_uc
 *
cur
 = 
a
->
out
 + 
°ride
*
j
;

4114 
i
;

4115 i‡(
img_n
 == 1) {

4116 
i
=
x
-1; i >= 0; --i) {

4117 
cur
[
i
*2+1] = 255;

4118 
cur
[
i
*2+0] = cur[i];

4121 
	`STBI_ASSERT
(
img_n
 == 3);

4122 
i
=
x
-1; i >= 0; --i) {

4123 
cur
[
i
*4+3] = 255;

4124 
cur
[
i
*4+2] = cur[i*3+2];

4125 
cur
[
i
*4+1] = cur[i*3+1];

4126 
cur
[
i
*4+0] = cur[i*3+0];

4134 
	}
}

4136 
	$°bi__¸óã_≤g_image
(
°bi__≤g
 *
a
, 
°bi_uc
 *
image_d©a
, 
°bi__uöt32
 
image_d©a_Àn
, 
out_n
, 
dïth
, 
cﬁ‹
, 
öãæa˚d
)

4138 
°bi_uc
 *
föÆ
;

4139 
p
;

4140 i‡(!
öãæa˚d
)

4141  
	`°bi__¸óã_≤g_image_øw
(
a
, 
image_d©a
, 
image_d©a_Àn
, 
out_n
,á->
s
->
img_x
,á->s->
img_y
, 
dïth
, 
cﬁ‹
);

4144 
föÆ
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
a
->
s
->
img_x
 *á->s->
img_y
 * 
out_n
);

4145 
p
=0;Ö < 7; ++p) {

4146 
x‹ig
[] = { 0,4,0,2,0,1,0 };

4147 
y‹ig
[] = { 0,0,4,0,2,0,1 };

4148 
x•c
[] = { 8,8,4,4,2,2,1 };

4149 
y•c
[] = { 8,8,8,4,4,2,2 };

4150 
i
,
j
,
x
,
y
;

4152 
x
 = (
a
->
s
->
img_x
 - 
x‹ig
[
p
] + 
x•c
[p]-1) / xspc[p];

4153 
y
 = (
a
->
s
->
img_y
 - 
y‹ig
[
p
] + 
y•c
[p]-1) / yspc[p];

4154 i‡(
x
 && 
y
) {

4155 
°bi__uöt32
 
img_Àn
 = ((((
a
->
s
->
img_n
 * 
x
 * 
dïth
Ë+ 7Ë>> 3Ë+ 1Ë* 
y
;

4156 i‡(!
	`°bi__¸óã_≤g_image_øw
(
a
, 
image_d©a
, 
image_d©a_Àn
, 
out_n
, 
x
, 
y
, 
dïth
, 
cﬁ‹
)) {

4157 
	`STBI_FREE
(
föÆ
);

4160 
j
=0; j < 
y
; ++j) {

4161 
i
=0; i < 
x
; ++i) {

4162 
out_y
 = 
j
*
y•c
[
p
]+
y‹ig
[p];

4163 
out_x
 = 
i
*
x•c
[
p
]+
x‹ig
[p];

4164 
	`mem˝y
(
föÆ
 + 
out_y
*
a
->
s
->
img_x
*
out_n
 + 
out_x
*out_n,

4165 
a
->
out
 + (
j
*
x
+
i
)*
out_n
, out_n);

4168 
	`STBI_FREE
(
a
->
out
);

4169 
image_d©a
 +
img_Àn
;

4170 
image_d©a_Àn
 -
img_Àn
;

4173 
a
->
out
 = 
föÆ
;

4176 
	}
}

4178 
	$°bi__compuã_å™•¨ícy
(
°bi__≤g
 *
z
, 
°bi_uc
 
tc
[3], 
out_n
)

4180 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4181 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
s
->
img_x
 * s->
img_y
;

4182 
°bi_uc
 *
p
 = 
z
->
out
;

4186 
	`STBI_ASSERT
(
out_n
 == 2 || out_n == 4);

4188 i‡(
out_n
 == 2) {

4189 
i
=0; i < 
pixñ_cou¡
; ++i) {

4190 
p
[1] = (p[0] =
tc
[0] ? 0 : 255);

4191 
p
 += 2;

4194 
i
=0; i < 
pixñ_cou¡
; ++i) {

4195 i‡(
p
[0] =
tc
[0] &&Ö[1] ==Åc[1] &&Ö[2] ==Åc[2])

4196 
p
[3] = 0;

4197 
p
 += 4;

4201 
	}
}

4203 
	$°bi__ex∑nd_≤g_∑Àâe
(
°bi__≤g
 *
a
, 
°bi_uc
 *
∑Àâe
, 
Àn
, 
∑l_img_n
)

4205 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
a
->
s
->
img_x
 *á->s->
img_y
;

4206 
°bi_uc
 *
p
, *
ãmp_out
, *
‹ig
 = 
a
->
out
;

4208 
p
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
pixñ_cou¡
 * 
∑l_img_n
);

4209 i‡(
p
 =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4212 
ãmp_out
 = 
p
;

4214 i‡(
∑l_img_n
 == 3) {

4215 
i
=0; i < 
pixñ_cou¡
; ++i) {

4216 
n
 = 
‹ig
[
i
]*4;

4217 
p
[0] = 
∑Àâe
[
n
 ];

4218 
p
[1] = 
∑Àâe
[
n
+1];

4219 
p
[2] = 
∑Àâe
[
n
+2];

4220 
p
 += 3;

4223 
i
=0; i < 
pixñ_cou¡
; ++i) {

4224 
n
 = 
‹ig
[
i
]*4;

4225 
p
[0] = 
∑Àâe
[
n
 ];

4226 
p
[1] = 
∑Àâe
[
n
+1];

4227 
p
[2] = 
∑Àâe
[
n
+2];

4228 
p
[3] = 
∑Àâe
[
n
+3];

4229 
p
 += 4;

4232 
	`STBI_FREE
(
a
->
out
);

4233 
a
->
out
 = 
ãmp_out
;

4235 
	`STBI_NOTUSED
(
Àn
);

4238 
	}
}

4240 
	g°bi__u≈ªmu…ùly_⁄_lﬂd
 = 0;

4241 
	g°bi__de_ùh⁄e_Êag
 = 0;

4243 
STBIDEF
 
	$°bi_£t_u≈ªmu…ùly_⁄_lﬂd
(
Êag_åue_if_should_u≈ªmu…ùly
)

4245 
°bi__u≈ªmu…ùly_⁄_lﬂd
 = 
Êag_åue_if_should_u≈ªmu…ùly
;

4246 
	}
}

4248 
STBIDEF
 
	$°bi_c⁄vît_ùh⁄e_≤g_to_rgb
(
Êag_åue_if_should_c⁄vît
)

4250 
°bi__de_ùh⁄e_Êag
 = 
Êag_åue_if_should_c⁄vît
;

4251 
	}
}

4253 
	$°bi__de_ùh⁄e
(
°bi__≤g
 *
z
)

4255 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4256 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
s
->
img_x
 * s->
img_y
;

4257 
°bi_uc
 *
p
 = 
z
->
out
;

4259 i‡(
s
->
img_out_n
 == 3) {

4260 
i
=0; i < 
pixñ_cou¡
; ++i) {

4261 
°bi_uc
 
t
 = 
p
[0];

4262 
p
[0] =Ö[2];

4263 
p
[2] = 
t
;

4264 
p
 += 3;

4267 
	`STBI_ASSERT
(
s
->
img_out_n
 == 4);

4268 i‡(
°bi__u≈ªmu…ùly_⁄_lﬂd
) {

4270 
i
=0; i < 
pixñ_cou¡
; ++i) {

4271 
°bi_uc
 
a
 = 
p
[3];

4272 
°bi_uc
 
t
 = 
p
[0];

4273 i‡(
a
) {

4274 
p
[0] =Ö[2] * 255 / 
a
;

4275 
p
[1] =Ö[1] * 255 / 
a
;

4276 
p
[2] = 
t
 * 255 / 
a
;

4278 
p
[0] =Ö[2];

4279 
p
[2] = 
t
;

4281 
p
 += 4;

4285 
i
=0; i < 
pixñ_cou¡
; ++i) {

4286 
°bi_uc
 
t
 = 
p
[0];

4287 
p
[0] =Ö[2];

4288 
p
[2] = 
t
;

4289 
p
 += 4;

4293 
	}
}

4295 
	#STBI__PNG_TYPE
(
a
,
b
,
c
,
d
Ë((◊Ë<< 24Ë+ ((bË<< 16Ë+ ((cË<< 8Ë+ (d))

	)

4297 
	$°bi__∑r£_≤g_fûe
(
°bi__≤g
 *
z
, 
sˇn
, 
ªq_comp
)

4299 
°bi_uc
 
∑Àâe
[1024], 
∑l_img_n
=0;

4300 
°bi_uc
 
has_å™s
=0, 
tc
[3];

4301 
°bi__uöt32
 
ioff
=0, 
id©a_limô
=0, 
i
, 
∑l_Àn
=0;

4302 
fú°
=1,
k
,
öãæa˚
=0, 
cﬁ‹
=0, 
dïth
=0, 
is_ùh⁄e
=0;

4303 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4305 
z
->
ex∑nded
 = 
NULL
;

4306 
z
->
id©a
 = 
NULL
;

4307 
z
->
out
 = 
NULL
;

4309 i‡(!
	`°bi__check_≤g_hódî
(
s
))  0;

4311 i‡(
sˇn
 =
STBI__SCAN_ty≥
)  1;

4314 
°bi__≤gchunk
 
c
 = 
	`°bi__gë_chunk_hódî
(
s
);

4315 
c
.
ty≥
) {

4316 
	`STBI__PNG_TYPE
('C','g','B','I'):

4317 
is_ùh⁄e
 = 1;

4318 
	`°bi__skù
(
s
, 
c
.
Àngth
);

4320 
	`STBI__PNG_TYPE
('I','H','D','R'): {

4321 
comp
,
fûãr
;

4322 i‡(!
fú°
Ë 
	`°bi__îr
("multiple IHDR","Corrupt PNG");

4323 
fú°
 = 0;

4324 i‡(
c
.
Àngth
 !13Ë 
	`°bi__îr
("bad IHDRÜen","Corrupt PNG");

4325 
s
->
img_x
 = 
	`°bi__gë32be
(s); i‡(s->img_x > (1 << 24)Ë 
	`°bi__îr
("tooÜarge","VeryÜarge image (corrupt?)");

4326 
s
->
img_y
 = 
	`°bi__gë32be
(s); i‡(s->img_y > (1 << 24)Ë 
	`°bi__îr
("tooÜarge","VeryÜarge image (corrupt?)");

4327 
dïth
 = 
	`°bi__gë8
(
s
); i‡(dïth !1 && dïth !2 && dïth !4 && dïth !8Ë 
	`°bi__îr
("1/2/4/8-bit only","PNGÇot supported: 1/2/4/8-bit only");

4328 
cﬁ‹
 = 
	`°bi__gë8
(
s
); i‡(cﬁ‹ > 6Ë 
	`°bi__îr
("bad ctype","Corrupt PNG");

4329 i‡(
cﬁ‹
 =3Ë
∑l_img_n
 = 3; i‡(cﬁ‹ & 1Ë 
	`°bi__îr
("bad ctype","Corrupt PNG");

4330 
comp
 = 
	`°bi__gë8
(
s
); i‡(compË 
	`°bi__îr
("bad comp method","Corrupt PNG");

4331 
fûãr

	`°bi__gë8
(
s
); i‡(fûãrË 
	`°bi__îr
("bad filter method","Corrupt PNG");

4332 
öãæa˚
 = 
	`°bi__gë8
(
s
); i‡(öãæa˚>1Ë 
	`°bi__îr
("bad interlace method","Corrupt PNG");

4333 i‡(!
s
->
img_x
 || !s->
img_y
Ë 
	`°bi__îr
("0-pixel image","Corrupt PNG");

4334 i‡(!
∑l_img_n
) {

4335 
s
->
img_n
 = (
cﬁ‹
 & 2 ? 3 : 1) + (color & 4 ? 1 : 0);

4336 i‡((1 << 30Ë/ 
s
->
img_x
 / s->
img_n
 < s->
img_y
Ë 
	`°bi__îr
("tooÜarge", "ImageÅooÜargeÅo decode");

4337 i‡(
sˇn
 =
STBI__SCAN_hódî
)  1;

4341 
s
->
img_n
 = 1;

4342 i‡((1 << 30Ë/ 
s
->
img_x
 / 4 < s->
img_y
Ë 
	`°bi__îr
("tooÜarge","Corrupt PNG");

4348 
	`STBI__PNG_TYPE
('P','L','T','E'): {

4349 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4350 i‡(
c
.
Àngth
 > 256*3Ë 
	`°bi__îr
("invalid PLTE","Corrupt PNG");

4351 
∑l_Àn
 = 
c
.
Àngth
 / 3;

4352 i‡(
∑l_Àn
 * 3 !
c
.
Àngth
Ë 
	`°bi__îr
("invalid PLTE","Corrupt PNG");

4353 
i
=0; i < 
∑l_Àn
; ++i) {

4354 
∑Àâe
[
i
*4+0] = 
	`°bi__gë8
(
s
);

4355 
∑Àâe
[
i
*4+1] = 
	`°bi__gë8
(
s
);

4356 
∑Àâe
[
i
*4+2] = 
	`°bi__gë8
(
s
);

4357 
∑Àâe
[
i
*4+3] = 255;

4362 
	`STBI__PNG_TYPE
('t','R','N','S'): {

4363 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4364 i‡(
z
->
id©a
Ë 
	`°bi__îr
("tRNSáfter IDAT","Corrupt PNG");

4365 i‡(
∑l_img_n
) {

4366 i‡(
sˇn
 =
STBI__SCAN_hódî
Ë{ 
s
->
img_n
 = 4;  1; }

4367 i‡(
∑l_Àn
 =0Ë 
	`°bi__îr
("tRNS before PLTE","Corrupt PNG");

4368 i‡(
c
.
Àngth
 > 
∑l_Àn
Ë 
	`°bi__îr
("badÅRNSÜen","Corrupt PNG");

4369 
∑l_img_n
 = 4;

4370 
i
=0; i < 
c
.
Àngth
; ++i)

4371 
∑Àâe
[
i
*4+3] = 
	`°bi__gë8
(
s
);

4373 i‡(!(
s
->
img_n
 & 1)Ë 
	`°bi__îr
("tRNS withálpha","Corrupt PNG");

4374 i‡(
c
.
Àngth
 !(
°bi__uöt32
Ë
s
->
img_n
*2Ë 
	`°bi__îr
("badÅRNSÜen","Corrupt PNG");

4375 
has_å™s
 = 1;

4376 
k
=0; k < 
s
->
img_n
; ++k)

4377 
tc
[
k
] = (
°bi_uc
Ë(
	`°bi__gë16be
(
s
Ë& 255Ë* 
°bi__dïth_sˇÀ_èbÀ
[
dïth
];

4382 
	`STBI__PNG_TYPE
('I','D','A','T'): {

4383 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4384 i‡(
∑l_img_n
 && !
∑l_Àn
Ë 
	`°bi__îr
("no PLTE","Corrupt PNG");

4385 i‡(
sˇn
 =
STBI__SCAN_hódî
Ë{ 
s
->
img_n
 = 
∑l_img_n
;  1; }

4386 i‡(()(
ioff
 + 
c
.
Àngth
) < ()ioff)  0;

4387 i‡(
ioff
 + 
c
.
Àngth
 > 
id©a_limô
) {

4388 
°bi_uc
 *
p
;

4389 i‡(
id©a_limô
 =0Ëid©a_limô = 
c
.
Àngth
 > 4096 ? c.length : 4096;

4390 
ioff
 + 
c
.
Àngth
 > 
id©a_limô
)

4391 
id©a_limô
 *= 2;

4392 
p
 = (
°bi_uc
 *Ë
	`STBI_REALLOC
(
z
->
id©a
, 
id©a_limô
); i‡’ =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4393 
z
->
id©a
 = 
p
;

4395 i‡(!
	`°bi__gën
(
s
, 
z
->
id©a
+
ioff
,
c
.
Àngth
)Ë 
	`°bi__îr
("outofdata","Corrupt PNG");

4396 
ioff
 +
c
.
Àngth
;

4400 
	`STBI__PNG_TYPE
('I','E','N','D'): {

4401 
°bi__uöt32
 
øw_Àn
, 
b∂
;

4402 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4403 i‡(
sˇn
 !
STBI__SCAN_lﬂd
)  1;

4404 i‡(
z
->
id©a
 =
NULL
Ë 
	`°bi__îr
("no IDAT","Corrupt PNG");

4406 
b∂
 = (
s
->
img_x
 * 
dïth
 + 7) / 8;

4407 
øw_Àn
 = 
b∂
 * 
s
->
img_y
 * s->
img_n
 + s->img_y ;

4408 
z
->
ex∑nded
 = (
°bi_uc
 *Ë
	`°bi_zlib_decode_mÆloc_guesssize_hódîÊag
((*Ëz->
id©a
, 
ioff
, 
øw_Àn
, (*Ë&øw_Àn, !
is_ùh⁄e
);

4409 i‡(
z
->
ex∑nded
 =
NULL
)  0;

4410 
	`STBI_FREE
(
z
->
id©a
); z->id©®
NULL
;

4411 i‡((
ªq_comp
 =
s
->
img_n
+1 &&Ñeq_com∞!3 && !
∑l_img_n
Ë|| 
has_å™s
)

4412 
s
->
img_out_n
 = s->
img_n
+1;

4414 
s
->
img_out_n
 = s->
img_n
;

4415 i‡(!
	`°bi__¸óã_≤g_image
(
z
, z->
ex∑nded
, 
øw_Àn
, 
s
->
img_out_n
, 
dïth
, 
cﬁ‹
, 
öãæa˚
))  0;

4416 i‡(
has_å™s
)

4417 i‡(!
	`°bi__compuã_å™•¨ícy
(
z
, 
tc
, 
s
->
img_out_n
))  0;

4418 i‡(
is_ùh⁄e
 && 
°bi__de_ùh⁄e_Êag
 && 
s
->
img_out_n
 > 2)

4419 
	`°bi__de_ùh⁄e
(
z
);

4420 i‡(
∑l_img_n
) {

4422 
s
->
img_n
 = 
∑l_img_n
;

4423 
s
->
img_out_n
 = 
∑l_img_n
;

4424 i‡(
ªq_comp
 >3Ë
s
->
img_out_n
 =Ñeq_comp;

4425 i‡(!
	`°bi__ex∑nd_≤g_∑Àâe
(
z
, 
∑Àâe
, 
∑l_Àn
, 
s
->
img_out_n
))

4428 
	`STBI_FREE
(
z
->
ex∑nded
); z->ex∑nded = 
NULL
;

4434 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4435 i‡((
c
.
ty≥
 & (1 << 29)) == 0) {

4436 #i‚de‡
STBI_NO_FAILURE_STRINGS


4438 
övÆid_chunk
[] = "XXXX PNG chunkÇot known";

4439 
övÆid_chunk
[0] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 24);

4440 
övÆid_chunk
[1] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 16);

4441 
övÆid_chunk
[2] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 8);

4442 
övÆid_chunk
[3] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 0);

4444  
	`°bi__îr
(
övÆid_chunk
, "PNGÇot supported: unknown PNG chunkÅype");

4446 
	`°bi__skù
(
s
, 
c
.
Àngth
);

4450 
	`°bi__gë32be
(
s
);

4452 
	}
}

4454 *
	$°bi__do_≤g
(
°bi__≤g
 *
p
, *
x
, *
y
, *
n
, 
ªq_comp
)

4456 *
ªsu…
=
NULL
;

4457 i‡(
ªq_comp
 < 0 ||Ñeq_com∞> 4Ë 
	`°bi__îΩuc
("badÑeq_comp", "InternalÉrror");

4458 i‡(
	`°bi__∑r£_≤g_fûe
(
p
, 
STBI__SCAN_lﬂd
, 
ªq_comp
)) {

4459 
ªsu…
 = 
p
->
out
;

4460 
p
->
out
 = 
NULL
;

4461 i‡(
ªq_comp
 &&Ñeq_com∞!
p
->
s
->
img_out_n
) {

4462 
ªsu…
 = 
	`°bi__c⁄vît_f‹m©
‘esu…, 
p
->
s
->
img_out_n
, 
ªq_comp
,Ö->s->
img_x
,Ö->s->
img_y
);

4463 
p
->
s
->
img_out_n
 = 
ªq_comp
;

4464 i‡(
ªsu…
 =
NULL
) Ñesult;

4466 *
x
 = 
p
->
s
->
img_x
;

4467 *
y
 = 
p
->
s
->
img_y
;

4468 i‡(
n
Ë*¿
p
->
s
->
img_out_n
;

4470 
	`STBI_FREE
(
p
->
out
);Ö->ouà
NULL
;

4471 
	`STBI_FREE
(
p
->
ex∑nded
);Ö->ex∑nded = 
NULL
;

4472 
	`STBI_FREE
(
p
->
id©a
);Ö->id©®
NULL
;

4474  
ªsu…
;

4475 
	}
}

4477 *
	$°bi__≤g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

4479 
°bi__≤g
 
p
;

4480 
p
.
s
 = s;

4481  
	`°bi__do_≤g
(&
p
, 
x
,
y
,
comp
,
ªq_comp
);

4482 
	}
}

4484 
	$°bi__≤g_ã°
(
°bi__c⁄ãxt
 *
s
)

4486 
r
;

4487 
r
 = 
	`°bi__check_≤g_hódî
(
s
);

4488 
	`°bi__ªwöd
(
s
);

4489  
r
;

4490 
	}
}

4492 
	$°bi__≤g_öfo_øw
(
°bi__≤g
 *
p
, *
x
, *
y
, *
comp
)

4494 i‡(!
	`°bi__∑r£_≤g_fûe
(
p
, 
STBI__SCAN_hódî
, 0)) {

4495 
	`°bi__ªwöd
–
p
->
s
 );

4498 i‡(
x
Ë*x = 
p
->
s
->
img_x
;

4499 i‡(
y
Ë*y = 
p
->
s
->
img_y
;

4500 i‡(
comp
Ë*com∞
p
->
s
->
img_n
;

4502 
	}
}

4504 
	$°bi__≤g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

4506 
°bi__≤g
 
p
;

4507 
p
.
s
 = s;

4508  
	`°bi__≤g_öfo_øw
(&
p
, 
x
, 
y
, 
comp
);

4509 
	}
}

4514 #i‚de‡
STBI_NO_BMP


4515 
	$°bi__bmp_ã°_øw
(
°bi__c⁄ãxt
 *
s
)

4517 
r
;

4518 
sz
;

4519 i‡(
	`°bi__gë8
(
s
) != 'B')  0;

4520 i‡(
	`°bi__gë8
(
s
) != 'M')  0;

4521 
	`°bi__gë32À
(
s
);

4522 
	`°bi__gë16À
(
s
);

4523 
	`°bi__gë16À
(
s
);

4524 
	`°bi__gë32À
(
s
);

4525 
sz
 = 
	`°bi__gë32À
(
s
);

4526 
r
 = (
sz
 == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);

4527  
r
;

4528 
	}
}

4530 
	$°bi__bmp_ã°
(
°bi__c⁄ãxt
 *
s
)

4532 
r
 = 
	`°bi__bmp_ã°_øw
(
s
);

4533 
	`°bi__ªwöd
(
s
);

4534  
r
;

4535 
	}
}

4539 
	$°bi__high_bô
(
z
)

4541 
n
=0;

4542 i‡(
z
 == 0)  -1;

4543 i‡(
z
 >0x10000Ë
n
 += 16, z >>= 16;

4544 i‡(
z
 >0x00100Ë
n
 += 8, z >>= 8;

4545 i‡(
z
 >0x00010Ë
n
 += 4, z >>= 4;

4546 i‡(
z
 >0x00004Ë
n
 += 2, z >>= 2;

4547 i‡(
z
 >0x00002Ë
n
 += 1, z >>= 1;

4548  
n
;

4549 
	}
}

4551 
	$°bi__bôcou¡
(
a
)

4553 
a
 = (a & 0x55555555) + ((a >> 1) & 0x55555555);

4554 
a
 = (a & 0x33333333) + ((a >> 2) & 0x33333333);

4555 
a
 = (a + (a >> 4)) & 0x0f0f0f0f;

4556 
a
 = (a + (a >> 8));

4557 
a
 = (a + (a >> 16));

4558  
a
 & 0xff;

4559 
	}
}

4561 
	$°bi__shi·sig√d
(
v
, 
shi·
, 
bôs
)

4563 
ªsu…
;

4564 
z
=0;

4566 i‡(
shi·
 < 0Ë
v
 <<= -shift;

4567 
v
 >>
shi·
;

4568 
ªsu…
 = 
v
;

4570 
z
 = 
bôs
;

4571 
z
 < 8) {

4572 
ªsu…
 +
v
 >> 
z
;

4573 
z
 +
bôs
;

4575  
ªsu…
;

4576 
	}
}

4578 
°bi_uc
 *
	$°bi__bmp_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

4580 
°bi_uc
 *
out
;

4581 
mr
=0,
mg
=0,
mb
=0,
ma
=0, 
Áke_a
=0;

4582 
°bi_uc
 
∑l
[256][4];

4583 
psize
=0,
i
,
j
,
com¥ess
=0,
width
;

4584 
bµ
, 
Êù_vîtiˇŒy
, 
∑d
, 
èrgë
, 
off£t
, 
hsz
;

4585 i‡(
	`°bi__gë8
(
s
Ë!'B' || stbi__gë8(sË!'M'Ë 
	`°bi__îΩuc
("not BMP", "Corrupt BMP");

4586 
	`°bi__gë32À
(
s
);

4587 
	`°bi__gë16À
(
s
);

4588 
	`°bi__gë16À
(
s
);

4589 
off£t
 = 
	`°bi__gë32À
(
s
);

4590 
hsz
 = 
	`°bi__gë32À
(
s
);

4591 i‡(
hsz
 !12 && hsz !40 && hsz !56 && hsz !108 && hsz !124Ë 
	`°bi__îΩuc
("unknown BMP", "BMPÅypeÇot supported: unknown");

4592 i‡(
hsz
 == 12) {

4593 
s
->
img_x
 = 
	`°bi__gë16À
(s);

4594 
s
->
img_y
 = 
	`°bi__gë16À
(s);

4596 
s
->
img_x
 = 
	`°bi__gë32À
(s);

4597 
s
->
img_y
 = 
	`°bi__gë32À
(s);

4599 i‡(
	`°bi__gë16À
(
s
Ë!1Ë 
	`°bi__îΩuc
("bad BMP", "bad BMP");

4600 
bµ
 = 
	`°bi__gë16À
(
s
);

4601 i‡(
bµ
 =1Ë 
	`°bi__îΩuc
("monochrome", "BMPÅypeÇot supported: 1-bit");

4602 
Êù_vîtiˇŒy
 = ((Ë
s
->
img_y
) > 0;

4603 
s
->
img_y
 = 
	`abs
(() s->img_y);

4604 i‡(
hsz
 == 12) {

4605 i‡(
bµ
 < 24)

4606 
psize
 = (
off£t
 - 14 - 24) / 3;

4608 
com¥ess
 = 
	`°bi__gë32À
(
s
);

4609 i‡(
com¥ess
 =1 || com¥es†=2Ë 
	`°bi__îΩuc
("BMP RLE", "BMPÅypeÇot supported: RLE");

4610 
	`°bi__gë32À
(
s
);

4611 
	`°bi__gë32À
(
s
);

4612 
	`°bi__gë32À
(
s
);

4613 
	`°bi__gë32À
(
s
);

4614 
	`°bi__gë32À
(
s
);

4615 i‡(
hsz
 == 40 || hsz == 56) {

4616 i‡(
hsz
 == 56) {

4617 
	`°bi__gë32À
(
s
);

4618 
	`°bi__gë32À
(
s
);

4619 
	`°bi__gë32À
(
s
);

4620 
	`°bi__gë32À
(
s
);

4622 i‡(
bµ
 == 16 || bpp == 32) {

4623 
mr
 = 
mg
 = 
mb
 = 0;

4624 i‡(
com¥ess
 == 0) {

4625 i‡(
bµ
 == 32) {

4626 
mr
 = 0xffu << 16;

4627 
mg
 = 0xffu << 8;

4628 
mb
 = 0xffu << 0;

4629 
ma
 = 0xffu << 24;

4630 
Áke_a
 = 1;

4631 
	`STBI_NOTUSED
(
Áke_a
);

4633 
mr
 = 31u << 10;

4634 
mg
 = 31u << 5;

4635 
mb
 = 31u << 0;

4637 } i‡(
com¥ess
 == 3) {

4638 
mr
 = 
	`°bi__gë32À
(
s
);

4639 
mg
 = 
	`°bi__gë32À
(
s
);

4640 
mb
 = 
	`°bi__gë32À
(
s
);

4642 i‡(
mr
 =
mg
 && mg =
mb
) {

4644  
	`°bi__îΩuc
("bad BMP", "bad BMP");

4647  
	`°bi__îΩuc
("bad BMP", "bad BMP");

4650 
	`STBI_ASSERT
(
hsz
 == 108 || hsz == 124);

4651 
mr
 = 
	`°bi__gë32À
(
s
);

4652 
mg
 = 
	`°bi__gë32À
(
s
);

4653 
mb
 = 
	`°bi__gë32À
(
s
);

4654 
ma
 = 
	`°bi__gë32À
(
s
);

4655 
	`°bi__gë32À
(
s
);

4656 
i
=0; i < 12; ++i)

4657 
	`°bi__gë32À
(
s
);

4658 i‡(
hsz
 == 124) {

4659 
	`°bi__gë32À
(
s
);

4660 
	`°bi__gë32À
(
s
);

4661 
	`°bi__gë32À
(
s
);

4662 
	`°bi__gë32À
(
s
);

4665 i‡(
bµ
 < 16)

4666 
psize
 = (
off£t
 - 14 - 
hsz
) >> 2;

4668 
s
->
img_n
 = 
ma
 ? 4 : 3;

4669 i‡(
ªq_comp
 &&Ñeq_comp >= 3)

4670 
èrgë
 = 
ªq_comp
;

4672 
èrgë
 = 
s
->
img_n
;

4673 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
èrgë
 * 
s
->
img_x
 * s->
img_y
);

4674 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

4675 i‡(
bµ
 < 16) {

4676 
z
=0;

4677 i‡(
psize
 =0 ||Ösizê> 256Ë{ 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("invalid", "Corrupt BMP"); }

4678 
i
=0; i < 
psize
; ++i) {

4679 
∑l
[
i
][2] = 
	`°bi__gë8
(
s
);

4680 
∑l
[
i
][1] = 
	`°bi__gë8
(
s
);

4681 
∑l
[
i
][0] = 
	`°bi__gë8
(
s
);

4682 i‡(
hsz
 !12Ë
	`°bi__gë8
(
s
);

4683 
∑l
[
i
][3] = 255;

4685 
	`°bi__skù
(
s
, 
off£t
 - 14 - 
hsz
 - 
psize
 * (hsz == 12 ? 3 : 4));

4686 i‡(
bµ
 =4Ë
width
 = (
s
->
img_x
 + 1) >> 1;

4687 i‡(
bµ
 =8Ë
width
 = 
s
->
img_x
;

4688 { 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("bad bpp", "Corrupt BMP"); }

4689 
∑d
 = (-
width
)&3;

4690 
j
=0; j < (Ë
s
->
img_y
; ++j) {

4691 
i
=0; i < (Ë
s
->
img_x
; i += 2) {

4692 
v
=
	`°bi__gë8
(
s
),
v2
=0;

4693 i‡(
bµ
 == 4) {

4694 
v2
 = 
v
 & 15;

4695 
v
 >>= 4;

4697 
out
[
z
++] = 
∑l
[
v
][0];

4698 
out
[
z
++] = 
∑l
[
v
][1];

4699 
out
[
z
++] = 
∑l
[
v
][2];

4700 i‡(
èrgë
 =4Ë
out
[
z
++] = 255;

4701 i‡(
i
+1 =(Ë
s
->
img_x
) ;

4702 
v
 = (
bµ
 =8Ë? 
	`°bi__gë8
(
s
Ë: 
v2
;

4703 
out
[
z
++] = 
∑l
[
v
][0];

4704 
out
[
z
++] = 
∑l
[
v
][1];

4705 
out
[
z
++] = 
∑l
[
v
][2];

4706 i‡(
èrgë
 =4Ë
out
[
z
++] = 255;

4708 
	`°bi__skù
(
s
, 
∑d
);

4711 
rshi·
=0,
gshi·
=0,
bshi·
=0,
ashi·
=0,
rcou¡
=0,
gcou¡
=0,
bcou¡
=0,
acou¡
=0;

4712 
z
 = 0;

4713 
ósy
=0;

4714 
	`°bi__skù
(
s
, 
off£t
 - 14 - 
hsz
);

4715 i‡(
bµ
 =24Ë
width
 = 3 * 
s
->
img_x
;

4716 i‡(
bµ
 =16Ë
width
 = 2*
s
->
img_x
;

4717 
width
=0;

4718 
∑d
 = (-
width
) & 3;

4719 i‡(
bµ
 == 24) {

4720 
ósy
 = 1;

4721 } i‡(
bµ
 == 32) {

4722 i‡(
mb
 =0xf‡&& 
mg
 =0xff00 && 
mr
 =0x00ff0000 && 
ma
 == 0xff000000)

4723 
ósy
 = 2;

4725 i‡(!
ósy
) {

4726 i‡(!
mr
 || !
mg
 || !
mb
Ë{ 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("bad masks", "Corrupt BMP"); }

4728 
rshi·
 = 
	`°bi__high_bô
(
mr
)-7; 
rcou¡
 = 
	`°bi__bôcou¡
(mr);

4729 
gshi·
 = 
	`°bi__high_bô
(
mg
)-7; 
gcou¡
 = 
	`°bi__bôcou¡
(mg);

4730 
bshi·
 = 
	`°bi__high_bô
(
mb
)-7; 
bcou¡
 = 
	`°bi__bôcou¡
(mb);

4731 
ashi·
 = 
	`°bi__high_bô
(
ma
)-7; 
acou¡
 = 
	`°bi__bôcou¡
(ma);

4733 
j
=0; j < (Ë
s
->
img_y
; ++j) {

4734 i‡(
ósy
) {

4735 
i
=0; i < (Ë
s
->
img_x
; ++i) {

4736 
a
;

4737 
out
[
z
+2] = 
	`°bi__gë8
(
s
);

4738 
out
[
z
+1] = 
	`°bi__gë8
(
s
);

4739 
out
[
z
+0] = 
	`°bi__gë8
(
s
);

4740 
z
 += 3;

4741 
a
 = (
ósy
 =2 ? 
	`°bi__gë8
(
s
) : 255);

4742 i‡(
èrgë
 =4Ë
out
[
z
++] = 
a
;

4745 
i
=0; i < (Ë
s
->
img_x
; ++i) {

4746 
°bi__uöt32
 
v
 = (
bµ
 =16 ? (°bi__uöt32Ë
	`°bi__gë16À
(
s
Ë: 
	`°bi__gë32À
(s));

4747 
a
;

4748 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mr
, 
rshi·
, 
rcou¡
));

4749 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mg
, 
gshi·
, 
gcou¡
));

4750 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mb
, 
bshi·
, 
bcou¡
));

4751 
a
 = (
ma
 ? 
	`°bi__shi·sig√d
(
v
 & ma, 
ashi·
, 
acou¡
) : 255);

4752 i‡(
èrgë
 =4Ë
out
[
z
++] = 
	`STBI__BYTECAST
(
a
);

4755 
	`°bi__skù
(
s
, 
∑d
);

4758 i‡(
Êù_vîtiˇŒy
) {

4759 
°bi_uc
 
t
;

4760 
j
=0; j < (Ë
s
->
img_y
>>1; ++j) {

4761 
°bi_uc
 *
p1
 = 
out
 + 
j
 *
s
->
img_x
*
èrgë
;

4762 
°bi_uc
 *
p2
 = 
out
 + (
s
->
img_y
-1-
j
)*s->
img_x
*
èrgë
;

4763 
i
=0; i < (Ë
s
->
img_x
*
èrgë
; ++i) {

4764 
t
 = 
p1
[
i
],Ö1[i] = 
p2
[i],Ö2[i] =Å;

4769 i‡(
ªq_comp
 &&Ñeq_com∞!
èrgë
) {

4770 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 
èrgë
, 
ªq_comp
, 
s
->
img_x
, s->
img_y
);

4771 i‡(
out
 =
NULL
)  out;

4774 *
x
 = 
s
->
img_x
;

4775 *
y
 = 
s
->
img_y
;

4776 i‡(
comp
Ë*com∞
s
->
img_n
;

4777  
out
;

4778 
	}
}

4783 #i‚de‡
STBI_NO_TGA


4784 
	$°bi__tga_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

4786 
tga_w
, 
tga_h
, 
tga_comp
;

4787 
sz
;

4788 
	`°bi__gë8
(
s
);

4789 
sz
 = 
	`°bi__gë8
(
s
);

4790 if–
sz
 > 1 ) {

4791 
	`°bi__ªwöd
(
s
);

4794 
sz
 = 
	`°bi__gë8
(
s
);

4796 i‡((
sz
 != 1) && (sz != 2) && (sz != 3) && (sz != 9) && (sz != 10) && (sz != 11))  0;

4797 
	`°bi__skù
(
s
,9);

4798 
tga_w
 = 
	`°bi__gë16À
(
s
);

4799 if–
tga_w
 < 1 ) {

4800 
	`°bi__ªwöd
(
s
);

4803 
tga_h
 = 
	`°bi__gë16À
(
s
);

4804 if–
tga_h
 < 1 ) {

4805 
	`°bi__ªwöd
(
s
);

4808 
sz
 = 
	`°bi__gë8
(
s
);

4810 i‡((
sz
 != 8) && (sz != 16) && (sz != 24) && (sz != 32)) {

4811 
	`°bi__ªwöd
(
s
);

4814 
tga_comp
 = 
sz
;

4815 i‡(
x
Ë*x = 
tga_w
;

4816 i‡(
y
Ë*y = 
tga_h
;

4817 i‡(
comp
Ë*com∞
tga_comp
 / 8;

4819 
	}
}

4821 
	$°bi__tga_ã°
(
°bi__c⁄ãxt
 *
s
)

4823 
ªs
;

4824 
sz
;

4825 
	`°bi__gë8
(
s
);

4826 
sz
 = 
	`°bi__gë8
(
s
);

4827 i‡–
sz
 > 1 )  0;

4828 
sz
 = 
	`°bi__gë8
(
s
);

4829 i‡–(
sz
 != 1) && (sz != 2) && (sz != 3) && (sz != 9) && (sz != 10) && (sz != 11) )  0;

4830 
	`°bi__gë16be
(
s
);

4831 
	`°bi__gë16be
(
s
);

4832 
	`°bi__gë8
(
s
);

4833 
	`°bi__gë16be
(
s
);

4834 
	`°bi__gë16be
(
s
);

4835 i‡–
	`°bi__gë16be
(
s
) < 1 )  0;

4836 i‡–
	`°bi__gë16be
(
s
) < 1 )  0;

4837 
sz
 = 
	`°bi__gë8
(
s
);

4838 i‡–(
sz
 != 8) && (sz != 16) && (sz != 24) && (sz != 32) )

4839 
ªs
 = 0;

4841 
ªs
 = 1;

4842 
	`°bi__ªwöd
(
s
);

4843  
ªs
;

4844 
	}
}

4846 
°bi_uc
 *
	$°bi__tga_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

4849 
tga_off£t
 = 
	`°bi__gë8
(
s
);

4850 
tga_ödexed
 = 
	`°bi__gë8
(
s
);

4851 
tga_image_ty≥
 = 
	`°bi__gë8
(
s
);

4852 
tga_is_RLE
 = 0;

4853 
tga_∑Àâe_°¨t
 = 
	`°bi__gë16À
(
s
);

4854 
tga_∑Àâe_Àn
 = 
	`°bi__gë16À
(
s
);

4855 
tga_∑Àâe_bôs
 = 
	`°bi__gë8
(
s
);

4856 
tga_x_‹igö
 = 
	`°bi__gë16À
(
s
);

4857 
tga_y_‹igö
 = 
	`°bi__gë16À
(
s
);

4858 
tga_width
 = 
	`°bi__gë16À
(
s
);

4859 
tga_height
 = 
	`°bi__gë16À
(
s
);

4860 
tga_bôs_≥r_pixñ
 = 
	`°bi__gë8
(
s
);

4861 
tga_comp
 = 
tga_bôs_≥r_pixñ
 / 8;

4862 
tga_övîãd
 = 
	`°bi__gë8
(
s
);

4864 *
tga_d©a
;

4865 *
tga_∑Àâe
 = 
NULL
;

4866 
i
, 
j
;

4867 
øw_d©a
[4];

4868 
RLE_cou¡
 = 0;

4869 
RLE_ª≥©ög
 = 0;

4870 
ªad_√xt_pixñ
 = 1;

4873 i‡–
tga_image_ty≥
 >= 8 )

4875 
tga_image_ty≥
 -= 8;

4876 
tga_is_RLE
 = 1;

4879 
tga_övîãd
 = 1 - ((tga_inverted >> 5) & 1);

4883 (
tga_width
 < 1Ë|| (
tga_height
 < 1) ||

4884 (
tga_image_ty≥
 < 1) || (tga_image_type > 3) ||

4885 ((
tga_bôs_≥r_pixñ
 != 8) && (tga_bits_per_pixel != 16) &&

4886 (
tga_bôs_≥r_pixñ
 != 24) && (tga_bits_per_pixel != 32))

4889  
NULL
;

4893 i‡–
tga_ödexed
 )

4895 
tga_comp
 = 
tga_∑Àâe_bôs
 / 8;

4899 *
x
 = 
tga_width
;

4900 *
y
 = 
tga_height
;

4901 i‡(
comp
Ë*com∞
tga_comp
;

4903 
tga_d©a
 = (*)
	`°bi__mÆloc
–(
size_t
)
tga_width
 * 
tga_height
 * 
tga_comp
 );

4904 i‡(!
tga_d©a
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

4907 
	`°bi__skù
(
s
, 
tga_off£t
 );

4909 i‡–!
tga_ödexed
 && !
tga_is_RLE
) {

4910 
i
=0; i < 
tga_height
; ++i) {

4911 
y
 = 
tga_övîãd
 ? 
tga_height
 -
i
 - 1 : i;

4912 
°bi_uc
 *
tga_row
 = 
tga_d©a
 + 
y
*
tga_width
*
tga_comp
;

4913 
	`°bi__gën
(
s
, 
tga_row
, 
tga_width
 * 
tga_comp
);

4917 i‡–
tga_ödexed
)

4920 
	`°bi__skù
(
s
, 
tga_∑Àâe_°¨t
 );

4922 
tga_∑Àâe
 = (*)
	`°bi__mÆloc
–
tga_∑Àâe_Àn
 * 
tga_∑Àâe_bôs
 / 8 );

4923 i‡(!
tga_∑Àâe
) {

4924 
	`STBI_FREE
(
tga_d©a
);

4925  
	`°bi__îΩuc
("outofmem", "Out of memory");

4927 i‡(!
	`°bi__gën
(
s
, 
tga_∑Àâe
, 
tga_∑Àâe_Àn
 * 
tga_∑Àâe_bôs
 / 8 )) {

4928 
	`STBI_FREE
(
tga_d©a
);

4929 
	`STBI_FREE
(
tga_∑Àâe
);

4930  
	`°bi__îΩuc
("badÖalette", "Corrupt TGA");

4934 
i
=0; i < 
tga_width
 * 
tga_height
; ++i)

4937 i‡–
tga_is_RLE
 )

4939 i‡–
RLE_cou¡
 == 0 )

4942 
RLE_cmd
 = 
	`°bi__gë8
(
s
);

4943 
RLE_cou¡
 = 1 + (
RLE_cmd
 & 127);

4944 
RLE_ª≥©ög
 = 
RLE_cmd
 >> 7;

4945 
ªad_√xt_pixñ
 = 1;

4946 } i‡–!
RLE_ª≥©ög
 )

4948 
ªad_√xt_pixñ
 = 1;

4952 
ªad_√xt_pixñ
 = 1;

4955 i‡–
ªad_√xt_pixñ
 )

4958 i‡–
tga_ödexed
 )

4961 
∑l_idx
 = 
	`°bi__gë8
(
s
);

4962 i‡–
∑l_idx
 >
tga_∑Àâe_Àn
 )

4965 
∑l_idx
 = 0;

4967 
∑l_idx
 *
tga_bôs_≥r_pixñ
 / 8;

4968 
j
 = 0; j*8 < 
tga_bôs_≥r_pixñ
; ++j)

4970 
øw_d©a
[
j
] = 
tga_∑Àâe
[
∑l_idx
+j];

4975 
j
 = 0; j*8 < 
tga_bôs_≥r_pixñ
; ++j)

4977 
øw_d©a
[
j
] = 
	`°bi__gë8
(
s
);

4981 
ªad_√xt_pixñ
 = 0;

4985 
j
 = 0; j < 
tga_comp
; ++j)

4986 
tga_d©a
[
i
*
tga_comp
+
j
] = 
øw_d©a
[j];

4989 --
RLE_cou¡
;

4992 i‡–
tga_övîãd
 )

4994 
j
 = 0; j*2 < 
tga_height
; ++j)

4996 
ödex1
 = 
j
 * 
tga_width
 * 
tga_comp
;

4997 
ödex2
 = (
tga_height
 - 1 - 
j
Ë* 
tga_width
 * 
tga_comp
;

4998 
i
 = 
tga_width
 * 
tga_comp
; i > 0; --i)

5000 
ãmp
 = 
tga_d©a
[
ödex1
];

5001 
tga_d©a
[
ödex1
] =Åga_d©a[
ödex2
];

5002 
tga_d©a
[
ödex2
] = 
ãmp
;

5003 ++
ödex1
;

5004 ++
ödex2
;

5009 i‡–
tga_∑Àâe
 !
NULL
 )

5011 
	`STBI_FREE
–
tga_∑Àâe
 );

5016 i‡(
tga_comp
 >= 3)

5018 * 
tga_pixñ
 = 
tga_d©a
;

5019 
i
=0; i < 
tga_width
 * 
tga_height
; ++i)

5021 
ãmp
 = 
tga_pixñ
[0];

5022 
tga_pixñ
[0] =Åga_pixel[2];

5023 
tga_pixñ
[2] = 
ãmp
;

5024 
tga_pixñ
 +
tga_comp
;

5029 i‡(
ªq_comp
 &&Ñeq_com∞!
tga_comp
)

5030 
tga_d©a
 = 
	`°bi__c⁄vît_f‹m©
—ga_d©a, 
tga_comp
, 
ªq_comp
, 
tga_width
, 
tga_height
);

5034 
tga_∑Àâe_°¨t
 = 
tga_∑Àâe_Àn
 = 
tga_∑Àâe_bôs
 =

5035 
tga_x_‹igö
 = 
tga_y_‹igö
 = 0;

5037  
tga_d©a
;

5038 
	}
}

5044 #i‚de‡
STBI_NO_PSD


5045 
	$°bi__psd_ã°
(
°bi__c⁄ãxt
 *
s
)

5047 
r
 = (
	`°bi__gë32be
(
s
) == 0x38425053);

5048 
	`°bi__ªwöd
(
s
);

5049  
r
;

5050 
	}
}

5052 
°bi_uc
 *
	$°bi__psd_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

5054 
pixñCou¡
;

5055 
ch™√lCou¡
, 
com¥essi⁄
;

5056 
ch™√l
, 
i
, 
cou¡
, 
Àn
;

5057 
w
,
h
;

5058 
°bi_uc
 *
out
;

5061 i‡(
	`°bi__gë32be
(
s
) != 0x38425053)

5062  
	`°bi__îΩuc
("not PSD", "Corrupt PSD image");

5065 i‡(
	`°bi__gë16be
(
s
) != 1)

5066  
	`°bi__îΩuc
("wrong version", "Unsupported version of PSD image");

5069 
	`°bi__skù
(
s
, 6 );

5072 
ch™√lCou¡
 = 
	`°bi__gë16be
(
s
);

5073 i‡(
ch™√lCou¡
 < 0 || channelCount > 16)

5074  
	`°bi__îΩuc
("wrong channel count", "UnsupportedÇumber of channels in PSD image");

5077 
h
 = 
	`°bi__gë32be
(
s
);

5078 
w
 = 
	`°bi__gë32be
(
s
);

5081 i‡(
	`°bi__gë16be
(
s
) != 8)

5082  
	`°bi__îΩuc
("unsupported bit depth", "PSD bit depth isÇot 8 bit");

5094 i‡(
	`°bi__gë16be
(
s
) != 3)

5095  
	`°bi__îΩuc
("wrong color format", "PSD isÇot in RGB color format");

5098 
	`°bi__skù
(
s
,
	`°bi__gë32be
(s) );

5101 
	`°bi__skù
(
s
, 
	`°bi__gë32be
(s) );

5104 
	`°bi__skù
(
s
, 
	`°bi__gë32be
(s) );

5110 
com¥essi⁄
 = 
	`°bi__gë16be
(
s
);

5111 i‡(
com¥essi⁄
 > 1)

5112  
	`°bi__îΩuc
("bad compression", "PSD hasán unknown compression format");

5115 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * 
w
*
h
);

5116 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5117 
pixñCou¡
 = 
w
*
h
;

5123 i‡(
com¥essi⁄
) {

5134 
	`°bi__skù
(
s
, 
h
 * 
ch™√lCou¡
 * 2 );

5137 
ch™√l
 = 0; channel < 4; channel++) {

5138 
°bi_uc
 *
p
;

5140 
p
 = 
out
+
ch™√l
;

5141 i‡(
ch™√l
 >
ch™√lCou¡
) {

5143 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

5144 *
p
 = (
ch™√l
 == 3 ? 255 : 0);

5147 
cou¡
 = 0;

5148 
cou¡
 < 
pixñCou¡
) {

5149 
Àn
 = 
	`°bi__gë8
(
s
);

5150 i‡(
Àn
 == 128) {

5152 } i‡(
Àn
 < 128) {

5154 
Àn
++;

5155 
cou¡
 +
Àn
;

5156 
Àn
) {

5157 *
p
 = 
	`°bi__gë8
(
s
);

5158 
p
 += 4;

5159 
Àn
--;

5161 } i‡(
Àn
 > 128) {

5162 
°bi_uc
 
vÆ
;

5165 
Àn
 ^= 0x0FF;

5166 
Àn
 += 2;

5167 
vÆ
 = 
	`°bi__gë8
(
s
);

5168 
cou¡
 +
Àn
;

5169 
Àn
) {

5170 *
p
 = 
vÆ
;

5171 
p
 += 4;

5172 
Àn
--;

5184 
ch™√l
 = 0; channel < 4; channel++) {

5185 
°bi_uc
 *
p
;

5187 
p
 = 
out
 + 
ch™√l
;

5188 i‡(
ch™√l
 > 
ch™√lCou¡
) {

5190 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

5191 *
p
 = 
ch™√l
 == 3 ? 255 : 0;

5194 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

5195 *
p
 = 
	`°bi__gë8
(
s
);

5200 i‡(
ªq_comp
 &&Ñeq_comp != 4) {

5201 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 4, 
ªq_comp
, 
w
, 
h
);

5202 i‡(
out
 =
NULL
)  out;

5205 i‡(
comp
) *comp = 4;

5206 *
y
 = 
h
;

5207 *
x
 = 
w
;

5209  
out
;

5210 
	}
}

5220 #i‚de‡
STBI_NO_PIC


5221 
	$°bi__pic_is4
(
°bi__c⁄ãxt
 *
s
,c⁄° *
°r
)

5223 
i
;

5224 
i
=0; i<4; ++i)

5225 i‡(
	`°bi__gë8
(
s
Ë!(
°bi_uc
)
°r
[
i
])

5229 
	}
}

5231 
	$°bi__pic_ã°_c‹e
(
°bi__c⁄ãxt
 *
s
)

5233 
i
;

5235 i‡(!
	`°bi__pic_is4
(
s
,"\x53\x80\xF6\x34"))

5238 
i
=0;i<84;++i)

5239 
	`°bi__gë8
(
s
);

5241 i‡(!
	`°bi__pic_is4
(
s
,"PICT"))

5245 
	}
}

5249 
°bi_uc
 
	msize
,
	mty≥
,
	mch™√l
;

5250 } 
	t°bi__pic_∑ckë
;

5252 
°bi_uc
 *
	$°bi__ªadvÆ
(
°bi__c⁄ãxt
 *
s
, 
ch™√l
, 
°bi_uc
 *
de°
)

5254 
mask
=0x80, 
i
;

5256 
i
=0; i<4; ++i, 
mask
>>=1) {

5257 i‡(
ch™√l
 & 
mask
) {

5258 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","PIC fileÅoo short");

5259 
de°
[
i
]=
	`°bi__gë8
(
s
);

5263  
de°
;

5264 
	}
}

5266 
	$°bi__c›yvÆ
(
ch™√l
,
°bi_uc
 *
de°
,c⁄° stbi_u¯*
§c
)

5268 
mask
=0x80,
i
;

5270 
i
=0;i<4; ++i, 
mask
>>=1)

5271 i‡(
ch™√l
&
mask
)

5272 
de°
[
i
]=
§c
[i];

5273 
	}
}

5275 
°bi_uc
 *
	$°bi__pic_lﬂd_c‹e
(
°bi__c⁄ãxt
 *
s
,
width
,
height
,*
comp
, 
°bi_uc
 *
ªsu…
)

5277 
a˘_comp
=0,
num_∑ckës
=0,
y
,
chaöed
;

5278 
°bi__pic_∑ckë
 
∑ckës
[10];

5283 
°bi__pic_∑ckë
 *
∑ckë
;

5285 i‡(
num_∑ckës
==(
∑ckës
)/(packets[0]))

5286  
	`°bi__îΩuc
("bad format","too manyÖackets");

5288 
∑ckë
 = &
∑ckës
[
num_∑ckës
++];

5290 
chaöed
 = 
	`°bi__gë8
(
s
);

5291 
∑ckë
->
size
 = 
	`°bi__gë8
(
s
);

5292 
∑ckë
->
ty≥
 = 
	`°bi__gë8
(
s
);

5293 
∑ckë
->
ch™√l
 = 
	`°bi__gë8
(
s
);

5295 
a˘_comp
 |
∑ckë
->
ch™√l
;

5297 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (readingÖackets)");

5298 i‡(
∑ckë
->
size
 !8Ë 
	`°bi__îΩuc
("bad format","packet isn't 8bpp");

5299 } 
chaöed
);

5301 *
comp
 = (
a˘_comp
 & 0x10 ? 4 : 3);

5303 
y
=0; y<
height
; ++y) {

5304 
∑ckë_idx
;

5306 
∑ckë_idx
=0;Öackë_idx < 
num_∑ckës
; ++packet_idx) {

5307 
°bi__pic_∑ckë
 *
∑ckë
 = &
∑ckës
[
∑ckë_idx
];

5308 
°bi_uc
 *
de°
 = 
ªsu…
+
y
*
width
*4;

5310 
∑ckë
->
ty≥
) {

5312  
	`°bi__îΩuc
("bad format","packet has bad compressionÅype");

5315 
x
;

5317 
x
=0;x<
width
;++x, 
de°
+=4)

5318 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
de°
))

5325 
À·
=
width
, 
i
;

5327 
À·
>0) {

5328 
°bi_uc
 
cou¡
,
vÆue
[4];

5330 
cou¡
=
	`°bi__gë8
(
s
);

5331 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (pureÑead count)");

5333 i‡(
cou¡
 > 
À·
)

5334 
cou¡
 = (
°bi_uc
Ë
À·
;

5336 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
vÆue
))  0;

5338 
i
=0; i<
cou¡
; ++i,
de°
+=4)

5339 
	`°bi__c›yvÆ
(
∑ckë
->
ch™√l
,
de°
,
vÆue
);

5340 
À·
 -
cou¡
;

5346 
À·
=
width
;

5347 
À·
>0) {

5348 
cou¡
 = 
	`°bi__gë8
(
s
), 
i
;

5349 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (mixedÑead count)");

5351 i‡(
cou¡
 >= 128) {

5352 
°bi_uc
 
vÆue
[4];

5353 
i
;

5355 i‡(
cou¡
==128)

5356 
cou¡
 = 
	`°bi__gë16be
(
s
);

5358 
cou¡
 -= 127;

5359 i‡(
cou¡
 > 
À·
)

5360  
	`°bi__îΩuc
("bad file","scanline overrun");

5362 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
vÆue
))

5365 
i
=0;i<
cou¡
;++i, 
de°
 += 4)

5366 
	`°bi__c›yvÆ
(
∑ckë
->
ch™√l
,
de°
,
vÆue
);

5368 ++
cou¡
;

5369 i‡(
cou¡
>
À·
Ë 
	`°bi__îΩuc
("bad file","scanline overrun");

5371 
i
=0;i<
cou¡
;++i, 
de°
+=4)

5372 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
de°
))

5375 
À·
-=
cou¡
;

5383  
ªsu…
;

5384 
	}
}

5386 
°bi_uc
 *
	$°bi__pic_lﬂd
(
°bi__c⁄ãxt
 *
s
,*
px
,*
py
,*
comp
,
ªq_comp
)

5388 
°bi_uc
 *
ªsu…
;

5389 
i
, 
x
,
y
;

5391 
i
=0; i<92; ++i)

5392 
	`°bi__gë8
(
s
);

5394 
x
 = 
	`°bi__gë16be
(
s
);

5395 
y
 = 
	`°bi__gë16be
(
s
);

5396 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (pic header)");

5397 i‡((1 << 28Ë/ 
x
 < 
y
Ë 
	`°bi__îΩuc
("tooÜarge", "ImageÅooÜargeÅo decode");

5399 
	`°bi__gë32be
(
s
);

5400 
	`°bi__gë16be
(
s
);

5401 
	`°bi__gë16be
(
s
);

5404 
ªsu…
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
x
*
y
*4);

5405 
	`mem£t
(
ªsu…
, 0xff, 
x
*
y
*4);

5407 i‡(!
	`°bi__pic_lﬂd_c‹e
(
s
,
x
,
y
,
comp
, 
ªsu…
)) {

5408 
	`STBI_FREE
(
ªsu…
);

5409 
ªsu…
=0;

5411 *
px
 = 
x
;

5412 *
py
 = 
y
;

5413 i‡(
ªq_comp
 =0Ëªq_com∞*
comp
;

5414 
ªsu…
=
	`°bi__c⁄vît_f‹m©
‘esu…,4,
ªq_comp
,
x
,
y
);

5416  
ªsu…
;

5417 
	}
}

5419 
	$°bi__pic_ã°
(
°bi__c⁄ãxt
 *
s
)

5421 
r
 = 
	`°bi__pic_ã°_c‹e
(
s
);

5422 
	`°bi__ªwöd
(
s
);

5423  
r
;

5424 
	}
}

5430 #i‚de‡
STBI_NO_GIF


5433 
°bi__öt16
 
	m¥efix
;

5434 
°bi_uc
 
	mfú°
;

5435 
°bi_uc
 
	msuffix
;

5436 } 
	t°bi__gif_lzw
;

5440 
	mw
,
	mh
;

5441 
°bi_uc
 *
	mout
;

5442 
	mÊags
, 
	mbgödex
, 
	møtio
, 
	må™•¨ít
, 
	meÊags
;

5443 
°bi_uc
 
	m∑l
[256][4];

5444 
°bi_uc
 
	mÕÆ
[256][4];

5445 
°bi__gif_lzw
 
	mcodes
[4096];

5446 
°bi_uc
 *
	mcﬁ‹_èbÀ
;

5447 
	m∑r£
, 
	m°ï
;

5448 
	mlÊags
;

5449 
	m°¨t_x
, 
	m°¨t_y
;

5450 
	mmax_x
, 
	mmax_y
;

5451 
	mcur_x
, 
	mcur_y
;

5452 
	mlöe_size
;

5453 } 
	t°bi__gif
;

5455 
	$°bi__gif_ã°_øw
(
°bi__c⁄ãxt
 *
s
)

5457 
sz
;

5458 i‡(
	`°bi__gë8
(
s
) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')  0;

5459 
sz
 = 
	`°bi__gë8
(
s
);

5460 i‡(
sz
 != '9' && sz != '7')  0;

5461 i‡(
	`°bi__gë8
(
s
) != 'a')  0;

5463 
	}
}

5465 
	$°bi__gif_ã°
(
°bi__c⁄ãxt
 *
s
)

5467 
r
 = 
	`°bi__gif_ã°_øw
(
s
);

5468 
	`°bi__ªwöd
(
s
);

5469  
r
;

5470 
	}
}

5472 
	$°bi__gif_∑r£_cﬁ‹èbÀ
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 
∑l
[256][4], 
num_íåõs
, 
å™•
)

5474 
i
;

5475 
i
=0; i < 
num_íåõs
; ++i) {

5476 
∑l
[
i
][2] = 
	`°bi__gë8
(
s
);

5477 
∑l
[
i
][1] = 
	`°bi__gë8
(
s
);

5478 
∑l
[
i
][0] = 
	`°bi__gë8
(
s
);

5479 
∑l
[
i
][3] = 
å™•
 == i ? 0 : 255;

5481 
	}
}

5483 
	$°bi__gif_hódî
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
, *
comp
, 
is_öfo
)

5485 
°bi_uc
 
vîsi⁄
;

5486 i‡(
	`°bi__gë8
(
s
) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')

5487  
	`°bi__îr
("not GIF", "Corrupt GIF");

5489 
vîsi⁄
 = 
	`°bi__gë8
(
s
);

5490 i‡(
vîsi⁄
 !'7' && vîsi⁄ !'9'Ë 
	`°bi__îr
("not GIF", "Corrupt GIF");

5491 i‡(
	`°bi__gë8
(
s
Ë!'a'Ë 
	`°bi__îr
("not GIF", "Corrupt GIF");

5493 
°bi__g_Áûuª_ªas⁄
 = "";

5494 
g
->
w
 = 
	`°bi__gë16À
(
s
);

5495 
g
->
h
 = 
	`°bi__gë16À
(
s
);

5496 
g
->
Êags
 = 
	`°bi__gë8
(
s
);

5497 
g
->
bgödex
 = 
	`°bi__gë8
(
s
);

5498 
g
->
øtio
 = 
	`°bi__gë8
(
s
);

5499 
g
->
å™•¨ít
 = -1;

5501 i‡(
comp
 != 0) *comp = 4;

5503 i‡(
is_öfo
)  1;

5505 i‡(
g
->
Êags
 & 0x80)

5506 
	`°bi__gif_∑r£_cﬁ‹èbÀ
(
s
,
g
->
∑l
, 2 << (g->
Êags
 & 7), -1);

5509 
	}
}

5511 
	$°bi__gif_öfo_øw
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5513 
°bi__gif
 
g
;

5514 i‡(!
	`°bi__gif_hódî
(
s
, &
g
, 
comp
, 1)) {

5515 
	`°bi__ªwöd
–
s
 );

5518 i‡(
x
Ë*x = 
g
.
w
;

5519 i‡(
y
Ë*y = 
g
.
h
;

5521 
	}
}

5523 
	$°bi__out_gif_code
(
°bi__gif
 *
g
, 
°bi__uöt16
 
code
)

5525 
°bi_uc
 *
p
, *
c
;

5529 i‡(
g
->
codes
[
code
].
¥efix
 >= 0)

5530 
	`°bi__out_gif_code
(
g
, g->
codes
[
code
].
¥efix
);

5532 i‡(
g
->
cur_y
 >g->
max_y
) ;

5534 
p
 = &
g
->
out
[g->
cur_x
 + g->
cur_y
];

5535 
c
 = &
g
->
cﬁ‹_èbÀ
[g->
codes
[
code
].
suffix
 * 4];

5537 i‡(
c
[3] >= 128) {

5538 
p
[0] = 
c
[2];

5539 
p
[1] = 
c
[1];

5540 
p
[2] = 
c
[0];

5541 
p
[3] = 
c
[3];

5543 
g
->
cur_x
 += 4;

5545 i‡(
g
->
cur_x
 >g->
max_x
) {

5546 
g
->
cur_x
 = g->
°¨t_x
;

5547 
g
->
cur_y
 +g->
°ï
;

5549 
g
->
cur_y
 >g->
max_y
 && g->
∑r£
 > 0) {

5550 
g
->
°ï
 = (1 << g->
∑r£
Ë* g->
löe_size
;

5551 
g
->
cur_y
 = g->
°¨t_y
 + (g->
°ï
 >> 1);

5552 --
g
->
∑r£
;

5555 
	}
}

5557 
°bi_uc
 *
	$°bi__¥o˚ss_gif_ø°î
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
)

5559 
°bi_uc
 
lzw_cs
;

5560 
°bi__öt32
 
Àn
, 
code
;

5561 
°bi__uöt32
 
fú°
;

5562 
°bi__öt32
 
codesize
, 
codemask
, 
avaû
, 
ﬁdcode
, 
bôs
, 
vÆid_bôs
, 
˛ór
;

5563 
°bi__gif_lzw
 *
p
;

5565 
lzw_cs
 = 
	`°bi__gë8
(
s
);

5566 i‡(
lzw_cs
 > 12Ë 
NULL
;

5567 
˛ór
 = 1 << 
lzw_cs
;

5568 
fú°
 = 1;

5569 
codesize
 = 
lzw_cs
 + 1;

5570 
codemask
 = (1 << 
codesize
) - 1;

5571 
bôs
 = 0;

5572 
vÆid_bôs
 = 0;

5573 
code
 = 0; codê< 
˛ór
; code++) {

5574 
g
->
codes
[
code
].
¥efix
 = -1;

5575 
g
->
codes
[
code
].
fú°
 = (
°bi_uc
) code;

5576 
g
->
codes
[
code
].
suffix
 = (
°bi_uc
) code;

5580 
avaû
 = 
˛ór
+2;

5581 
ﬁdcode
 = -1;

5583 
Àn
 = 0;

5585 i‡(
vÆid_bôs
 < 
codesize
) {

5586 i‡(
Àn
 == 0) {

5587 
Àn
 = 
	`°bi__gë8
(
s
);

5588 i‡(
Àn
 == 0)

5589  
g
->
out
;

5591 --
Àn
;

5592 
bôs
 |(
°bi__öt32
Ë
	`°bi__gë8
(
s
Ë<< 
vÆid_bôs
;

5593 
vÆid_bôs
 += 8;

5595 
°bi__öt32
 
code
 = 
bôs
 & 
codemask
;

5596 
bôs
 >>
codesize
;

5597 
vÆid_bôs
 -
codesize
;

5599 i‡(
code
 =
˛ór
) {

5600 
codesize
 = 
lzw_cs
 + 1;

5601 
codemask
 = (1 << 
codesize
) - 1;

5602 
avaû
 = 
˛ór
 + 2;

5603 
ﬁdcode
 = -1;

5604 
fú°
 = 0;

5605 } i‡(
code
 =
˛ór
 + 1) {

5606 
	`°bi__skù
(
s
, 
Àn
);

5607 (
Àn
 = 
	`°bi__gë8
(
s
)) > 0)

5608 
	`°bi__skù
(
s
,
Àn
);

5609  
g
->
out
;

5610 } i‡(
code
 <
avaû
) {

5611 i‡(
fú°
Ë 
	`°bi__îΩuc
("no clear code", "Corrupt GIF");

5613 i‡(
ﬁdcode
 >= 0) {

5614 
p
 = &
g
->
codes
[
avaû
++];

5615 i‡(
avaû
 > 4096Ë 
	`°bi__îΩuc
("too many codes", "Corrupt GIF");

5616 
p
->
¥efix
 = (
°bi__öt16
Ë
ﬁdcode
;

5617 
p
->
fú°
 = 
g
->
codes
[
ﬁdcode
].first;

5618 
p
->
suffix
 = (
code
 =
avaû
Ë?Ö->
fú°
 : 
g
->
codes
[code].first;

5619 } i‡(
code
 =
avaû
)

5620  
	`°bi__îΩuc
("illegal code inÑaster", "Corrupt GIF");

5622 
	`°bi__out_gif_code
(
g
, (
°bi__uöt16
Ë
code
);

5624 i‡((
avaû
 & 
codemask
) == 0 &&ávail <= 0x0FFF) {

5625 
codesize
++;

5626 
codemask
 = (1 << 
codesize
) - 1;

5629 
ﬁdcode
 = 
code
;

5631  
	`°bi__îΩuc
("illegal code inÑaster", "Corrupt GIF");

5635 
	}
}

5637 
	$°bi__fûl_gif_background
(
°bi__gif
 *
g
)

5639 
i
;

5640 
°bi_uc
 *
c
 = 
g
->
∑l
[g->
bgödex
];

5642 
i
 = 0; i < 
g
->
w
 * g->
h
 * 4; i += 4) {

5643 
°bi_uc
 *
p
 = &
g
->
out
[
i
];

5644 
p
[0] = 
c
[2];

5645 
p
[1] = 
c
[1];

5646 
p
[2] = 
c
[0];

5647 
p
[3] = 
c
[3];

5649 
	}
}

5652 
°bi_uc
 *
	$°bi__gif_lﬂd_√xt
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
, *
comp
, 
ªq_comp
)

5654 
i
;

5655 
°bi_uc
 *
ﬁd_out
 = 0;

5657 i‡(
g
->
out
 == 0) {

5658 i‡(!
	`°bi__gif_hódî
(
s
, 
g
, 
comp
,0))  0;

5659 
g
->
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * g->
w
 * g->
h
);

5660 i‡(
g
->
out
 =0Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5661 
	`°bi__fûl_gif_background
(
g
);

5664 i‡(((
g
->
eÊags
 & 0x1C) >> 2) == 3) {

5665 
ﬁd_out
 = 
g
->
out
;

5666 
g
->
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * g->
w
 * g->
h
);

5667 i‡(
g
->
out
 =0Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5668 
	`mem˝y
(
g
->
out
, 
ﬁd_out
, g->
w
*g->
h
*4);

5673 
	`°bi__gë8
(
s
)) {

5676 
°bi__öt32
 
x
, 
y
, 
w
, 
h
;

5677 
°bi_uc
 *
o
;

5679 
x
 = 
	`°bi__gë16À
(
s
);

5680 
y
 = 
	`°bi__gë16À
(
s
);

5681 
w
 = 
	`°bi__gë16À
(
s
);

5682 
h
 = 
	`°bi__gë16À
(
s
);

5683 i‡(((
x
 + 
w
Ë> (
g
->w)Ë|| ((
y
 + 
h
) > (g->h)))

5684  
	`°bi__îΩuc
("bad Image Descriptor", "Corrupt GIF");

5686 
g
->
löe_size
 = g->
w
 * 4;

5687 
g
->
°¨t_x
 = 
x
 * 4;

5688 
g
->
°¨t_y
 = 
y
 * g->
löe_size
;

5689 
g
->
max_x
 = g->
°¨t_x
 + 
w
 * 4;

5690 
g
->
max_y
 = g->
°¨t_y
 + 
h
 * g->
löe_size
;

5691 
g
->
cur_x
 = g->
°¨t_x
;

5692 
g
->
cur_y
 = g->
°¨t_y
;

5694 
g
->
lÊags
 = 
	`°bi__gë8
(
s
);

5696 i‡(
g
->
lÊags
 & 0x40) {

5697 
g
->
°ï
 = 8 * g->
löe_size
;

5698 
g
->
∑r£
 = 3;

5700 
g
->
°ï
 = g->
löe_size
;

5701 
g
->
∑r£
 = 0;

5704 i‡(
g
->
lÊags
 & 0x80) {

5705 
	`°bi__gif_∑r£_cﬁ‹èbÀ
(
s
,
g
->
ÕÆ
, 2 << (g->
lÊags
 & 7), g->
eÊags
 & 0x01 ? g->
å™•¨ít
 : -1);

5706 
g
->
cﬁ‹_èbÀ
 = (
°bi_uc
 *Ëg->
ÕÆ
;

5707 } i‡(
g
->
Êags
 & 0x80) {

5708 
i
=0; i < 256; ++i)

5709 
g
->
∑l
[
i
][3] = 255;

5710 i‡(
g
->
å™•¨ít
 >0 && (g->
eÊags
 & 0x01))

5711 
g
->
∑l
[g->
å™•¨ít
][3] = 0;

5712 
g
->
cﬁ‹_èbÀ
 = (
°bi_uc
 *Ëg->
∑l
;

5714  
	`°bi__îΩuc
("missing colorÅable", "Corrupt GIF");

5716 
o
 = 
	`°bi__¥o˚ss_gif_ø°î
(
s
, 
g
);

5717 i‡(
o
 =
NULL
)  NULL;

5719 i‡(
ªq_comp
 &&Ñeq_comp != 4)

5720 
o
 = 
	`°bi__c⁄vît_f‹m©
(o, 4, 
ªq_comp
, 
g
->
w
, g->
h
);

5721  
o
;

5726 
Àn
;

5727 i‡(
	`°bi__gë8
(
s
) == 0xF9) {

5728 
Àn
 = 
	`°bi__gë8
(
s
);

5729 i‡(
Àn
 == 4) {

5730 
g
->
eÊags
 = 
	`°bi__gë8
(
s
);

5731 
	`°bi__gë16À
(
s
);

5732 
g
->
å™•¨ít
 = 
	`°bi__gë8
(
s
);

5734 
	`°bi__skù
(
s
, 
Àn
);

5738 (
Àn
 = 
	`°bi__gë8
(
s
)) != 0)

5739 
	`°bi__skù
(
s
, 
Àn
);

5744  (
°bi_uc
 *Ë
s
;

5747  
	`°bi__îΩuc
("unknown code", "Corrupt GIF");

5750 
	}
}

5752 
°bi_uc
 *
	$°bi__gif_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

5754 
°bi_uc
 *
u
 = 0;

5755 
°bi__gif
 
g
;

5756 
	`mem£t
(&
g
, 0, (g));

5758 
u
 = 
	`°bi__gif_lﬂd_√xt
(
s
, &
g
, 
comp
, 
ªq_comp
);

5759 i‡(
u
 =(
°bi_uc
 *Ë
s
) u = 0;

5760 i‡(
u
) {

5761 *
x
 = 
g
.
w
;

5762 *
y
 = 
g
.
h
;

5765  
u
;

5766 
	}
}

5768 
	$°bi__gif_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5770  
	`°bi__gif_öfo_øw
(
s
,
x
,
y
,
comp
);

5771 
	}
}

5777 #i‚de‡
STBI_NO_HDR


5778 
	$°bi__hdr_ã°_c‹e
(
°bi__c⁄ãxt
 *
s
)

5780 c⁄° *
sig«tuª
 = "#?RADIANCE\n";

5781 
i
;

5782 
i
=0; 
sig«tuª
[i]; ++i)

5783 i‡(
	`°bi__gë8
(
s
Ë!
sig«tuª
[
i
])

5786 
	}
}

5788 
	$°bi__hdr_ã°
(
°bi__c⁄ãxt
* 
s
)

5790 
r
 = 
	`°bi__hdr_ã°_c‹e
(
s
);

5791 
	`°bi__ªwöd
(
s
);

5792  
r
;

5793 
	}
}

5795 
	#STBI__HDR_BUFLEN
 1024

	)

5796 *
	$°bi__hdr_gëtokí
(
°bi__c⁄ãxt
 *
z
, *
buf„r
)

5798 
Àn
=0;

5799 
c
 = '\0';

5801 
c
 = (Ë
	`°bi__gë8
(
z
);

5803 !
	`°bi__©_eof
(
z
Ë&& 
c
 != '\n') {

5804 
buf„r
[
Àn
++] = 
c
;

5805 i‡(
Àn
 =
STBI__HDR_BUFLEN
-1) {

5807 !
	`°bi__©_eof
(
z
Ë&& 
	`°bi__gë8
(z) != '\n')

5811 
c
 = (Ë
	`°bi__gë8
(
z
);

5814 
buf„r
[
Àn
] = 0;

5815  
buf„r
;

5816 
	}
}

5818 
	$°bi__hdr_c⁄vît
(*
ouçut
, 
°bi_uc
 *
öput
, 
ªq_comp
)

5820 i‡–
öput
[3] != 0 ) {

5821 
f1
;

5823 
f1
 = (Ë
	`ldexp
(1.0f, 
öput
[3] - ()(128 + 8));

5824 i‡(
ªq_comp
 <= 2)

5825 
ouçut
[0] = (
öput
[0] + i≈ut[1] + i≈ut[2]Ë* 
f1
 / 3;

5827 
ouçut
[0] = 
öput
[0] * 
f1
;

5828 
ouçut
[1] = 
öput
[1] * 
f1
;

5829 
ouçut
[2] = 
öput
[2] * 
f1
;

5831 i‡(
ªq_comp
 =2Ë
ouçut
[1] = 1;

5832 i‡(
ªq_comp
 =4Ë
ouçut
[3] = 1;

5834 
ªq_comp
) {

5835 4: 
ouçut
[3] = 1;

5836 3: 
ouçut
[0] = output[1] = output[2] = 0;

5838 2: 
ouçut
[1] = 1;

5839 1: 
ouçut
[0] = 0;

5843 
	}
}

5845 *
	$°bi__hdr_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

5847 
buf„r
[
STBI__HDR_BUFLEN
];

5848 *
tokí
;

5849 
vÆid
 = 0;

5850 
width
, 
height
;

5851 
°bi_uc
 *
sˇ∆öe
;

5852 *
hdr_d©a
;

5853 
Àn
;

5854 
cou¡
, 
vÆue
;

5855 
i
, 
j
, 
k
, 
c1
,
c2
, 
z
;

5859 i‡(
	`°rcmp
(
	`°bi__hdr_gëtokí
(
s
,
buf„r
), "#?RADIANCE") != 0)

5860  
	`°bi__îΩf
("not HDR", "Corrupt HDR image");

5864 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

5865 i‡(
tokí
[0] == 0) ;

5866 i‡(
	`°rcmp
(
tokí
, "FORMAT=32-bô_æe_rgbe"Ë=0Ë
vÆid
 = 1;

5869 i‡(!
vÆid
Ë 
	`°bi__îΩf
("unsupported format", "Unsupported HDR format");

5873 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

5874 i‡(
	`°∫cmp
(
tokí
, "-Y ", 3)Ë 
	`°bi__îΩf
("unsupported dataÜayout", "Unsupported HDR format");

5875 
tokí
 += 3;

5876 
height
 = (Ë
	`°πﬁ
(
tokí
, &token, 10);

5877 *
tokí
 == ' ') ++token;

5878 i‡(
	`°∫cmp
(
tokí
, "+X ", 3)Ë 
	`°bi__îΩf
("unsupported dataÜayout", "Unsupported HDR format");

5879 
tokí
 += 3;

5880 
width
 = (Ë
	`°πﬁ
(
tokí
, 
NULL
, 10);

5882 *
x
 = 
width
;

5883 *
y
 = 
height
;

5885 i‡(
comp
) *comp = 3;

5886 i‡(
ªq_comp
 == 0)Ñeq_comp = 3;

5889 
hdr_d©a
 = (*Ë
	`°bi__mÆloc
(
height
 * 
width
 * 
ªq_comp
 * ());

5893 i‡–
width
 < 8 || width >= 32768) {

5895 
j
=0; j < 
height
; ++j) {

5896 
i
=0; i < 
width
; ++i) {

5897 
°bi_uc
 
rgbe
[4];

5898 
maö_decode_lo›
:

5899 
	`°bi__gën
(
s
, 
rgbe
, 4);

5900 
	`°bi__hdr_c⁄vît
(
hdr_d©a
 + 
j
 * 
width
 * 
ªq_comp
 + 
i
 *Ñeq_comp, 
rgbe
,Ñeq_comp);

5905 
sˇ∆öe
 = 
NULL
;

5907 
j
 = 0; j < 
height
; ++j) {

5908 
c1
 = 
	`°bi__gë8
(
s
);

5909 
c2
 = 
	`°bi__gë8
(
s
);

5910 
Àn
 = 
	`°bi__gë8
(
s
);

5911 i‡(
c1
 !2 || 
c2
 !2 || (
Àn
 & 0x80)) {

5914 
°bi_uc
 
rgbe
[4];

5915 
rgbe
[0] = (
°bi_uc
Ë
c1
;

5916 
rgbe
[1] = (
°bi_uc
Ë
c2
;

5917 
rgbe
[2] = (
°bi_uc
Ë
Àn
;

5918 
rgbe
[3] = (
°bi_uc
Ë
	`°bi__gë8
(
s
);

5919 
	`°bi__hdr_c⁄vît
(
hdr_d©a
, 
rgbe
, 
ªq_comp
);

5920 
i
 = 1;

5921 
j
 = 0;

5922 
	`STBI_FREE
(
sˇ∆öe
);

5923 
maö_decode_lo›
;

5925 
Àn
 <<= 8;

5926 
Àn
 |
	`°bi__gë8
(
s
);

5927 i‡(
Àn
 !
width
Ë{ 
	`STBI_FREE
(
hdr_d©a
); STBI_FREE(
sˇ∆öe
);  
	`°bi__îΩf
("invalid decoded scanlineÜength", "corrupt HDR"); }

5928 i‡(
sˇ∆öe
 =
NULL
Ësˇ∆öê(
°bi_uc
 *Ë
	`°bi__mÆloc
(
width
 * 4);

5930 
k
 = 0; k < 4; ++k) {

5931 
i
 = 0;

5932 
i
 < 
width
) {

5933 
cou¡
 = 
	`°bi__gë8
(
s
);

5934 i‡(
cou¡
 > 128) {

5936 
vÆue
 = 
	`°bi__gë8
(
s
);

5937 
cou¡
 -= 128;

5938 
z
 = 0; z < 
cou¡
; ++z)

5939 
sˇ∆öe
[
i
++ * 4 + 
k
] = 
vÆue
;

5942 
z
 = 0; z < 
cou¡
; ++z)

5943 
sˇ∆öe
[
i
++ * 4 + 
k
] = 
	`°bi__gë8
(
s
);

5947 
i
=0; i < 
width
; ++i)

5948 
	`°bi__hdr_c⁄vît
(
hdr_d©a
+(
j
*
width
 + 
i
)*
ªq_comp
, 
sˇ∆öe
 + i*4,Ñeq_comp);

5950 
	`STBI_FREE
(
sˇ∆öe
);

5953  
hdr_d©a
;

5954 
	}
}

5956 
	$°bi__hdr_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5958 
buf„r
[
STBI__HDR_BUFLEN
];

5959 *
tokí
;

5960 
vÆid
 = 0;

5962 i‡(
	`°rcmp
(
	`°bi__hdr_gëtokí
(
s
,
buf„r
), "#?RADIANCE") != 0) {

5963 
	`°bi__ªwöd
–
s
 );

5968 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

5969 i‡(
tokí
[0] == 0) ;

5970 i‡(
	`°rcmp
(
tokí
, "FORMAT=32-bô_æe_rgbe"Ë=0Ë
vÆid
 = 1;

5973 i‡(!
vÆid
) {

5974 
	`°bi__ªwöd
–
s
 );

5977 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

5978 i‡(
	`°∫cmp
(
tokí
, "-Y ", 3)) {

5979 
	`°bi__ªwöd
–
s
 );

5982 
tokí
 += 3;

5983 *
y
 = (Ë
	`°πﬁ
(
tokí
, &token, 10);

5984 *
tokí
 == ' ') ++token;

5985 i‡(
	`°∫cmp
(
tokí
, "+X ", 3)) {

5986 
	`°bi__ªwöd
–
s
 );

5989 
tokí
 += 3;

5990 *
x
 = (Ë
	`°πﬁ
(
tokí
, 
NULL
, 10);

5991 *
comp
 = 3;

5993 
	}
}

5996 #i‚de‡
STBI_NO_BMP


5997 
	$°bi__bmp_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5999 
hsz
;

6000 i‡(
	`°bi__gë8
(
s
) != 'B' || stbi__get8(s) != 'M') {

6001 
	`°bi__ªwöd
–
s
 );

6004 
	`°bi__skù
(
s
,12);

6005 
hsz
 = 
	`°bi__gë32À
(
s
);

6006 i‡(
hsz
 != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) {

6007 
	`°bi__ªwöd
–
s
 );

6010 i‡(
hsz
 == 12) {

6011 *
x
 = 
	`°bi__gë16À
(
s
);

6012 *
y
 = 
	`°bi__gë16À
(
s
);

6014 *
x
 = 
	`°bi__gë32À
(
s
);

6015 *
y
 = 
	`°bi__gë32À
(
s
);

6017 i‡(
	`°bi__gë16À
(
s
) != 1) {

6018 
	`°bi__ªwöd
–
s
 );

6021 *
comp
 = 
	`°bi__gë16À
(
s
) / 8;

6023 
	}
}

6026 #i‚de‡
STBI_NO_PSD


6027 
	$°bi__psd_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6029 
ch™√lCou¡
;

6030 i‡(
	`°bi__gë32be
(
s
) != 0x38425053) {

6031 
	`°bi__ªwöd
–
s
 );

6034 i‡(
	`°bi__gë16be
(
s
) != 1) {

6035 
	`°bi__ªwöd
–
s
 );

6038 
	`°bi__skù
(
s
, 6);

6039 
ch™√lCou¡
 = 
	`°bi__gë16be
(
s
);

6040 i‡(
ch™√lCou¡
 < 0 || channelCount > 16) {

6041 
	`°bi__ªwöd
–
s
 );

6044 *
y
 = 
	`°bi__gë32be
(
s
);

6045 *
x
 = 
	`°bi__gë32be
(
s
);

6046 i‡(
	`°bi__gë16be
(
s
) != 8) {

6047 
	`°bi__ªwöd
–
s
 );

6050 i‡(
	`°bi__gë16be
(
s
) != 3) {

6051 
	`°bi__ªwöd
–
s
 );

6054 *
comp
 = 4;

6056 
	}
}

6059 #i‚de‡
STBI_NO_PIC


6060 
	$°bi__pic_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6062 
a˘_comp
=0,
num_∑ckës
=0,
chaöed
;

6063 
°bi__pic_∑ckë
 
∑ckës
[10];

6065 
	`°bi__skù
(
s
, 92);

6067 *
x
 = 
	`°bi__gë16be
(
s
);

6068 *
y
 = 
	`°bi__gë16be
(
s
);

6069 i‡(
	`°bi__©_eof
(
s
))  0;

6070 i‡–(*
x
Ë!0 && (1 << 28Ë/ (*xË< (*
y
)) {

6071 
	`°bi__ªwöd
–
s
 );

6075 
	`°bi__skù
(
s
, 8);

6078 
°bi__pic_∑ckë
 *
∑ckë
;

6080 i‡(
num_∑ckës
==(
∑ckës
)/(packets[0]))

6083 
∑ckë
 = &
∑ckës
[
num_∑ckës
++];

6084 
chaöed
 = 
	`°bi__gë8
(
s
);

6085 
∑ckë
->
size
 = 
	`°bi__gë8
(
s
);

6086 
∑ckë
->
ty≥
 = 
	`°bi__gë8
(
s
);

6087 
∑ckë
->
ch™√l
 = 
	`°bi__gë8
(
s
);

6088 
a˘_comp
 |
∑ckë
->
ch™√l
;

6090 i‡(
	`°bi__©_eof
(
s
)) {

6091 
	`°bi__ªwöd
–
s
 );

6094 i‡(
∑ckë
->
size
 != 8) {

6095 
	`°bi__ªwöd
–
s
 );

6098 } 
chaöed
);

6100 *
comp
 = (
a˘_comp
 & 0x10 ? 4 : 3);

6103 
	}
}

6118 #i‚de‡
STBI_NO_PNM


6120 
	$°bi__≤m_ã°
(
°bi__c⁄ãxt
 *
s
)

6122 
p
, 
t
;

6123 
p
 = (Ë
	`°bi__gë8
(
s
);

6124 
t
 = (Ë
	`°bi__gë8
(
s
);

6125 i‡(
p
 !'P' || (
t
 != '5' &&Å != '6')) {

6126 
	`°bi__ªwöd
–
s
 );

6130 
	}
}

6132 
°bi_uc
 *
	$°bi__≤m_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

6134 
°bi_uc
 *
out
;

6135 i‡(!
	`°bi__≤m_öfo
(
s
, (*)&s->
img_x
, (*)&s->
img_y
, (*)&s->
img_n
))

6137 *
x
 = 
s
->
img_x
;

6138 *
y
 = 
s
->
img_y
;

6139 *
comp
 = 
s
->
img_n
;

6141 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
s
->
img_n
 * s->
img_x
 * s->
img_y
);

6142 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

6143 
	`°bi__gën
(
s
, 
out
, s->
img_n
 * s->
img_x
 * s->
img_y
);

6145 i‡(
ªq_comp
 &&Ñeq_com∞!
s
->
img_n
) {

6146 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 
s
->
img_n
, 
ªq_comp
, s->
img_x
, s->
img_y
);

6147 i‡(
out
 =
NULL
)  out;

6149  
out
;

6150 
	}
}

6152 
	$°bi__≤m_is•a˚
(
c
)

6154  
c
 == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';

6155 
	}
}

6157 
	$°bi__≤m_skù_whôe•a˚
(
°bi__c⁄ãxt
 *
s
, *
c
)

6159 !
	`°bi__©_eof
(
s
Ë&& 
	`°bi__≤m_is•a˚
(*
c
))

6160 *
c
 = (Ë
	`°bi__gë8
(
s
);

6161 
	}
}

6163 
	$°bi__≤m_isdigô
(
c
)

6165  
c
 >= '0' && c <= '9';

6166 
	}
}

6168 
	$°bi__≤m_gëöãgî
(
°bi__c⁄ãxt
 *
s
, *
c
)

6170 
vÆue
 = 0;

6172 !
	`°bi__©_eof
(
s
Ë&& 
	`°bi__≤m_isdigô
(*
c
)) {

6173 
vÆue
 = vÆue*10 + (*
c
 - '0');

6174 *
c
 = (Ë
	`°bi__gë8
(
s
);

6177  
vÆue
;

6178 
	}
}

6180 
	$°bi__≤m_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6182 
maxv
;

6183 
c
, 
p
, 
t
;

6185 
	`°bi__ªwöd
–
s
 );

6188 
p
 = (Ë
	`°bi__gë8
(
s
);

6189 
t
 = (Ë
	`°bi__gë8
(
s
);

6190 i‡(
p
 !'P' || (
t
 != '5' &&Å != '6')) {

6191 
	`°bi__ªwöd
–
s
 );

6195 *
comp
 = (
t
 == '6') ? 3 : 1;

6197 
c
 = (Ë
	`°bi__gë8
(
s
);

6198 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

6200 *
x
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

6201 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

6203 *
y
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

6204 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

6206 
maxv
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

6208 i‡(
maxv
 > 255)

6209  
	`°bi__îr
("max value > 255", "PPM imageÇot 8-bit");

6212 
	}
}

6215 
	$°bi__öfo_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6217 #i‚de‡
STBI_NO_JPEG


6218 i‡(
	`°bi__j≥g_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6221 #i‚de‡
STBI_NO_PNG


6222 i‡(
	`°bi__≤g_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6225 #i‚de‡
STBI_NO_GIF


6226 i‡(
	`°bi__gif_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6229 #i‚de‡
STBI_NO_BMP


6230 i‡(
	`°bi__bmp_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6233 #i‚de‡
STBI_NO_PSD


6234 i‡(
	`°bi__psd_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6237 #i‚de‡
STBI_NO_PIC


6238 i‡(
	`°bi__pic_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6241 #i‚de‡
STBI_NO_PNM


6242 i‡(
	`°bi__≤m_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6245 #i‚de‡
STBI_NO_HDR


6246 i‡(
	`°bi__hdr_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

6250 #i‚de‡
STBI_NO_TGA


6251 i‡(
	`°bi__tga_öfo
(
s
, 
x
, 
y
, 
comp
))

6254  
	`°bi__îr
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

6255 
	}
}

6257 #i‚de‡
STBI_NO_STDIO


6258 
STBIDEF
 
	$°bi_öfo
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
)

6260 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

6261 
ªsu…
;

6262 i‡(!
f
Ë 
	`°bi__îr
("can't fopen", "UnableÅo open file");

6263 
ªsu…
 = 
	`°bi_öfo_‰om_fûe
(
f
, 
x
, 
y
, 
comp
);

6264 
	`f˛o£
(
f
);

6265  
ªsu…
;

6266 
	}
}

6268 
STBIDEF
 
	$°bi_öfo_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
)

6270 
r
;

6271 
°bi__c⁄ãxt
 
s
;

6272 
pos
 = 
	`·ñl
(
f
);

6273 
	`°bi__°¨t_fûe
(&
s
, 
f
);

6274 
r
 = 
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

6275 
	`f£ek
(
f
,
pos
,
SEEK_SET
);

6276  
r
;

6277 
	}
}

6280 
STBIDEF
 
	$°bi_öfo_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
)

6282 
°bi__c⁄ãxt
 
s
;

6283 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

6284  
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

6285 
	}
}

6287 
STBIDEF
 
	$°bi_öfo_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
c
, *
u£r
, *
x
, *
y
, *
comp
)

6289 
°bi__c⁄ãxt
 
s
;

6290 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
c
, 
u£r
);

6291  
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

6292 
	}
}

	@src/stb_image_write.h

80 #i‚de‡
INCLUDE_STB_IMAGE_WRITE_H


81 
	#INCLUDE_STB_IMAGE_WRITE_H


	)

83 #ifde‡
__˝lu•lus


87 
°bi_wrôe_≤g
(c⁄° *
fûíame
, 
w
, 
h
, 
comp
, c⁄° *
d©a
, 
°ride_ö_byãs
);

88 
°bi_wrôe_bmp
(c⁄° *
fûíame
, 
w
, 
h
, 
comp
, c⁄° *
d©a
);

89 
°bi_wrôe_tga
(c⁄° *
fûíame
, 
w
, 
h
, 
comp
, c⁄° *
d©a
);

90 
°bi_wrôe_hdr
(c⁄° *
fûíame
, 
w
, 
h
, 
comp
, c⁄° *
d©a
);

92 #ifde‡
__˝lu•lus


98 #ifde‡
STB_IMAGE_WRITE_IMPLEMENTATION


100 
	~<°d¨g.h
>

101 
	~<°dlib.h
>

102 
	~<°dio.h
>

103 
	~<°rög.h
>

104 
	~<m©h.h
>

106 #i‡
deföed
(
STBIW_MALLOC
Ë&& deföed(
STBIW_FREE
Ë&& deföed(
STBIW_REALLOC
)

108 #ñi‡!
deföed
(
STBIW_MALLOC
Ë&& !deföed(
STBIW_FREE
Ë&& !deföed(
STBIW_REALLOC
)

114 #i‚de‡
STBIW_MALLOC


115 
	#STBIW_MALLOC
(
sz
Ë
	`mÆloc
(sz)

	)

116 
	#STBIW_REALLOC
(
p
,
sz
Ë
	`ªÆloc
’,sz)

	)

117 
	#STBIW_FREE
(
p
Ë
	`‰ì
’)

	)

119 #i‚de‡
STBIW_MEMMOVE


120 
	#STBIW_MEMMOVE
(
a
,
b
,
sz
Ë
	`memmove
◊,b,sz)

	)

124 #i‚de‡
STBIW_ASSERT


125 
	~<as£π.h
>

126 
	#STBIW_ASSERT
(
x
Ë
	`as£π
(x)

	)

129 
	t°biw_uöt32
;

130 
	t°b_image_wrôe_ã°
[(
°biw_uöt32
)==4 ? 1 : -1];

132 
	$wrôefv
(
FILE
 *
f
, c⁄° *
fmt
, 
va_li°
 
v
)

134 *
fmt
) {

135 *
fmt
++) {

137 '1': { 
x
 = (Ë
	`va_¨g
(
v
, ); 
	`Âutc
(x,
f
); ; }

138 '2': { 
x
 = 
	`va_¨g
(
v
,); 
b
[2];

139 
b
[0] = (Ë
x
; b[1] = () (x>>8);

140 
	`fwrôe
(
b
,2,1,
f
); ; }

141 '4': { 
°biw_uöt32
 
x
 = 
	`va_¨g
(
v
,); 
b
[4];

142 
b
[0]=()
x
; b[1]=()(x>>8);

143 
b
[2]=()(
x
>>16); b[3]=()(x>>24);

144 
	`fwrôe
(
b
,4,1,
f
); ; }

146 
	`STBIW_ASSERT
(0);

150 
	}
}

152 
	$wrôe3
(
FILE
 *
f
, 
a
, 
b
, 
c
)

154 
¨r
[3];

155 
¨r
[0] = 
a
,áº[1] = 
b
,áº[2] = 
c
;

156 
	`fwrôe
(
¨r
, 3, 1, 
f
);

157 
	}
}

159 
	$wrôe_pixñs
(
FILE
 *
f
, 
rgb_dú
, 
vdú
, 
x
, 
y
, 
comp
, *
d©a
, 
wrôe_Æpha
, 
sˇ∆öe_∑d
, 
ex∑nd_m⁄o
)

161 
bg
[3] = { 255, 0, 255}, 
px
[3];

162 
°biw_uöt32
 
zîo
 = 0;

163 
i
,
j
,
k
, 
j_íd
;

165 i‡(
y
 <= 0)

168 i‡(
vdú
 < 0)

169 
j_íd
 = -1, 
j
 = 
y
-1;

171 
j_íd
 = 
y
, 
j
 = 0;

173 ; 
j
 !
j_íd
; j +
vdú
) {

174 
i
=0; i < 
x
; ++i) {

175 *
d
 = (*Ë
d©a
 + (
j
*
x
+
i
)*
comp
;

176 i‡(
wrôe_Æpha
 < 0)

177 
	`fwrôe
(&
d
[
comp
-1], 1, 1, 
f
);

178 
comp
) {

179 1: 
	`fwrôe
(
d
, 1, 1, 
f
);

181 2: i‡(
ex∑nd_m⁄o
)

182 
	`wrôe3
(
f
, 
d
[0],d[0],d[0]);

184 
	`fwrôe
(
d
, 1, 1, 
f
);

187 i‡(!
wrôe_Æpha
) {

189 
k
=0; k < 3; ++k)

190 
px
[
k
] = 
bg
[k] + ((
d
[k] - bg[k]) * d[3])/255;

191 
	`wrôe3
(
f
, 
px
[1-
rgb_dú
],px[1],px[1+rgb_dir]);

196 
	`wrôe3
(
f
, 
d
[1-
rgb_dú
],d[1],d[1+rgb_dir]);

199 i‡(
wrôe_Æpha
 > 0)

200 
	`fwrôe
(&
d
[
comp
-1], 1, 1, 
f
);

202 
	`fwrôe
(&
zîo
,
sˇ∆öe_∑d
,1,
f
);

204 
	}
}

206 
	$outfûe
(c⁄° *
fûíame
, 
rgb_dú
, 
vdú
, 
x
, 
y
, 
comp
, 
ex∑nd_m⁄o
, *
d©a
, 
Æpha
, 
∑d
, c⁄° *
fmt
, ...)

208 
FILE
 *
f
;

209 i‡(
y
 < 0 || 
x
 < 0)  0;

210 
f
 = 
	`f›í
(
fûíame
, "wb");

211 i‡(
f
) {

212 
va_li°
 
v
;

213 
	`va_°¨t
(
v
, 
fmt
);

214 
	`wrôefv
(
f
, 
fmt
, 
v
);

215 
	`va_íd
(
v
);

216 
	`wrôe_pixñs
(
f
,
rgb_dú
,
vdú
,
x
,
y
,
comp
,
d©a
,
Æpha
,
∑d
,
ex∑nd_m⁄o
);

217 
	`f˛o£
(
f
);

219  
f
 !
NULL
;

220 
	}
}

222 
	$°bi_wrôe_bmp
(c⁄° *
fûíame
, 
x
, 
y
, 
comp
, c⁄° *
d©a
)

224 
∑d
 = (-
x
*3) & 3;

225  
	`outfûe
(
fûíame
,-1,-1,
x
,
y
,
comp
,1,(*Ë
d©a
,0,
∑d
,

227 'B', 'M', 14+40+(
x
*3+
∑d
)*
y
, 0,0, 14+40,

228 40, 
x
,
y
, 1,24, 0,0,0,0,0,0);

229 
	}
}

231 
	$°bi_wrôe_tga
(c⁄° *
fûíame
, 
x
, 
y
, 
comp
, c⁄° *
d©a
)

233 
has_Æpha
 = (
comp
 == 2 || comp == 4);

234 
cﬁ‹byãs
 = 
has_Æpha
 ? 
comp
-1 : comp;

235 
f‹m©
 = 
cﬁ‹byãs
 < 2 ? 3 : 2;

236  
	`outfûe
(
fûíame
, -1,-1, 
x
, 
y
, 
comp
, 0, (*Ë
d©a
, 
has_Æpha
, 0,

237 "111 221 2222 11", 0,0,
f‹m©
, 0,0,0, 0,0,
x
,
y
, (
cﬁ‹byãs
+
has_Æpha
)*8, has_alpha*8);

238 
	}
}

243 
	#°biw__max
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

245 
	$°biw__löór_to_rgbe
(*
rgbe
, *
löór
)

247 
exp⁄ít
;

248 
maxcomp
 = 
	`°biw__max
(
löór
[0], stbiw__max(linear[1],Üinear[2]));

250 i‡(
maxcomp
 < 1e-32) {

251 
rgbe
[0] =Ñgbe[1] =Ñgbe[2] =Ñgbe[3] = 0;

253 
n‹mÆize
 = (Ë
	`‰exp
(
maxcomp
, &
exp⁄ít
) * 256.0f/maxcomp;

255 
rgbe
[0] = ()(
löór
[0] * 
n‹mÆize
);

256 
rgbe
[1] = ()(
löór
[1] * 
n‹mÆize
);

257 
rgbe
[2] = ()(
löór
[2] * 
n‹mÆize
);

258 
rgbe
[3] = ()(
exp⁄ít
 + 128);

260 
	}
}

262 
	$°biw__wrôe_run_d©a
(
FILE
 *
f
, 
Àngth
, 
d©abyã
)

264 
Àngthbyã
 = (Ë(
Àngth
+128);

265 
	`STBIW_ASSERT
(
Àngth
+128 <= 255);

266 
	`fwrôe
(&
Àngthbyã
, 1, 1, 
f
);

267 
	`fwrôe
(&
d©abyã
, 1, 1, 
f
);

268 
	}
}

270 
	$°biw__wrôe_dump_d©a
(
FILE
 *
f
, 
Àngth
, *
d©a
)

272 
Àngthbyã
 = ()(
Àngth
 & 0xff);

273 
	`STBIW_ASSERT
(
Àngth
 <= 128);

274 
	`fwrôe
(&
Àngthbyã
, 1, 1, 
f
);

275 
	`fwrôe
(
d©a
, 
Àngth
, 1, 
f
);

276 
	}
}

278 
	$°biw__wrôe_hdr_sˇ∆öe
(
FILE
 *
f
, 
width
, 
comp
, *
s¸©ch
, c⁄° *
sˇ∆öe
)

280 
sˇ∆öehódî
[4] = { 2, 2, 0, 0 };

281 
rgbe
[4];

282 
löór
[3] = {0};

283 
x
;

285 
sˇ∆öehódî
[2] = (
width
&0xff00)>>8;

286 
sˇ∆öehódî
[3] = (
width
&0x00ff);

289 i‡(
width
 < 8 || width >= 32768) {

290 
x
=0; x < 
width
; x++) {

291 
comp
) {

293 3: 
löór
[2] = 
sˇ∆öe
[
x
*
comp
 + 2];

294 
löór
[1] = 
sˇ∆öe
[
x
*
comp
 + 1];

295 
löór
[0] = 
sˇ∆öe
[
x
*
comp
 + 0];

298 1: 
löór
[0] =Üöór[1] =Üöór[2] = 
sˇ∆öe
[
x
*
comp
 + 0];

301 
	`°biw__löór_to_rgbe
(
rgbe
, 
löór
);

302 
	`fwrôe
(
rgbe
, 4, 1, 
f
);

305 
c
,
r
;

307 
x
=0; x < 
width
; x++) {

308 
comp
) {

310 3: 
löór
[2] = 
sˇ∆öe
[
x
*
comp
 + 2];

311 
löór
[1] = 
sˇ∆öe
[
x
*
comp
 + 1];

312 
löór
[0] = 
sˇ∆öe
[
x
*
comp
 + 0];

315 1: 
löór
[0] =Üöór[1] =Üöór[2] = 
sˇ∆öe
[
x
*
comp
 + 0];

318 
	`°biw__löór_to_rgbe
(
rgbe
, 
löór
);

319 
s¸©ch
[
x
 + 
width
*0] = 
rgbe
[0];

320 
s¸©ch
[
x
 + 
width
*1] = 
rgbe
[1];

321 
s¸©ch
[
x
 + 
width
*2] = 
rgbe
[2];

322 
s¸©ch
[
x
 + 
width
*3] = 
rgbe
[3];

325 
	`fwrôe
(
sˇ∆öehódî
, 4, 1, 
f
);

328 
c
=0; c < 4; c++) {

329 *
comp
 = &
s¸©ch
[
width
*
c
];

331 
x
 = 0;

332 
x
 < 
width
) {

334 
r
 = 
x
;

335 
r
+2 < 
width
) {

336 i‡(
comp
[
r
] == comp[r+1] && comp[r] == comp[r+2])

338 ++
r
;

340 i‡(
r
+2 >
width
)

341 
r
 = 
width
;

343 
x
 < 
r
) {

344 
Àn
 = 
r
-
x
;

345 i‡(
Àn
 > 128)Üen = 128;

346 
	`°biw__wrôe_dump_d©a
(
f
, 
Àn
, &
comp
[
x
]);

347 
x
 +
Àn
;

350 i‡(
r
+2 < 
width
) {

352 
r
 < 
width
 && 
comp
[r] =comp[
x
])

353 ++
r
;

355 
x
 < 
r
) {

356 
Àn
 = 
r
-
x
;

357 i‡(
Àn
 > 127)Üen = 127;

358 
	`°biw__wrôe_run_d©a
(
f
, 
Àn
, 
comp
[
x
]);

359 
x
 +
Àn
;

365 
	}
}

367 
	$°bi_wrôe_hdr
(c⁄° *
fûíame
, 
x
, 
y
, 
comp
, c⁄° *
d©a
)

369 
i
;

370 
FILE
 *
f
;

371 i‡(
y
 <0 || 
x
 <0 || 
d©a
 =
NULL
)  0;

372 
f
 = 
	`f›í
(
fûíame
, "wb");

373 i‡(
f
) {

375 *
s¸©ch
 = (*Ë
	`STBIW_MALLOC
(
x
*4);

376 
	`Ârötf
(
f
, "#?RADIANCE\n# Written by stb_image_write.h\nFORMAT=32-bit_rle_rgbe\n" );

377 
	`Ârötf
(
f
, "EXPOSURE 1.0000000000000\n\n-Y %d +X %d\n" , 
y
, 
x
);

378 
i
=0; i < 
y
; i++)

379 
	`°biw__wrôe_hdr_sˇ∆öe
(
f
, 
x
, 
comp
, 
s¸©ch
, 
d©a
 + comp*
i
*x);

380 
	`STBIW_FREE
(
s¸©ch
);

381 
	`f˛o£
(
f
);

383  
f
 !
NULL
;

384 
	}
}

390 
	#°biw__sbøw
(
a
Ë((*Ë◊Ë- 2)

	)

391 
	#°biw__sbm
(
a
Ë
	`°biw__sbøw
◊)[0]

	)

392 
	#°biw__sbn
(
a
Ë
	`°biw__sbøw
◊)[1]

	)

394 
	#°biw__sb√edgrow
(
a
,
n
Ë(◊)==0 || 
	`°biw__sbn
◊)+¿>
	`°biw__sbm
◊))

	)

395 
	#°biw__sbmaybegrow
(
a
,
n
Ë(
	`°biw__sb√edgrow
◊,“)Ë? 
	`°biw__sbgrow
◊,nË: 0)

	)

396 
	#°biw__sbgrow
(
a
,
n
Ë
	`°biw__sbgrowf
((**Ë&◊), (n), (*◊)))

	)

398 
	#°biw__sbpush
(
a
, 
v
Ë(
	`°biw__sbmaybegrow
◊,1), (a)[
	`°biw__sbn
◊)++] = (v))

	)

399 
	#°biw__sbcou¡
(
a
Ë(◊Ë? 
	`°biw__sbn
◊Ë: 0)

	)

400 
	#°biw__sb‰ì
(
a
Ë(◊Ë? 
	`STBIW_FREE
(
	`°biw__sbøw
◊)),0 : 0)

	)

402 *
	$°biw__sbgrowf
(**
¨r
, 
ö¸emít
, 
ôemsize
)

404 
m
 = *
¨r
 ? 2*
	`°biw__sbm
(*¨r)+
ö¸emít
 : increment+1;

405 *
p
 = 
	`STBIW_REALLOC
(*
¨r
 ? 
	`°biw__sbøw
(*¨rË: 0, 
ôemsize
 * 
m
 + ()*2);

406 
	`STBIW_ASSERT
(
p
);

407 i‡(
p
) {

408 i‡(!*
¨r
Ë((*Ë
p
)[1] = 0;

409 *
¨r
 = (*Ë((*Ë
p
 + 2);

410 
	`°biw__sbm
(*
¨r
Ë
m
;

412  *
¨r
;

413 
	}
}

415 *
	$°biw__zlib_Êushf
(*
d©a
, *
bôbuf„r
, *
bôcou¡
)

417 *
bôcou¡
 >= 8) {

418 
	`°biw__sbpush
(
d©a
, (Ë*
bôbuf„r
);

419 *
bôbuf„r
 >>= 8;

420 *
bôcou¡
 -= 8;

422  
d©a
;

423 
	}
}

425 
	$°biw__zlib_bôªv
(
code
, 
codebôs
)

427 
ªs
=0;

428 
codebôs
--) {

429 
ªs
 = (ª†<< 1Ë| (
code
 & 1);

430 
code
 >>= 1;

432  
ªs
;

433 
	}
}

435 
	$°biw__zlib_cou¡m
(*
a
, *
b
, 
limô
)

437 
i
;

438 
i
=0; i < 
limô
 && i < 258; ++i)

439 i‡(
a
[
i
] !
b
[i]) ;

440  
i
;

441 
	}
}

443 
	$°biw__zhash
(*
d©a
)

445 
°biw_uöt32
 
hash
 = 
d©a
[0] + (data[1] << 8) + (data[2] << 16);

446 
hash
 ^= hash << 3;

447 
hash
 += hash >> 5;

448 
hash
 ^= hash << 4;

449 
hash
 += hash >> 17;

450 
hash
 ^= hash << 25;

451 
hash
 += hash >> 6;

452  
hash
;

453 
	}
}

455 
	#°biw__zlib_Êush
(Ë(
out
 = 
	`°biw__zlib_Êushf
(out, &
bôbuf
, &
bôcou¡
))

	)

456 
	#°biw__zlib_add
(
code
,
codebôs
) \

457 (
bôbuf
 |(
code
Ë<< 
bôcou¡
, bôcou¡ +(
codebôs
), 
	`°biw__zlib_Êush
())

	)

458 
	#°biw__zlib_hufÁ
(
b
,
c
Ë
	`°biw__zlib_add
(
	`°biw__zlib_bôªv
(b,c),c)

	)

460 
	#°biw__zlib_huff1
(
n
Ë
	`°biw__zlib_hufÁ
(0x30 + (n), 8)

	)

461 
	#°biw__zlib_huff2
(
n
Ë
	`°biw__zlib_hufÁ
(0x190 + (n)-144, 9)

	)

462 
	#°biw__zlib_huff3
(
n
Ë
	`°biw__zlib_hufÁ
(0 + (n)-256,7)

	)

463 
	#°biw__zlib_huff4
(
n
Ë
	`°biw__zlib_hufÁ
(0xc0 + (n)-280,8)

	)

464 
	#°biw__zlib_huff
(
n
Ë(“Ë<143 ? 
	`°biw__zlib_huff1
“Ë: (nË<255 ? 
	`°biw__zlib_huff2
“Ë: (nË<279 ? 
	`°biw__zlib_huff3
“Ë: 
	`°biw__zlib_huff4
“))

	)

465 
	#°biw__zlib_huffb
(
n
Ë(“Ë<143 ? 
	`°biw__zlib_huff1
“Ë: 
	`°biw__zlib_huff2
“))

	)

467 
	#°biw__ZHASH
 16384

	)

469 * 
	$°bi_zlib_com¥ess
(*
d©a
, 
d©a_Àn
, *
out_Àn
, 
quÆôy
)

471 
Àngthc
[] = { 3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258, 259 };

472 
Àngtheb
[]= { 0,0,0,0,0,0,0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 };

473 
di°c
[] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577, 32768 };

474 
di°eb
[] = { 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13 };

475 
bôbuf
=0;

476 
i
,
j
, 
bôcou¡
=0;

477 *
out
 = 
NULL
;

478 **
hash_èbÀ
[
°biw__ZHASH
];

479 i‡(
quÆôy
 < 5) quality = 5;

481 
	`°biw__sbpush
(
out
, 0x78);

482 
	`°biw__sbpush
(
out
, 0x5e);

483 
	`°biw__zlib_add
(1,1);

484 
	`°biw__zlib_add
(1,2);

486 
i
=0; i < 
°biw__ZHASH
; ++i)

487 
hash_èbÀ
[
i
] = 
NULL
;

489 
i
=0;

490 
i
 < 
d©a_Àn
-3) {

492 
h
 = 
	`°biw__zhash
(
d©a
+
i
)&(
°biw__ZHASH
-1), 
be°
=3;

493 *
be°loc
 = 0;

494 **
hli°
 = 
hash_èbÀ
[
h
];

495 
n
 = 
	`°biw__sbcou¡
(
hli°
);

496 
j
=0; j < 
n
; ++j) {

497 i‡(
hli°
[
j
]-
d©a
 > 
i
-32768) {

498 
d
 = 
	`°biw__zlib_cou¡m
(
hli°
[
j
], 
d©a
+
i
, 
d©a_Àn
-i);

499 i‡(
d
 >
be°
Ëbe°=d,
be°loc
=
hli°
[
j
];

503 i‡(
hash_èbÀ
[
h
] && 
	`°biw__sbn
(hash_èbÀ[h]Ë=2*
quÆôy
) {

504 
	`STBIW_MEMMOVE
(
hash_èbÀ
[
h
], hash_èbÀ[h]+
quÆôy
, (hash_table[h][0])*quality);

505 
	`°biw__sbn
(
hash_èbÀ
[
h
]Ë
quÆôy
;

507 
	`°biw__sbpush
(
hash_èbÀ
[
h
],
d©a
+
i
);

509 i‡(
be°loc
) {

511 
h
 = 
	`°biw__zhash
(
d©a
+
i
+1)&(
°biw__ZHASH
-1);

512 
hli°
 = 
hash_èbÀ
[
h
];

513 
n
 = 
	`°biw__sbcou¡
(
hli°
);

514 
j
=0; j < 
n
; ++j) {

515 i‡(
hli°
[
j
]-
d©a
 > 
i
-32767) {

516 
e
 = 
	`°biw__zlib_cou¡m
(
hli°
[
j
], 
d©a
+
i
+1, 
d©a_Àn
-i-1);

517 i‡(
e
 > 
be°
) {

518 
be°loc
 = 
NULL
;

525 i‡(
be°loc
) {

526 
d
 = (Ë(
d©a
+
i
 - 
be°loc
);

527 
	`STBIW_ASSERT
(
d
 <32767 && 
be°
 <= 258);

528 
j
=0; 
be°
 > 
Àngthc
[j+1]-1; ++j);

529 
	`°biw__zlib_huff
(
j
+257);

530 i‡(
Àngtheb
[
j
]Ë
	`°biw__zlib_add
(
be°
 - 
Àngthc
[j],Üengtheb[j]);

531 
j
=0; 
d
 > 
di°c
[j+1]-1; ++j);

532 
	`°biw__zlib_add
(
	`°biw__zlib_bôªv
(
j
,5),5);

533 i‡(
di°eb
[
j
]Ë
	`°biw__zlib_add
(
d
 - 
di°c
[j], disteb[j]);

534 
i
 +
be°
;

536 
	`°biw__zlib_huffb
(
d©a
[
i
]);

537 ++
i
;

541 ;
i
 < 
d©a_Àn
; ++i)

542 
	`°biw__zlib_huffb
(
d©a
[
i
]);

543 
	`°biw__zlib_huff
(256);

545 
bôcou¡
)

546 
	`°biw__zlib_add
(0,1);

548 
i
=0; i < 
°biw__ZHASH
; ++i)

549 (Ë
	`°biw__sb‰ì
(
hash_èbÀ
[
i
]);

553 
i
=0, 
s1
=1, 
s2
=0, 
blockÀn
 = 
d©a_Àn
 % 5552;

554 
j
=0;

555 
j
 < 
d©a_Àn
) {

556 
i
=0; i < 
blockÀn
; ++iË
s1
 +
d©a
[
j
+i], 
s2
 += s1;

557 
s1
 %65521, 
s2
 %= 65521;

558 
j
 +
blockÀn
;

559 
blockÀn
 = 5552;

561 
	`°biw__sbpush
(
out
, (Ë(
s2
 >> 8));

562 
	`°biw__sbpush
(
out
, (Ë
s2
);

563 
	`°biw__sbpush
(
out
, (Ë(
s1
 >> 8));

564 
	`°biw__sbpush
(
out
, (Ë
s1
);

566 *
out_Àn
 = 
	`°biw__sbn
(
out
);

568 
	`STBIW_MEMMOVE
(
	`°biw__sbøw
(
out
), out, *
out_Àn
);

569  (*Ë
	`°biw__sbøw
(
out
);

570 
	}
}

572 
	$°biw__¸c32
(*
buf„r
, 
Àn
)

574 
¸c_èbÀ
[256];

575 
¸c
 = ~0u;

576 
i
,
j
;

577 i‡(
¸c_èbÀ
[1] == 0)

578 
i
=0; i < 256; i++)

579 
¸c_èbÀ
[
i
]=i, 
j
=0; j < 8; ++j)

580 
¸c_èbÀ
[
i
] = (crc_table[i] >> 1) ^ (crc_table[i] & 1 ? 0xedb88320 : 0);

581 
i
=0; i < 
Àn
; ++i)

582 
¸c
 = (¸¯>> 8Ë^ 
¸c_èbÀ
[
buf„r
[
i
] ^ (crc & 0xff)];

583  ~
¸c
;

584 
	}
}

586 
	#°biw__w≤g4
(
o
,
a
,
b
,
c
,
d
Ë((o)[0]=()◊),(o)[1]=()(b),(o)[2]=()(c),(o)[3]=()(d),(o)+=4)

	)

587 
	#°biw__wp32
(
d©a
,
v
Ë
	`°biw__w≤g4
(d©a, (v)>>24,(v)>>16,(v)>>8,(v));

	)

588 
	#°biw__w±ag
(
d©a
,
s
Ë
	`°biw__w≤g4
(d©a, s[0],s[1],s[2],s[3])

	)

590 
	$°biw__wp¸c
(**
d©a
, 
Àn
)

592 
¸c
 = 
	`°biw__¸c32
(*
d©a
 - 
Àn
 - 4,Üen+4);

593 
	`°biw__wp32
(*
d©a
, 
¸c
);

594 
	}
}

596 
	$°biw__∑ëh
(
a
, 
b
, 
c
)

598 
p
 = 
a
 + 
b
 - 
c
, 
∑
 = 
	`abs
’-a), 
pb
 =ábs’-b), 
pc
 =ábs(p-c);

599 i‡(
∑
 <
pb
 &&Ö®<
pc
Ë (Ë
a
;

600 i‡(
pb
 <
pc
Ë (Ë
b
;

601  (Ë
c
;

602 
	}
}

604 *
	$°bi_wrôe_≤g_to_mem
(*
pixñs
, 
°ride_byãs
, 
x
, 
y
, 
n
, *
out_Àn
)

606 
˘y≥
[5] = { -1, 0, 4, 2, 6 };

607 
sig
[8] = { 137,80,78,71,13,10,26,10 };

608 *
out
,*
o
, *
fût
, *
zlib
;

609 sig√d *
löe_buf„r
;

610 
i
,
j
,
k
,
p
,
zÀn
;

612 i‡(
°ride_byãs
 == 0)

613 
°ride_byãs
 = 
x
 * 
n
;

615 
fût
 = (*Ë
	`STBIW_MALLOC
((
x
*
n
+1Ë* 
y
); if (!filt)  0;

616 
löe_buf„r
 = (sig√d *Ë
	`STBIW_MALLOC
(
x
 * 
n
); i‡(!löe_buf„rË{ 
	`STBIW_FREE
(
fût
);  0; }

617 
j
=0; j < 
y
; ++j) {

618 
m≠pög
[] = { 0,1,2,3,4 };

619 
fú°m≠
[] = { 0,1,0,5,6 };

620 *
mym≠
 = 
j
 ? 
m≠pög
 : 
fú°m≠
;

621 
be°
 = 0, 
be°vÆ
 = 0x7fffffff;

622 
p
=0;Ö < 2; ++p) {

623 
k

p
?
be°
:0; k < 5; ++k) {

624 
ty≥
 = 
mym≠
[
k
],
e°
=0;

625 *
z
 = 
pixñs
 + 
°ride_byãs
*
j
;

626 
i
=0; i < 
n
; ++i)

627 
ty≥
) {

628 0: 
löe_buf„r
[
i
] = 
z
[i]; ;

629 1: 
löe_buf„r
[
i
] = 
z
[i]; ;

630 2: 
löe_buf„r
[
i
] = 
z
[i] - z[i-
°ride_byãs
]; ;

631 3: 
löe_buf„r
[
i
] = 
z
[i] - (z[i-
°ride_byãs
]>>1); ;

632 4: 
löe_buf„r
[
i
] = (sig√d Ë(
z
[i] - 
	`°biw__∑ëh
(0,z[i-
°ride_byãs
],0)); ;

633 5: 
löe_buf„r
[
i
] = 
z
[i]; ;

634 6: 
löe_buf„r
[
i
] = 
z
[i]; ;

636 
i
=
n
; i < 
x
*n; ++i) {

637 
ty≥
) {

638 0: 
löe_buf„r
[
i
] = 
z
[i]; ;

639 1: 
löe_buf„r
[
i
] = 
z
[i] - z[i-
n
]; ;

640 2: 
löe_buf„r
[
i
] = 
z
[i] - z[i-
°ride_byãs
]; ;

641 3: 
löe_buf„r
[
i
] = 
z
[i] - ((z[i-
n
] + z[i-
°ride_byãs
])>>1); ;

642 4: 
löe_buf„r
[
i
] = 
z
[i] - 
	`°biw__∑ëh
(z[i-
n
], z[i-
°ride_byãs
], z[i-stride_bytes-n]); ;

643 5: 
löe_buf„r
[
i
] = 
z
[i] - (z[i-
n
]>>1); ;

644 6: 
löe_buf„r
[
i
] = 
z
[i] - 
	`°biw__∑ëh
(z[i-
n
], 0,0); ;

647 i‡(
p
) ;

648 
i
=0; i < 
x
*
n
; ++i)

649 
e°
 +
	`abs
((sig√d Ë
löe_buf„r
[
i
]);

650 i‡(
e°
 < 
be°vÆ
Ë{ be°vÆ =É°; 
be°
 = 
k
; }

654 
fût
[
j
*(
x
*
n
+1)] = (Ë
be°
;

655 
	`STBIW_MEMMOVE
(
fût
+
j
*(
x
*
n
+1)+1, 
löe_buf„r
, x*n);

657 
	`STBIW_FREE
(
löe_buf„r
);

658 
zlib
 = 
	`°bi_zlib_com¥ess
(
fût
, 
y
*–
x
*
n
+1), &
zÀn
, 8);

659 
	`STBIW_FREE
(
fût
);

660 i‡(!
zlib
)  0;

663 
out
 = (*Ë
	`STBIW_MALLOC
(8 + 12+13 + 12+
zÀn
 + 12);

664 i‡(!
out
)  0;

665 *
out_Àn
 = 8 + 12+13 + 12+
zÀn
 + 12;

667 
o
=
out
;

668 
	`STBIW_MEMMOVE
(
o
,
sig
,8); o+= 8;

669 
	`°biw__wp32
(
o
, 13);

670 
	`°biw__w±ag
(
o
, "IHDR");

671 
	`°biw__wp32
(
o
, 
x
);

672 
	`°biw__wp32
(
o
, 
y
);

673 *
o
++ = 8;

674 *
o
++ = (Ë
˘y≥
[
n
];

675 *
o
++ = 0;

676 *
o
++ = 0;

677 *
o
++ = 0;

678 
	`°biw__wp¸c
(&
o
,13);

680 
	`°biw__wp32
(
o
, 
zÀn
);

681 
	`°biw__w±ag
(
o
, "IDAT");

682 
	`STBIW_MEMMOVE
(
o
, 
zlib
, 
zÀn
);

683 
o
 +
zÀn
;

684 
	`STBIW_FREE
(
zlib
);

685 
	`°biw__wp¸c
(&
o
, 
zÀn
);

687 
	`°biw__wp32
(
o
,0);

688 
	`°biw__w±ag
(
o
, "IEND");

689 
	`°biw__wp¸c
(&
o
,0);

691 
	`STBIW_ASSERT
(
o
 =
out
 + *
out_Àn
);

693  
out
;

694 
	}
}

696 
	$°bi_wrôe_≤g
(c⁄° *
fûíame
, 
x
, 
y
, 
comp
, c⁄° *
d©a
, 
°ride_byãs
)

698 
FILE
 *
f
;

699 
Àn
;

700 *
≤g
 = 
	`°bi_wrôe_≤g_to_mem
((*Ë
d©a
, 
°ride_byãs
, 
x
, 
y
, 
comp
, &
Àn
);

701 i‡(!
≤g
)  0;

702 
f
 = 
	`f›í
(
fûíame
, "wb");

703 i‡(!
f
Ë{ 
	`STBIW_FREE
(
≤g
);  0; }

704 
	`fwrôe
(
≤g
, 1, 
Àn
, 
f
);

705 
	`f˛o£
(
f
);

706 
	`STBIW_FREE
(
≤g
);

708 
	}
}

	@src/tree.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"åì.h
"

4 
	~"utûs.h
"

5 
	~"d©a.h
"

7 
	$ch™ge_Àaves
(
åì
 *
t
, *
Àaf_li°
)

9 
li°
 *
Œi°
 = 
	`gë_∑ths
(
Àaf_li°
);

10 **
Àaves
 = (**)
	`li°_to_¨øy
(
Œi°
);

11 
n
 = 
Œi°
->
size
;

12 
i
,
j
;

13 
found
 = 0;

14 
i
 = 0; i < 
t
->
n
; ++i){

15 
t
->
Àaf
[
i
] = 0;

16 
j
 = 0; j < 
n
; ++j){

17 i‡(0==
	`°rcmp
(
t
->
«me
[
i
], 
Àaves
[
j
])){

18 
t
->
Àaf
[
i
] = 1;

19 ++
found
;

24 
	`Ârötf
(
°dîr
, "Found %dÜóves.\n", 
found
);

25 
	}
}

27 
	$gë_hõørchy_¥obabûôy
(*
x
, 
åì
 *
hõr
, 
c
, 
°ride
)

29 
p
 = 1;

30 
c
 >= 0){

31 
p
 =Ö * 
x
[
c
*
°ride
];

32 
c
 = 
hõr
->
∑ª¡
[c];

34  
p
;

35 
	}
}

37 
	$hõørchy_¥edi˘i⁄s
(*
¥edi˘i⁄s
, 
n
, 
åì
 *
hõr
, 
⁄ly_Àaves
, 
°ride
)

39 
j
;

40 
j
 = 0; j < 
n
; ++j){

41 
∑ª¡
 = 
hõr
->∑ª¡[
j
];

42 if(
∑ª¡
 >= 0){

43 
¥edi˘i⁄s
[
j
*
°ride
] *¥edi˘i⁄s[
∑ª¡
*stride];

46 if(
⁄ly_Àaves
){

47 
j
 = 0; j < 
n
; ++j){

48 if(!
hõr
->
Àaf
[
j
]Ë
¥edi˘i⁄s
[j*
°ride
] = 0;

51 
	}
}

53 
	$hõørchy_t›_¥edi˘i⁄
(*
¥edi˘i⁄s
, 
åì
 *
hõr
, 
thªsh
, 
°ride
)

55 
p
 = 1;

56 
group
 = 0;

57 
i
;

59 
max
 = 0;

60 
max_i
 = 0;

62 
i
 = 0; i < 
hõr
->
group_size
[
group
]; ++i){

63 
ödex
 = 
i
 + 
hõr
->
group_off£t
[
group
];

64 
vÆ
 = 
¥edi˘i⁄s
[(
i
 + 
hõr
->
group_off£t
[
group
])*
°ride
];

65 if(
vÆ
 > 
max
){

66 
max_i
 = 
ödex
;

67 
max
 = 
vÆ
;

70 if(
p
*
max
 > 
thªsh
){

71 
p
 =Ö*
max
;

72 
group
 = 
hõr
->
chûd
[
max_i
];

73 if(
hõr
->
chûd
[
max_i
] < 0)  max_i;

75  
hõr
->
∑ª¡
[hõr->
group_off£t
[
group
]];

79 
	}
}

81 
åì
 *
	$ªad_åì
(*
fûíame
)

83 
åì
 
t
 = {0};

84 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "r");

86 *
löe
;

87 
œ°_∑ª¡
 = -1;

88 
group_size
 = 0;

89 
groups
 = 0;

90 
n
 = 0;

91 (
löe
=
	`fgël
(
Â
)) != 0){

92 *
id
 = 
	`ˇŒoc
(256, ());

93 
∑ª¡
 = -1;

94 
	`ssˇnf
(
löe
, "%†%d", 
id
, &
∑ª¡
);

95 
t
.
∑ª¡
 = 
	`ªÆloc
—.∑ª¡, (
n
+1)*());

96 
t
.
∑ª¡
[
n
] =Öarent;

98 
t
.
chûd
 = 
	`ªÆloc
—.chûd, (
n
+1)*());

99 
t
.
chûd
[
n
] = -1;

101 
t
.
«me
 = 
	`ªÆloc
—.«me, (
n
+1)*(*));

102 
t
.
«me
[
n
] = 
id
;

103 if(
∑ª¡
 !
œ°_∑ª¡
){

104 ++
groups
;

105 
t
.
group_off£t
 = 
	`ªÆloc
—.group_off£t, 
groups
 * ());

106 
t
.
group_off£t
[
groups
 - 1] = 
n
 - 
group_size
;

107 
t
.
group_size
 = 
	`ªÆloc
—.group_size, 
groups
 * ());

108 
t
.
group_size
[
groups
 - 1] = group_size;

109 
group_size
 = 0;

110 
œ°_∑ª¡
 = 
∑ª¡
;

112 
t
.
group
 = 
	`ªÆloc
—.group, (
n
+1)*());

113 
t
.
group
[
n
] = 
groups
;

114 i‡(
∑ª¡
 >= 0) {

115 
t
.
chûd
[
∑ª¡
] = 
groups
;

117 ++
n
;

118 ++
group_size
;

120 ++
groups
;

121 
t
.
group_off£t
 = 
	`ªÆloc
—.group_off£t, 
groups
 * ());

122 
t
.
group_off£t
[
groups
 - 1] = 
n
 - 
group_size
;

123 
t
.
group_size
 = 
	`ªÆloc
—.group_size, 
groups
 * ());

124 
t
.
group_size
[
groups
 - 1] = group_size;

125 
t
.
n
 =Ç;

126 
t
.
groups
 = groups;

127 
t
.
Àaf
 = 
	`ˇŒoc
(
n
, ());

128 
i
;

129 
i
 = 0; i < 
n
; ++iË
t
.
Àaf
[i] = 1;

130 
i
 = 0; i < 
n
; ++iËif(
t
.
∑ª¡
[i] >0Ët.
Àaf
[t.parent[i]] = 0;

132 
	`f˛o£
(
Â
);

133 
åì
 *
åì_±r
 = 
	`ˇŒoc
(1, (tree));

134 *
åì_±r
 = 
t
;

136  
åì_±r
;

137 
	}
}

	@src/tree.h

1 #i‚de‡
TREE_H


2 
	#TREE_H


	)

3 
	~"d¨k√t.h
"

5 
åì
 *
ªad_åì
(*
fûíame
);

6 
hõørchy_t›_¥edi˘i⁄
(*
¥edi˘i⁄s
, 
åì
 *
hõr
, 
thªsh
, 
°ride
);

7 
gë_hõørchy_¥obabûôy
(*
x
, 
åì
 *
hõr
, 
c
, 
°ride
);

	@src/utils.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

5 
	~<as£π.h
>

6 
	~<uni°d.h
>

7 
	~<Êﬂt.h
>

8 
	~<limôs.h
>

9 
	~<time.h
>

11 
	~"utûs.h
"

13 
	$wh©_time_is_ô_now
()

15 
time•ec
 
now
;

16 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
now
);

17  
now
.
tv_£c
 +Çow.
tv_n£c
*1e-9;

18 
	}
}

20 *
	$ªad_öéi°
(*
gpu_li°
, *
ngpus
, 
d
)

22 *
gpus
 = 0;

23 if(
gpu_li°
){

24 
Àn
 = 
	`°æí
(
gpu_li°
);

25 *
ngpus
 = 1;

26 
i
;

27 
i
 = 0; i < 
Àn
; ++i){

28 i‡(
gpu_li°
[
i
] =','Ë++*
ngpus
;

30 
gpus
 = 
	`ˇŒoc
(*
ngpus
, ());

31 
i
 = 0; i < *
ngpus
; ++i){

32 
gpus
[
i
] = 
	`©oi
(
gpu_li°
);

33 
gpu_li°
 = 
	`°rchr
(gpu_list, ',')+1;

36 
gpus
 = 
	`ˇŒoc
(1, ());

37 *
gpus
 = 
d
;

38 *
ngpus
 = 1;

40  
gpus
;

41 
	}
}

43 *
	$ªad_m≠
(*
fûíame
)

45 
n
 = 0;

46 *
m≠
 = 0;

47 *
°r
;

48 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

49 if(!
fûe
Ë
	`fûe_îr‹
(
fûíame
);

50 (
°r
=
	`fgël
(
fûe
))){

51 ++
n
;

52 
m≠
 = 
	`ªÆloc
(m≠, 
n
*());

53 
m≠
[
n
-1] = 
	`©oi
(
°r
);

55  
m≠
;

56 
	}
}

58 
	$s‹è_shufÊe
(*
¨r
, 
size_t
 
n
, size_à
size
, size_à
£˘i⁄s
)

60 
size_t
 
i
;

61 
i
 = 0; i < 
£˘i⁄s
; ++i){

62 
size_t
 
°¨t
 = 
n
*
i
/
£˘i⁄s
;

63 
size_t
 
íd
 = 
n
*(
i
+1)/
£˘i⁄s
;

64 
size_t
 
num
 = 
íd
-
°¨t
;

65 
	`shufÊe
(
¨r
+(
°¨t
*
size
), 
num
, size);

67 
	}
}

69 
	$shufÊe
(*
¨r
, 
size_t
 
n
, size_à
size
)

71 
size_t
 
i
;

72 *
swp
 = 
	`ˇŒoc
(1, 
size
);

73 
i
 = 0; i < 
n
-1; ++i){

74 
size_t
 
j
 = 
i
 + 
	`ønd
()/(
RAND_MAX
 / (
n
-i)+1);

75 
	`mem˝y
(
swp
, 
¨r
+(
j
*
size
), size);

76 
	`mem˝y
(
¨r
+(
j
*
size
),áº+(
i
*size), size);

77 
	`mem˝y
(
¨r
+(
i
*
size
), 
swp
, size);

79 
	}
}

81 
	$dñ_¨g
(
¨gc
, **
¨gv
, 
ödex
)

83 
i
;

84 
i
 = 
ödex
; i < 
¨gc
-1; ++iË
¨gv
[i] =árgv[i+1];

85 
¨gv
[
i
] = 0;

86 
	}
}

88 
	$föd_¨g
(
¨gc
, * 
¨gv
[], *
¨g
)

90 
i
;

91 
i
 = 0; i < 
¨gc
; ++i) {

92 if(!
¨gv
[
i
]) ;

93 if(0==
	`°rcmp
(
¨gv
[
i
], 
¨g
)) {

94 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

99 
	}
}

101 
	$föd_öt_¨g
(
¨gc
, **
¨gv
, *
¨g
, 
def
)

103 
i
;

104 
i
 = 0; i < 
¨gc
-1; ++i){

105 if(!
¨gv
[
i
]) ;

106 if(0==
	`°rcmp
(
¨gv
[
i
], 
¨g
)){

107 
def
 = 
	`©oi
(
¨gv
[
i
+1]);

108 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

109 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

113  
def
;

114 
	}
}

116 
	$föd_Êﬂt_¨g
(
¨gc
, **
¨gv
, *
¨g
, 
def
)

118 
i
;

119 
i
 = 0; i < 
¨gc
-1; ++i){

120 if(!
¨gv
[
i
]) ;

121 if(0==
	`°rcmp
(
¨gv
[
i
], 
¨g
)){

122 
def
 = 
	`©of
(
¨gv
[
i
+1]);

123 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

124 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

128  
def
;

129 
	}
}

131 *
	$föd_ch¨_¨g
(
¨gc
, **
¨gv
, *
¨g
, *
def
)

133 
i
;

134 
i
 = 0; i < 
¨gc
-1; ++i){

135 if(!
¨gv
[
i
]) ;

136 if(0==
	`°rcmp
(
¨gv
[
i
], 
¨g
)){

137 
def
 = 
¨gv
[
i
+1];

138 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

139 
	`dñ_¨g
(
¨gc
, 
¨gv
, 
i
);

143  
def
;

144 
	}
}

147 *
	$ba£cfg
(*
cfgfûe
)

149 *
c
 = 
cfgfûe
;

150 *
√xt
;

151 (
√xt
 = 
	`°rchr
(
c
, '/')))

153 
c
 = 
√xt
+1;

155 
c
 = 
	`c›y_°rög
(c);

156 
√xt
 = 
	`°rchr
(
c
, '.');

157 i‡(
√xt
) *next = 0;

158  
c
;

159 
	}
}

161 
	$Æph™um_to_öt
(
c
)

163  (
c
 < 58) ? c - 48 : c-87;

164 
	}
}

165 
	$öt_to_Æph™um
(
i
)

167 i‡(
i
 == 36)  '.';

168  (
i
 < 10) ? i + 48 : i + 87;

169 
	}
}

171 
	$pm
(
M
, 
N
, *
A
)

173 
i
,
j
;

174 
i
 =0 ; i < 
M
; ++i){

175 
	`¥ötf
("%d ", 
i
+1);

176 
j
 = 0; j < 
N
; ++j){

177 
	`¥ötf
("%2.4f, ", 
A
[
i
*
N
+
j
]);

179 
	`¥ötf
("\n");

181 
	`¥ötf
("\n");

182 
	}
}

184 
	$föd_ª∂a˚
(*
°r
, *
‹ig
, *
ªp
, *
ouçut
)

186 
buf„r
[4096] = {0};

187 *
p
;

189 
	`•rötf
(
buf„r
, "%s", 
°r
);

190 if(!(
p
 = 
	`°r°r
(
buf„r
, 
‹ig
))){

191 
	`•rötf
(
ouçut
, "%s", 
°r
);

195 *
p
 = '\0';

197 
	`•rötf
(
ouçut
, "%s%s%s", 
buf„r
, 
ªp
, 
p
+
	`°æí
(
‹ig
));

198 
	}
}

200 
	$£c
(
˛ock_t
 
˛ocks
)

202  ()
˛ocks
/
CLOCKS_PER_SEC
;

203 
	}
}

205 
	$t›_k
(*
a
, 
n
, 
k
, *
ödex
)

207 
i
,
j
;

208 
j
 = 0; j < 
k
; ++jË
ödex
[j] = -1;

209 
i
 = 0; i < 
n
; ++i){

210 
cuº
 = 
i
;

211 
j
 = 0; j < 
k
; ++j){

212 if((
ödex
[
j
] < 0Ë|| 
a
[
cuº
] >á[index[j]]){

213 
sw≠
 = 
cuº
;

214 
cuº
 = 
ödex
[
j
];

215 
ödex
[
j
] = 
sw≠
;

219 
	}
}

221 
	$îr‹
(c⁄° *
s
)

223 
	`≥º‹
(
s
);

224 
	`as£π
(0);

225 
	`exô
(-1);

226 
	}
}

228 
	$mÆloc_îr‹
()

230 
	`Ârötf
(
°dîr
, "MallocÉrror\n");

231 
	`exô
(-1);

232 
	}
}

234 
	$fûe_îr‹
(*
s
)

236 
	`Ârötf
(
°dîr
, "Couldn'à›í fûe: %s\n", 
s
);

237 
	`exô
(0);

238 
	}
}

240 
li°
 *
	$•lô_°r
(*
s
, 
dñim
)

242 
size_t
 
i
;

243 
size_t
 
Àn
 = 
	`°æí
(
s
);

244 
li°
 *
l
 = 
	`make_li°
();

245 
	`li°_ö£π
(
l
, 
s
);

246 
i
 = 0; i < 
Àn
; ++i){

247 if(
s
[
i
] =
dñim
){

248 
s
[
i
] = '\0';

249 
	`li°_ö£π
(
l
, &(
s
[
i
+1]));

252  
l
;

253 
	}
}

255 
	$°rù
(*
s
)

257 
size_t
 
i
;

258 
size_t
 
Àn
 = 
	`°æí
(
s
);

259 
size_t
 
off£t
 = 0;

260 
i
 = 0; i < 
Àn
; ++i){

261 
c
 = 
s
[
i
];

262 if(
c
==' '||c=='\t'||c=='\n'Ë++
off£t
;

263 
s
[
i
-
off£t
] = 
c
;

265 
s
[
Àn
-
off£t
] = '\0';

266 
	}
}

268 
	$°rù_ch¨
(*
s
, 
bad
)

270 
size_t
 
i
;

271 
size_t
 
Àn
 = 
	`°æí
(
s
);

272 
size_t
 
off£t
 = 0;

273 
i
 = 0; i < 
Àn
; ++i){

274 
c
 = 
s
[
i
];

275 if(
c
==
bad
Ë++
off£t
;

276 
s
[
i
-
off£t
] = 
c
;

278 
s
[
Àn
-
off£t
] = '\0';

279 
	}
}

281 
	$‰ì_±rs
(**
±rs
, 
n
)

283 
i
;

284 
i
 = 0; i < 
n
; ++iË
	`‰ì
(
±rs
[i]);

285 
	`‰ì
(
±rs
);

286 
	}
}

288 *
	$fgël
(
FILE
 *
Â
)

290 if(
	`„of
(
Â
))  0;

291 
size_t
 
size
 = 512;

292 *
löe
 = 
	`mÆloc
(
size
*());

293 if(!
	`fgës
(
löe
, 
size
, 
Â
)){

294 
	`‰ì
(
löe
);

298 
size_t
 
cuº
 = 
	`°æí
(
löe
);

300 (
löe
[
cuº
-1] !'\n'Ë&& !
	`„of
(
Â
)){

301 if(
cuº
 =
size
-1){

302 
size
 *= 2;

303 
löe
 = 
	`ªÆloc
÷öe, 
size
*());

304 if(!
löe
) {

305 
	`¥ötf
("%ld\n", 
size
);

306 
	`mÆloc_îr‹
();

309 
size_t
 
ªadsize
 = 
size
-
cuº
;

310 if(
ªadsize
 > 
INT_MAX
)Ñeadsize = INT_MAX-1;

311 
	`fgës
(&
löe
[
cuº
], 
ªadsize
, 
Â
);

312 
cuº
 = 
	`°æí
(
löe
);

314 if(
löe
[
cuº
-1] == '\n')Üine[curr-1] = '\0';

316  
löe
;

317 
	}
}

319 
	$ªad_öt
(
fd
)

321 
n
 = 0;

322 
√xt
 = 
	`ªad
(
fd
, &
n
, ());

323 if(
√xt
 <= 0)  -1;

324  
n
;

325 
	}
}

327 
	$wrôe_öt
(
fd
, 
n
)

329 
√xt
 = 
	`wrôe
(
fd
, &
n
, ());

330 if(
√xt
 <0Ë
	`îr‹
("read failed");

331 
	}
}

333 
	$ªad_Æl_Áû
(
fd
, *
buf„r
, 
size_t
 
byãs
)

335 
size_t
 
n
 = 0;

336 
n
 < 
byãs
){

337 
√xt
 = 
	`ªad
(
fd
, 
buf„r
 + 
n
, 
byãs
-n);

338 if(
√xt
 <= 0)  1;

339 
n
 +
√xt
;

342 
	}
}

344 
	$wrôe_Æl_Áû
(
fd
, *
buf„r
, 
size_t
 
byãs
)

346 
size_t
 
n
 = 0;

347 
n
 < 
byãs
){

348 
size_t
 
√xt
 = 
	`wrôe
(
fd
, 
buf„r
 + 
n
, 
byãs
-n);

349 if(
√xt
 <= 0)  1;

350 
n
 +
√xt
;

353 
	}
}

355 
	$ªad_Æl
(
fd
, *
buf„r
, 
size_t
 
byãs
)

357 
size_t
 
n
 = 0;

358 
n
 < 
byãs
){

359 
√xt
 = 
	`ªad
(
fd
, 
buf„r
 + 
n
, 
byãs
-n);

360 if(
√xt
 <0Ë
	`îr‹
("read failed");

361 
n
 +
√xt
;

363 
	}
}

365 
	$wrôe_Æl
(
fd
, *
buf„r
, 
size_t
 
byãs
)

367 
size_t
 
n
 = 0;

368 
n
 < 
byãs
){

369 
size_t
 
√xt
 = 
	`wrôe
(
fd
, 
buf„r
 + 
n
, 
byãs
-n);

370 if(
√xt
 <0Ë
	`îr‹
("write failed");

371 
n
 +
√xt
;

373 
	}
}

376 *
	$c›y_°rög
(*
s
)

378 *
c›y
 = 
	`mÆloc
(
	`°æí
(
s
)+1);

379 
	`°∫˝y
(
c›y
, 
s
, 
	`°æí
(s)+1);

380  
c›y
;

381 
	}
}

383 
li°
 *
	$∑r£_csv_löe
(*
löe
)

385 
li°
 *
l
 = 
	`make_li°
();

386 *
c
, *
p
;

387 
ö
 = 0;

388 
c
 = 
löe
, 
p
 =Üine; *c != '\0'; ++c){

389 if(*
c
 ='"'Ë
ö
 = !in;

390 if(*
c
 =',' && !
ö
){

391 *
c
 = '\0';

392 
	`li°_ö£π
(
l
, 
	`c›y_°rög
(
p
));

393 
p
 = 
c
+1;

396 
	`li°_ö£π
(
l
, 
	`c›y_°rög
(
p
));

397  
l
;

398 
	}
}

400 
	$cou¡_fõlds
(*
löe
)

402 
cou¡
 = 0;

403 
d⁄e
 = 0;

404 *
c
;

405 
c
 = 
löe
; !
d⁄e
; ++c){

406 
d⁄e
 = (*
c
 == '\0');

407 if(*
c
 =',' || 
d⁄e
Ë++
cou¡
;

409  
cou¡
;

410 
	}
}

412 *
	$∑r£_fõlds
(*
löe
, 
n
)

414 *
fõld
 = 
	`ˇŒoc
(
n
, ());

415 *
c
, *
p
, *
íd
;

416 
cou¡
 = 0;

417 
d⁄e
 = 0;

418 
c
 = 
löe
, 
p
 =Üöe; !
d⁄e
; ++c){

419 
d⁄e
 = (*
c
 == '\0');

420 if(*
c
 =',' || 
d⁄e
){

421 *
c
 = '\0';

422 
fõld
[
cou¡
] = 
	`°πod
(
p
, &
íd
);

423 if(
p
 =
c
Ë
fõld
[
cou¡
] = 
	`«n
("");

424 if(
íd
 !
c
 && (íd !c-1 || *íd !'\r')Ë
fõld
[
cou¡
] = 
	`«n
("");

425 
p
 = 
c
+1;

426 ++
cou¡
;

429  
fõld
;

430 
	}
}

432 
	$sum_¨øy
(*
a
, 
n
)

434 
i
;

435 
sum
 = 0;

436 
i
 = 0; i < 
n
; ++iË
sum
 +
a
[i];

437  
sum
;

438 
	}
}

440 
	$món_¨øy
(*
a
, 
n
)

442  
	`sum_¨øy
(
a
,
n
)/n;

443 
	}
}

445 
	$món_¨øys
(**
a
, 
n
, 
ñs
, *
avg
)

447 
i
;

448 
j
;

449 
	`mem£t
(
avg
, 0, 
ñs
*());

450 
j
 = 0; j < 
n
; ++j){

451 
i
 = 0; i < 
ñs
; ++i){

452 
avg
[
i
] +
a
[
j
][i];

455 
i
 = 0; i < 
ñs
; ++i){

456 
avg
[
i
] /
n
;

458 
	}
}

460 
	$¥öt_°©i°ics
(*
a
, 
n
)

462 
m
 = 
	`món_¨øy
(
a
, 
n
);

463 
v
 = 
	`v¨ün˚_¨øy
(
a
, 
n
);

464 
	`¥ötf
("MSE: %.6f, Món: %.6f, V¨ün˚: %.6f\n", 
	`m£_¨øy
(
a
, 
n
), 
m
, 
v
);

465 
	}
}

467 
	$v¨ün˚_¨øy
(*
a
, 
n
)

469 
i
;

470 
sum
 = 0;

471 
món
 = 
	`món_¨øy
(
a
, 
n
);

472 
i
 = 0; i < 
n
; ++iË
sum
 +(
a
[i] - 
món
)*(a[i]-mean);

473 
v¨ün˚
 = 
sum
/
n
;

474  
v¨ün˚
;

475 
	}
}

477 
	$c⁄°øö_öt
(
a
, 
mö
, 
max
)

479 i‡(
a
 < 
mö
)  min;

480 i‡(
a
 > 
max
)  max;

481  
a
;

482 
	}
}

484 
	$c⁄°øö
(
mö
, 
max
, 
a
)

486 i‡(
a
 < 
mö
)  min;

487 i‡(
a
 > 
max
)  max;

488  
a
;

489 
	}
}

491 
	$di°_¨øy
(*
a
, *
b
, 
n
, 
sub
)

493 
i
;

494 
sum
 = 0;

495 
i
 = 0; i < 
n
; i +
sub
Ë
sum
 +
	`pow
(
a
[i]-
b
[i], 2);

496  
	`sqπ
(
sum
);

497 
	}
}

499 
	$m£_¨øy
(*
a
, 
n
)

501 
i
;

502 
sum
 = 0;

503 
i
 = 0; i < 
n
; ++iË
sum
 +
a
[i]*a[i];

504  
	`sqπ
(
sum
/
n
);

505 
	}
}

507 
	$n‹mÆize_¨øy
(*
a
, 
n
)

509 
i
;

510 
mu
 = 
	`món_¨øy
(
a
,
n
);

511 
sigma
 = 
	`sqπ
(
	`v¨ün˚_¨øy
(
a
,
n
));

512 
i
 = 0; i < 
n
; ++i){

513 
a
[
i
] = (a[i] - 
mu
)/
sigma
;

515 
mu
 = 
	`món_¨øy
(
a
,
n
);

516 
sigma
 = 
	`sqπ
(
	`v¨ün˚_¨øy
(
a
,
n
));

517 
	}
}

519 
	$å™¶©e_¨øy
(*
a
, 
n
, 
s
)

521 
i
;

522 
i
 = 0; i < 
n
; ++i){

523 
a
[
i
] +
s
;

525 
	}
}

527 
	$mag_¨øy
(*
a
, 
n
)

529 
i
;

530 
sum
 = 0;

531 
i
 = 0; i < 
n
; ++i){

532 
sum
 +
a
[
i
]*a[i];

534  
	`sqπ
(
sum
);

535 
	}
}

537 
	$sˇÀ_¨øy
(*
a
, 
n
, 
s
)

539 
i
;

540 
i
 = 0; i < 
n
; ++i){

541 
a
[
i
] *
s
;

543 
	}
}

545 
	$ßm∂e_¨øy
(*
a
, 
n
)

547 
sum
 = 
	`sum_¨øy
(
a
, 
n
);

548 
	`sˇÀ_¨øy
(
a
, 
n
, 1./
sum
);

549 
r
 = 
	`ønd_unif‹m
(0, 1);

550 
i
;

551 
i
 = 0; i < 
n
; ++i){

552 
r
 =Ñ - 
a
[
i
];

553 i‡(
r
 <0Ë 
i
;

555  
n
-1;

556 
	}
}

558 
	$max_ödex
(*
a
, 
n
)

560 if(
n
 <= 0)  -1;

561 
i
, 
max_i
 = 0;

562 
max
 = 
a
[0];

563 
i
 = 1; i < 
n
; ++i){

564 if(
a
[
i
] > 
max
){

565 
max
 = 
a
[
i
];

566 
max_i
 = 
i
;

569  
max_i
;

570 
	}
}

572 
	$ønd_öt
(
mö
, 
max
)

574 i‡(
max
 < 
mö
){

575 
s
 = 
mö
;

576 
mö
 = 
max
;

577 
max
 = 
s
;

579 
r
 = (
	`ønd
()%(
max
 - 
mö
 + 1)) + min;

580  
r
;

581 
	}
}

584 
	$ønd_n‹mÆ
()

586 
haveS∑ª
 = 0;

587 
ønd1
, 
ønd2
;

589 if(
haveS∑ª
)

591 
haveS∑ª
 = 0;

592  
	`sqπ
(
ønd1
Ë* 
	`sö
(
ønd2
);

595 
haveS∑ª
 = 1;

597 
ønd1
 = 
	`ønd
(Ë/ ((Ë
RAND_MAX
);

598 if(
ønd1
 < 1e-100)Ñand1 = 1e-100;

599 
ønd1
 = -2 * 
	`log
(rand1);

600 
ønd2
 = (
	`ønd
(Ë/ ((Ë
RAND_MAX
)Ë* 
TWO_PI
;

602  
	`sqπ
(
ønd1
Ë* 
	`cos
(
ønd2
);

603 
	}
}

616 
size_t
 
	$ønd_size_t
()

618  ((
size_t
)(
	`ønd
()&0xff) << 56) |

619 ((
size_t
)(
	`ønd
()&0xff) << 48) |

620 ((
size_t
)(
	`ønd
()&0xff) << 40) |

621 ((
size_t
)(
	`ønd
()&0xff) << 32) |

622 ((
size_t
)(
	`ønd
()&0xff) << 24) |

623 ((
size_t
)(
	`ønd
()&0xff) << 16) |

624 ((
size_t
)(
	`ønd
()&0xff) << 8) |

625 ((
size_t
)(
	`ønd
()&0xff) << 0);

626 
	}
}

628 
	$ønd_unif‹m
(
mö
, 
max
)

630 if(
max
 < 
mö
){

631 
sw≠
 = 
mö
;

632 
mö
 = 
max
;

633 
max
 = 
sw≠
;

635  (()
	`ønd
()/
RAND_MAX
 * (
max
 - 
mö
)) + min;

636 
	}
}

638 
	$ønd_sˇÀ
(
s
)

640 
sˇÀ
 = 
	`ønd_unif‹m
(1, 
s
);

641 if(
	`ønd
()%2Ë 
sˇÀ
;

642  1./
sˇÀ
;

643 
	}
}

645 **
	$⁄e_hŸ_ícode
(*
a
, 
n
, 
k
)

647 
i
;

648 **
t
 = 
	`ˇŒoc
(
n
, (*));

649 
i
 = 0; i < 
n
; ++i){

650 
t
[
i
] = 
	`ˇŒoc
(
k
, ());

651 
ödex
 = ()
a
[
i
];

652 
t
[
i
][
ödex
] = 1;

654  
t
;

655 
	}
}

	@src/utils.h

1 #i‚de‡
UTILS_H


2 
	#UTILS_H


	)

3 
	~<°dio.h
>

4 
	~<time.h
>

5 
	~"d¨k√t.h
"

6 
	~"li°.h
"

8 
	#TWO_PI
 6.2831853071795864769252866

	)

10 
wh©_time_is_ô_now
();

11 
shufÊe
(*
¨r
, 
size_t
 
n
, size_à
size
);

12 
s‹è_shufÊe
(*
¨r
, 
size_t
 
n
, size_à
size
, size_à
£˘i⁄s
);

13 
‰ì_±rs
(**
±rs
, 
n
);

14 
Æph™um_to_öt
(
c
);

15 
öt_to_Æph™um
(
i
);

16 
ªad_öt
(
fd
);

17 
wrôe_öt
(
fd
, 
n
);

18 
ªad_Æl
(
fd
, *
buf„r
, 
size_t
 
byãs
);

19 
wrôe_Æl
(
fd
, *
buf„r
, 
size_t
 
byãs
);

20 
ªad_Æl_Áû
(
fd
, *
buf„r
, 
size_t
 
byãs
);

21 
wrôe_Æl_Áû
(
fd
, *
buf„r
, 
size_t
 
byãs
);

22 
föd_ª∂a˚
(*
°r
, *
‹ig
, *
ªp
, *
ouçut
);

23 
mÆloc_îr‹
();

24 
fûe_îr‹
(*
s
);

25 
°rù
(*
s
);

26 
°rù_ch¨
(*
s
, 
bad
);

27 
li°
 *
•lô_°r
(*
s
, 
dñim
);

28 *
fgël
(
FILE
 *
Â
);

29 
li°
 *
∑r£_csv_löe
(*
löe
);

30 *
c›y_°rög
(*
s
);

31 
cou¡_fõlds
(*
löe
);

32 *
∑r£_fõlds
(*
löe
, 
n
);

33 
sˇÀ_¨øy
(*
a
, 
n
, 
s
);

34 
å™¶©e_¨øy
(*
a
, 
n
, 
s
);

35 
c⁄°øö
(
mö
, 
max
, 
a
);

36 
c⁄°øö_öt
(
a
, 
mö
, 
max
);

37 
ønd_unif‹m
(
mö
, 
max
);

38 
ønd_sˇÀ
(
s
);

39 
ønd_öt
(
mö
, 
max
);

40 
sum_¨øy
(*
a
, 
n
);

41 
món_¨øys
(**
a
, 
n
, 
ñs
, *
avg
);

42 
di°_¨øy
(*
a
, *
b
, 
n
, 
sub
);

43 **
⁄e_hŸ_ícode
(*
a
, 
n
, 
k
);

44 
£c
(
˛ock_t
 
˛ocks
);

45 
¥öt_°©i°ics
(*
a
, 
n
);

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
131
2333
examples/art.c
examples/captcha.c
examples/cifar.c
examples/classifier.c
examples/coco.c
examples/darknet.c
examples/detector.c
examples/dice.c
examples/go.c
examples/lsd.c
examples/nightmare.c
examples/regressor.c
examples/rnn.c
examples/rnn_vid.c
examples/segmenter.c
examples/super.c
examples/swag.c
examples/tag.c
examples/voxel.c
examples/writing.c
examples/yolo.c
include/darknet.h
src/activation_layer.c
src/activation_layer.h
src/activations.c
src/activations.h
src/avgpool_layer.c
src/avgpool_layer.h
src/batchnorm_layer.c
src/batchnorm_layer.h
src/blas.c
src/blas.h
src/box.c
src/box.h
src/classifier.h
src/col2im.c
src/col2im.h
src/compare.c
src/connected_layer.c
src/connected_layer.h
src/convolutional_layer.c
src/convolutional_layer.h
src/cost_layer.c
src/cost_layer.h
src/crnn_layer.c
src/crnn_layer.h
src/crop_layer.c
src/crop_layer.h
src/cuda.c
src/cuda.h
src/data.c
src/data.h
src/debug.h
src/deconvolutional_layer.c
src/deconvolutional_layer.h
src/demo.c
src/demo.h
src/detection_layer.c
src/detection_layer.h
src/dropout_layer.c
src/dropout_layer.h
src/gemm.c
src/gemm.h
src/gru_layer.c
src/gru_layer.h
src/im2col.c
src/im2col.h
src/image.c
src/image.h
src/layer.c
src/layer.h
src/list.c
src/list.h
src/local_layer.c
src/local_layer.h
src/lstm_layer.c
src/lstm_layer.h
src/matrix.c
src/matrix.h
src/maxpool_layer.c
src/maxpool_layer.h
src/network.c
src/network.h
src/normalization_layer.c
src/normalization_layer.h
src/option_list.c
src/option_list.h
src/parser.c
src/parser.h
src/pythonc_iface.c
src/region_layer.c
src/region_layer.h
src/reorg_layer.c
src/reorg_layer.h
src/rnn_layer.c
src/rnn_layer.h
src/route_layer.c
src/route_layer.h
src/shortcut_layer.c
src/shortcut_layer.h
src/softmax_layer.c
src/softmax_layer.h
src/stb_image.h
src/stb_image_write.h
src/tree.c
src/tree.h
src/utils.c
src/utils.h
/usr/include/assert.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/pthread.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
